
micro-ROS_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c488  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001014  0801c688  0801c688  0001d688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d69c  0801d69c  0001f3b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801d69c  0801d69c  0001e69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d6a4  0801d6a4  0001f3b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801d6a4  0801d6a4  0001e6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d6b0  0801d6b0  0001e6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003b8  20000000  0801d6b4  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012664  200003b8  0801da6c  0001f3b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20012a1c  0801da6c  0001fa1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001f3b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000299bb  00000000  00000000  0001f3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061bf  00000000  00000000  00048da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  0004ef60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001780  00000000  00000000  00050e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003102a  00000000  00000000  00052598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029997  00000000  00000000  000835c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115787  00000000  00000000  000acf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001c26e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c14  00000000  00000000  001c2758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001cb36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200003b8 	.word	0x200003b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c670 	.word	0x0801c670

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200003bc 	.word	0x200003bc
 800023c:	0801c670 	.word	0x0801c670

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006ac:	f00b fb00 	bl	800bcb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006b0:	4b5d      	ldr	r3, [pc, #372]	@ (8000828 <pvPortMallocMicroROS+0x188>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d101      	bne.n	80006bc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006b8:	f000 f990 	bl	80009dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006bc:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <pvPortMallocMicroROS+0x18c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4013      	ands	r3, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f040 8094 	bne.w	80007f2 <pvPortMallocMicroROS+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d020      	beq.n	8000712 <pvPortMallocMicroROS+0x72>
			{
				xWantedSize += xHeapStructSize;
 80006d0:	2208      	movs	r2, #8
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d017      	beq.n	8000712 <pvPortMallocMicroROS+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f023 0307 	bic.w	r3, r3, #7
 80006e8:	3308      	adds	r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d00d      	beq.n	8000712 <pvPortMallocMicroROS+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006fa:	b672      	cpsid	i
 80006fc:	f383 8811 	msr	BASEPRI, r3
 8000700:	f3bf 8f6f 	isb	sy
 8000704:	f3bf 8f4f 	dsb	sy
 8000708:	b662      	cpsie	i
 800070a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	e7fd      	b.n	800070e <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d06c      	beq.n	80007f2 <pvPortMallocMicroROS+0x152>
 8000718:	4b45      	ldr	r3, [pc, #276]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	d867      	bhi.n	80007f2 <pvPortMallocMicroROS+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000722:	4b44      	ldr	r3, [pc, #272]	@ (8000834 <pvPortMallocMicroROS+0x194>)
 8000724:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000726:	4b43      	ldr	r3, [pc, #268]	@ (8000834 <pvPortMallocMicroROS+0x194>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800072c:	e004      	b.n	8000738 <pvPortMallocMicroROS+0x98>
				{
					pxPreviousBlock = pxBlock;
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d903      	bls.n	800074a <pvPortMallocMicroROS+0xaa>
 8000742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f1      	bne.n	800072e <pvPortMallocMicroROS+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800074a:	4b37      	ldr	r3, [pc, #220]	@ (8000828 <pvPortMallocMicroROS+0x188>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000750:	429a      	cmp	r2, r3
 8000752:	d04e      	beq.n	80007f2 <pvPortMallocMicroROS+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2208      	movs	r2, #8
 800075a:	4413      	add	r3, r2
 800075c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	2308      	movs	r3, #8
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	429a      	cmp	r2, r3
 8000774:	d922      	bls.n	80007bc <pvPortMallocMicroROS+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00d      	beq.n	80007a4 <pvPortMallocMicroROS+0x104>
	__asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800078c:	b672      	cpsid	i
 800078e:	f383 8811 	msr	BASEPRI, r3
 8000792:	f3bf 8f6f 	isb	sy
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	b662      	cpsie	i
 800079c:	613b      	str	r3, [r7, #16]
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <pvPortMallocMicroROS+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007b6:	69b8      	ldr	r0, [r7, #24]
 80007b8:	f000 f972 	bl	8000aa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <pvPortMallocMicroROS+0x198>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d203      	bcs.n	80007de <pvPortMallocMicroROS+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <pvPortMallocMicroROS+0x198>)
 80007dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <pvPortMallocMicroROS+0x18c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	431a      	orrs	r2, r3
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007f2:	f00b fa6b 	bl	800bccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00d      	beq.n	800081c <pvPortMallocMicroROS+0x17c>
	__asm volatile
 8000800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000804:	b672      	cpsid	i
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	b662      	cpsie	i
 8000814:	60fb      	str	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <pvPortMallocMicroROS+0x178>
	return pvReturn;
 800081c:	69fb      	ldr	r3, [r7, #28]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20003fdc 	.word	0x20003fdc
 800082c:	20003fe8 	.word	0x20003fe8
 8000830:	20003fe0 	.word	0x20003fe0
 8000834:	20003fd4 	.word	0x20003fd4
 8000838:	20003fe4 	.word	0x20003fe4

0800083c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04e      	beq.n	80008ec <vPortFreeMicroROS+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800084e:	2308      	movs	r3, #8
 8000850:	425b      	negs	r3, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <vPortFreeMicroROS+0xb8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10d      	bne.n	8000886 <vPortFreeMicroROS+0x4a>
	__asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086e:	b672      	cpsid	i
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	b662      	cpsie	i
 800087e:	60fb      	str	r3, [r7, #12]
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	e7fd      	b.n	8000882 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00d      	beq.n	80008aa <vPortFreeMicroROS+0x6e>
	__asm volatile
 800088e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000892:	b672      	cpsid	i
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	b662      	cpsie	i
 80008a2:	60bb      	str	r3, [r7, #8]
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	e7fd      	b.n	80008a6 <vPortFreeMicroROS+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <vPortFreeMicroROS+0xb8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d019      	beq.n	80008ec <vPortFreeMicroROS+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d115      	bne.n	80008ec <vPortFreeMicroROS+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <vPortFreeMicroROS+0xb8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008d0:	f00b f9ee 	bl	800bcb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <vPortFreeMicroROS+0xbc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <vPortFreeMicroROS+0xbc>)
 80008e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f000 f8dc 	bl	8000aa0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e8:	f00b f9f0 	bl	800bccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20003fe8 	.word	0x20003fe8
 80008f8:	20003fe0 	.word	0x20003fe0

080008fc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000908:	2308      	movs	r3, #8
 800090a:	425b      	negs	r3, r3
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4413      	add	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <getBlockSize+0x38>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	43db      	mvns	r3, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	return count;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20003fe8 	.word	0x20003fe8

08000938 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000942:	f00b f9b5 	bl	800bcb0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f7ff feaa 	bl	80006a0 <pvPortMallocMicroROS>
 800094c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d017      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d014      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffce 	bl	80008fc <getBlockSize>
 8000960:	4603      	mov	r3, r0
 8000962:	2208      	movs	r2, #8
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d201      	bcs.n	8000974 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	68b8      	ldr	r0, [r7, #8]
 800097a:	f01a ffa4 	bl	801b8c6 <memcpy>

		vPortFreeMicroROS(pv);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff5c 	bl	800083c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000984:	f00b f9a2 	bl	800bccc <xTaskResumeAll>

	return newmem;
 8000988:	68bb      	ldr	r3, [r7, #8]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800099c:	f00b f988 	bl	800bcb0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff fe78 	bl	80006a0 <pvPortMallocMicroROS>
 80009b0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009b6:	e004      	b.n	80009c2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	613a      	str	r2, [r7, #16]
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f5      	bne.n	80009b8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009cc:	f00b f97e 	bl	800bccc <xTaskResumeAll>
  	return mem;
 80009d0:	68fb      	ldr	r3, [r7, #12]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80009e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <prvHeapInit+0xac>)
 80009ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00c      	beq.n	8000a10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3307      	adds	r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 0307 	bic.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a88 <prvHeapInit+0xac>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <prvHeapInit+0xb0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <prvHeapInit+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 0307 	bic.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <prvHeapInit+0xb8>)
 8000a6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <prvHeapInit+0xbc>)
 8000a72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <prvHeapInit+0xc0>)
 8000a76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	200003d4 	.word	0x200003d4
 8000a8c:	20003fd4 	.word	0x20003fd4
 8000a90:	20003fdc 	.word	0x20003fdc
 8000a94:	20003fe4 	.word	0x20003fe4
 8000a98:	20003fe0 	.word	0x20003fe0
 8000a9c:	20003fe8 	.word	0x20003fe8

08000aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <prvInsertBlockIntoFreeList+0xac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e002      	b.n	8000ab4 <prvInsertBlockIntoFreeList+0x14>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d8f7      	bhi.n	8000aae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d108      	bne.n	8000ae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	441a      	add	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	441a      	add	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d118      	bne.n	8000b28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d00d      	beq.n	8000b1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e003      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d002      	beq.n	8000b3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20003fd4 	.word	0x20003fd4
 8000b50:	20003fdc 	.word	0x20003fdc

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	200c      	movs	r0, #12
 8000b78:	f001 f926 	bl	8001dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f001 f93f 	bl	8001e00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 f91e 	bl	8001dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 f937 	bl	8001e00 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bae:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	4904      	ldr	r1, [pc, #16]	@ (8000bc8 <cubemx_transport_open+0x28>)
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f005 f910 	bl	8005ddc <HAL_UART_Receive_DMA>
    return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20003fec 	.word	0x20003fec

08000bcc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f005 f941 	bl	8005e64 <HAL_UART_DMAStop>
    return true;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c00:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000c06:	2b20      	cmp	r3, #32
 8000c08:	d11a      	bne.n	8000c40 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f005 f866 	bl	8005ce4 <HAL_UART_Transmit_DMA>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c1c:	e002      	b.n	8000c24 <cubemx_transport_write+0x38>
            osDelay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f009 ffc4 	bl	800abac <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <cubemx_transport_write+0x46>
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d1f5      	bne.n	8000c1e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c32:	7cfb      	ldrb	r3, [r7, #19]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <cubemx_transport_write+0x50>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e002      	b.n	8000c42 <cubemx_transport_write+0x56>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e000      	b.n	8000c42 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c40:	2300      	movs	r3, #0
    }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c60:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c66:	b672      	cpsid	i
}
 8000c68:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <cubemx_transport_read+0x9c>)
 8000c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c7a:	b662      	cpsie	i
}
 8000c7c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f009 ff91 	bl	800abac <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <cubemx_transport_read+0x9c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d103      	bne.n	8000c9e <cubemx_transport_read+0x52>
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe3      	blt.n	8000c66 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000ca2:	e011      	b.n	8000cc8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	440b      	add	r3, r1
 8000cae:	4910      	ldr	r1, [pc, #64]	@ (8000cf0 <cubemx_transport_read+0xa4>)
 8000cb0:	5c8a      	ldrb	r2, [r1, r2]
 8000cb2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000cc0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <cubemx_transport_read+0x9c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d003      	beq.n	8000cdc <cubemx_transport_read+0x90>
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3e3      	bcc.n	8000ca4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200047f0 	.word	0x200047f0
 8000cec:	200047ec 	.word	0x200047ec
 8000cf0:	20003fec 	.word	0x20003fec

08000cf4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <MX_FREERTOS_Init+0x18>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_FREERTOS_Init+0x1c>)
 8000cfe:	f009 feaf 	bl	800aa60 <osThreadNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a03      	ldr	r2, [pc, #12]	@ (8000d14 <MX_FREERTOS_Init+0x20>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	0801c7b8 	.word	0x0801c7b8
 8000d10:	08000d19 	.word	0x08000d19
 8000d14:	20004910 	.word	0x20004910

08000d18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b0b8      	sub	sp, #224	@ 0xe0
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d22:	f00c fc5b 	bl	800d5dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  // micro-ROSの設定。
  //　※　ここは基本いじらなくてよいはず
  rmw_uros_set_custom_transport(
 8000d26:	4b70      	ldr	r3, [pc, #448]	@ (8000ee8 <StartDefaultTask+0x1d0>)
 8000d28:	9301      	str	r3, [sp, #4]
 8000d2a:	4b70      	ldr	r3, [pc, #448]	@ (8000eec <StartDefaultTask+0x1d4>)
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	4b70      	ldr	r3, [pc, #448]	@ (8000ef0 <StartDefaultTask+0x1d8>)
 8000d30:	4a70      	ldr	r2, [pc, #448]	@ (8000ef4 <StartDefaultTask+0x1dc>)
 8000d32:	4971      	ldr	r1, [pc, #452]	@ (8000ef8 <StartDefaultTask+0x1e0>)
 8000d34:	2001      	movs	r0, #1
 8000d36:	f010 f9e9 	bl	801110c <rmw_uros_set_custom_transport>
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read
  );

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d3a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00f feb6 	bl	8010ab0 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000d44:	4b6d      	ldr	r3, [pc, #436]	@ (8000efc <StartDefaultTask+0x1e4>)
 8000d46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8000f00 <StartDefaultTask+0x1e8>)
 8000d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000d50:	4b6c      	ldr	r3, [pc, #432]	@ (8000f04 <StartDefaultTask+0x1ec>)
 8000d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000d56:	4b6c      	ldr	r3, [pc, #432]	@ (8000f08 <StartDefaultTask+0x1f0>)
 8000d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000d5c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000d60:	4618      	mov	r0, r3
 8000d62:	f00f feb3 	bl	8010acc <rcutils_set_default_allocator>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f083 0301 	eor.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <StartDefaultTask+0x62>
    printf("Error on default allocators (line %d)\n", __LINE__);
 8000d72:	21b6      	movs	r1, #182	@ 0xb6
 8000d74:	4865      	ldr	r0, [pc, #404]	@ (8000f0c <StartDefaultTask+0x1f4>)
 8000d76:	f01a fbf1 	bl	801b55c <iprintf>
  }

  // ここからmicro-ROSのセットアップ
  allocator = rcl_get_default_allocator(); // デフォルトのメモリアロケータを取得
 8000d7a:	4c65      	ldr	r4, [pc, #404]	@ (8000f10 <StartDefaultTask+0x1f8>)
 8000d7c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00f fec1 	bl	8010b08 <rcutils_get_default_allocator>
 8000d86:	4625      	mov	r5, r4
 8000d88:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	602b      	str	r3, [r5, #0]
  node = rcl_get_zero_initialized_node(); // 初期化された空のノードを取得
 8000d94:	4c5f      	ldr	r4, [pc, #380]	@ (8000f14 <StartDefaultTask+0x1fc>)
 8000d96:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00e fc90 	bl	800f6c0 <rcl_get_zero_initialized_node>
 8000da0:	4622      	mov	r2, r4
 8000da2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000da6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000daa:	e882 0003 	stmia.w	r2, {r0, r1}
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator)); //初期化設定の作成
 8000dae:	4b58      	ldr	r3, [pc, #352]	@ (8000f10 <StartDefaultTask+0x1f8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	4858      	ldr	r0, [pc, #352]	@ (8000f18 <StartDefaultTask+0x200>)
 8000db6:	f00f fd73 	bl	80108a0 <rclc_support_init>
 8000dba:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 8000dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <StartDefaultTask+0xba>
 8000dc6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000dca:	21bc      	movs	r1, #188	@ 0xbc
 8000dcc:	4853      	ldr	r0, [pc, #332]	@ (8000f1c <StartDefaultTask+0x204>)
 8000dce:	f01a fbc5 	bl	801b55c <iprintf>

  //　※　ここまで基本触らなくて良いはず

  //ノードの作成。publisherでもsubscriberでも必要
  RCCHECK(rclc_node_init_default(&node, "f7_node", "", &support));
 8000dd2:	4b51      	ldr	r3, [pc, #324]	@ (8000f18 <StartDefaultTask+0x200>)
 8000dd4:	4a52      	ldr	r2, [pc, #328]	@ (8000f20 <StartDefaultTask+0x208>)
 8000dd6:	4953      	ldr	r1, [pc, #332]	@ (8000f24 <StartDefaultTask+0x20c>)
 8000dd8:	484e      	ldr	r0, [pc, #312]	@ (8000f14 <StartDefaultTask+0x1fc>)
 8000dda:	f00f fdab 	bl	8010934 <rclc_node_init_default>
 8000dde:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
 8000de2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d005      	beq.n	8000df6 <StartDefaultTask+0xde>
 8000dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000dee:	21c1      	movs	r1, #193	@ 0xc1
 8000df0:	484a      	ldr	r0, [pc, #296]	@ (8000f1c <StartDefaultTask+0x204>)
 8000df2:	f01a fbb3 	bl	801b55c <iprintf>

  //publisherの作成
  RCCHECK(rclc_publisher_init_default(
 8000df6:	f011 f9bb 	bl	8012170 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8000f28 <StartDefaultTask+0x210>)
 8000dfe:	4945      	ldr	r1, [pc, #276]	@ (8000f14 <StartDefaultTask+0x1fc>)
 8000e00:	484a      	ldr	r0, [pc, #296]	@ (8000f2c <StartDefaultTask+0x214>)
 8000e02:	f00f fdd9 	bl	80109b8 <rclc_publisher_init_default>
 8000e06:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 8000e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d005      	beq.n	8000e1e <StartDefaultTask+0x106>
 8000e12:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e16:	21c4      	movs	r1, #196	@ 0xc4
 8000e18:	4840      	ldr	r0, [pc, #256]	@ (8000f1c <StartDefaultTask+0x204>)
 8000e1a:	f01a fb9f 	bl	801b55c <iprintf>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "/f767zi_encoder"));


  //subscriverの作成
  RCCHECK(rclc_subscription_init_default(
 8000e1e:	f00d f92d 	bl	800e07c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8000e22:	4602      	mov	r2, r0
 8000e24:	4b42      	ldr	r3, [pc, #264]	@ (8000f30 <StartDefaultTask+0x218>)
 8000e26:	493b      	ldr	r1, [pc, #236]	@ (8000f14 <StartDefaultTask+0x1fc>)
 8000e28:	4842      	ldr	r0, [pc, #264]	@ (8000f34 <StartDefaultTask+0x21c>)
 8000e2a:	f00f fdff 	bl	8010a2c <rclc_subscription_init_default>
 8000e2e:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 8000e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d005      	beq.n	8000e46 <StartDefaultTask+0x12e>
 8000e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8000e3e:	21cc      	movs	r1, #204	@ 0xcc
 8000e40:	4836      	ldr	r0, [pc, #216]	@ (8000f1c <StartDefaultTask+0x204>)
 8000e42:	f01a fb8b 	bl	801b55c <iprintf>
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  "cmd_vel"));

  //エンコーダのカウントを0で初期化しておく
  encoder_msg.data = 0;
 8000e46:	4b3c      	ldr	r3, [pc, #240]	@ (8000f38 <StartDefaultTask+0x220>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

  // コールバックを管理ためのexecutor
  // Subscriber、Timer、Serviceなどもコールバック関数を設定する
  // Publisherだけなら、以降の処理は必要ない
  int callback_size = 1;	// コールバックを行う数
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  executor = rclc_executor_get_zero_initialized_executor();
 8000e52:	4c3a      	ldr	r4, [pc, #232]	@ (8000f3c <StartDefaultTask+0x224>)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4618      	mov	r0, r3
 8000e58:	f00f fa38 	bl	80102cc <rclc_executor_get_zero_initialized_executor>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2288      	movs	r2, #136	@ 0x88
 8000e62:	4619      	mov	r1, r3
 8000e64:	f01a fd2f 	bl	801b8c6 <memcpy>
  rclc_executor_init(&executor, &support.context, callback_size, &allocator);
 8000e68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000e6c:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <StartDefaultTask+0x1f8>)
 8000e6e:	492a      	ldr	r1, [pc, #168]	@ (8000f18 <StartDefaultTask+0x200>)
 8000e70:	4832      	ldr	r0, [pc, #200]	@ (8000f3c <StartDefaultTask+0x224>)
 8000e72:	f00f fa35 	bl	80102e0 <rclc_executor_init>
  rclc_executor_add_subscription(&executor, &subscriber, &cmd_vel_msg, //第３引数のcmd_vel_msgは受信したデータを格納する変数。とりあえず設定しといたらいい。
 8000e76:	2300      	movs	r3, #0
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <StartDefaultTask+0x228>)
 8000e7c:	4a31      	ldr	r2, [pc, #196]	@ (8000f44 <StartDefaultTask+0x22c>)
 8000e7e:	492d      	ldr	r1, [pc, #180]	@ (8000f34 <StartDefaultTask+0x21c>)
 8000e80:	482e      	ldr	r0, [pc, #184]	@ (8000f3c <StartDefaultTask+0x224>)
 8000e82:	f00f faa9 	bl	80103d8 <rclc_executor_add_subscription>

  /* Infinite loop */
  for(;;)
  {
	//pulishするデータ(encoder_msg.data)にエンコーダの計測値を格納する。
	encoder_msg.data = TIM2->CNT;
 8000e86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <StartDefaultTask+0x220>)
 8000e90:	601a      	str	r2, [r3, #0]
	//publisherがencoder_msgをpublishする
	RCSOFTCHECK(rcl_publish(&publisher, &encoder_msg, NULL));
 8000e92:	2200      	movs	r2, #0
 8000e94:	4928      	ldr	r1, [pc, #160]	@ (8000f38 <StartDefaultTask+0x220>)
 8000e96:	4825      	ldr	r0, [pc, #148]	@ (8000f2c <StartDefaultTask+0x214>)
 8000e98:	f00e fe8a 	bl	800fbb0 <rcl_publish>
 8000e9c:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8000ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d005      	beq.n	8000eb4 <StartDefaultTask+0x19c>
 8000ea8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8000eac:	21e4      	movs	r1, #228	@ 0xe4
 8000eae:	4826      	ldr	r0, [pc, #152]	@ (8000f48 <StartDefaultTask+0x230>)
 8000eb0:	f01a fb54 	bl	801b55c <iprintf>

	//subscriptionを実行する
	RCSOFTCHECK(rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100)););
 8000eb4:	a30a      	add	r3, pc, #40	@ (adr r3, 8000ee0 <StartDefaultTask+0x1c8>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	4820      	ldr	r0, [pc, #128]	@ (8000f3c <StartDefaultTask+0x224>)
 8000ebc:	f00f fcb6 	bl	801082c <rclc_executor_spin_some>
 8000ec0:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
 8000ec4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <StartDefaultTask+0x1c0>
 8000ecc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8000ed0:	21e7      	movs	r1, #231	@ 0xe7
 8000ed2:	481d      	ldr	r0, [pc, #116]	@ (8000f48 <StartDefaultTask+0x230>)
 8000ed4:	f01a fb42 	bl	801b55c <iprintf>

	//100msのDelayを入れる
    osDelay(100);
 8000ed8:	2064      	movs	r0, #100	@ 0x64
 8000eda:	f009 fe67 	bl	800abac <osDelay>
	encoder_msg.data = TIM2->CNT;
 8000ede:	e7d2      	b.n	8000e86 <StartDefaultTask+0x16e>
 8000ee0:	05f5e100 	.word	0x05f5e100
 8000ee4:	00000000 	.word	0x00000000
 8000ee8:	08000c4d 	.word	0x08000c4d
 8000eec:	08000bed 	.word	0x08000bed
 8000ef0:	08000bcd 	.word	0x08000bcd
 8000ef4:	08000ba1 	.word	0x08000ba1
 8000ef8:	200078f8 	.word	0x200078f8
 8000efc:	080011dd 	.word	0x080011dd
 8000f00:	08001221 	.word	0x08001221
 8000f04:	08001259 	.word	0x08001259
 8000f08:	080012c5 	.word	0x080012c5
 8000f0c:	0801c694 	.word	0x0801c694
 8000f10:	20004888 	.word	0x20004888
 8000f14:	200048d0 	.word	0x200048d0
 8000f18:	2000489c 	.word	0x2000489c
 8000f1c:	0801c6bc 	.word	0x0801c6bc
 8000f20:	0801c6e8 	.word	0x0801c6e8
 8000f24:	0801c6ec 	.word	0x0801c6ec
 8000f28:	0801c6f4 	.word	0x0801c6f4
 8000f2c:	200047f4 	.word	0x200047f4
 8000f30:	0801c704 	.word	0x0801c704
 8000f34:	200047f8 	.word	0x200047f8
 8000f38:	200048d8 	.word	0x200048d8
 8000f3c:	20004800 	.word	0x20004800
 8000f40:	08000f4d 	.word	0x08000f4d
 8000f44:	200048e0 	.word	0x200048e0
 8000f48:	0801c70c 	.word	0x0801c70c

08000f4c <LED_blink>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* subscriberのコールバック関数を宣言。　引数はsubscribeしたメッセージを表すが、
   その型はconst void*型にしておく。ただし、関数内で適切な型にキャストする必要がある*/
void LED_blink(const void *subscribed_msg){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  //subscribed_msgは、subscriberが受け取ったメッセージのポインタ。geometry_msgs__msg__Twistにキャストしてcmd_vel_msgに格納。
  //cmd_vel_msgについて、rclc_executor_add_subscription()の第３引数と同じであるが、その必要は特にない
  const geometry_msgs__msg__Twist *cmd_vel_msg = (const geometry_msgs__msg__Twist *)subscribed_msg;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	60fb      	str	r3, [r7, #12]

  //受け取ったcmd_velに対してlinear.x(並進x方向の速度)が0以上であれば
  if(cmd_vel_msg->linear.x > 0){
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	ed93 7b00 	vldr	d7, [r3]
 8000f5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	dd05      	ble.n	8000f74 <LED_blink+0x28>
    //LD1点灯
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <LED_blink+0x3c>)
 8000f6e:	f001 fd8f 	bl	8002a90 <HAL_GPIO_WritePin>
  }else{
    //LD1消灯
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
  }
}
 8000f72:	e004      	b.n	8000f7e <LED_blink+0x32>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2101      	movs	r1, #1
 8000f78:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <LED_blink+0x3c>)
 8000f7a:	f001 fd89 	bl	8002a90 <HAL_GPIO_WritePin>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020400 	.word	0x40020400

08000f8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a16      	ldr	r2, [pc, #88]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_GPIO_Init+0xa4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2101      	movs	r1, #1
 8001006:	480b      	ldr	r0, [pc, #44]	@ (8001034 <MX_GPIO_Init+0xa8>)
 8001008:	f001 fd42 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100c:	2301      	movs	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_GPIO_Init+0xa8>)
 8001024:	f001 fb88 	bl	8002738 <HAL_GPIO_Init>

}
 8001028:	bf00      	nop
 800102a:	3728      	adds	r7, #40	@ 0x28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40020400 	.word	0x40020400

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800103c:	f000 f88a 	bl	8001154 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f000 fdb9 	bl	8001bb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f816 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001048:	f7ff ffa0 	bl	8000f8c <MX_GPIO_Init>
  MX_DMA_Init();
 800104c:	f7ff fd82 	bl	8000b54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001050:	f000 fc88 	bl	8001964 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001054:	f000 fbf0 	bl	8001838 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //エンコーダ用にTIM2を有効化している。TIMについて、freertos.cでは有効化せず、main.cで有効化する
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001058:	213c      	movs	r1, #60	@ 0x3c
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <main+0x38>)
 800105c:	f004 fab8 	bl	80055d0 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001060:	f009 fc94 	bl	800a98c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001064:	f7ff fe46 	bl	8000cf4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001068:	f009 fcc4 	bl	800a9f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <main+0x34>
 8001070:	200078ac 	.word	0x200078ac

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	@ 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2234      	movs	r2, #52	@ 0x34
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f01a fb56 	bl	801b734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <SystemClock_Config+0xd8>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	4a2b      	ldr	r2, [pc, #172]	@ (800114c <SystemClock_Config+0xd8>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a4:	4b29      	ldr	r3, [pc, #164]	@ (800114c <SystemClock_Config+0xd8>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b0:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <SystemClock_Config+0xdc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010b8:	4a25      	ldr	r2, [pc, #148]	@ (8001150 <SystemClock_Config+0xdc>)
 80010ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <SystemClock_Config+0xdc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010e4:	2360      	movs	r3, #96	@ 0x60
 80010e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ec:	2304      	movs	r3, #4
 80010ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 ffbb 	bl	8004074 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001104:	f000 f864 	bl	80011d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001108:	f002 ff64 	bl	8003fd4 <HAL_PWREx_EnableOverDrive>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001112:	f000 f85d 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2103      	movs	r1, #3
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fa4c 	bl	80045d0 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800113e:	f000 f847 	bl	80011d0 <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	@ 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001166:	f000 fe59 	bl	8001e1c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800116a:	2301      	movs	r3, #1
 800116c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800116e:	2300      	movs	r3, #0
 8001170:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001176:	231f      	movs	r3, #31
 8001178:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800117a:	2387      	movs	r3, #135	@ 0x87
 800117c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800117e:	2300      	movs	r3, #0
 8001180:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001182:	2300      	movs	r3, #0
 8001184:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001186:	2301      	movs	r3, #1
 8001188:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800118a:	2301      	movs	r3, #1
 800118c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001196:	463b      	mov	r3, r7
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fe77 	bl	8001e8c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800119e:	2004      	movs	r0, #4
 80011a0:	f000 fe54 	bl	8001e4c <HAL_MPU_Enable>

}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011be:	f000 fd07 	bl	8001bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40002000 	.word	0x40002000

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <Error_Handler+0x8>

080011dc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <microros_allocate+0x3c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <microros_allocate+0x3c>)
 80011f4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <microros_allocate+0x40>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <microros_allocate+0x40>)
 8001204:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fa4a 	bl	80006a0 <pvPortMallocMicroROS>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20007850 	.word	0x20007850
 800121c:	20007854 	.word	0x20007854

08001220 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00c      	beq.n	800124a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fb63 	bl	80008fc <getBlockSize>
 8001236:	4603      	mov	r3, r0
 8001238:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <microros_deallocate+0x34>)
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	461a      	mov	r2, r3
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <microros_deallocate+0x34>)
 8001242:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff faf9 	bl	800083c <vPortFreeMicroROS>
  }
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20007854 	.word	0x20007854

08001258 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <microros_reallocate+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	4413      	add	r3, r2
 800126e:	461a      	mov	r2, r3
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <microros_reallocate+0x64>)
 8001272:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <microros_reallocate+0x68>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4413      	add	r3, r2
 800127e:	461a      	mov	r2, r3
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <microros_reallocate+0x68>)
 8001282:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d104      	bne.n	8001294 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800128a:	68b8      	ldr	r0, [r7, #8]
 800128c:	f7ff fa08 	bl	80006a0 <pvPortMallocMicroROS>
 8001290:	4603      	mov	r3, r0
 8001292:	e00e      	b.n	80012b2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f7ff fb31 	bl	80008fc <getBlockSize>
 800129a:	4603      	mov	r3, r0
 800129c:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <microros_reallocate+0x68>)
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <microros_reallocate+0x68>)
 80012a6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fb44 	bl	8000938 <pvPortReallocMicroROS>
 80012b0:	4603      	mov	r3, r0
  }
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20007850 	.word	0x20007850
 80012c0:	20007854 	.word	0x20007854

080012c4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <microros_zero_allocate+0x48>)
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	461a      	mov	r2, r3
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <microros_zero_allocate+0x48>)
 80012e2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <microros_zero_allocate+0x4c>)
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <microros_zero_allocate+0x4c>)
 80012f6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff fb49 	bl	8000992 <pvPortCallocMicroROS>
 8001300:	4603      	mov	r3, r0
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20007850 	.word	0x20007850
 8001310:	20007854 	.word	0x20007854
 8001314:	00000000 	.word	0x00000000

08001318 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001318:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800132a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800132e:	a320      	add	r3, pc, #128	@ (adr r3, 80013b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7fe ffec 	bl	8000310 <__aeabi_ldivmod>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001346:	a31a      	add	r3, pc, #104	@ (adr r3, 80013b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7fe ffe0 	bl	8000310 <__aeabi_ldivmod>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	da20      	bge.n	800139e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4a11      	ldr	r2, [pc, #68]	@ (80013a8 <UTILS_NanosecondsToTimespec+0x90>)
 8001362:	fb82 1203 	smull	r1, r2, r2, r3
 8001366:	1712      	asrs	r2, r2, #28
 8001368:	17db      	asrs	r3, r3, #31
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	17c8      	asrs	r0, r1, #31
 800137a:	460c      	mov	r4, r1
 800137c:	4605      	mov	r5, r0
 800137e:	ebb2 0804 	subs.w	r8, r2, r4
 8001382:	eb63 0905 	sbc.w	r9, r3, r5
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	4906      	ldr	r1, [pc, #24]	@ (80013ac <UTILS_NanosecondsToTimespec+0x94>)
 8001394:	fb01 f303 	mul.w	r3, r1, r3
 8001398:	441a      	add	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	609a      	str	r2, [r3, #8]
    }
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013a8:	44b82fa1 	.word	0x44b82fa1
 80013ac:	3b9aca00 	.word	0x3b9aca00
 80013b0:	3b9aca00 	.word	0x3b9aca00
 80013b4:	00000000 	.word	0x00000000

080013b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80013b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013bc:	b08e      	sub	sp, #56	@ 0x38
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80013c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80013c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80013c8:	2300      	movs	r3, #0
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80013da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013de:	4618      	mov	r0, r3
 80013e0:	f00a fefc 	bl	800c1dc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80013e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e6:	17da      	asrs	r2, r3, #31
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	61fa      	str	r2, [r7, #28]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	69b9      	ldr	r1, [r7, #24]
 80013f6:	000b      	movs	r3, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80013fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001400:	2200      	movs	r2, #0
 8001402:	461c      	mov	r4, r3
 8001404:	4615      	mov	r5, r2
 8001406:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800140a:	1911      	adds	r1, r2, r4
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	416b      	adcs	r3, r5
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001416:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800141a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	f04f 0400 	mov.w	r4, #0
 8001426:	f04f 0500 	mov.w	r5, #0
 800142a:	015d      	lsls	r5, r3, #5
 800142c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001430:	0154      	lsls	r4, r2, #5
 8001432:	4622      	mov	r2, r4
 8001434:	462b      	mov	r3, r5
 8001436:	ebb2 0800 	subs.w	r8, r2, r0
 800143a:	eb63 0901 	sbc.w	r9, r3, r1
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800144a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800144e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001452:	4690      	mov	r8, r2
 8001454:	4699      	mov	r9, r3
 8001456:	eb18 0a00 	adds.w	sl, r8, r0
 800145a:	eb49 0b01 	adc.w	fp, r9, r1
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800146a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800146e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001472:	ebb2 040a 	subs.w	r4, r2, sl
 8001476:	603c      	str	r4, [r7, #0]
 8001478:	eb63 030b 	sbc.w	r3, r3, fp
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001482:	4623      	mov	r3, r4
 8001484:	181b      	adds	r3, r3, r0
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	462b      	mov	r3, r5
 800148a:	eb41 0303 	adc.w	r3, r1, r3
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	6a3a      	ldr	r2, [r7, #32]
 8001492:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001496:	f7ff ff3f 	bl	8001318 <UTILS_NanosecondsToTimespec>

    return 0;
 800149a:	2300      	movs	r3, #0
 800149c:	4618      	mov	r0, r3
 800149e:	3738      	adds	r7, #56	@ 0x38
 80014a0:	46bd      	mov	sp, r7
 80014a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	210f      	movs	r1, #15
 80014e2:	f06f 0001 	mvn.w	r0, #1
 80014e6:	f000 fc6f 	bl	8001dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	@ 0x38
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001508:	4b33      	ldr	r3, [pc, #204]	@ (80015d8 <HAL_InitTick+0xe0>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	4a32      	ldr	r2, [pc, #200]	@ (80015d8 <HAL_InitTick+0xe0>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001512:	6413      	str	r3, [r2, #64]	@ 0x40
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <HAL_InitTick+0xe0>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001520:	f107 0210 	add.w	r2, r7, #16
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fa76 	bl	8004a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800153a:	f003 fa47 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 800153e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001540:	e004      	b.n	800154c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001542:	f003 fa43 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8001546:	4603      	mov	r3, r0
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800154c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800154e:	4a23      	ldr	r2, [pc, #140]	@ (80015dc <HAL_InitTick+0xe4>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	0c9b      	lsrs	r3, r3, #18
 8001556:	3b01      	subs	r3, #1
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <HAL_InitTick+0xe8>)
 800155c:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <HAL_InitTick+0xec>)
 800155e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <HAL_InitTick+0xe8>)
 8001562:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001566:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001568:	4a1d      	ldr	r2, [pc, #116]	@ (80015e0 <HAL_InitTick+0xe8>)
 800156a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <HAL_InitTick+0xe8>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <HAL_InitTick+0xe8>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_InitTick+0xe8>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001580:	4817      	ldr	r0, [pc, #92]	@ (80015e0 <HAL_InitTick+0xe8>)
 8001582:	f003 fea5 	bl	80052d0 <HAL_TIM_Base_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800158c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11b      	bne.n	80015cc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001594:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <HAL_InitTick+0xe8>)
 8001596:	f003 fefd 	bl	8005394 <HAL_TIM_Base_Start_IT>
 800159a:	4603      	mov	r3, r0
 800159c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d111      	bne.n	80015cc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80015a8:	202d      	movs	r0, #45	@ 0x2d
 80015aa:	f000 fc29 	bl	8001e00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d808      	bhi.n	80015c6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	202d      	movs	r0, #45	@ 0x2d
 80015ba:	f000 fc05 	bl	8001dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_InitTick+0xf0>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e002      	b.n	80015cc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3738      	adds	r7, #56	@ 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	20007858 	.word	0x20007858
 80015e4:	40002000 	.word	0x40002000
 80015e8:	20000008 	.word	0x20000008

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <NMI_Handler+0x4>

080015f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <MemManage_Handler+0x4>

08001604 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <UsageFault_Handler+0x4>

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <DMA1_Stream1_IRQHandler+0x10>)
 800162a:	f000 fe0f 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20007980 	.word	0x20007980

08001638 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <DMA1_Stream3_IRQHandler+0x10>)
 800163e:	f000 fe05 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200079e0 	.word	0x200079e0

0800164c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <USART3_IRQHandler+0x10>)
 8001652:	f004 fc99 	bl	8005f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200078f8 	.word	0x200078f8

08001660 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001666:	f004 f841 	bl	80056ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20007858 	.word	0x20007858

08001674 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <OTG_FS_IRQHandler+0x10>)
 800167a:	f001 fb5a 	bl	8002d32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000d86c 	.word	0x2000d86c

08001688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_kill>:

int _kill(int pid, int sig)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a2:	f01a f8db 	bl	801b85c <__errno>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2216      	movs	r2, #22
 80016aa:	601a      	str	r2, [r3, #0]
  return -1;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_exit>:

void _exit (int status)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ffe7 	bl	8001698 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ca:	bf00      	nop
 80016cc:	e7fd      	b.n	80016ca <_exit+0x12>

080016ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e00a      	b.n	80016f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e0:	f3af 8000 	nop.w
 80016e4:	4601      	mov	r1, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	60ba      	str	r2, [r7, #8]
 80016ec:	b2ca      	uxtb	r2, r1
 80016ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbf0      	blt.n	80016e0 <_read+0x12>
  }

  return len;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e009      	b.n	800172e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	60ba      	str	r2, [r7, #8]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf1      	blt.n	800171a <_write+0x12>
  }
  return len;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_close>:

int _close(int file)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001768:	605a      	str	r2, [r3, #4]
  return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_isatty>:

int _isatty(int file)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f01a f840 	bl	801b85c <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20080000 	.word	0x20080000
 8001808:	00000400 	.word	0x00000400
 800180c:	200078a8 	.word	0x200078a8
 8001810:	20012a20 	.word	0x20012a20

08001814 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <SystemInit+0x20>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <SystemInit+0x20>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08c      	sub	sp, #48	@ 0x30
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	2224      	movs	r2, #36	@ 0x24
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f019 ff74 	bl	801b734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001856:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <MX_TIM2_Init+0xa4>)
 8001858:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800185c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800185e:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <MX_TIM2_Init+0xa4>)
 8001860:	221f      	movs	r2, #31
 8001862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <MX_TIM2_Init+0xa4>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096-1;
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <MX_TIM2_Init+0xa4>)
 800186c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001870:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_TIM2_Init+0xa4>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <MX_TIM2_Init+0xa4>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800187e:	2301      	movs	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001886:	2301      	movs	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001896:	2301      	movs	r3, #1
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <MX_TIM2_Init+0xa4>)
 80018aa:	f003 fdeb 	bl	8005484 <HAL_TIM_Encoder_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80018b4:	f7ff fc8c 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <MX_TIM2_Init+0xa4>)
 80018c6:	f004 f913 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80018d0:	f7ff fc7e 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3730      	adds	r7, #48	@ 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200078ac 	.word	0x200078ac

080018e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001900:	d127      	bne.n	8001952 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	4a15      	ldr	r2, [pc, #84]	@ (800195c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6413      	str	r3, [r2, #64]	@ 0x40
 800190e:	4b13      	ldr	r3, [pc, #76]	@ (800195c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <HAL_TIM_Encoder_MspInit+0x7c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a0f      	ldr	r2, [pc, #60]	@ (800195c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001932:	2303      	movs	r3, #3
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001942:	2301      	movs	r3, #1
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4804      	ldr	r0, [pc, #16]	@ (8001960 <HAL_TIM_Encoder_MspInit+0x80>)
 800194e:	f000 fef3 	bl	8002738 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	@ 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000

08001964 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 800196a:	4a15      	ldr	r2, [pc, #84]	@ (80019c0 <MX_USART3_UART_Init+0x5c>)
 800196c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019a6:	4805      	ldr	r0, [pc, #20]	@ (80019bc <MX_USART3_UART_Init+0x58>)
 80019a8:	f004 f94e 	bl	8005c48 <HAL_UART_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019b2:	f7ff fc0d 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200078f8 	.word	0x200078f8
 80019c0:	40004800 	.word	0x40004800

080019c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0ae      	sub	sp, #184	@ 0xb8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2290      	movs	r2, #144	@ 0x90
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f019 fea5 	bl	801b734 <memset>
  if(uartHandle->Instance==USART3)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a56      	ldr	r2, [pc, #344]	@ (8001b48 <HAL_UART_MspInit+0x184>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	f040 80a4 	bne.w	8001b3e <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 f83b 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001a10:	f7ff fbde 	bl	80011d0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	@ (8001b4c <HAL_UART_MspInit+0x188>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	4a4c      	ldr	r2, [pc, #304]	@ (8001b4c <HAL_UART_MspInit+0x188>)
 8001a1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a20:	4b4a      	ldr	r3, [pc, #296]	@ (8001b4c <HAL_UART_MspInit+0x188>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2c:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_UART_MspInit+0x188>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	4a46      	ldr	r2, [pc, #280]	@ (8001b4c <HAL_UART_MspInit+0x188>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a38:	4b44      	ldr	r3, [pc, #272]	@ (8001b4c <HAL_UART_MspInit+0x188>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a5e:	2307      	movs	r3, #7
 8001a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4839      	ldr	r0, [pc, #228]	@ (8001b50 <HAL_UART_MspInit+0x18c>)
 8001a6c:	f000 fe64 	bl	8002738 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001a70:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001a72:	4a39      	ldr	r2, [pc, #228]	@ (8001b58 <HAL_UART_MspInit+0x194>)
 8001a74:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001a76:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001a78:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7e:	4b35      	ldr	r3, [pc, #212]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a84:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a8a:	4b32      	ldr	r3, [pc, #200]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a90:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a92:	4b30      	ldr	r3, [pc, #192]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a98:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001aa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aa4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001aa8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001aac:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aae:	4b29      	ldr	r3, [pc, #164]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ab4:	4827      	ldr	r0, [pc, #156]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001ab6:	f000 fa29 	bl	8001f0c <HAL_DMA_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001ac0:	f7ff fb86 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a23      	ldr	r2, [pc, #140]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001ac8:	675a      	str	r2, [r3, #116]	@ 0x74
 8001aca:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <HAL_UART_MspInit+0x190>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001ad2:	4a23      	ldr	r2, [pc, #140]	@ (8001b60 <HAL_UART_MspInit+0x19c>)
 8001ad4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001ad8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001adc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ade:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001ae0:	2240      	movs	r2, #64	@ 0x40
 8001ae2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001aec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af8:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001afe:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b04:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001b06:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b0a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001b12:	4812      	ldr	r0, [pc, #72]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001b14:	f000 f9fa 	bl	8001f0c <HAL_DMA_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001b1e:	f7ff fb57 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001b26:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b28:	4a0c      	ldr	r2, [pc, #48]	@ (8001b5c <HAL_UART_MspInit+0x198>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2105      	movs	r1, #5
 8001b32:	2027      	movs	r0, #39	@ 0x27
 8001b34:	f000 f948 	bl	8001dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b38:	2027      	movs	r0, #39	@ 0x27
 8001b3a:	f000 f961 	bl	8001e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b3e:	bf00      	nop
 8001b40:	37b8      	adds	r7, #184	@ 0xb8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40004800 	.word	0x40004800
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	20007980 	.word	0x20007980
 8001b58:	40026028 	.word	0x40026028
 8001b5c:	200079e0 	.word	0x200079e0
 8001b60:	40026058 	.word	0x40026058

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b68:	f7ff fe54 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	@ (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f019 fe69 	bl	801b868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7ff fa4f 	bl	8001038 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 8001ba8:	0801d6b4 	.word	0x0801d6b4
  ldr r2, =_sbss
 8001bac:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 8001bb0:	20012a1c 	.word	0x20012a1c

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>

08001bb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bba:	2003      	movs	r0, #3
 8001bbc:	f000 f8f9 	bl	8001db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc0:	200f      	movs	r0, #15
 8001bc2:	f7ff fc99 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc6:	f7ff fc6f 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000000c 	.word	0x2000000c
 8001bf4:	20007a40 	.word	0x20007a40

08001bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	@ (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20007a40 	.word	0x20007a40

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff ffee 	bl	8001bf8 <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <HAL_Delay+0x44>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000000c 	.word	0x2000000c

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <__NVIC_SetPriorityGrouping+0x40>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <__NVIC_SetPriorityGrouping+0x40>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00
 8001c9c:	05fa0000 	.word	0x05fa0000

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	@ (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	@ (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	@ (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	@ 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	@ 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff4c 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dda:	f7ff ff61 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f7ff ffb1 	bl	8001d4c <NVIC_EncodePriority>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff80 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff54 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e20:	f3bf 8f5f 	dmb	sy
}
 8001e24:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <HAL_MPU_Disable+0x28>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	4a06      	ldr	r2, [pc, #24]	@ (8001e44 <HAL_MPU_Disable+0x28>)
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e30:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e32:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_MPU_Disable+0x2c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00
 8001e48:	e000ed90 	.word	0xe000ed90

08001e4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e54:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <HAL_MPU_Enable+0x38>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_MPU_Enable+0x3c>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	4a09      	ldr	r2, [pc, #36]	@ (8001e88 <HAL_MPU_Enable+0x3c>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e68:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e6a:	f3bf 8f4f 	dsb	sy
}
 8001e6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e70:	f3bf 8f6f 	isb	sy
}
 8001e74:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed90 	.word	0xe000ed90
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	785a      	ldrb	r2, [r3, #1]
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_MPU_ConfigRegion+0x7c>)
 8001e9a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <HAL_MPU_ConfigRegion+0x7c>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	@ (8001f08 <HAL_MPU_ConfigRegion+0x7c>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ea8:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <HAL_MPU_ConfigRegion+0x7c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7b1b      	ldrb	r3, [r3, #12]
 8001eb4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7adb      	ldrb	r3, [r3, #11]
 8001eba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ebc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7a9b      	ldrb	r3, [r3, #10]
 8001ec2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ec4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7b5b      	ldrb	r3, [r3, #13]
 8001eca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ecc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7b9b      	ldrb	r3, [r3, #14]
 8001ed2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ed4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7bdb      	ldrb	r3, [r3, #15]
 8001eda:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001edc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7a5b      	ldrb	r3, [r3, #9]
 8001ee2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ee4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7a1b      	ldrb	r3, [r3, #8]
 8001eea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001eec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ef4:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ef6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ef8:	6113      	str	r3, [r2, #16]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed90 	.word	0xe000ed90

08001f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fe6e 	bl	8001bf8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e099      	b.n	800205c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f48:	e00f      	b.n	8001f6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4a:	f7ff fe55 	bl	8001bf8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d908      	bls.n	8001f6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e078      	b.n	800205c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e8      	bne.n	8001f4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4b38      	ldr	r3, [pc, #224]	@ (8002064 <HAL_DMA_Init+0x158>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d107      	bne.n	8001fd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d117      	bne.n	800202e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00e      	beq.n	800202e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fb15 	bl	8002640 <DMA_CheckFifoParam>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2240      	movs	r2, #64	@ 0x40
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800202a:	2301      	movs	r3, #1
 800202c:	e016      	b.n	800205c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 facc 	bl	80025d4 <DMA_CalcBaseAndBitshift>
 800203c:	4603      	mov	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002044:	223f      	movs	r2, #63	@ 0x3f
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	e010803f 	.word	0xe010803f

08002068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_DMA_Start_IT+0x26>
 800208a:	2302      	movs	r3, #2
 800208c:	e048      	b.n	8002120 <HAL_DMA_Start_IT+0xb8>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d137      	bne.n	8002112 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2202      	movs	r2, #2
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fa5e 	bl	8002578 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c0:	223f      	movs	r2, #63	@ 0x3f
 80020c2:	409a      	lsls	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0216 	orr.w	r2, r2, #22
 80020d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0208 	orr.w	r2, r2, #8
 80020fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e005      	b.n	800211e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800211a:	2302      	movs	r3, #2
 800211c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800211e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002136:	f7ff fd5f 	bl	8001bf8 <HAL_GetTick>
 800213a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d008      	beq.n	800215a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2280      	movs	r2, #128	@ 0x80
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e052      	b.n	8002200 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0216 	bic.w	r2, r2, #22
 8002168:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002178:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_DMA_Abort+0x62>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021aa:	e013      	b.n	80021d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ac:	f7ff fd24 	bl	8001bf8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d90c      	bls.n	80021d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2203      	movs	r2, #3
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e015      	b.n	8002200 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e4      	bne.n	80021ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e6:	223f      	movs	r2, #63	@ 0x3f
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d004      	beq.n	8002226 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2280      	movs	r2, #128	@ 0x80
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e00c      	b.n	8002240 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2205      	movs	r2, #5
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002258:	4b8e      	ldr	r3, [pc, #568]	@ (8002494 <HAL_DMA_IRQHandler+0x248>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a8e      	ldr	r2, [pc, #568]	@ (8002498 <HAL_DMA_IRQHandler+0x24c>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0a9b      	lsrs	r3, r3, #10
 8002264:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2208      	movs	r2, #8
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01a      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a4:	2208      	movs	r2, #8
 80022a6:	409a      	lsls	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	2201      	movs	r2, #1
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022da:	2201      	movs	r2, #1
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	f043 0202 	orr.w	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	2204      	movs	r2, #4
 80022f4:	409a      	lsls	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d012      	beq.n	8002324 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00b      	beq.n	8002324 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002310:	2204      	movs	r2, #4
 8002312:	409a      	lsls	r2, r3
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002328:	2210      	movs	r2, #16
 800232a:	409a      	lsls	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d043      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03c      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	2210      	movs	r2, #16
 8002348:	409a      	lsls	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d018      	beq.n	800238e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d108      	bne.n	800237c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d024      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
 800237a:	e01f      	b.n	80023bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01b      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
 800238c:	e016      	b.n	80023bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0208 	bic.w	r2, r2, #8
 80023aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	2220      	movs	r2, #32
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 808f 	beq.w	80024ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8087 	beq.w	80024ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	2220      	movs	r2, #32
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d136      	bne.n	8002464 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0216 	bic.w	r2, r2, #22
 8002404:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002414:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <HAL_DMA_IRQHandler+0x1da>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0208 	bic.w	r2, r2, #8
 8002434:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243a:	223f      	movs	r2, #63	@ 0x3f
 800243c:	409a      	lsls	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002456:	2b00      	cmp	r3, #0
 8002458:	d07e      	beq.n	8002558 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
        }
        return;
 8002462:	e079      	b.n	8002558 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01d      	beq.n	80024ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10d      	bne.n	800249c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002484:	2b00      	cmp	r3, #0
 8002486:	d031      	beq.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
 8002490:	e02c      	b.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
 8002492:	bf00      	nop
 8002494:	20000004 	.word	0x20000004
 8002498:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d023      	beq.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e01e      	b.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0210 	bic.w	r2, r2, #16
 80024ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d032      	beq.n	800255a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d022      	beq.n	8002546 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2205      	movs	r2, #5
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	3301      	adds	r3, #1
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	d307      	bcc.n	8002534 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f2      	bne.n	8002518 <HAL_DMA_IRQHandler+0x2cc>
 8002532:	e000      	b.n	8002536 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002534:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
 8002556:	e000      	b.n	800255a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002558:	bf00      	nop
    }
  }
}
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002594:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b40      	cmp	r3, #64	@ 0x40
 80025a4:	d108      	bne.n	80025b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025b6:	e007      	b.n	80025c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3b10      	subs	r3, #16
 80025e4:	4a13      	ldr	r2, [pc, #76]	@ (8002634 <DMA_CalcBaseAndBitshift+0x60>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ee:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <DMA_CalcBaseAndBitshift+0x64>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d908      	bls.n	8002614 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <DMA_CalcBaseAndBitshift+0x68>)
 800260a:	4013      	ands	r3, r2
 800260c:	1d1a      	adds	r2, r3, #4
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	659a      	str	r2, [r3, #88]	@ 0x58
 8002612:	e006      	b.n	8002622 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <DMA_CalcBaseAndBitshift+0x68>)
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	aaaaaaab 	.word	0xaaaaaaab
 8002638:	0801c7f4 	.word	0x0801c7f4
 800263c:	fffffc00 	.word	0xfffffc00

08002640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11f      	bne.n	800269a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d856      	bhi.n	800270e <DMA_CheckFifoParam+0xce>
 8002660:	a201      	add	r2, pc, #4	@ (adr r2, 8002668 <DMA_CheckFifoParam+0x28>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002679 	.word	0x08002679
 800266c:	0800268b 	.word	0x0800268b
 8002670:	08002679 	.word	0x08002679
 8002674:	0800270f 	.word	0x0800270f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d046      	beq.n	8002712 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002688:	e043      	b.n	8002712 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002692:	d140      	bne.n	8002716 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002698:	e03d      	b.n	8002716 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a2:	d121      	bne.n	80026e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d837      	bhi.n	800271a <DMA_CheckFifoParam+0xda>
 80026aa:	a201      	add	r2, pc, #4	@ (adr r2, 80026b0 <DMA_CheckFifoParam+0x70>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026c1 	.word	0x080026c1
 80026b4:	080026c7 	.word	0x080026c7
 80026b8:	080026c1 	.word	0x080026c1
 80026bc:	080026d9 	.word	0x080026d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      break;
 80026c4:	e030      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d025      	beq.n	800271e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d6:	e022      	b.n	800271e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026e0:	d11f      	bne.n	8002722 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026e6:	e01c      	b.n	8002722 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d903      	bls.n	80026f6 <DMA_CheckFifoParam+0xb6>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d003      	beq.n	80026fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026f4:	e018      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      break;
 80026fa:	e015      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      break;
 800270c:	e00b      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      break;
 800270e:	bf00      	nop
 8002710:	e00a      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
 8002714:	e008      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
 8002718:	e006      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
 800271c:	e004      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 800271e:	bf00      	nop
 8002720:	e002      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;   
 8002722:	bf00      	nop
 8002724:	e000      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 8002726:	bf00      	nop
    }
  } 
  
  return status; 
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	@ 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e175      	b.n	8002a44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	f040 8164 	bne.w	8002a3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d005      	beq.n	800278e <HAL_GPIO_Init+0x56>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d130      	bne.n	80027f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2203      	movs	r2, #3
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 0201 	and.w	r2, r3, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d017      	beq.n	800282c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d123      	bne.n	8002880 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	08da      	lsrs	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3208      	adds	r2, #8
 800287a:	69b9      	ldr	r1, [r7, #24]
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0203 	and.w	r2, r3, #3
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80be 	beq.w	8002a3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	4b66      	ldr	r3, [pc, #408]	@ (8002a5c <HAL_GPIO_Init+0x324>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	4a65      	ldr	r2, [pc, #404]	@ (8002a5c <HAL_GPIO_Init+0x324>)
 80028c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ce:	4b63      	ldr	r3, [pc, #396]	@ (8002a5c <HAL_GPIO_Init+0x324>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028da:	4a61      	ldr	r2, [pc, #388]	@ (8002a60 <HAL_GPIO_Init+0x328>)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a58      	ldr	r2, [pc, #352]	@ (8002a64 <HAL_GPIO_Init+0x32c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d037      	beq.n	8002976 <HAL_GPIO_Init+0x23e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a57      	ldr	r2, [pc, #348]	@ (8002a68 <HAL_GPIO_Init+0x330>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_GPIO_Init+0x23a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a56      	ldr	r2, [pc, #344]	@ (8002a6c <HAL_GPIO_Init+0x334>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d02b      	beq.n	800296e <HAL_GPIO_Init+0x236>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a55      	ldr	r2, [pc, #340]	@ (8002a70 <HAL_GPIO_Init+0x338>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <HAL_GPIO_Init+0x232>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a54      	ldr	r2, [pc, #336]	@ (8002a74 <HAL_GPIO_Init+0x33c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_Init+0x22e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a53      	ldr	r2, [pc, #332]	@ (8002a78 <HAL_GPIO_Init+0x340>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x22a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a52      	ldr	r2, [pc, #328]	@ (8002a7c <HAL_GPIO_Init+0x344>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x226>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a51      	ldr	r2, [pc, #324]	@ (8002a80 <HAL_GPIO_Init+0x348>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x222>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a50      	ldr	r2, [pc, #320]	@ (8002a84 <HAL_GPIO_Init+0x34c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x21e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4f      	ldr	r2, [pc, #316]	@ (8002a88 <HAL_GPIO_Init+0x350>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x21a>
 800294e:	2309      	movs	r3, #9
 8002950:	e012      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002952:	230a      	movs	r3, #10
 8002954:	e010      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002956:	2308      	movs	r3, #8
 8002958:	e00e      	b.n	8002978 <HAL_GPIO_Init+0x240>
 800295a:	2307      	movs	r3, #7
 800295c:	e00c      	b.n	8002978 <HAL_GPIO_Init+0x240>
 800295e:	2306      	movs	r3, #6
 8002960:	e00a      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002962:	2305      	movs	r3, #5
 8002964:	e008      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002966:	2304      	movs	r3, #4
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x240>
 800296a:	2303      	movs	r3, #3
 800296c:	e004      	b.n	8002978 <HAL_GPIO_Init+0x240>
 800296e:	2302      	movs	r3, #2
 8002970:	e002      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002976:	2300      	movs	r3, #0
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f002 0203 	and.w	r2, r2, #3
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4093      	lsls	r3, r2
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002988:	4935      	ldr	r1, [pc, #212]	@ (8002a60 <HAL_GPIO_Init+0x328>)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002996:	4b3d      	ldr	r3, [pc, #244]	@ (8002a8c <HAL_GPIO_Init+0x354>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ba:	4a34      	ldr	r2, [pc, #208]	@ (8002a8c <HAL_GPIO_Init+0x354>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c0:	4b32      	ldr	r3, [pc, #200]	@ (8002a8c <HAL_GPIO_Init+0x354>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e4:	4a29      	ldr	r2, [pc, #164]	@ (8002a8c <HAL_GPIO_Init+0x354>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ea:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <HAL_GPIO_Init+0x354>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a8c <HAL_GPIO_Init+0x354>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_GPIO_Init+0x354>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a38:	4a14      	ldr	r2, [pc, #80]	@ (8002a8c <HAL_GPIO_Init+0x354>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3301      	adds	r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b0f      	cmp	r3, #15
 8002a48:	f67f ae86 	bls.w	8002758 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3724      	adds	r7, #36	@ 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40013800 	.word	0x40013800
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020c00 	.word	0x40020c00
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40021400 	.word	0x40021400
 8002a7c:	40021800 	.word	0x40021800
 8002a80:	40021c00 	.word	0x40021c00
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40022400 	.word	0x40022400
 8002a8c:	40013c00 	.word	0x40013c00

08002a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002aac:	e003      	b.n	8002ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002aae:	887b      	ldrh	r3, [r7, #2]
 8002ab0:	041a      	lsls	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	619a      	str	r2, [r3, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af02      	add	r7, sp, #8
 8002ac8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e108      	b.n	8002ce6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f00a ff56 	bl	800d9a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2203      	movs	r2, #3
 8002af8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b02:	d102      	bne.n	8002b0a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f004 fd49 	bl	80075a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7c1a      	ldrb	r2, [r3, #16]
 8002b1c:	f88d 2000 	strb.w	r2, [sp]
 8002b20:	3304      	adds	r3, #4
 8002b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b24:	f004 fc32 	bl	800738c <USB_CoreInit>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0d5      	b.n	8002ce6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fd41 	bl	80075c8 <USB_SetCurrentMode>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0c6      	b.n	8002ce6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e04a      	b.n	8002bf4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3315      	adds	r3, #21
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3314      	adds	r3, #20
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	b298      	uxth	r0, r3
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	332e      	adds	r3, #46	@ 0x2e
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3318      	adds	r3, #24
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	331c      	adds	r3, #28
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3320      	adds	r3, #32
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3324      	adds	r3, #36	@ 0x24
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	791b      	ldrb	r3, [r3, #4]
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3af      	bcc.n	8002b5e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e044      	b.n	8002c8e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	791b      	ldrb	r3, [r3, #4]
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d3b5      	bcc.n	8002c04 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7c1a      	ldrb	r2, [r3, #16]
 8002ca0:	f88d 2000 	strb.w	r2, [sp]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca8:	f004 fcda 	bl	8007660 <USB_DevInit>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e013      	b.n	8002ce6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7b1b      	ldrb	r3, [r3, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d102      	bne.n	8002cda <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f001 f959 	bl	8003f8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 fd19 	bl	8008716 <USB_DevDisconnect>

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_PCD_Start+0x16>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e012      	b.n	8002d2a <HAL_PCD_Start+0x3c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f004 fc37 	bl	8007584 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f005 fcda 	bl	80086d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d32:	b590      	push	{r4, r7, lr}
 8002d34:	b08d      	sub	sp, #52	@ 0x34
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f005 fd98 	bl	800887e <USB_GetMode>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 84b9 	bne.w	80036c8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f005 fcfc 	bl	8008758 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 84af 	beq.w	80036c6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f005 fce9 	bl	8008758 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d107      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f002 0202 	and.w	r2, r2, #2
 8002d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f005 fcd7 	bl	8008758 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d161      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0210 	bic.w	r2, r2, #16
 8002dc2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 020f 	and.w	r2, r3, #15
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	3304      	adds	r3, #4
 8002de2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	0c5b      	lsrs	r3, r3, #17
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d124      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d035      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6a38      	ldr	r0, [r7, #32]
 8002e10:	f005 fb0e 	bl	8008430 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e20:	441a      	add	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e32:	441a      	add	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	615a      	str	r2, [r3, #20]
 8002e38:	e016      	b.n	8002e68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	0c5b      	lsrs	r3, r3, #17
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d110      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6a38      	ldr	r0, [r7, #32]
 8002e52:	f005 faed 	bl	8008430 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e62:	441a      	add	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0210 	orr.w	r2, r2, #16
 8002e76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f005 fc6b 	bl	8008758 <USB_ReadInterrupts>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e8c:	f040 80a7 	bne.w	8002fde <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 fc70 	bl	800877e <USB_ReadDevAllOutEpInterrupt>
 8002e9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002ea0:	e099      	b.n	8002fd6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 808e 	beq.w	8002fca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 fc94 	bl	80087e6 <USB_ReadDevOutEPInterrupt>
 8002ebe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2301      	movs	r3, #1
 8002eda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fece 	bl	8003c80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	2308      	movs	r3, #8
 8002efe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 ffa4 	bl	8003e50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2310      	movs	r3, #16
 8002f22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d030      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f36:	2b80      	cmp	r3, #128	@ 0x80
 8002f38:	d109      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	78db      	ldrb	r3, [r3, #3]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d108      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f00a fe35 	bl	800dbe8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2320      	movs	r3, #32
 8002faa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	3301      	adds	r3, #1
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f af62 	bne.w	8002ea2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f005 fbb8 	bl	8008758 <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ff2:	f040 80db 	bne.w	80031ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f005 fbd9 	bl	80087b2 <USB_ReadDevAllInEpInterrupt>
 8003000:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003006:	e0cd      	b.n	80031a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80c2 	beq.w	8003198 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f005 fbff 	bl	8008822 <USB_ReadDevInEPInterrupt>
 8003024:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d057      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	2201      	movs	r2, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	43db      	mvns	r3, r3
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003050:	4013      	ands	r3, r2
 8003052:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003060:	461a      	mov	r2, r3
 8003062:	2301      	movs	r3, #1
 8003064:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	799b      	ldrb	r3, [r3, #6]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d132      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3320      	adds	r3, #32
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4403      	add	r3, r0
 800308e:	331c      	adds	r3, #28
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4419      	add	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4403      	add	r3, r0
 80030a2:	3320      	adds	r3, #32
 80030a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d113      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x3a2>
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3324      	adds	r3, #36	@ 0x24
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d108      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030cc:	461a      	mov	r2, r3
 80030ce:	2101      	movs	r1, #1
 80030d0:	f005 fc08 	bl	80088e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f00a fcff 	bl	800dade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030f6:	461a      	mov	r2, r3
 80030f8:	2308      	movs	r3, #8
 80030fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003112:	461a      	mov	r2, r3
 8003114:	2310      	movs	r3, #16
 8003116:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800312e:	461a      	mov	r2, r3
 8003130:	2340      	movs	r3, #64	@ 0x40
 8003132:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d023      	beq.n	8003186 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800313e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003140:	6a38      	ldr	r0, [r7, #32]
 8003142:	f004 fbeb 	bl	800791c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	3310      	adds	r3, #16
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	78db      	ldrb	r3, [r3, #3]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	b2db      	uxtb	r3, r3
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f00a fd4c 	bl	800dc0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003180:	461a      	mov	r2, r3
 8003182:	2302      	movs	r3, #2
 8003184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fce8 	bl	8003b68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	3301      	adds	r3, #1
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80031a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f47f af2e 	bne.w	8003008 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f005 fad1 	bl	8008758 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031c0:	d122      	bne.n	8003208 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031e8:	2100      	movs	r1, #0
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f00a fec6 	bl	800df7c <HAL_PCDEx_LPM_Callback>
 80031f0:	e002      	b.n	80031f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f00a fcea 	bl	800dbcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f005 faa3 	bl	8008758 <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800321c:	d112      	bne.n	8003244 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f00a fca6 	bl	800db80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003242:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f005 fa85 	bl	8008758 <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003258:	d121      	bne.n	800329e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003268:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003270:	2b00      	cmp	r3, #0
 8003272:	d111      	bne.n	8003298 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	f003 020f 	and.w	r2, r3, #15
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800328e:	2101      	movs	r1, #1
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f00a fe73 	bl	800df7c <HAL_PCDEx_LPM_Callback>
 8003296:	e002      	b.n	800329e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f00a fc71 	bl	800db80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f005 fa58 	bl	8008758 <USB_ReadInterrupts>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b2:	f040 80b7 	bne.w	8003424 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2110      	movs	r1, #16
 80032d0:	4618      	mov	r0, r3
 80032d2:	f004 fb23 	bl	800791c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032da:	e046      	b.n	800336a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032e8:	461a      	mov	r2, r3
 80032ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003300:	0151      	lsls	r1, r2, #5
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	440a      	add	r2, r1
 8003306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800330a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800330e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003322:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003334:	0151      	lsls	r1, r2, #5
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	440a      	add	r2, r1
 800333a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800333e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003342:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003354:	0151      	lsls	r1, r2, #5
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	440a      	add	r2, r1
 800335a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800335e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003362:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003366:	3301      	adds	r3, #1
 8003368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	791b      	ldrb	r3, [r3, #4]
 800336e:	461a      	mov	r2, r3
 8003370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003372:	4293      	cmp	r3, r2
 8003374:	d3b2      	bcc.n	80032dc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003384:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003388:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7bdb      	ldrb	r3, [r3, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033a2:	f043 030b 	orr.w	r3, r3, #11
 80033a6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033b8:	f043 030b 	orr.w	r3, r3, #11
 80033bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80033be:	e015      	b.n	80033ec <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ce:	4619      	mov	r1, r3
 80033d0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80033d4:	4313      	orrs	r3, r2
 80033d6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033e6:	f043 030b 	orr.w	r3, r3, #11
 80033ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80033fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800340e:	461a      	mov	r2, r3
 8003410:	f005 fa68 	bl	80088e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f005 f995 	bl	8008758 <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003438:	d123      	bne.n	8003482 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f005 fa2c 	bl	800889c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f004 fae0 	bl	8007a0e <USB_GetDevSpeed>
 800344e:	4603      	mov	r3, r0
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681c      	ldr	r4, [r3, #0]
 800345a:	f001 faab 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 800345e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003464:	461a      	mov	r2, r3
 8003466:	4620      	mov	r0, r4
 8003468:	f003 ffea 	bl	8007440 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f00a fb5e 	bl	800db2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003480:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f005 f966 	bl	8008758 <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b08      	cmp	r3, #8
 8003494:	d10a      	bne.n	80034ac <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f00a fb3b 	bl	800db12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f002 0208 	and.w	r2, r2, #8
 80034aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f005 f951 	bl	8008758 <USB_ReadInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b80      	cmp	r3, #128	@ 0x80
 80034be:	d123      	bne.n	8003508 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034cc:	2301      	movs	r3, #1
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d0:	e014      	b.n	80034fc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fb08 	bl	8003b06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	3301      	adds	r3, #1
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	791b      	ldrb	r3, [r3, #4]
 8003500:	461a      	mov	r2, r3
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	4293      	cmp	r3, r2
 8003506:	d3e4      	bcc.n	80034d2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f005 f923 	bl	8008758 <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800351c:	d13c      	bne.n	8003598 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351e:	2301      	movs	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
 8003522:	e02b      	b.n	800357c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3318      	adds	r3, #24
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d115      	bne.n	8003576 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800354a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800354c:	2b00      	cmp	r3, #0
 800354e:	da12      	bge.n	8003576 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3317      	adds	r3, #23
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800356c:	b2db      	uxtb	r3, r3
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fac8 	bl	8003b06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	3301      	adds	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	791b      	ldrb	r3, [r3, #4]
 8003580:	461a      	mov	r2, r3
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	4293      	cmp	r3, r2
 8003586:	d3cd      	bcc.n	8003524 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f005 f8db 	bl	8008758 <USB_ReadInterrupts>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035ac:	d156      	bne.n	800365c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ae:	2301      	movs	r3, #1
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b2:	e045      	b.n	8003640 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d12e      	bne.n	800363a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da2b      	bge.n	800363a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80035ee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d121      	bne.n	800363a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003632:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003636:	6053      	str	r3, [r2, #4]
            break;
 8003638:	e008      	b.n	800364c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	3301      	adds	r3, #1
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	791b      	ldrb	r3, [r3, #4]
 8003644:	461a      	mov	r2, r3
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	4293      	cmp	r3, r2
 800364a:	d3b3      	bcc.n	80035b4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800365a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f005 f879 	bl	8008758 <USB_ReadInterrupts>
 8003666:	4603      	mov	r3, r0
 8003668:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003670:	d10a      	bne.n	8003688 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f00a fadc 	bl	800dc30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f005 f863 	bl	8008758 <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b04      	cmp	r3, #4
 800369a:	d115      	bne.n	80036c8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f00a facc 	bl	800dc4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	e000      	b.n	80036c8 <HAL_PCD_IRQHandler+0x996>
      return;
 80036c6:	bf00      	nop
    }
  }
}
 80036c8:	3734      	adds	r7, #52	@ 0x34
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd90      	pop	{r4, r7, pc}

080036ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_PCD_SetAddress+0x1a>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e012      	b.n	800370e <HAL_PCD_SetAddress+0x40>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f004 ffc2 	bl	8008688 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	4608      	mov	r0, r1
 8003720:	4611      	mov	r1, r2
 8003722:	461a      	mov	r2, r3
 8003724:	4603      	mov	r3, r0
 8003726:	70fb      	strb	r3, [r7, #3]
 8003728:	460b      	mov	r3, r1
 800372a:	803b      	strh	r3, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003738:	2b00      	cmp	r3, #0
 800373a:	da0f      	bge.n	800375c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	3310      	adds	r3, #16
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	705a      	strb	r2, [r3, #1]
 800375a:	e00f      	b.n	800377c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	f003 020f 	and.w	r2, r3, #15
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	3304      	adds	r3, #4
 8003774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003788:	883a      	ldrh	r2, [r7, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	78ba      	ldrb	r2, [r7, #2]
 8003792:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d004      	beq.n	80037a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037a6:	78bb      	ldrb	r3, [r7, #2]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d102      	bne.n	80037b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_PCD_EP_Open+0xaa>
 80037bc:	2302      	movs	r3, #2
 80037be:	e00e      	b.n	80037de <HAL_PCD_EP_Open+0xc8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f004 f942 	bl	8007a58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80037dc:	7afb      	ldrb	r3, [r7, #11]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	da0f      	bge.n	800381a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	3310      	adds	r3, #16
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	3304      	adds	r3, #4
 8003810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	705a      	strb	r2, [r3, #1]
 8003818:	e00f      	b.n	800383a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 020f 	and.w	r2, r3, #15
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_PCD_EP_Close+0x6e>
 8003850:	2302      	movs	r3, #2
 8003852:	e00e      	b.n	8003872 <HAL_PCD_EP_Close+0x8c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68f9      	ldr	r1, [r7, #12]
 8003862:	4618      	mov	r0, r3
 8003864:	f004 f980 	bl	8007b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	460b      	mov	r3, r1
 8003888:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388a:	7afb      	ldrb	r3, [r7, #11]
 800388c:	f003 020f 	and.w	r2, r3, #15
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	3304      	adds	r3, #4
 80038a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2200      	movs	r2, #0
 80038ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038bc:	7afb      	ldrb	r3, [r7, #11]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	799b      	ldrb	r3, [r3, #6]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	799b      	ldrb	r3, [r3, #6]
 80038de:	461a      	mov	r2, r3
 80038e0:	6979      	ldr	r1, [r7, #20]
 80038e2:	f004 fa1d 	bl	8007d20 <USB_EPStartXfer>

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	f003 020f 	and.w	r2, r3, #15
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	460b      	mov	r3, r1
 800392e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003930:	7afb      	ldrb	r3, [r7, #11]
 8003932:	f003 020f 	and.w	r2, r3, #15
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	3310      	adds	r3, #16
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2201      	movs	r2, #1
 800395e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003960:	7afb      	ldrb	r3, [r7, #11]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	b2da      	uxtb	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	799b      	ldrb	r3, [r3, #6]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d102      	bne.n	800397a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	799b      	ldrb	r3, [r3, #6]
 8003982:	461a      	mov	r2, r3
 8003984:	6979      	ldr	r1, [r7, #20]
 8003986:	f004 f9cb 	bl	8007d20 <USB_EPStartXfer>

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	7912      	ldrb	r2, [r2, #4]
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e04f      	b.n	8003a52 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da0f      	bge.n	80039da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	3310      	adds	r3, #16
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	3304      	adds	r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	705a      	strb	r2, [r3, #1]
 80039d8:	e00d      	b.n	80039f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	3304      	adds	r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_PCD_EP_SetStall+0x82>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e01d      	b.n	8003a52 <HAL_PCD_EP_SetStall+0xbe>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 fd5b 	bl	80084e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7999      	ldrb	r1, [r3, #6]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a42:	461a      	mov	r2, r3
 8003a44:	f004 ff4e 	bl	80088e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	7912      	ldrb	r2, [r2, #4]
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e042      	b.n	8003afe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	da0f      	bge.n	8003aa0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	f003 020f 	and.w	r2, r3, #15
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	3310      	adds	r3, #16
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	705a      	strb	r2, [r3, #1]
 8003a9e:	e00f      	b.n	8003ac0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	f003 020f 	and.w	r2, r3, #15
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_PCD_EP_ClrStall+0x86>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e00e      	b.n	8003afe <HAL_PCD_EP_ClrStall+0xa4>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68f9      	ldr	r1, [r7, #12]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 fd64 	bl	80085bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	da0c      	bge.n	8003b34 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	3310      	adds	r3, #16
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3304      	adds	r3, #4
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	e00c      	b.n	8003b4e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f004 fb83 	bl	8008260 <USB_EPStopXfer>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	@ 0x28
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	3310      	adds	r3, #16
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d901      	bls.n	8003ba0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e06b      	b.n	8003c78 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d902      	bls.n	8003bbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	3303      	adds	r3, #3
 8003bc0:	089b      	lsrs	r3, r3, #2
 8003bc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc4:	e02a      	b.n	8003c1c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d902      	bls.n	8003be2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3303      	adds	r3, #3
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68d9      	ldr	r1, [r3, #12]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	f004 fbd8 	bl	80083b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	441a      	add	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	441a      	add	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d809      	bhi.n	8003c46 <PCD_WriteEmptyTxFifo+0xde>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d203      	bcs.n	8003c46 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1bf      	bne.n	8003bc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d811      	bhi.n	8003c76 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	2201      	movs	r2, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	6939      	ldr	r1, [r7, #16]
 8003c6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c72:	4013      	ands	r3, r2
 8003c74:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	333c      	adds	r3, #60	@ 0x3c
 8003c98:	3304      	adds	r3, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	799b      	ldrb	r3, [r3, #6]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d17b      	bne.n	8003dae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4a61      	ldr	r2, [pc, #388]	@ (8003e48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	f240 80b9 	bls.w	8003e3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80b3 	beq.w	8003e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ce8:	6093      	str	r3, [r2, #8]
 8003cea:	e0a7      	b.n	8003e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d02:	461a      	mov	r2, r3
 8003d04:	2320      	movs	r3, #32
 8003d06:	6093      	str	r3, [r2, #8]
 8003d08:	e098      	b.n	8003e3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f040 8093 	bne.w	8003e3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4a4b      	ldr	r2, [pc, #300]	@ (8003e48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d90f      	bls.n	8003d3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d34:	461a      	mov	r2, r3
 8003d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d3a:	6093      	str	r3, [r2, #8]
 8003d3c:	e07e      	b.n	8003e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4413      	add	r3, r2
 8003d50:	3304      	adds	r3, #4
 8003d52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1a      	ldr	r2, [r3, #32]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	0159      	lsls	r1, r3, #5
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	440b      	add	r3, r1
 8003d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6a:	1ad2      	subs	r2, r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d114      	bne.n	8003da0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	f004 fdaa 	bl	80088e4 <USB_EP0_OutStart>
 8003d90:	e006      	b.n	8003da0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	441a      	add	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f009 fe7e 	bl	800daa8 <HAL_PCD_DataOutStageCallback>
 8003dac:	e046      	b.n	8003e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	4a26      	ldr	r2, [pc, #152]	@ (8003e4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d124      	bne.n	8003e00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dd2:	6093      	str	r3, [r2, #8]
 8003dd4:	e032      	b.n	8003e3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dec:	461a      	mov	r2, r3
 8003dee:	2320      	movs	r3, #32
 8003df0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	4619      	mov	r1, r3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f009 fe55 	bl	800daa8 <HAL_PCD_DataOutStageCallback>
 8003dfe:	e01d      	b.n	8003e3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d114      	bne.n	8003e30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d108      	bne.n	8003e30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f004 fd5a 	bl	80088e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f009 fe36 	bl	800daa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	4f54300a 	.word	0x4f54300a
 8003e4c:	4f54310a 	.word	0x4f54310a

08003e50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	333c      	adds	r3, #60	@ 0x3c
 8003e68:	3304      	adds	r3, #4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a15      	ldr	r2, [pc, #84]	@ (8003ed8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d90e      	bls.n	8003ea4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ea2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f009 fded 	bl	800da84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d90c      	bls.n	8003ecc <PCD_EP_OutSetupPacket_int+0x7c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	799b      	ldrb	r3, [r3, #6]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d108      	bne.n	8003ecc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	f004 fd0c 	bl	80088e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	4f54300a 	.word	0x4f54300a

08003edc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	70fb      	strb	r3, [r7, #3]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d107      	bne.n	8003f0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003efa:	883b      	ldrh	r3, [r7, #0]
 8003efc:	0419      	lsls	r1, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f08:	e028      	b.n	8003f5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4413      	add	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	73fb      	strb	r3, [r7, #15]
 8003f1c:	e00d      	b.n	8003f3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	3340      	adds	r3, #64	@ 0x40
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	4413      	add	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	3301      	adds	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d3ec      	bcc.n	8003f1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f44:	883b      	ldrh	r3, [r7, #0]
 8003f46:	0418      	lsls	r0, r3, #16
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6819      	ldr	r1, [r3, #0]
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	4302      	orrs	r2, r0
 8003f54:	3340      	adds	r3, #64	@ 0x40
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	887a      	ldrh	r2, [r7, #2]
 8003f7c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fba:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	10000003 	.word	0x10000003

08003fd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	4b23      	ldr	r3, [pc, #140]	@ (800406c <HAL_PWREx_EnableOverDrive+0x98>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_PWREx_EnableOverDrive+0x98>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fea:	4b20      	ldr	r3, [pc, #128]	@ (800406c <HAL_PWREx_EnableOverDrive+0x98>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8004070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8004070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004000:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004002:	f7fd fdf9 	bl	8001bf8 <HAL_GetTick>
 8004006:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004008:	e009      	b.n	800401e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800400a:	f7fd fdf5 	bl	8001bf8 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004018:	d901      	bls.n	800401e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e022      	b.n	8004064 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800401e:	4b14      	ldr	r3, [pc, #80]	@ (8004070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402a:	d1ee      	bne.n	800400a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800402c:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <HAL_PWREx_EnableOverDrive+0x9c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0f      	ldr	r2, [pc, #60]	@ (8004070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004036:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004038:	f7fd fdde 	bl	8001bf8 <HAL_GetTick>
 800403c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800403e:	e009      	b.n	8004054 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004040:	f7fd fdda 	bl	8001bf8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800404e:	d901      	bls.n	8004054 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e007      	b.n	8004064 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004054:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004060:	d1ee      	bne.n	8004040 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	40007000 	.word	0x40007000

08004074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800407c:	2300      	movs	r3, #0
 800407e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e29b      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8087 	beq.w	80041a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004098:	4b96      	ldr	r3, [pc, #600]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d00c      	beq.n	80040be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a4:	4b93      	ldr	r3, [pc, #588]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 030c 	and.w	r3, r3, #12
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d112      	bne.n	80040d6 <HAL_RCC_OscConfig+0x62>
 80040b0:	4b90      	ldr	r3, [pc, #576]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040bc:	d10b      	bne.n	80040d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040be:	4b8d      	ldr	r3, [pc, #564]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d06c      	beq.n	80041a4 <HAL_RCC_OscConfig+0x130>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d168      	bne.n	80041a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e275      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040de:	d106      	bne.n	80040ee <HAL_RCC_OscConfig+0x7a>
 80040e0:	4b84      	ldr	r3, [pc, #528]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a83      	ldr	r2, [pc, #524]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80040e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e02e      	b.n	800414c <HAL_RCC_OscConfig+0xd8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0x9c>
 80040f6:	4b7f      	ldr	r3, [pc, #508]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a7e      	ldr	r2, [pc, #504]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80040fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4b7c      	ldr	r3, [pc, #496]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a7b      	ldr	r2, [pc, #492]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e01d      	b.n	800414c <HAL_RCC_OscConfig+0xd8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0xc0>
 800411a:	4b76      	ldr	r3, [pc, #472]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a75      	ldr	r2, [pc, #468]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4b73      	ldr	r3, [pc, #460]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a72      	ldr	r2, [pc, #456]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e00b      	b.n	800414c <HAL_RCC_OscConfig+0xd8>
 8004134:	4b6f      	ldr	r3, [pc, #444]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a6e      	ldr	r2, [pc, #440]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b6c      	ldr	r3, [pc, #432]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6b      	ldr	r2, [pc, #428]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800414a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d013      	beq.n	800417c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd fd50 	bl	8001bf8 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd fd4c 	bl	8001bf8 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	@ 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e229      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b61      	ldr	r3, [pc, #388]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0xe8>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd fd3c 	bl	8001bf8 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fd fd38 	bl	8001bf8 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	@ 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e215      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	4b57      	ldr	r3, [pc, #348]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x110>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d069      	beq.n	8004286 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b2:	4b50      	ldr	r3, [pc, #320]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041be:	4b4d      	ldr	r3, [pc, #308]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d11c      	bne.n	8004204 <HAL_RCC_OscConfig+0x190>
 80041ca:	4b4a      	ldr	r3, [pc, #296]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d116      	bne.n	8004204 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	4b47      	ldr	r3, [pc, #284]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_RCC_OscConfig+0x17a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e1e9      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b41      	ldr	r3, [pc, #260]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	493d      	ldr	r1, [pc, #244]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	e040      	b.n	8004286 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d023      	beq.n	8004254 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420c:	4b39      	ldr	r3, [pc, #228]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a38      	ldr	r2, [pc, #224]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd fcee 	bl	8001bf8 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004220:	f7fd fcea 	bl	8001bf8 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e1c7      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b30      	ldr	r3, [pc, #192]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423e:	4b2d      	ldr	r3, [pc, #180]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4929      	ldr	r1, [pc, #164]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
 8004252:	e018      	b.n	8004286 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004254:	4b27      	ldr	r3, [pc, #156]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a26      	ldr	r2, [pc, #152]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd fcca 	bl	8001bf8 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004268:	f7fd fcc6 	bl	8001bf8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e1a3      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427a:	4b1e      	ldr	r3, [pc, #120]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d038      	beq.n	8004304 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d019      	beq.n	80042ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429a:	4b16      	ldr	r3, [pc, #88]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 800429c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429e:	4a15      	ldr	r2, [pc, #84]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fd fca7 	bl	8001bf8 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fd fca3 	bl	8001bf8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e180      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c0:	4b0c      	ldr	r3, [pc, #48]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80042c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x23a>
 80042cc:	e01a      	b.n	8004304 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ce:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80042d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d2:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042da:	f7fd fc8d 	bl	8001bf8 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e2:	f7fd fc89 	bl	8001bf8 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d903      	bls.n	80042f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e166      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
 80042f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f8:	4b92      	ldr	r3, [pc, #584]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80042fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1ee      	bne.n	80042e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80a4 	beq.w	800445a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004312:	4b8c      	ldr	r3, [pc, #560]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	4b89      	ldr	r3, [pc, #548]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	4a88      	ldr	r2, [pc, #544]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	@ 0x40
 800432a:	4b86      	ldr	r3, [pc, #536]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433a:	4b83      	ldr	r3, [pc, #524]	@ (8004548 <HAL_RCC_OscConfig+0x4d4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d118      	bne.n	8004378 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004346:	4b80      	ldr	r3, [pc, #512]	@ (8004548 <HAL_RCC_OscConfig+0x4d4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a7f      	ldr	r2, [pc, #508]	@ (8004548 <HAL_RCC_OscConfig+0x4d4>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004352:	f7fd fc51 	bl	8001bf8 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435a:	f7fd fc4d 	bl	8001bf8 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b64      	cmp	r3, #100	@ 0x64
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e12a      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800436c:	4b76      	ldr	r3, [pc, #472]	@ (8004548 <HAL_RCC_OscConfig+0x4d4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x31a>
 8004380:	4b70      	ldr	r3, [pc, #448]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004384:	4a6f      	ldr	r2, [pc, #444]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	@ 0x70
 800438c:	e02d      	b.n	80043ea <HAL_RCC_OscConfig+0x376>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x33c>
 8004396:	4b6b      	ldr	r3, [pc, #428]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	4a6a      	ldr	r2, [pc, #424]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a2:	4b68      	ldr	r3, [pc, #416]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	4a67      	ldr	r2, [pc, #412]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ae:	e01c      	b.n	80043ea <HAL_RCC_OscConfig+0x376>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d10c      	bne.n	80043d2 <HAL_RCC_OscConfig+0x35e>
 80043b8:	4b62      	ldr	r3, [pc, #392]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043bc:	4a61      	ldr	r2, [pc, #388]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043be:	f043 0304 	orr.w	r3, r3, #4
 80043c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c4:	4b5f      	ldr	r3, [pc, #380]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d0:	e00b      	b.n	80043ea <HAL_RCC_OscConfig+0x376>
 80043d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043de:	4b59      	ldr	r3, [pc, #356]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e2:	4a58      	ldr	r2, [pc, #352]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d015      	beq.n	800441e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f2:	f7fd fc01 	bl	8001bf8 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fd fbfd 	bl	8001bf8 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0d8      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004410:	4b4c      	ldr	r3, [pc, #304]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0ee      	beq.n	80043fa <HAL_RCC_OscConfig+0x386>
 800441c:	e014      	b.n	8004448 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441e:	f7fd fbeb 	bl	8001bf8 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004424:	e00a      	b.n	800443c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7fd fbe7 	bl	8001bf8 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004434:	4293      	cmp	r3, r2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e0c2      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443c:	4b41      	ldr	r3, [pc, #260]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ee      	bne.n	8004426 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d105      	bne.n	800445a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444e:	4b3d      	ldr	r3, [pc, #244]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	4a3c      	ldr	r2, [pc, #240]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004458:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80ae 	beq.w	80045c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004464:	4b37      	ldr	r3, [pc, #220]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b08      	cmp	r3, #8
 800446e:	d06d      	beq.n	800454c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d14b      	bne.n	8004510 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004478:	4b32      	ldr	r3, [pc, #200]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a31      	ldr	r2, [pc, #196]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 800447e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fd fbb8 	bl	8001bf8 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fd fbb4 	bl	8001bf8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e091      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	4b29      	ldr	r3, [pc, #164]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	019b      	lsls	r3, r3, #6
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	3b01      	subs	r3, #1
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	071b      	lsls	r3, r3, #28
 80044d6:	491b      	ldr	r1, [pc, #108]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044dc:	4b19      	ldr	r3, [pc, #100]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a18      	ldr	r2, [pc, #96]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 80044e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fd fb86 	bl	8001bf8 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd fb82 	bl	8001bf8 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e05f      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x47c>
 800450e:	e057      	b.n	80045c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004510:	4b0c      	ldr	r3, [pc, #48]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a0b      	ldr	r2, [pc, #44]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800451a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fb6c 	bl	8001bf8 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004524:	f7fd fb68 	bl	8001bf8 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e045      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <HAL_RCC_OscConfig+0x4d0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x4b0>
 8004542:	e03d      	b.n	80045c0 <HAL_RCC_OscConfig+0x54c>
 8004544:	40023800 	.word	0x40023800
 8004548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800454c:	4b1f      	ldr	r3, [pc, #124]	@ (80045cc <HAL_RCC_OscConfig+0x558>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d030      	beq.n	80045bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d129      	bne.n	80045bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d122      	bne.n	80045bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004582:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004584:	4293      	cmp	r3, r2
 8004586:	d119      	bne.n	80045bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d10f      	bne.n	80045bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800

080045d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0d0      	b.n	800478a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004794 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d910      	bls.n	8004618 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b67      	ldr	r3, [pc, #412]	@ (8004794 <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 020f 	bic.w	r2, r3, #15
 80045fe:	4965      	ldr	r1, [pc, #404]	@ (8004794 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b63      	ldr	r3, [pc, #396]	@ (8004794 <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0b8      	b.n	800478a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004630:	4b59      	ldr	r3, [pc, #356]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4a58      	ldr	r2, [pc, #352]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 8004636:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800463a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004648:	4b53      	ldr	r3, [pc, #332]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a52      	ldr	r2, [pc, #328]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 800464e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004652:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004654:	4b50      	ldr	r3, [pc, #320]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	494d      	ldr	r1, [pc, #308]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d040      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467a:	4b47      	ldr	r3, [pc, #284]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d115      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e07f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004692:	4b41      	ldr	r3, [pc, #260]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e073      	b.n	800478a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e06b      	b.n	800478a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b2:	4b39      	ldr	r3, [pc, #228]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4936      	ldr	r1, [pc, #216]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c4:	f7fd fa98 	bl	8001bf8 <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f7fd fa94 	bl	8001bf8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e053      	b.n	800478a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 020c 	and.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1eb      	bne.n	80046cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f4:	4b27      	ldr	r3, [pc, #156]	@ (8004794 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d210      	bcs.n	8004724 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b24      	ldr	r3, [pc, #144]	@ (8004794 <HAL_RCC_ClockConfig+0x1c4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 020f 	bic.w	r2, r3, #15
 800470a:	4922      	ldr	r1, [pc, #136]	@ (8004794 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e032      	b.n	800478a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004730:	4b19      	ldr	r3, [pc, #100]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4916      	ldr	r1, [pc, #88]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800474e:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	490e      	ldr	r1, [pc, #56]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004762:	f000 f821 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8004766:	4602      	mov	r2, r0
 8004768:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <HAL_RCC_ClockConfig+0x1c8>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	490a      	ldr	r1, [pc, #40]	@ (800479c <HAL_RCC_ClockConfig+0x1cc>)
 8004774:	5ccb      	ldrb	r3, [r1, r3]
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	4a09      	ldr	r2, [pc, #36]	@ (80047a0 <HAL_RCC_ClockConfig+0x1d0>)
 800477c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800477e:	4b09      	ldr	r3, [pc, #36]	@ (80047a4 <HAL_RCC_ClockConfig+0x1d4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f7fc feb8 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023c00 	.word	0x40023c00
 8004798:	40023800 	.word	0x40023800
 800479c:	0801c7dc 	.word	0x0801c7dc
 80047a0:	20000004 	.word	0x20000004
 80047a4:	20000008 	.word	0x20000008

080047a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b094      	sub	sp, #80	@ 0x50
 80047ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047b4:	2300      	movs	r3, #0
 80047b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b8:	2300      	movs	r3, #0
 80047ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c0:	4b79      	ldr	r3, [pc, #484]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d00d      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x40>
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	f200 80e1 	bhi.w	8004994 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x34>
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047da:	e0db      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4b73      	ldr	r3, [pc, #460]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x204>)
 80047de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047e0:	e0db      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e2:	4b73      	ldr	r3, [pc, #460]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80047e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047e6:	e0d8      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e8:	4b6f      	ldr	r3, [pc, #444]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047f2:	4b6d      	ldr	r3, [pc, #436]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d063      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fe:	4b6a      	ldr	r3, [pc, #424]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	099b      	lsrs	r3, r3, #6
 8004804:	2200      	movs	r2, #0
 8004806:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004808:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800480a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800480c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004810:	633b      	str	r3, [r7, #48]	@ 0x30
 8004812:	2300      	movs	r3, #0
 8004814:	637b      	str	r3, [r7, #52]	@ 0x34
 8004816:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	0159      	lsls	r1, r3, #5
 8004828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800482c:	0150      	lsls	r0, r2, #5
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4621      	mov	r1, r4
 8004834:	1a51      	subs	r1, r2, r1
 8004836:	6139      	str	r1, [r7, #16]
 8004838:	4629      	mov	r1, r5
 800483a:	eb63 0301 	sbc.w	r3, r3, r1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800484c:	4659      	mov	r1, fp
 800484e:	018b      	lsls	r3, r1, #6
 8004850:	4651      	mov	r1, sl
 8004852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004856:	4651      	mov	r1, sl
 8004858:	018a      	lsls	r2, r1, #6
 800485a:	4651      	mov	r1, sl
 800485c:	ebb2 0801 	subs.w	r8, r2, r1
 8004860:	4659      	mov	r1, fp
 8004862:	eb63 0901 	sbc.w	r9, r3, r1
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800487a:	4690      	mov	r8, r2
 800487c:	4699      	mov	r9, r3
 800487e:	4623      	mov	r3, r4
 8004880:	eb18 0303 	adds.w	r3, r8, r3
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	462b      	mov	r3, r5
 8004888:	eb49 0303 	adc.w	r3, r9, r3
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800489a:	4629      	mov	r1, r5
 800489c:	024b      	lsls	r3, r1, #9
 800489e:	4621      	mov	r1, r4
 80048a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048a4:	4621      	mov	r1, r4
 80048a6:	024a      	lsls	r2, r1, #9
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ae:	2200      	movs	r2, #0
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048b8:	f7fb fd7a 	bl	80003b0 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4613      	mov	r3, r2
 80048c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c4:	e058      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c6:	4b38      	ldr	r3, [pc, #224]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	2200      	movs	r2, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	4611      	mov	r1, r2
 80048d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	2300      	movs	r3, #0
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
 80048dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048e0:	4642      	mov	r2, r8
 80048e2:	464b      	mov	r3, r9
 80048e4:	f04f 0000 	mov.w	r0, #0
 80048e8:	f04f 0100 	mov.w	r1, #0
 80048ec:	0159      	lsls	r1, r3, #5
 80048ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f2:	0150      	lsls	r0, r2, #5
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4641      	mov	r1, r8
 80048fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80048fe:	4649      	mov	r1, r9
 8004900:	eb63 0b01 	sbc.w	fp, r3, r1
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004910:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004914:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004918:	ebb2 040a 	subs.w	r4, r2, sl
 800491c:	eb63 050b 	sbc.w	r5, r3, fp
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	00eb      	lsls	r3, r5, #3
 800492a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800492e:	00e2      	lsls	r2, r4, #3
 8004930:	4614      	mov	r4, r2
 8004932:	461d      	mov	r5, r3
 8004934:	4643      	mov	r3, r8
 8004936:	18e3      	adds	r3, r4, r3
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	464b      	mov	r3, r9
 800493c:	eb45 0303 	adc.w	r3, r5, r3
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800494e:	4629      	mov	r1, r5
 8004950:	028b      	lsls	r3, r1, #10
 8004952:	4621      	mov	r1, r4
 8004954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004958:	4621      	mov	r1, r4
 800495a:	028a      	lsls	r2, r1, #10
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004962:	2200      	movs	r2, #0
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	61fa      	str	r2, [r7, #28]
 8004968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800496c:	f7fb fd20 	bl	80003b0 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4613      	mov	r3, r2
 8004976:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	3301      	adds	r3, #1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004988:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800498a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004992:	e002      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004996:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800499c:	4618      	mov	r0, r3
 800499e:	3750      	adds	r7, #80	@ 0x50
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	007a1200 	.word	0x007a1200

080049b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b8:	4b03      	ldr	r3, [pc, #12]	@ (80049c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ba:	681b      	ldr	r3, [r3, #0]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000004 	.word	0x20000004

080049cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049d0:	f7ff fff0 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	0a9b      	lsrs	r3, r3, #10
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4903      	ldr	r1, [pc, #12]	@ (80049f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40023800 	.word	0x40023800
 80049f0:	0801c7ec 	.word	0x0801c7ec

080049f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f8:	f7ff ffdc 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b05      	ldr	r3, [pc, #20]	@ (8004a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	0b5b      	lsrs	r3, r3, #13
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4903      	ldr	r1, [pc, #12]	@ (8004a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40023800 	.word	0x40023800
 8004a18:	0801c7ec 	.word	0x0801c7ec

08004a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	220f      	movs	r2, #15
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a2c:	4b12      	ldr	r3, [pc, #72]	@ (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0203 	and.w	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a38:	4b0f      	ldr	r3, [pc, #60]	@ (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a44:	4b0c      	ldr	r3, [pc, #48]	@ (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a50:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a5e:	4b07      	ldr	r3, [pc, #28]	@ (8004a7c <HAL_RCC_GetClockConfig+0x60>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	601a      	str	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40023c00 	.word	0x40023c00

08004a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d012      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004aa8:	4b69      	ldr	r3, [pc, #420]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a68      	ldr	r2, [pc, #416]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ab2:	6093      	str	r3, [r2, #8]
 8004ab4:	4b66      	ldr	r3, [pc, #408]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abc:	4964      	ldr	r1, [pc, #400]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d017      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ada:	4b5d      	ldr	r3, [pc, #372]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ae0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae8:	4959      	ldr	r1, [pc, #356]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004af8:	d101      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004afa:	2301      	movs	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d017      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b16:	4b4e      	ldr	r3, [pc, #312]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b24:	494a      	ldr	r1, [pc, #296]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b34:	d101      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 808b 	beq.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b64:	4b3a      	ldr	r3, [pc, #232]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	4a39      	ldr	r2, [pc, #228]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b70:	4b37      	ldr	r3, [pc, #220]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b7c:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a34      	ldr	r2, [pc, #208]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fd f836 	bl	8001bf8 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b90:	f7fd f832 	bl	8001bf8 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	@ 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e38f      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bae:	4b28      	ldr	r3, [pc, #160]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d035      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d02e      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bcc:	4b20      	ldr	r3, [pc, #128]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004be2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004bee:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bf4:	4b16      	ldr	r3, [pc, #88]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d114      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fc fffa 	bl	8001bf8 <HAL_GetTick>
 8004c04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fc fff6 	bl	8001bf8 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e351      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ee      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c36:	d111      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c38:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c44:	4b04      	ldr	r3, [pc, #16]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c46:	400b      	ands	r3, r1
 8004c48:	4901      	ldr	r1, [pc, #4]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
 8004c4e:	e00b      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40007000 	.word	0x40007000
 8004c58:	0ffffcff 	.word	0x0ffffcff
 8004c5c:	4bac      	ldr	r3, [pc, #688]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4aab      	ldr	r2, [pc, #684]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c62:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c66:	6093      	str	r3, [r2, #8]
 8004c68:	4ba9      	ldr	r3, [pc, #676]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c74:	49a6      	ldr	r1, [pc, #664]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d010      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c86:	4ba2      	ldr	r3, [pc, #648]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c8c:	4aa0      	ldr	r2, [pc, #640]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c96:	4b9e      	ldr	r3, [pc, #632]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c98:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	499b      	ldr	r1, [pc, #620]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cb4:	4b96      	ldr	r3, [pc, #600]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc2:	4993      	ldr	r1, [pc, #588]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cd6:	4b8e      	ldr	r3, [pc, #568]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ce4:	498a      	ldr	r1, [pc, #552]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cf8:	4b85      	ldr	r3, [pc, #532]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d06:	4982      	ldr	r1, [pc, #520]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d28:	4979      	ldr	r1, [pc, #484]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d3c:	4b74      	ldr	r3, [pc, #464]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	4971      	ldr	r1, [pc, #452]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d5e:	4b6c      	ldr	r3, [pc, #432]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d64:	f023 020c 	bic.w	r2, r3, #12
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6c:	4968      	ldr	r1, [pc, #416]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d80:	4b63      	ldr	r3, [pc, #396]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d86:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8e:	4960      	ldr	r1, [pc, #384]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004da2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db0:	4957      	ldr	r1, [pc, #348]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dc4:	4b52      	ldr	r3, [pc, #328]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	494f      	ldr	r1, [pc, #316]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004de6:	4b4a      	ldr	r3, [pc, #296]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df4:	4946      	ldr	r1, [pc, #280]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e08:	4b41      	ldr	r3, [pc, #260]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e16:	493e      	ldr	r1, [pc, #248]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e2a:	4b39      	ldr	r3, [pc, #228]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e38:	4935      	ldr	r1, [pc, #212]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e4c:	4b30      	ldr	r3, [pc, #192]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e5a:	492d      	ldr	r1, [pc, #180]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d011      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e6e:	4b28      	ldr	r3, [pc, #160]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e74:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e7c:	4924      	ldr	r1, [pc, #144]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eae:	4b18      	ldr	r3, [pc, #96]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ebc:	4914      	ldr	r1, [pc, #80]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee0:	490b      	ldr	r1, [pc, #44]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00f      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ef4:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f04:	4902      	ldr	r1, [pc, #8]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f0c:	e002      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f20:	4b8a      	ldr	r3, [pc, #552]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	4986      	ldr	r1, [pc, #536]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f44:	4b81      	ldr	r3, [pc, #516]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f4a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f54:	497d      	ldr	r1, [pc, #500]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d006      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80d6 	beq.w	800511c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f70:	4b76      	ldr	r3, [pc, #472]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a75      	ldr	r2, [pc, #468]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7c:	f7fc fe3c 	bl	8001bf8 <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f84:	f7fc fe38 	bl	8001bf8 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	@ 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e195      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f96:	4b6d      	ldr	r3, [pc, #436]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d021      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d11d      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fb6:	4b65      	ldr	r3, [pc, #404]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fbc:	0c1b      	lsrs	r3, r3, #16
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fc4:	4b61      	ldr	r3, [pc, #388]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fca:	0e1b      	lsrs	r3, r3, #24
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	019a      	lsls	r2, r3, #6
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	061b      	lsls	r3, r3, #24
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	071b      	lsls	r3, r3, #28
 8004fea:	4958      	ldr	r1, [pc, #352]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005010:	2b00      	cmp	r3, #0
 8005012:	d02e      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800501c:	d129      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800501e:	4b4b      	ldr	r3, [pc, #300]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800502c:	4b47      	ldr	r3, [pc, #284]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005032:	0f1b      	lsrs	r3, r3, #28
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	019a      	lsls	r2, r3, #6
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	041b      	lsls	r3, r3, #16
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	071b      	lsls	r3, r3, #28
 8005052:	493e      	ldr	r1, [pc, #248]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800505a:	4b3c      	ldr	r3, [pc, #240]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005060:	f023 021f 	bic.w	r2, r3, #31
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	3b01      	subs	r3, #1
 800506a:	4938      	ldr	r1, [pc, #224]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01d      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800507e:	4b33      	ldr	r3, [pc, #204]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005084:	0e1b      	lsrs	r3, r3, #24
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800508c:	4b2f      	ldr	r3, [pc, #188]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005092:	0f1b      	lsrs	r3, r3, #28
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	019a      	lsls	r2, r3, #6
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	431a      	orrs	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	061b      	lsls	r3, r3, #24
 80050ac:	431a      	orrs	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	071b      	lsls	r3, r3, #28
 80050b2:	4926      	ldr	r1, [pc, #152]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d011      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	019a      	lsls	r2, r3, #6
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	061b      	lsls	r3, r3, #24
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	071b      	lsls	r3, r3, #28
 80050e2:	491a      	ldr	r1, [pc, #104]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050ea:	4b18      	ldr	r3, [pc, #96]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a17      	ldr	r2, [pc, #92]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f6:	f7fc fd7f 	bl	8001bf8 <HAL_GetTick>
 80050fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050fe:	f7fc fd7b 	bl	8001bf8 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b64      	cmp	r3, #100	@ 0x64
 800510a:	d901      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e0d8      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005110:	4b0e      	ldr	r3, [pc, #56]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b01      	cmp	r3, #1
 8005120:	f040 80ce 	bne.w	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005124:	4b09      	ldr	r3, [pc, #36]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a08      	ldr	r2, [pc, #32]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800512a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800512e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005130:	f7fc fd62 	bl	8001bf8 <HAL_GetTick>
 8005134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005136:	e00b      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005138:	f7fc fd5e 	bl	8001bf8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	@ 0x64
 8005144:	d904      	bls.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e0bb      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800514a:	bf00      	nop
 800514c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005150:	4b5e      	ldr	r3, [pc, #376]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800515c:	d0ec      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800517a:	2b00      	cmp	r3, #0
 800517c:	d02e      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d12a      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005186:	4b51      	ldr	r3, [pc, #324]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005194:	4b4d      	ldr	r3, [pc, #308]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	0f1b      	lsrs	r3, r3, #28
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	019a      	lsls	r2, r3, #6
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	061b      	lsls	r3, r3, #24
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	071b      	lsls	r3, r3, #28
 80051ba:	4944      	ldr	r1, [pc, #272]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051c2:	4b42      	ldr	r3, [pc, #264]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	3b01      	subs	r3, #1
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	493d      	ldr	r1, [pc, #244]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d022      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051f0:	d11d      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051f2:	4b36      	ldr	r3, [pc, #216]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f8:	0e1b      	lsrs	r3, r3, #24
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005200:	4b32      	ldr	r3, [pc, #200]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	0f1b      	lsrs	r3, r3, #28
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	019a      	lsls	r2, r3, #6
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	431a      	orrs	r2, r3
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	061b      	lsls	r3, r3, #24
 8005220:	431a      	orrs	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	071b      	lsls	r3, r3, #28
 8005226:	4929      	ldr	r1, [pc, #164]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d028      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800523a:	4b24      	ldr	r3, [pc, #144]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005240:	0e1b      	lsrs	r3, r3, #24
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005248:	4b20      	ldr	r3, [pc, #128]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	019a      	lsls	r2, r3, #6
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	431a      	orrs	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	061b      	lsls	r3, r3, #24
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	071b      	lsls	r3, r3, #28
 800526e:	4917      	ldr	r1, [pc, #92]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005276:	4b15      	ldr	r3, [pc, #84]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800527c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	4911      	ldr	r1, [pc, #68]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800528c:	4b0f      	ldr	r3, [pc, #60]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0e      	ldr	r2, [pc, #56]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005298:	f7fc fcae 	bl	8001bf8 <HAL_GetTick>
 800529c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052a0:	f7fc fcaa 	bl	8001bf8 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b64      	cmp	r3, #100	@ 0x64
 80052ac:	d901      	bls.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e007      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052b2:	4b06      	ldr	r3, [pc, #24]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052be:	d1ef      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023800 	.word	0x40023800

080052d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e049      	b.n	8005376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f841 	bl	800537e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f000 fb1c 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d001      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e054      	b.n	8005456 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a26      	ldr	r2, [pc, #152]	@ (8005464 <HAL_TIM_Base_Start_IT+0xd0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d022      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x80>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d6:	d01d      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x80>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a22      	ldr	r2, [pc, #136]	@ (8005468 <HAL_TIM_Base_Start_IT+0xd4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d018      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x80>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a21      	ldr	r2, [pc, #132]	@ (800546c <HAL_TIM_Base_Start_IT+0xd8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x80>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005470 <HAL_TIM_Base_Start_IT+0xdc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x80>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005474 <HAL_TIM_Base_Start_IT+0xe0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x80>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1c      	ldr	r2, [pc, #112]	@ (8005478 <HAL_TIM_Base_Start_IT+0xe4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x80>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <HAL_TIM_Base_Start_IT+0xe8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d115      	bne.n	8005440 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	4b19      	ldr	r3, [pc, #100]	@ (8005480 <HAL_TIM_Base_Start_IT+0xec>)
 800541c:	4013      	ands	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b06      	cmp	r3, #6
 8005424:	d015      	beq.n	8005452 <HAL_TIM_Base_Start_IT+0xbe>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800542c:	d011      	beq.n	8005452 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543e:	e008      	b.n	8005452 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e000      	b.n	8005454 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40010400 	.word	0x40010400
 8005478:	40014000 	.word	0x40014000
 800547c:	40001800 	.word	0x40001800
 8005480:	00010007 	.word	0x00010007

08005484 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e08f      	b.n	80055b8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fc fa17 	bl	80018e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b3e      	ldr	r3, [pc, #248]	@ (80055c0 <HAL_TIM_Encoder_Init+0x13c>)
 80054c6:	400b      	ands	r3, r1
 80054c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	4610      	mov	r0, r2
 80054d6:	f000 fa39 	bl	800594c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4b31      	ldr	r3, [pc, #196]	@ (80055c4 <HAL_TIM_Encoder_Init+0x140>)
 8005500:	4013      	ands	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	4313      	orrs	r3, r2
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4b2b      	ldr	r3, [pc, #172]	@ (80055c8 <HAL_TIM_Encoder_Init+0x144>)
 800551a:	4013      	ands	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4b2a      	ldr	r3, [pc, #168]	@ (80055cc <HAL_TIM_Encoder_Init+0x148>)
 8005522:	4013      	ands	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	4313      	orrs	r3, r2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	011a      	lsls	r2, r3, #4
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	031b      	lsls	r3, r3, #12
 8005544:	4313      	orrs	r3, r2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005552:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800555a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	4313      	orrs	r3, r2
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	fffebff8 	.word	0xfffebff8
 80055c4:	fffffcfc 	.word	0xfffffcfc
 80055c8:	fffff3f3 	.word	0xfffff3f3
 80055cc:	ffff0f0f 	.word	0xffff0f0f

080055d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d110      	bne.n	8005622 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d102      	bne.n	800560c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005606:	7b7b      	ldrb	r3, [r7, #13]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d001      	beq.n	8005610 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e069      	b.n	80056e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005620:	e031      	b.n	8005686 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b04      	cmp	r3, #4
 8005626:	d110      	bne.n	800564a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d102      	bne.n	8005634 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800562e:	7b3b      	ldrb	r3, [r7, #12]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d001      	beq.n	8005638 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e055      	b.n	80056e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005648:	e01d      	b.n	8005686 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d108      	bne.n	8005662 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d105      	bne.n	8005662 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005656:	7b7b      	ldrb	r3, [r7, #13]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d102      	bne.n	8005662 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800565c:	7b3b      	ldrb	r3, [r7, #12]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d001      	beq.n	8005666 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e03e      	b.n	80056e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_TIM_Encoder_Start+0xc4>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b04      	cmp	r3, #4
 8005690:	d008      	beq.n	80056a4 <HAL_TIM_Encoder_Start+0xd4>
 8005692:	e00f      	b.n	80056b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fa01 	bl	8005aa4 <TIM_CCxChannelCmd>
      break;
 80056a2:	e016      	b.n	80056d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2201      	movs	r2, #1
 80056aa:	2104      	movs	r1, #4
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f9f9 	bl	8005aa4 <TIM_CCxChannelCmd>
      break;
 80056b2:	e00e      	b.n	80056d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2201      	movs	r2, #1
 80056ba:	2100      	movs	r1, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f9f1 	bl	8005aa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2201      	movs	r2, #1
 80056c8:	2104      	movs	r1, #4
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f9ea 	bl	8005aa4 <TIM_CCxChannelCmd>
      break;
 80056d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d020      	beq.n	8005750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01b      	beq.n	8005750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0202 	mvn.w	r2, #2
 8005720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f8e9 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f8db 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8ec 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d020      	beq.n	800579c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01b      	beq.n	800579c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0204 	mvn.w	r2, #4
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f8c3 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f8b5 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f8c6 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d020      	beq.n	80057e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01b      	beq.n	80057e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0208 	mvn.w	r2, #8
 80057b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2204      	movs	r2, #4
 80057be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f89d 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f88f 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f8a0 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d020      	beq.n	8005834 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01b      	beq.n	8005834 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0210 	mvn.w	r2, #16
 8005804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2208      	movs	r2, #8
 800580a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f877 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005820:	e005      	b.n	800582e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f869 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f87a 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0201 	mvn.w	r2, #1
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fb fcaa 	bl	80011ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00c      	beq.n	8005886 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800587e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f9cd 	bl	8005c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00c      	beq.n	80058aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f9c5 	bl	8005c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00c      	beq.n	80058ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f834 	bl	8005936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00c      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f06f 0220 	mvn.w	r2, #32
 80058ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f98d 	bl	8005c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a46      	ldr	r2, [pc, #280]	@ (8005a78 <TIM_Base_SetConfig+0x12c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596a:	d00f      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a43      	ldr	r2, [pc, #268]	@ (8005a7c <TIM_Base_SetConfig+0x130>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a42      	ldr	r2, [pc, #264]	@ (8005a80 <TIM_Base_SetConfig+0x134>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a41      	ldr	r2, [pc, #260]	@ (8005a84 <TIM_Base_SetConfig+0x138>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a40      	ldr	r2, [pc, #256]	@ (8005a88 <TIM_Base_SetConfig+0x13c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d108      	bne.n	800599e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a35      	ldr	r2, [pc, #212]	@ (8005a78 <TIM_Base_SetConfig+0x12c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d02b      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ac:	d027      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a32      	ldr	r2, [pc, #200]	@ (8005a7c <TIM_Base_SetConfig+0x130>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d023      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a31      	ldr	r2, [pc, #196]	@ (8005a80 <TIM_Base_SetConfig+0x134>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01f      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a30      	ldr	r2, [pc, #192]	@ (8005a84 <TIM_Base_SetConfig+0x138>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01b      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005a88 <TIM_Base_SetConfig+0x13c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d017      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a8c <TIM_Base_SetConfig+0x140>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005a90 <TIM_Base_SetConfig+0x144>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00f      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005a94 <TIM_Base_SetConfig+0x148>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00b      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a98 <TIM_Base_SetConfig+0x14c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a9c <TIM_Base_SetConfig+0x150>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a29      	ldr	r2, [pc, #164]	@ (8005aa0 <TIM_Base_SetConfig+0x154>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d108      	bne.n	8005a10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a10      	ldr	r2, [pc, #64]	@ (8005a78 <TIM_Base_SetConfig+0x12c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_Base_SetConfig+0xf8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	@ (8005a88 <TIM_Base_SetConfig+0x13c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d103      	bne.n	8005a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d105      	bne.n	8005a6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f023 0201 	bic.w	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	611a      	str	r2, [r3, #16]
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40010400 	.word	0x40010400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800
 8005a98:	40001800 	.word	0x40001800
 8005a9c:	40001c00 	.word	0x40001c00
 8005aa0:	40002000 	.word	0x40002000

08005aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e06d      	b.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a30      	ldr	r2, [pc, #192]	@ (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d004      	beq.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d108      	bne.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a20      	ldr	r2, [pc, #128]	@ (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1a      	ldr	r2, [pc, #104]	@ (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a15      	ldr	r2, [pc, #84]	@ (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a16      	ldr	r2, [pc, #88]	@ (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a15      	ldr	r2, [pc, #84]	@ (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10c      	bne.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40010400 	.word	0x40010400
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40001800 	.word	0x40001800

08005c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e040      	b.n	8005cdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fb feaa 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2224      	movs	r2, #36	@ 0x24
 8005c74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 ff0e 	bl	8006ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fca7 	bl	80065e8 <UART_SetConfig>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e01b      	b.n	8005cdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 ff8d 	bl	8006bf4 <UART_CheckIdleState>
 8005cda:	4603      	mov	r3, r0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	@ 0x28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d165      	bne.n	8005dc6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_UART_Transmit_DMA+0x22>
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e05e      	b.n	8005dc8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2221      	movs	r2, #33	@ 0x21
 8005d2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d027      	beq.n	8005d86 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3a:	4a25      	ldr	r2, [pc, #148]	@ (8005dd0 <HAL_UART_Transmit_DMA+0xec>)
 8005d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d42:	4a24      	ldr	r2, [pc, #144]	@ (8005dd4 <HAL_UART_Transmit_DMA+0xf0>)
 8005d44:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	4a23      	ldr	r2, [pc, #140]	@ (8005dd8 <HAL_UART_Transmit_DMA+0xf4>)
 8005d4c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	2200      	movs	r2, #0
 8005d54:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d5e:	4619      	mov	r1, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3328      	adds	r3, #40	@ 0x28
 8005d66:	461a      	mov	r2, r3
 8005d68:	88fb      	ldrh	r3, [r7, #6]
 8005d6a:	f7fc f97d 	bl	8002068 <HAL_DMA_Start_IT>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2210      	movs	r2, #16
 8005d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e020      	b.n	8005dc8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2240      	movs	r2, #64	@ 0x40
 8005d8c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3308      	adds	r3, #8
 8005d94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dae:	623a      	str	r2, [r7, #32]
 8005db0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	69f9      	ldr	r1, [r7, #28]
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e5      	bne.n	8005d8e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e000      	b.n	8005dc8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005dc6:	2302      	movs	r3, #2
  }
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3728      	adds	r7, #40	@ 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	08007075 	.word	0x08007075
 8005dd4:	0800710b 	.word	0x0800710b
 8005dd8:	0800728d 	.word	0x0800728d

08005ddc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	@ 0x28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d132      	bne.n	8005e5a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_UART_Receive_DMA+0x24>
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e02b      	b.n	8005e5c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d018      	beq.n	8005e4a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	613b      	str	r3, [r7, #16]
   return(result);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	623b      	str	r3, [r7, #32]
 8005e38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e6      	bne.n	8005e18 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 ffe5 	bl	8006e20 <UART_Start_Receive_DMA>
 8005e56:	4603      	mov	r3, r0
 8005e58:	e000      	b.n	8005e5c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005e5a:	2302      	movs	r3, #2
  }
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3728      	adds	r7, #40	@ 0x28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b090      	sub	sp, #64	@ 0x40
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e78:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e84:	2b80      	cmp	r3, #128	@ 0x80
 8005e86:	d139      	bne.n	8005efc <HAL_UART_DMAStop+0x98>
 8005e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e8a:	2b21      	cmp	r3, #33	@ 0x21
 8005e8c:	d136      	bne.n	8005efc <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3308      	adds	r3, #8
 8005e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e5      	bne.n	8005e8e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d015      	beq.n	8005ef6 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fc f92a 	bl	8002128 <HAL_DMA_Abort>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00d      	beq.n	8005ef6 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fc fb3e 	bl	8002560 <HAL_DMA_GetError>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	d105      	bne.n	8005ef6 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2210      	movs	r2, #16
 8005eee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e044      	b.n	8005f80 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 f832 	bl	8006f60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f06:	2b40      	cmp	r3, #64	@ 0x40
 8005f08:	d139      	bne.n	8005f7e <HAL_UART_DMAStop+0x11a>
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0c:	2b22      	cmp	r3, #34	@ 0x22
 8005f0e:	d136      	bne.n	8005f7e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f30:	61ba      	str	r2, [r7, #24]
 8005f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6979      	ldr	r1, [r7, #20]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e5      	bne.n	8005f10 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d015      	beq.n	8005f78 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fc f8e9 	bl	8002128 <HAL_DMA_Abort>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00d      	beq.n	8005f78 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fc fafd 	bl	8002560 <HAL_DMA_GetError>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d105      	bne.n	8005f78 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2210      	movs	r2, #16
 8005f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e003      	b.n	8005f80 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 f817 	bl	8006fac <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3740      	adds	r7, #64	@ 0x40
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b0ba      	sub	sp, #232	@ 0xe8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005fb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d115      	bne.n	8005ff0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00f      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 82ac 	beq.w	800653e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	4798      	blx	r3
      }
      return;
 8005fee:	e2a6      	b.n	800653e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8117 	beq.w	8006228 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006006:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800600a:	4b85      	ldr	r3, [pc, #532]	@ (8006220 <HAL_UART_IRQHandler+0x298>)
 800600c:	4013      	ands	r3, r2
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 810a 	beq.w	8006228 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d011      	beq.n	8006044 <HAL_UART_IRQHandler+0xbc>
 8006020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2201      	movs	r2, #1
 8006032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800603a:	f043 0201 	orr.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d011      	beq.n	8006074 <HAL_UART_IRQHandler+0xec>
 8006050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2202      	movs	r2, #2
 8006062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800606a:	f043 0204 	orr.w	r2, r3, #4
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d011      	beq.n	80060a4 <HAL_UART_IRQHandler+0x11c>
 8006080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00b      	beq.n	80060a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2204      	movs	r2, #4
 8006092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800609a:	f043 0202 	orr.w	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d017      	beq.n	80060e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2208      	movs	r2, #8
 80060ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060d6:	f043 0208 	orr.w	r2, r3, #8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d012      	beq.n	8006112 <HAL_UART_IRQHandler+0x18a>
 80060ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8212 	beq.w	8006542 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00d      	beq.n	8006146 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800612a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800614c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615a:	2b40      	cmp	r3, #64	@ 0x40
 800615c:	d005      	beq.n	800616a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800615e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006162:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006166:	2b00      	cmp	r3, #0
 8006168:	d04f      	beq.n	800620a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 ff1e 	bl	8006fac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617a:	2b40      	cmp	r3, #64	@ 0x40
 800617c:	d141      	bne.n	8006202 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3308      	adds	r3, #8
 8006184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800619c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1d9      	bne.n	800617e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d013      	beq.n	80061fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061d6:	4a13      	ldr	r2, [pc, #76]	@ (8006224 <HAL_UART_IRQHandler+0x29c>)
 80061d8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fc f812 	bl	8002208 <HAL_DMA_Abort_IT>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d017      	beq.n	800621a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80061f4:	4610      	mov	r0, r2
 80061f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	e00f      	b.n	800621a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9d4 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006200:	e00b      	b.n	800621a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f9d0 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006208:	e007      	b.n	800621a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9cc 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006218:	e193      	b.n	8006542 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800621a:	bf00      	nop
    return;
 800621c:	e191      	b.n	8006542 <HAL_UART_IRQHandler+0x5ba>
 800621e:	bf00      	nop
 8006220:	04000120 	.word	0x04000120
 8006224:	0800730b 	.word	0x0800730b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622c:	2b01      	cmp	r3, #1
 800622e:	f040 814c 	bne.w	80064ca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8145 	beq.w	80064ca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 813e 	beq.w	80064ca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2210      	movs	r2, #16
 8006254:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006260:	2b40      	cmp	r3, #64	@ 0x40
 8006262:	f040 80b6 	bne.w	80063d2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006272:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 8165 	beq.w	8006546 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006286:	429a      	cmp	r2, r3
 8006288:	f080 815d 	bcs.w	8006546 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006292:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a0:	f000 8086 	beq.w	80063b0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1da      	bne.n	80062a4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006300:	f023 0301 	bic.w	r3, r3, #1
 8006304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3308      	adds	r3, #8
 800630e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006312:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006316:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800631a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e1      	bne.n	80062ee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800633a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800633c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3308      	adds	r3, #8
 800634a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800634e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006350:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006354:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800635c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e3      	bne.n	800632a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800637e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006380:	f023 0310 	bic.w	r3, r3, #16
 8006384:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006392:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006394:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006398:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e4      	bne.n	8006370 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fb febc 	bl	8002128 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f8f6 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063d0:	e0b9      	b.n	8006546 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 80ab 	beq.w	800654a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80063f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80a6 	beq.w	800654a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800640c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006412:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006420:	647b      	str	r3, [r7, #68]	@ 0x44
 8006422:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800642e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e4      	bne.n	80063fe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3308      	adds	r3, #8
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	623b      	str	r3, [r7, #32]
   return(result);
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3308      	adds	r3, #8
 8006454:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006458:	633a      	str	r2, [r7, #48]	@ 0x30
 800645a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800645e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e3      	bne.n	8006434 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	60fb      	str	r3, [r7, #12]
   return(result);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f023 0310 	bic.w	r3, r3, #16
 8006494:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	69b9      	ldr	r1, [r7, #24]
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	617b      	str	r3, [r7, #20]
   return(result);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e4      	bne.n	8006480 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2202      	movs	r2, #2
 80064ba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f87a 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064c8:	e03f      	b.n	800654a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00e      	beq.n	80064f4 <HAL_UART_IRQHandler+0x56c>
 80064d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80064ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f871 	bl	80065d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064f2:	e02d      	b.n	8006550 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00e      	beq.n	800651e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01c      	beq.n	800654e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
    }
    return;
 800651c:	e017      	b.n	800654e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d012      	beq.n	8006550 <HAL_UART_IRQHandler+0x5c8>
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800652e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00c      	beq.n	8006550 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fefd 	bl	8007336 <UART_EndTransmit_IT>
    return;
 800653c:	e008      	b.n	8006550 <HAL_UART_IRQHandler+0x5c8>
      return;
 800653e:	bf00      	nop
 8006540:	e006      	b.n	8006550 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006542:	bf00      	nop
 8006544:	e004      	b.n	8006550 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006546:	bf00      	nop
 8006548:	e002      	b.n	8006550 <HAL_UART_IRQHandler+0x5c8>
      return;
 800654a:	bf00      	nop
 800654c:	e000      	b.n	8006550 <HAL_UART_IRQHandler+0x5c8>
    return;
 800654e:	bf00      	nop
  }

}
 8006550:	37e8      	adds	r7, #232	@ 0xe8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4ba6      	ldr	r3, [pc, #664]	@ (80068ac <UART_SetConfig+0x2c4>)
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	6979      	ldr	r1, [r7, #20]
 800661c:	430b      	orrs	r3, r1
 800661e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	430a      	orrs	r2, r1
 8006658:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a94      	ldr	r2, [pc, #592]	@ (80068b0 <UART_SetConfig+0x2c8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d120      	bne.n	80066a6 <UART_SetConfig+0xbe>
 8006664:	4b93      	ldr	r3, [pc, #588]	@ (80068b4 <UART_SetConfig+0x2cc>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b03      	cmp	r3, #3
 8006670:	d816      	bhi.n	80066a0 <UART_SetConfig+0xb8>
 8006672:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <UART_SetConfig+0x90>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	08006689 	.word	0x08006689
 800667c:	08006695 	.word	0x08006695
 8006680:	0800668f 	.word	0x0800668f
 8006684:	0800669b 	.word	0x0800669b
 8006688:	2301      	movs	r3, #1
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e150      	b.n	8006930 <UART_SetConfig+0x348>
 800668e:	2302      	movs	r3, #2
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e14d      	b.n	8006930 <UART_SetConfig+0x348>
 8006694:	2304      	movs	r3, #4
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e14a      	b.n	8006930 <UART_SetConfig+0x348>
 800669a:	2308      	movs	r3, #8
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e147      	b.n	8006930 <UART_SetConfig+0x348>
 80066a0:	2310      	movs	r3, #16
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e144      	b.n	8006930 <UART_SetConfig+0x348>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a83      	ldr	r2, [pc, #524]	@ (80068b8 <UART_SetConfig+0x2d0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d132      	bne.n	8006716 <UART_SetConfig+0x12e>
 80066b0:	4b80      	ldr	r3, [pc, #512]	@ (80068b4 <UART_SetConfig+0x2cc>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b6:	f003 030c 	and.w	r3, r3, #12
 80066ba:	2b0c      	cmp	r3, #12
 80066bc:	d828      	bhi.n	8006710 <UART_SetConfig+0x128>
 80066be:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <UART_SetConfig+0xdc>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066f9 	.word	0x080066f9
 80066c8:	08006711 	.word	0x08006711
 80066cc:	08006711 	.word	0x08006711
 80066d0:	08006711 	.word	0x08006711
 80066d4:	08006705 	.word	0x08006705
 80066d8:	08006711 	.word	0x08006711
 80066dc:	08006711 	.word	0x08006711
 80066e0:	08006711 	.word	0x08006711
 80066e4:	080066ff 	.word	0x080066ff
 80066e8:	08006711 	.word	0x08006711
 80066ec:	08006711 	.word	0x08006711
 80066f0:	08006711 	.word	0x08006711
 80066f4:	0800670b 	.word	0x0800670b
 80066f8:	2300      	movs	r3, #0
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	e118      	b.n	8006930 <UART_SetConfig+0x348>
 80066fe:	2302      	movs	r3, #2
 8006700:	77fb      	strb	r3, [r7, #31]
 8006702:	e115      	b.n	8006930 <UART_SetConfig+0x348>
 8006704:	2304      	movs	r3, #4
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e112      	b.n	8006930 <UART_SetConfig+0x348>
 800670a:	2308      	movs	r3, #8
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e10f      	b.n	8006930 <UART_SetConfig+0x348>
 8006710:	2310      	movs	r3, #16
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e10c      	b.n	8006930 <UART_SetConfig+0x348>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a68      	ldr	r2, [pc, #416]	@ (80068bc <UART_SetConfig+0x2d4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d120      	bne.n	8006762 <UART_SetConfig+0x17a>
 8006720:	4b64      	ldr	r3, [pc, #400]	@ (80068b4 <UART_SetConfig+0x2cc>)
 8006722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006726:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800672a:	2b30      	cmp	r3, #48	@ 0x30
 800672c:	d013      	beq.n	8006756 <UART_SetConfig+0x16e>
 800672e:	2b30      	cmp	r3, #48	@ 0x30
 8006730:	d814      	bhi.n	800675c <UART_SetConfig+0x174>
 8006732:	2b20      	cmp	r3, #32
 8006734:	d009      	beq.n	800674a <UART_SetConfig+0x162>
 8006736:	2b20      	cmp	r3, #32
 8006738:	d810      	bhi.n	800675c <UART_SetConfig+0x174>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <UART_SetConfig+0x15c>
 800673e:	2b10      	cmp	r3, #16
 8006740:	d006      	beq.n	8006750 <UART_SetConfig+0x168>
 8006742:	e00b      	b.n	800675c <UART_SetConfig+0x174>
 8006744:	2300      	movs	r3, #0
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e0f2      	b.n	8006930 <UART_SetConfig+0x348>
 800674a:	2302      	movs	r3, #2
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e0ef      	b.n	8006930 <UART_SetConfig+0x348>
 8006750:	2304      	movs	r3, #4
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e0ec      	b.n	8006930 <UART_SetConfig+0x348>
 8006756:	2308      	movs	r3, #8
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e0e9      	b.n	8006930 <UART_SetConfig+0x348>
 800675c:	2310      	movs	r3, #16
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	e0e6      	b.n	8006930 <UART_SetConfig+0x348>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a56      	ldr	r2, [pc, #344]	@ (80068c0 <UART_SetConfig+0x2d8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d120      	bne.n	80067ae <UART_SetConfig+0x1c6>
 800676c:	4b51      	ldr	r3, [pc, #324]	@ (80068b4 <UART_SetConfig+0x2cc>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006772:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006776:	2bc0      	cmp	r3, #192	@ 0xc0
 8006778:	d013      	beq.n	80067a2 <UART_SetConfig+0x1ba>
 800677a:	2bc0      	cmp	r3, #192	@ 0xc0
 800677c:	d814      	bhi.n	80067a8 <UART_SetConfig+0x1c0>
 800677e:	2b80      	cmp	r3, #128	@ 0x80
 8006780:	d009      	beq.n	8006796 <UART_SetConfig+0x1ae>
 8006782:	2b80      	cmp	r3, #128	@ 0x80
 8006784:	d810      	bhi.n	80067a8 <UART_SetConfig+0x1c0>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <UART_SetConfig+0x1a8>
 800678a:	2b40      	cmp	r3, #64	@ 0x40
 800678c:	d006      	beq.n	800679c <UART_SetConfig+0x1b4>
 800678e:	e00b      	b.n	80067a8 <UART_SetConfig+0x1c0>
 8006790:	2300      	movs	r3, #0
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e0cc      	b.n	8006930 <UART_SetConfig+0x348>
 8006796:	2302      	movs	r3, #2
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e0c9      	b.n	8006930 <UART_SetConfig+0x348>
 800679c:	2304      	movs	r3, #4
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e0c6      	b.n	8006930 <UART_SetConfig+0x348>
 80067a2:	2308      	movs	r3, #8
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e0c3      	b.n	8006930 <UART_SetConfig+0x348>
 80067a8:	2310      	movs	r3, #16
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e0c0      	b.n	8006930 <UART_SetConfig+0x348>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a44      	ldr	r2, [pc, #272]	@ (80068c4 <UART_SetConfig+0x2dc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d125      	bne.n	8006804 <UART_SetConfig+0x21c>
 80067b8:	4b3e      	ldr	r3, [pc, #248]	@ (80068b4 <UART_SetConfig+0x2cc>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067c6:	d017      	beq.n	80067f8 <UART_SetConfig+0x210>
 80067c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067cc:	d817      	bhi.n	80067fe <UART_SetConfig+0x216>
 80067ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067d2:	d00b      	beq.n	80067ec <UART_SetConfig+0x204>
 80067d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067d8:	d811      	bhi.n	80067fe <UART_SetConfig+0x216>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <UART_SetConfig+0x1fe>
 80067de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e2:	d006      	beq.n	80067f2 <UART_SetConfig+0x20a>
 80067e4:	e00b      	b.n	80067fe <UART_SetConfig+0x216>
 80067e6:	2300      	movs	r3, #0
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e0a1      	b.n	8006930 <UART_SetConfig+0x348>
 80067ec:	2302      	movs	r3, #2
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e09e      	b.n	8006930 <UART_SetConfig+0x348>
 80067f2:	2304      	movs	r3, #4
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e09b      	b.n	8006930 <UART_SetConfig+0x348>
 80067f8:	2308      	movs	r3, #8
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e098      	b.n	8006930 <UART_SetConfig+0x348>
 80067fe:	2310      	movs	r3, #16
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	e095      	b.n	8006930 <UART_SetConfig+0x348>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a2f      	ldr	r2, [pc, #188]	@ (80068c8 <UART_SetConfig+0x2e0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d125      	bne.n	800685a <UART_SetConfig+0x272>
 800680e:	4b29      	ldr	r3, [pc, #164]	@ (80068b4 <UART_SetConfig+0x2cc>)
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006814:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006818:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800681c:	d017      	beq.n	800684e <UART_SetConfig+0x266>
 800681e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006822:	d817      	bhi.n	8006854 <UART_SetConfig+0x26c>
 8006824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006828:	d00b      	beq.n	8006842 <UART_SetConfig+0x25a>
 800682a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800682e:	d811      	bhi.n	8006854 <UART_SetConfig+0x26c>
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <UART_SetConfig+0x254>
 8006834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006838:	d006      	beq.n	8006848 <UART_SetConfig+0x260>
 800683a:	e00b      	b.n	8006854 <UART_SetConfig+0x26c>
 800683c:	2301      	movs	r3, #1
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	e076      	b.n	8006930 <UART_SetConfig+0x348>
 8006842:	2302      	movs	r3, #2
 8006844:	77fb      	strb	r3, [r7, #31]
 8006846:	e073      	b.n	8006930 <UART_SetConfig+0x348>
 8006848:	2304      	movs	r3, #4
 800684a:	77fb      	strb	r3, [r7, #31]
 800684c:	e070      	b.n	8006930 <UART_SetConfig+0x348>
 800684e:	2308      	movs	r3, #8
 8006850:	77fb      	strb	r3, [r7, #31]
 8006852:	e06d      	b.n	8006930 <UART_SetConfig+0x348>
 8006854:	2310      	movs	r3, #16
 8006856:	77fb      	strb	r3, [r7, #31]
 8006858:	e06a      	b.n	8006930 <UART_SetConfig+0x348>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1b      	ldr	r2, [pc, #108]	@ (80068cc <UART_SetConfig+0x2e4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d138      	bne.n	80068d6 <UART_SetConfig+0x2ee>
 8006864:	4b13      	ldr	r3, [pc, #76]	@ (80068b4 <UART_SetConfig+0x2cc>)
 8006866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800686e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006872:	d017      	beq.n	80068a4 <UART_SetConfig+0x2bc>
 8006874:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006878:	d82a      	bhi.n	80068d0 <UART_SetConfig+0x2e8>
 800687a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800687e:	d00b      	beq.n	8006898 <UART_SetConfig+0x2b0>
 8006880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006884:	d824      	bhi.n	80068d0 <UART_SetConfig+0x2e8>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <UART_SetConfig+0x2aa>
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800688e:	d006      	beq.n	800689e <UART_SetConfig+0x2b6>
 8006890:	e01e      	b.n	80068d0 <UART_SetConfig+0x2e8>
 8006892:	2300      	movs	r3, #0
 8006894:	77fb      	strb	r3, [r7, #31]
 8006896:	e04b      	b.n	8006930 <UART_SetConfig+0x348>
 8006898:	2302      	movs	r3, #2
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e048      	b.n	8006930 <UART_SetConfig+0x348>
 800689e:	2304      	movs	r3, #4
 80068a0:	77fb      	strb	r3, [r7, #31]
 80068a2:	e045      	b.n	8006930 <UART_SetConfig+0x348>
 80068a4:	2308      	movs	r3, #8
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e042      	b.n	8006930 <UART_SetConfig+0x348>
 80068aa:	bf00      	nop
 80068ac:	efff69f3 	.word	0xefff69f3
 80068b0:	40011000 	.word	0x40011000
 80068b4:	40023800 	.word	0x40023800
 80068b8:	40004400 	.word	0x40004400
 80068bc:	40004800 	.word	0x40004800
 80068c0:	40004c00 	.word	0x40004c00
 80068c4:	40005000 	.word	0x40005000
 80068c8:	40011400 	.word	0x40011400
 80068cc:	40007800 	.word	0x40007800
 80068d0:	2310      	movs	r3, #16
 80068d2:	77fb      	strb	r3, [r7, #31]
 80068d4:	e02c      	b.n	8006930 <UART_SetConfig+0x348>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a72      	ldr	r2, [pc, #456]	@ (8006aa4 <UART_SetConfig+0x4bc>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d125      	bne.n	800692c <UART_SetConfig+0x344>
 80068e0:	4b71      	ldr	r3, [pc, #452]	@ (8006aa8 <UART_SetConfig+0x4c0>)
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80068ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80068ee:	d017      	beq.n	8006920 <UART_SetConfig+0x338>
 80068f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80068f4:	d817      	bhi.n	8006926 <UART_SetConfig+0x33e>
 80068f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068fa:	d00b      	beq.n	8006914 <UART_SetConfig+0x32c>
 80068fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006900:	d811      	bhi.n	8006926 <UART_SetConfig+0x33e>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <UART_SetConfig+0x326>
 8006906:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800690a:	d006      	beq.n	800691a <UART_SetConfig+0x332>
 800690c:	e00b      	b.n	8006926 <UART_SetConfig+0x33e>
 800690e:	2300      	movs	r3, #0
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e00d      	b.n	8006930 <UART_SetConfig+0x348>
 8006914:	2302      	movs	r3, #2
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e00a      	b.n	8006930 <UART_SetConfig+0x348>
 800691a:	2304      	movs	r3, #4
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e007      	b.n	8006930 <UART_SetConfig+0x348>
 8006920:	2308      	movs	r3, #8
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e004      	b.n	8006930 <UART_SetConfig+0x348>
 8006926:	2310      	movs	r3, #16
 8006928:	77fb      	strb	r3, [r7, #31]
 800692a:	e001      	b.n	8006930 <UART_SetConfig+0x348>
 800692c:	2310      	movs	r3, #16
 800692e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006938:	d15b      	bne.n	80069f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800693a:	7ffb      	ldrb	r3, [r7, #31]
 800693c:	2b08      	cmp	r3, #8
 800693e:	d828      	bhi.n	8006992 <UART_SetConfig+0x3aa>
 8006940:	a201      	add	r2, pc, #4	@ (adr r2, 8006948 <UART_SetConfig+0x360>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	0800696d 	.word	0x0800696d
 800694c:	08006975 	.word	0x08006975
 8006950:	0800697d 	.word	0x0800697d
 8006954:	08006993 	.word	0x08006993
 8006958:	08006983 	.word	0x08006983
 800695c:	08006993 	.word	0x08006993
 8006960:	08006993 	.word	0x08006993
 8006964:	08006993 	.word	0x08006993
 8006968:	0800698b 	.word	0x0800698b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800696c:	f7fe f82e 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8006970:	61b8      	str	r0, [r7, #24]
        break;
 8006972:	e013      	b.n	800699c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006974:	f7fe f83e 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8006978:	61b8      	str	r0, [r7, #24]
        break;
 800697a:	e00f      	b.n	800699c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800697c:	4b4b      	ldr	r3, [pc, #300]	@ (8006aac <UART_SetConfig+0x4c4>)
 800697e:	61bb      	str	r3, [r7, #24]
        break;
 8006980:	e00c      	b.n	800699c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006982:	f7fd ff11 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8006986:	61b8      	str	r0, [r7, #24]
        break;
 8006988:	e008      	b.n	800699c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800698e:	61bb      	str	r3, [r7, #24]
        break;
 8006990:	e004      	b.n	800699c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	77bb      	strb	r3, [r7, #30]
        break;
 800699a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d074      	beq.n	8006a8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	005a      	lsls	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	441a      	add	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b0f      	cmp	r3, #15
 80069bc:	d916      	bls.n	80069ec <UART_SetConfig+0x404>
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c4:	d212      	bcs.n	80069ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f023 030f 	bic.w	r3, r3, #15
 80069ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	b29a      	uxth	r2, r3
 80069dc:	89fb      	ldrh	r3, [r7, #14]
 80069de:	4313      	orrs	r3, r2
 80069e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	89fa      	ldrh	r2, [r7, #14]
 80069e8:	60da      	str	r2, [r3, #12]
 80069ea:	e04f      	b.n	8006a8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	77bb      	strb	r3, [r7, #30]
 80069f0:	e04c      	b.n	8006a8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069f2:	7ffb      	ldrb	r3, [r7, #31]
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d828      	bhi.n	8006a4a <UART_SetConfig+0x462>
 80069f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006a00 <UART_SetConfig+0x418>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	08006a4b 	.word	0x08006a4b
 8006a10:	08006a3b 	.word	0x08006a3b
 8006a14:	08006a4b 	.word	0x08006a4b
 8006a18:	08006a4b 	.word	0x08006a4b
 8006a1c:	08006a4b 	.word	0x08006a4b
 8006a20:	08006a43 	.word	0x08006a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a24:	f7fd ffd2 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8006a28:	61b8      	str	r0, [r7, #24]
        break;
 8006a2a:	e013      	b.n	8006a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a2c:	f7fd ffe2 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8006a30:	61b8      	str	r0, [r7, #24]
        break;
 8006a32:	e00f      	b.n	8006a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a34:	4b1d      	ldr	r3, [pc, #116]	@ (8006aac <UART_SetConfig+0x4c4>)
 8006a36:	61bb      	str	r3, [r7, #24]
        break;
 8006a38:	e00c      	b.n	8006a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3a:	f7fd feb5 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8006a3e:	61b8      	str	r0, [r7, #24]
        break;
 8006a40:	e008      	b.n	8006a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a46:	61bb      	str	r3, [r7, #24]
        break;
 8006a48:	e004      	b.n	8006a54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	77bb      	strb	r3, [r7, #30]
        break;
 8006a52:	bf00      	nop
    }

    if (pclk != 0U)
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d018      	beq.n	8006a8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	085a      	lsrs	r2, r3, #1
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	441a      	add	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b0f      	cmp	r3, #15
 8006a72:	d909      	bls.n	8006a88 <UART_SetConfig+0x4a0>
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a7a:	d205      	bcs.n	8006a88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60da      	str	r2, [r3, #12]
 8006a86:	e001      	b.n	8006a8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a98:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40007c00 	.word	0x40007c00
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	00f42400 	.word	0x00f42400

08006ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bae:	d10a      	bne.n	8006bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b098      	sub	sp, #96	@ 0x60
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c04:	f7fa fff8 	bl	8001bf8 <HAL_GetTick>
 8006c08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d12e      	bne.n	8006c76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f88c 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d021      	beq.n	8006c76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e062      	b.n	8006d3c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d149      	bne.n	8006d18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f856 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d03c      	beq.n	8006d18 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	623b      	str	r3, [r7, #32]
   return(result);
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e6      	bne.n	8006c9e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cf0:	61fa      	str	r2, [r7, #28]
 8006cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	69b9      	ldr	r1, [r7, #24]
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e5      	bne.n	8006cd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e011      	b.n	8006d3c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3758      	adds	r7, #88	@ 0x58
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d54:	e04f      	b.n	8006df6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d5c:	d04b      	beq.n	8006df6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5e:	f7fa ff4b 	bl	8001bf8 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d302      	bcc.n	8006d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e04e      	b.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d037      	beq.n	8006df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b80      	cmp	r3, #128	@ 0x80
 8006d8a:	d034      	beq.n	8006df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b40      	cmp	r3, #64	@ 0x40
 8006d90:	d031      	beq.n	8006df6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d110      	bne.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2208      	movs	r2, #8
 8006da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 f8ff 	bl	8006fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2208      	movs	r2, #8
 8006db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e029      	b.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd0:	d111      	bne.n	8006df6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f8e5 	bl	8006fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e00f      	b.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69da      	ldr	r2, [r3, #28]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	bf0c      	ite	eq
 8006e06:	2301      	moveq	r3, #1
 8006e08:	2300      	movne	r3, #0
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d0a0      	beq.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b096      	sub	sp, #88	@ 0x58
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2222      	movs	r2, #34	@ 0x22
 8006e48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d028      	beq.n	8006ea6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e58:	4a3e      	ldr	r2, [pc, #248]	@ (8006f54 <UART_Start_Receive_DMA+0x134>)
 8006e5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e60:	4a3d      	ldr	r2, [pc, #244]	@ (8006f58 <UART_Start_Receive_DMA+0x138>)
 8006e62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e68:	4a3c      	ldr	r2, [pc, #240]	@ (8006f5c <UART_Start_Receive_DMA+0x13c>)
 8006e6a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e70:	2200      	movs	r2, #0
 8006e72:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3324      	adds	r3, #36	@ 0x24
 8006e7e:	4619      	mov	r1, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e84:	461a      	mov	r2, r3
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	f7fb f8ee 	bl	8002068 <HAL_DMA_Start_IT>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2210      	movs	r2, #16
 8006e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e051      	b.n	8006f4a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d018      	beq.n	8006ee0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ec2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ece:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e6      	bne.n	8006eae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3308      	adds	r3, #8
 8006efe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f00:	637a      	str	r2, [r7, #52]	@ 0x34
 8006f02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e5      	bne.n	8006ee0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	613b      	str	r3, [r7, #16]
   return(result);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3308      	adds	r3, #8
 8006f32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f34:	623a      	str	r2, [r7, #32]
 8006f36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	69f9      	ldr	r1, [r7, #28]
 8006f3a:	6a3a      	ldr	r2, [r7, #32]
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e5      	bne.n	8006f14 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3758      	adds	r7, #88	@ 0x58
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	08007127 	.word	0x08007127
 8006f58:	0800724f 	.word	0x0800724f
 8006f5c:	0800728d 	.word	0x0800728d

08006f60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b089      	sub	sp, #36	@ 0x24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6979      	ldr	r1, [r7, #20]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	613b      	str	r3, [r7, #16]
   return(result);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e6      	bne.n	8006f68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006fa0:	bf00      	nop
 8006fa2:	3724      	adds	r7, #36	@ 0x24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b095      	sub	sp, #84	@ 0x54
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007008:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800700c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800701e:	2b01      	cmp	r3, #1
 8007020:	d118      	bne.n	8007054 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f023 0310 	bic.w	r3, r3, #16
 8007036:	647b      	str	r3, [r7, #68]	@ 0x44
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6979      	ldr	r1, [r7, #20]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	613b      	str	r3, [r7, #16]
   return(result);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e6      	bne.n	8007022 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007068:	bf00      	nop
 800706a:	3754      	adds	r7, #84	@ 0x54
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b090      	sub	sp, #64	@ 0x40
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007080:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800708a:	d037      	beq.n	80070fc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800708c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800708e:	2200      	movs	r2, #0
 8007090:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3308      	adds	r3, #8
 800709a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	623b      	str	r3, [r7, #32]
   return(result);
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3308      	adds	r3, #8
 80070b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80070b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80070de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e6:	61fb      	str	r3, [r7, #28]
 80070e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	69b9      	ldr	r1, [r7, #24]
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	617b      	str	r3, [r7, #20]
   return(result);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e6      	bne.n	80070c8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070fa:	e002      	b.n	8007102 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80070fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80070fe:	f7ff fa2b 	bl	8006558 <HAL_UART_TxCpltCallback>
}
 8007102:	bf00      	nop
 8007104:	3740      	adds	r7, #64	@ 0x40
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007116:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff fa27 	bl	800656c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b09c      	sub	sp, #112	@ 0x70
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800713c:	d071      	beq.n	8007222 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800713e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007140:	2200      	movs	r2, #0
 8007142:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007156:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800715a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800715c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007164:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007166:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800716a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e6      	bne.n	8007146 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718a:	f023 0301 	bic.w	r3, r3, #1
 800718e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3308      	adds	r3, #8
 8007196:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007198:	647a      	str	r2, [r7, #68]	@ 0x44
 800719a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800719e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3308      	adds	r3, #8
 80071b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	623b      	str	r3, [r7, #32]
   return(result);
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80071c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80071ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e5      	bne.n	80071ac <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e2:	2220      	movs	r2, #32
 80071e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d118      	bne.n	8007222 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f023 0310 	bic.w	r3, r3, #16
 8007204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	69b9      	ldr	r1, [r7, #24]
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	617b      	str	r3, [r7, #20]
   return(result);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e6      	bne.n	80071f0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007224:	2200      	movs	r2, #0
 8007226:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800722a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800722c:	2b01      	cmp	r3, #1
 800722e:	d107      	bne.n	8007240 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007232:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007236:	4619      	mov	r1, r3
 8007238:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800723a:	f7ff f9bf 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800723e:	e002      	b.n	8007246 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007240:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007242:	f7ff f99d 	bl	8006580 <HAL_UART_RxCpltCallback>
}
 8007246:	bf00      	nop
 8007248:	3770      	adds	r7, #112	@ 0x70
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007266:	2b01      	cmp	r3, #1
 8007268:	d109      	bne.n	800727e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	b29b      	uxth	r3, r3
 8007274:	4619      	mov	r1, r3
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7ff f9a0 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800727c:	e002      	b.n	8007284 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff f988 	bl	8006594 <HAL_UART_RxHalfCpltCallback>
}
 8007284:	bf00      	nop
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007298:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800729e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072b2:	2b80      	cmp	r3, #128	@ 0x80
 80072b4:	d109      	bne.n	80072ca <UART_DMAError+0x3e>
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b21      	cmp	r3, #33	@ 0x21
 80072ba:	d106      	bne.n	80072ca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80072c4:	6978      	ldr	r0, [r7, #20]
 80072c6:	f7ff fe4b 	bl	8006f60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d4:	2b40      	cmp	r3, #64	@ 0x40
 80072d6:	d109      	bne.n	80072ec <UART_DMAError+0x60>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b22      	cmp	r3, #34	@ 0x22
 80072dc:	d106      	bne.n	80072ec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80072e6:	6978      	ldr	r0, [r7, #20]
 80072e8:	f7ff fe60 	bl	8006fac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072f2:	f043 0210 	orr.w	r2, r3, #16
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072fc:	6978      	ldr	r0, [r7, #20]
 80072fe:	f7ff f953 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007302:	bf00      	nop
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff f93d 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b088      	sub	sp, #32
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	60bb      	str	r3, [r7, #8]
   return(result);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6979      	ldr	r1, [r7, #20]
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	613b      	str	r3, [r7, #16]
   return(result);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e6      	bne.n	800733e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff f8eb 	bl	8006558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007382:	bf00      	nop
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800738c:	b084      	sub	sp, #16
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	f107 001c 	add.w	r0, r7, #28
 800739a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800739e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d121      	bne.n	80073ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	4b21      	ldr	r3, [pc, #132]	@ (800743c <USB_CoreInit+0xb0>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d105      	bne.n	80073de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 fade 	bl	80089a0 <USB_CoreReset>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
 80073e8:	e010      	b.n	800740c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fad2 	bl	80089a0 <USB_CoreReset>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007404:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800740c:	7fbb      	ldrb	r3, [r7, #30]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d10b      	bne.n	800742a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f043 0206 	orr.w	r2, r3, #6
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f043 0220 	orr.w	r2, r3, #32
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007436:	b004      	add	sp, #16
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	ffbdffbf 	.word	0xffbdffbf

08007440 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d165      	bne.n	8007520 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4a41      	ldr	r2, [pc, #260]	@ (800755c <USB_SetTurnaroundTime+0x11c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d906      	bls.n	800746a <USB_SetTurnaroundTime+0x2a>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4a40      	ldr	r2, [pc, #256]	@ (8007560 <USB_SetTurnaroundTime+0x120>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d202      	bcs.n	800746a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007464:	230f      	movs	r3, #15
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	e062      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	4a3c      	ldr	r2, [pc, #240]	@ (8007560 <USB_SetTurnaroundTime+0x120>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d306      	bcc.n	8007480 <USB_SetTurnaroundTime+0x40>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	4a3b      	ldr	r2, [pc, #236]	@ (8007564 <USB_SetTurnaroundTime+0x124>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d202      	bcs.n	8007480 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800747a:	230e      	movs	r3, #14
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	e057      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4a38      	ldr	r2, [pc, #224]	@ (8007564 <USB_SetTurnaroundTime+0x124>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d306      	bcc.n	8007496 <USB_SetTurnaroundTime+0x56>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4a37      	ldr	r2, [pc, #220]	@ (8007568 <USB_SetTurnaroundTime+0x128>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d202      	bcs.n	8007496 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007490:	230d      	movs	r3, #13
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	e04c      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4a33      	ldr	r2, [pc, #204]	@ (8007568 <USB_SetTurnaroundTime+0x128>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d306      	bcc.n	80074ac <USB_SetTurnaroundTime+0x6c>
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4a32      	ldr	r2, [pc, #200]	@ (800756c <USB_SetTurnaroundTime+0x12c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d802      	bhi.n	80074ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80074a6:	230c      	movs	r3, #12
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	e041      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4a2f      	ldr	r2, [pc, #188]	@ (800756c <USB_SetTurnaroundTime+0x12c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d906      	bls.n	80074c2 <USB_SetTurnaroundTime+0x82>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007570 <USB_SetTurnaroundTime+0x130>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d802      	bhi.n	80074c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80074bc:	230b      	movs	r3, #11
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	e036      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007570 <USB_SetTurnaroundTime+0x130>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d906      	bls.n	80074d8 <USB_SetTurnaroundTime+0x98>
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	4a29      	ldr	r2, [pc, #164]	@ (8007574 <USB_SetTurnaroundTime+0x134>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d802      	bhi.n	80074d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80074d2:	230a      	movs	r3, #10
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	e02b      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4a26      	ldr	r2, [pc, #152]	@ (8007574 <USB_SetTurnaroundTime+0x134>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d906      	bls.n	80074ee <USB_SetTurnaroundTime+0xae>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4a25      	ldr	r2, [pc, #148]	@ (8007578 <USB_SetTurnaroundTime+0x138>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d202      	bcs.n	80074ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80074e8:	2309      	movs	r3, #9
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e020      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	4a21      	ldr	r2, [pc, #132]	@ (8007578 <USB_SetTurnaroundTime+0x138>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d306      	bcc.n	8007504 <USB_SetTurnaroundTime+0xc4>
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4a20      	ldr	r2, [pc, #128]	@ (800757c <USB_SetTurnaroundTime+0x13c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d802      	bhi.n	8007504 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80074fe:	2308      	movs	r3, #8
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	e015      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4a1d      	ldr	r2, [pc, #116]	@ (800757c <USB_SetTurnaroundTime+0x13c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d906      	bls.n	800751a <USB_SetTurnaroundTime+0xda>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4a1c      	ldr	r2, [pc, #112]	@ (8007580 <USB_SetTurnaroundTime+0x140>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d202      	bcs.n	800751a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007514:	2307      	movs	r3, #7
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	e00a      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800751a:	2306      	movs	r3, #6
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	e007      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007526:	2309      	movs	r3, #9
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	e001      	b.n	8007530 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800752c:	2309      	movs	r3, #9
 800752e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	029b      	lsls	r3, r3, #10
 8007544:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007548:	431a      	orrs	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	00d8acbf 	.word	0x00d8acbf
 8007560:	00e4e1c0 	.word	0x00e4e1c0
 8007564:	00f42400 	.word	0x00f42400
 8007568:	01067380 	.word	0x01067380
 800756c:	011a499f 	.word	0x011a499f
 8007570:	01312cff 	.word	0x01312cff
 8007574:	014ca43f 	.word	0x014ca43f
 8007578:	016e3600 	.word	0x016e3600
 800757c:	01a6ab1f 	.word	0x01a6ab1f
 8007580:	01e84800 	.word	0x01e84800

08007584 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f043 0201 	orr.w	r2, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f023 0201 	bic.w	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d115      	bne.n	8007616 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80075f6:	200a      	movs	r0, #10
 80075f8:	f7fa fb0a 	bl	8001c10 <HAL_Delay>
      ms += 10U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	330a      	adds	r3, #10
 8007600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 f93b 	bl	800887e <USB_GetMode>
 8007608:	4603      	mov	r3, r0
 800760a:	2b01      	cmp	r3, #1
 800760c:	d01e      	beq.n	800764c <USB_SetCurrentMode+0x84>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2bc7      	cmp	r3, #199	@ 0xc7
 8007612:	d9f0      	bls.n	80075f6 <USB_SetCurrentMode+0x2e>
 8007614:	e01a      	b.n	800764c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d115      	bne.n	8007648 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007628:	200a      	movs	r0, #10
 800762a:	f7fa faf1 	bl	8001c10 <HAL_Delay>
      ms += 10U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	330a      	adds	r3, #10
 8007632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f922 	bl	800887e <USB_GetMode>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <USB_SetCurrentMode+0x84>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2bc7      	cmp	r3, #199	@ 0xc7
 8007644:	d9f0      	bls.n	8007628 <USB_SetCurrentMode+0x60>
 8007646:	e001      	b.n	800764c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e005      	b.n	8007658 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007650:	d101      	bne.n	8007656 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e000      	b.n	8007658 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007660:	b084      	sub	sp, #16
 8007662:	b580      	push	{r7, lr}
 8007664:	b086      	sub	sp, #24
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800766e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800767a:	2300      	movs	r3, #0
 800767c:	613b      	str	r3, [r7, #16]
 800767e:	e009      	b.n	8007694 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	3340      	adds	r3, #64	@ 0x40
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	2200      	movs	r2, #0
 800768c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	3301      	adds	r3, #1
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b0e      	cmp	r3, #14
 8007698:	d9f2      	bls.n	8007680 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800769a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d11c      	bne.n	80076dc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b0:	f043 0302 	orr.w	r3, r3, #2
 80076b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e005      	b.n	80076e8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076ee:	461a      	mov	r2, r3
 80076f0:	2300      	movs	r3, #0
 80076f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d10d      	bne.n	8007718 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f968 	bl	80079dc <USB_SetDevSpeed>
 800770c:	e008      	b.n	8007720 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800770e:	2101      	movs	r1, #1
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f963 	bl	80079dc <USB_SetDevSpeed>
 8007716:	e003      	b.n	8007720 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007718:	2103      	movs	r1, #3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f95e 	bl	80079dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007720:	2110      	movs	r1, #16
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f8fa 	bl	800791c <USB_FlushTxFifo>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f924 	bl	8007980 <USB_FlushRxFifo>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007748:	461a      	mov	r2, r3
 800774a:	2300      	movs	r3, #0
 800774c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007754:	461a      	mov	r2, r3
 8007756:	2300      	movs	r3, #0
 8007758:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007760:	461a      	mov	r2, r3
 8007762:	2300      	movs	r3, #0
 8007764:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	e043      	b.n	80077f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800777e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007782:	d118      	bne.n	80077b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007796:	461a      	mov	r2, r3
 8007798:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800779c:	6013      	str	r3, [r2, #0]
 800779e:	e013      	b.n	80077c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ac:	461a      	mov	r2, r3
 80077ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	e008      	b.n	80077c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c2:	461a      	mov	r2, r3
 80077c4:	2300      	movs	r3, #0
 80077c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d4:	461a      	mov	r2, r3
 80077d6:	2300      	movs	r3, #0
 80077d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077e6:	461a      	mov	r2, r3
 80077e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80077ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	3301      	adds	r3, #1
 80077f2:	613b      	str	r3, [r7, #16]
 80077f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80077f8:	461a      	mov	r2, r3
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d3b5      	bcc.n	800776c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	e043      	b.n	800788e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800781c:	d118      	bne.n	8007850 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007830:	461a      	mov	r2, r3
 8007832:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	e013      	b.n	8007862 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007846:	461a      	mov	r2, r3
 8007848:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	e008      	b.n	8007862 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800785c:	461a      	mov	r2, r3
 800785e:	2300      	movs	r3, #0
 8007860:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786e:	461a      	mov	r2, r3
 8007870:	2300      	movs	r3, #0
 8007872:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007880:	461a      	mov	r2, r3
 8007882:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3301      	adds	r3, #1
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007892:	461a      	mov	r2, r3
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	4293      	cmp	r3, r2
 8007898:	d3b5      	bcc.n	8007806 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80078ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d105      	bne.n	80078d0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	f043 0210 	orr.w	r2, r3, #16
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007914 <USB_DevInit+0x2b4>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f043 0208 	orr.w	r2, r3, #8
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d105      	bne.n	8007904 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <USB_DevInit+0x2b8>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007910:	b004      	add	sp, #16
 8007912:	4770      	bx	lr
 8007914:	803c3800 	.word	0x803c3800
 8007918:	40000004 	.word	0x40000004

0800791c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3301      	adds	r3, #1
 800792e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007936:	d901      	bls.n	800793c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e01b      	b.n	8007974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	daf2      	bge.n	800792a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	019b      	lsls	r3, r3, #6
 800794c:	f043 0220 	orr.w	r2, r3, #32
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3301      	adds	r3, #1
 8007958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007960:	d901      	bls.n	8007966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e006      	b.n	8007974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b20      	cmp	r3, #32
 8007970:	d0f0      	beq.n	8007954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3301      	adds	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007998:	d901      	bls.n	800799e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e018      	b.n	80079d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	daf2      	bge.n	800798c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2210      	movs	r2, #16
 80079ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3301      	adds	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079bc:	d901      	bls.n	80079c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e006      	b.n	80079d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f003 0310 	and.w	r3, r3, #16
 80079ca:	2b10      	cmp	r3, #16
 80079cc:	d0f0      	beq.n	80079b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079fc:	4313      	orrs	r3, r2
 80079fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b087      	sub	sp, #28
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f003 0306 	and.w	r3, r3, #6
 8007a26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]
 8007a32:	e00a      	b.n	8007a4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d002      	beq.n	8007a40 <USB_GetDevSpeed+0x32>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b06      	cmp	r3, #6
 8007a3e:	d102      	bne.n	8007a46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007a40:	2302      	movs	r3, #2
 8007a42:	75fb      	strb	r3, [r7, #23]
 8007a44:	e001      	b.n	8007a4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007a46:	230f      	movs	r3, #15
 8007a48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	785b      	ldrb	r3, [r3, #1]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d139      	bne.n	8007ae8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a7a:	69da      	ldr	r2, [r3, #28]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	2101      	movs	r1, #1
 8007a86:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	68f9      	ldr	r1, [r7, #12]
 8007a8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a92:	4313      	orrs	r3, r2
 8007a94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d153      	bne.n	8007b54 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	791b      	ldrb	r3, [r3, #4]
 8007ac6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ac8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	059b      	lsls	r3, r3, #22
 8007ace:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	0159      	lsls	r1, r3, #5
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	440b      	add	r3, r1
 8007ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4b20      	ldr	r3, [pc, #128]	@ (8007b64 <USB_ActivateEndpoint+0x10c>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	600b      	str	r3, [r1, #0]
 8007ae6:	e035      	b.n	8007b54 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aee:	69da      	ldr	r2, [r3, #28]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	f003 030f 	and.w	r3, r3, #15
 8007af8:	2101      	movs	r1, #1
 8007afa:	fa01 f303 	lsl.w	r3, r1, r3
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	68f9      	ldr	r1, [r7, #12]
 8007b02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b06:	4313      	orrs	r3, r2
 8007b08:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d119      	bne.n	8007b54 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	791b      	ldrb	r3, [r3, #4]
 8007b3a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	0159      	lsls	r1, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	440b      	add	r3, r1
 8007b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4b05      	ldr	r3, [pc, #20]	@ (8007b64 <USB_ActivateEndpoint+0x10c>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	10008000 	.word	0x10008000

08007b68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d161      	bne.n	8007c48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b9a:	d11f      	bne.n	8007bdc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	0151      	lsls	r1, r2, #5
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	440a      	add	r2, r1
 8007bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007bba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	2101      	movs	r1, #1
 8007bee:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	43db      	mvns	r3, r3
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c06:	69da      	ldr	r2, [r3, #28]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	2101      	movs	r1, #1
 8007c12:	fa01 f303 	lsl.w	r3, r1, r3
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c20:	4013      	ands	r3, r2
 8007c22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	0159      	lsls	r1, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	440b      	add	r3, r1
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4b35      	ldr	r3, [pc, #212]	@ (8007d18 <USB_DeactivateEndpoint+0x1b0>)
 8007c42:	4013      	ands	r3, r2
 8007c44:	600b      	str	r3, [r1, #0]
 8007c46:	e060      	b.n	8007d0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c5e:	d11f      	bne.n	8007ca0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb6:	041b      	lsls	r3, r3, #16
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	68f9      	ldr	r1, [r7, #12]
 8007cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	0159      	lsls	r1, r3, #5
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	440b      	add	r3, r1
 8007cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d02:	4619      	mov	r1, r3
 8007d04:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <USB_DeactivateEndpoint+0x1b4>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	ec337800 	.word	0xec337800
 8007d1c:	eff37800 	.word	0xeff37800

08007d20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08a      	sub	sp, #40	@ 0x28
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	f040 8181 	bne.w	8008044 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d132      	bne.n	8007db0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	0159      	lsls	r1, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	440b      	add	r3, r1
 8007d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d64:	4619      	mov	r1, r3
 8007d66:	4ba5      	ldr	r3, [pc, #660]	@ (8007ffc <USB_EPStartXfer+0x2dc>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d98:	691a      	ldr	r2, [r3, #16]
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	0159      	lsls	r1, r3, #5
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	440b      	add	r3, r1
 8007da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da6:	4619      	mov	r1, r3
 8007da8:	4b95      	ldr	r3, [pc, #596]	@ (8008000 <USB_EPStartXfer+0x2e0>)
 8007daa:	4013      	ands	r3, r2
 8007dac:	610b      	str	r3, [r1, #16]
 8007dae:	e092      	b.n	8007ed6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dbc:	691a      	ldr	r2, [r3, #16]
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	0159      	lsls	r1, r3, #5
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	440b      	add	r3, r1
 8007dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8008000 <USB_EPStartXfer+0x2e0>)
 8007dce:	4013      	ands	r3, r2
 8007dd0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	0159      	lsls	r1, r3, #5
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	440b      	add	r3, r1
 8007de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dec:	4619      	mov	r1, r3
 8007dee:	4b83      	ldr	r3, [pc, #524]	@ (8007ffc <USB_EPStartXfer+0x2dc>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d11a      	bne.n	8007e30 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	691a      	ldr	r2, [r3, #16]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d903      	bls.n	8007e0e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e2c:	6113      	str	r3, [r2, #16]
 8007e2e:	e01b      	b.n	8007e68 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	6919      	ldr	r1, [r3, #16]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	440b      	add	r3, r1
 8007e48:	1e59      	subs	r1, r3, #1
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e52:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007e54:	4b6b      	ldr	r3, [pc, #428]	@ (8008004 <USB_EPStartXfer+0x2e4>)
 8007e56:	400b      	ands	r3, r1
 8007e58:	69b9      	ldr	r1, [r7, #24]
 8007e5a:	0148      	lsls	r0, r1, #5
 8007e5c:	69f9      	ldr	r1, [r7, #28]
 8007e5e:	4401      	add	r1, r0
 8007e60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007e64:	4313      	orrs	r3, r2
 8007e66:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e74:	691a      	ldr	r2, [r3, #16]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e7e:	69b9      	ldr	r1, [r7, #24]
 8007e80:	0148      	lsls	r0, r1, #5
 8007e82:	69f9      	ldr	r1, [r7, #28]
 8007e84:	4401      	add	r1, r0
 8007e86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	791b      	ldrb	r3, [r3, #4]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d11f      	bne.n	8007ed6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eb0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007eb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	0151      	lsls	r1, r2, #5
 8007ec8:	69fa      	ldr	r2, [r7, #28]
 8007eca:	440a      	add	r2, r1
 8007ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ed0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ed4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d14b      	bne.n	8007f74 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d009      	beq.n	8007ef8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	791b      	ldrb	r3, [r3, #4]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d128      	bne.n	8007f52 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d110      	bne.n	8007f32 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	0151      	lsls	r1, r2, #5
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	440a      	add	r2, r1
 8007f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	e00f      	b.n	8007f52 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	0151      	lsls	r1, r2, #5
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	440a      	add	r2, r1
 8007f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f6c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	e16a      	b.n	800824a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	0151      	lsls	r1, r2, #5
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	440a      	add	r2, r1
 8007f8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f8e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007f92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	791b      	ldrb	r3, [r3, #4]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d015      	beq.n	8007fc8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 8152 	beq.w	800824a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	69f9      	ldr	r1, [r7, #28]
 8007fbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	634b      	str	r3, [r1, #52]	@ 0x34
 8007fc6:	e140      	b.n	800824a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d117      	bne.n	8008008 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ff2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	e016      	b.n	8008028 <USB_EPStartXfer+0x308>
 8007ffa:	bf00      	nop
 8007ffc:	e007ffff 	.word	0xe007ffff
 8008000:	fff80000 	.word	0xfff80000
 8008004:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008026:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	68d9      	ldr	r1, [r3, #12]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	781a      	ldrb	r2, [r3, #0]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	b298      	uxth	r0, r3
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	4603      	mov	r3, r0
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 f9b9 	bl	80083b4 <USB_WritePacket>
 8008042:	e102      	b.n	800824a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008050:	691a      	ldr	r2, [r3, #16]
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	0159      	lsls	r1, r3, #5
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	440b      	add	r3, r1
 800805a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800805e:	4619      	mov	r1, r3
 8008060:	4b7c      	ldr	r3, [pc, #496]	@ (8008254 <USB_EPStartXfer+0x534>)
 8008062:	4013      	ands	r3, r2
 8008064:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	0159      	lsls	r1, r3, #5
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	440b      	add	r3, r1
 800807c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008080:	4619      	mov	r1, r3
 8008082:	4b75      	ldr	r3, [pc, #468]	@ (8008258 <USB_EPStartXfer+0x538>)
 8008084:	4013      	ands	r3, r2
 8008086:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d12f      	bne.n	80080ee <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080bc:	69b9      	ldr	r1, [r7, #24]
 80080be:	0148      	lsls	r0, r1, #5
 80080c0:	69f9      	ldr	r1, [r7, #28]
 80080c2:	4401      	add	r1, r0
 80080c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080c8:	4313      	orrs	r3, r2
 80080ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080ea:	6113      	str	r3, [r2, #16]
 80080ec:	e05f      	b.n	80081ae <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d123      	bne.n	800813e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800810c:	69b9      	ldr	r1, [r7, #24]
 800810e:	0148      	lsls	r0, r1, #5
 8008110:	69f9      	ldr	r1, [r7, #28]
 8008112:	4401      	add	r1, r0
 8008114:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008118:	4313      	orrs	r3, r2
 800811a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	0151      	lsls	r1, r2, #5
 800812e:	69fa      	ldr	r2, [r7, #28]
 8008130:	440a      	add	r2, r1
 8008132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008136:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800813a:	6113      	str	r3, [r2, #16]
 800813c:	e037      	b.n	80081ae <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	4413      	add	r3, r2
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008152:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	8afa      	ldrh	r2, [r7, #22]
 800815a:	fb03 f202 	mul.w	r2, r3, r2
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	8afb      	ldrh	r3, [r7, #22]
 8008172:	04d9      	lsls	r1, r3, #19
 8008174:	4b39      	ldr	r3, [pc, #228]	@ (800825c <USB_EPStartXfer+0x53c>)
 8008176:	400b      	ands	r3, r1
 8008178:	69b9      	ldr	r1, [r7, #24]
 800817a:	0148      	lsls	r0, r1, #5
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	4401      	add	r1, r0
 8008180:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008184:	4313      	orrs	r3, r2
 8008186:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800819e:	69b9      	ldr	r1, [r7, #24]
 80081a0:	0148      	lsls	r0, r1, #5
 80081a2:	69f9      	ldr	r1, [r7, #28]
 80081a4:	4401      	add	r1, r0
 80081a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081aa:	4313      	orrs	r3, r2
 80081ac:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d10d      	bne.n	80081d0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	68d9      	ldr	r1, [r3, #12]
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081cc:	460a      	mov	r2, r1
 80081ce:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	791b      	ldrb	r3, [r3, #4]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d128      	bne.n	800822a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d110      	bne.n	800820a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008202:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	e00f      	b.n	800822a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	0151      	lsls	r1, r2, #5
 800821c:	69fa      	ldr	r2, [r7, #28]
 800821e:	440a      	add	r2, r1
 8008220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008228:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	0151      	lsls	r1, r2, #5
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	440a      	add	r2, r1
 8008240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008244:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008248:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	fff80000 	.word	0xfff80000
 8008258:	e007ffff 	.word	0xe007ffff
 800825c:	1ff80000 	.word	0x1ff80000

08008260 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d14a      	bne.n	8008314 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008296:	f040 8086 	bne.w	80083a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	7812      	ldrb	r2, [r2, #0]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80082bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	7812      	ldrb	r2, [r2, #0]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3301      	adds	r3, #1
 80082e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d902      	bls.n	80082f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	75fb      	strb	r3, [r7, #23]
          break;
 80082f6:	e056      	b.n	80083a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800830c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008310:	d0e7      	beq.n	80082e2 <USB_EPStopXfer+0x82>
 8008312:	e048      	b.n	80083a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008328:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800832c:	d13b      	bne.n	80083a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	7812      	ldrb	r2, [r2, #0]
 8008342:	0151      	lsls	r1, r2, #5
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	440a      	add	r2, r1
 8008348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800834c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008350:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	7812      	ldrb	r2, [r2, #0]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	440a      	add	r2, r1
 800836c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008370:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008374:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3301      	adds	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008382:	4293      	cmp	r3, r2
 8008384:	d902      	bls.n	800838c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	75fb      	strb	r3, [r7, #23]
          break;
 800838a:	e00c      	b.n	80083a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083a4:	d0e7      	beq.n	8008376 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b089      	sub	sp, #36	@ 0x24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4611      	mov	r1, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	460b      	mov	r3, r1
 80083c4:	71fb      	strb	r3, [r7, #7]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80083d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d123      	bne.n	8008422 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083da:	88bb      	ldrh	r3, [r7, #4]
 80083dc:	3303      	adds	r3, #3
 80083de:	089b      	lsrs	r3, r3, #2
 80083e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083e2:	2300      	movs	r3, #0
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	e018      	b.n	800841a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	031a      	lsls	r2, r3, #12
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083f4:	461a      	mov	r2, r3
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	3301      	adds	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	3301      	adds	r3, #1
 8008406:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	3301      	adds	r3, #1
 800840c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	3301      	adds	r3, #1
 8008412:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	3301      	adds	r3, #1
 8008418:	61bb      	str	r3, [r7, #24]
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	429a      	cmp	r2, r3
 8008420:	d3e2      	bcc.n	80083e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3724      	adds	r7, #36	@ 0x24
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008430:	b480      	push	{r7}
 8008432:	b08b      	sub	sp, #44	@ 0x2c
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	4613      	mov	r3, r2
 800843c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008446:	88fb      	ldrh	r3, [r7, #6]
 8008448:	089b      	lsrs	r3, r3, #2
 800844a:	b29b      	uxth	r3, r3
 800844c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800844e:	88fb      	ldrh	r3, [r7, #6]
 8008450:	f003 0303 	and.w	r3, r3, #3
 8008454:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008456:	2300      	movs	r3, #0
 8008458:	623b      	str	r3, [r7, #32]
 800845a:	e014      	b.n	8008486 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	601a      	str	r2, [r3, #0]
    pDest++;
 8008468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846a:	3301      	adds	r3, #1
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	3301      	adds	r3, #1
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	3301      	adds	r3, #1
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	3301      	adds	r3, #1
 800847e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	3301      	adds	r3, #1
 8008484:	623b      	str	r3, [r7, #32]
 8008486:	6a3a      	ldr	r2, [r7, #32]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	429a      	cmp	r2, r3
 800848c:	d3e6      	bcc.n	800845c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800848e:	8bfb      	ldrh	r3, [r7, #30]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01e      	beq.n	80084d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800849e:	461a      	mov	r2, r3
 80084a0:	f107 0310 	add.w	r3, r7, #16
 80084a4:	6812      	ldr	r2, [r2, #0]
 80084a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	701a      	strb	r2, [r3, #0]
      i++;
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	3301      	adds	r3, #1
 80084be:	623b      	str	r3, [r7, #32]
      pDest++;
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	3301      	adds	r3, #1
 80084c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80084c6:	8bfb      	ldrh	r3, [r7, #30]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80084cc:	8bfb      	ldrh	r3, [r7, #30]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1ea      	bne.n	80084a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	372c      	adds	r7, #44	@ 0x2c
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d12c      	bne.n	8008556 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	db12      	blt.n	8008534 <USB_EPSetStall+0x54>
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00f      	beq.n	8008534 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	0151      	lsls	r1, r2, #5
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	440a      	add	r2, r1
 800852a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800852e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008532:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	440a      	add	r2, r1
 800854a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800854e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	e02b      	b.n	80085ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	db12      	blt.n	800858e <USB_EPSetStall+0xae>
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00f      	beq.n	800858e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	440a      	add	r2, r1
 8008584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008588:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800858c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80085ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d128      	bne.n	800862a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	0151      	lsls	r1, r2, #5
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	440a      	add	r2, r1
 80085ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	791b      	ldrb	r3, [r3, #4]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d003      	beq.n	8008608 <USB_EPClearStall+0x4c>
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	791b      	ldrb	r3, [r3, #4]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d138      	bne.n	800867a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	0151      	lsls	r1, r2, #5
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	440a      	add	r2, r1
 800861e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	e027      	b.n	800867a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	0151      	lsls	r1, r2, #5
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	440a      	add	r2, r1
 8008640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008644:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008648:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	791b      	ldrb	r3, [r3, #4]
 800864e:	2b03      	cmp	r3, #3
 8008650:	d003      	beq.n	800865a <USB_EPClearStall+0x9e>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	791b      	ldrb	r3, [r3, #4]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d10f      	bne.n	800867a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	0151      	lsls	r1, r2, #5
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	440a      	add	r2, r1
 8008670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008678:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80086aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80086bc:	68f9      	ldr	r1, [r7, #12]
 80086be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086c2:	4313      	orrs	r3, r2
 80086c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086ee:	f023 0303 	bic.w	r3, r3, #3
 80086f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008702:	f023 0302 	bic.w	r3, r3, #2
 8008706:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008716:	b480      	push	{r7}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008730:	f023 0303 	bic.w	r3, r3, #3
 8008734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008744:	f043 0302 	orr.w	r3, r3, #2
 8008748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4013      	ands	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008770:	68fb      	ldr	r3, [r7, #12]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	4013      	ands	r3, r2
 80087a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	0c1b      	lsrs	r3, r3, #16
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ce:	69db      	ldr	r3, [r3, #28]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	4013      	ands	r3, r2
 80087d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	b29b      	uxth	r3, r3
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b085      	sub	sp, #20
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	4013      	ands	r3, r2
 8008812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008814:	68bb      	ldr	r3, [r7, #8]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008822:	b480      	push	{r7}
 8008824:	b087      	sub	sp, #28
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008844:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	f003 030f 	and.w	r3, r3, #15
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	fa22 f303 	lsr.w	r3, r2, r3
 8008852:	01db      	lsls	r3, r3, #7
 8008854:	b2db      	uxtb	r3, r3
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800885c:	78fb      	ldrb	r3, [r7, #3]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	4013      	ands	r3, r2
 800886e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008870:	68bb      	ldr	r3, [r7, #8]
}
 8008872:	4618      	mov	r0, r3
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f003 0301 	and.w	r3, r3, #1
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
	...

0800889c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b6:	4619      	mov	r1, r3
 80088b8:	4b09      	ldr	r3, [pc, #36]	@ (80088e0 <USB_ActivateSetup+0x44>)
 80088ba:	4013      	ands	r3, r2
 80088bc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	fffff800 	.word	0xfffff800

080088e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	460b      	mov	r3, r1
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	333c      	adds	r3, #60	@ 0x3c
 80088fa:	3304      	adds	r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	4a26      	ldr	r2, [pc, #152]	@ (800899c <USB_EP0_OutStart+0xb8>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d90a      	bls.n	800891e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008918:	d101      	bne.n	800891e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	e037      	b.n	800898e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008924:	461a      	mov	r2, r3
 8008926:	2300      	movs	r3, #0
 8008928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008938:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800893c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800894c:	f043 0318 	orr.w	r3, r3, #24
 8008950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008960:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008964:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008966:	7afb      	ldrb	r3, [r7, #11]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d10f      	bne.n	800898c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008972:	461a      	mov	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008986:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800898a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	4f54300a 	.word	0x4f54300a

080089a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3301      	adds	r3, #1
 80089b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089b8:	d901      	bls.n	80089be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e01b      	b.n	80089f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	daf2      	bge.n	80089ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f043 0201 	orr.w	r2, r3, #1
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3301      	adds	r3, #1
 80089da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089e2:	d901      	bls.n	80089e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e006      	b.n	80089f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d0f0      	beq.n	80089d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a10:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008a14:	f012 fb08 	bl	801b028 <malloc>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d109      	bne.n	8008a36 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	32b0      	adds	r2, #176	@ 0xb0
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a32:	2302      	movs	r3, #2
 8008a34:	e0d4      	b.n	8008be0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008a36:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f012 fe79 	bl	801b734 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	32b0      	adds	r2, #176	@ 0xb0
 8008a4c:	68f9      	ldr	r1, [r7, #12]
 8008a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	32b0      	adds	r2, #176	@ 0xb0
 8008a5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	7c1b      	ldrb	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d138      	bne.n	8008ae0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8008be8 <USBD_CDC_Init+0x1e4>)
 8008a70:	7819      	ldrb	r1, [r3, #0]
 8008a72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a76:	2202      	movs	r2, #2
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f005 f95c 	bl	800dd36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8008be8 <USBD_CDC_Init+0x1e4>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	f003 020f 	and.w	r2, r3, #15
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	3324      	adds	r3, #36	@ 0x24
 8008a94:	2201      	movs	r2, #1
 8008a96:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a98:	4b54      	ldr	r3, [pc, #336]	@ (8008bec <USBD_CDC_Init+0x1e8>)
 8008a9a:	7819      	ldrb	r1, [r3, #0]
 8008a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f005 f947 	bl	800dd36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008aa8:	4b50      	ldr	r3, [pc, #320]	@ (8008bec <USBD_CDC_Init+0x1e8>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	f003 020f 	and.w	r2, r3, #15
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8008bf0 <USBD_CDC_Init+0x1ec>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	f003 020f 	and.w	r2, r3, #15
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3326      	adds	r3, #38	@ 0x26
 8008ada:	2210      	movs	r2, #16
 8008adc:	801a      	strh	r2, [r3, #0]
 8008ade:	e035      	b.n	8008b4c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008ae0:	4b41      	ldr	r3, [pc, #260]	@ (8008be8 <USBD_CDC_Init+0x1e4>)
 8008ae2:	7819      	ldrb	r1, [r3, #0]
 8008ae4:	2340      	movs	r3, #64	@ 0x40
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f005 f924 	bl	800dd36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008aee:	4b3e      	ldr	r3, [pc, #248]	@ (8008be8 <USBD_CDC_Init+0x1e4>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	f003 020f 	and.w	r2, r3, #15
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	3324      	adds	r3, #36	@ 0x24
 8008b04:	2201      	movs	r2, #1
 8008b06:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b08:	4b38      	ldr	r3, [pc, #224]	@ (8008bec <USBD_CDC_Init+0x1e8>)
 8008b0a:	7819      	ldrb	r1, [r3, #0]
 8008b0c:	2340      	movs	r3, #64	@ 0x40
 8008b0e:	2202      	movs	r2, #2
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f005 f910 	bl	800dd36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b16:	4b35      	ldr	r3, [pc, #212]	@ (8008bec <USBD_CDC_Init+0x1e8>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	f003 020f 	and.w	r2, r3, #15
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b2e:	2201      	movs	r2, #1
 8008b30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008b32:	4b2f      	ldr	r3, [pc, #188]	@ (8008bf0 <USBD_CDC_Init+0x1ec>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	f003 020f 	and.w	r2, r3, #15
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	3326      	adds	r3, #38	@ 0x26
 8008b48:	2210      	movs	r2, #16
 8008b4a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b4c:	4b28      	ldr	r3, [pc, #160]	@ (8008bf0 <USBD_CDC_Init+0x1ec>)
 8008b4e:	7819      	ldrb	r1, [r3, #0]
 8008b50:	2308      	movs	r3, #8
 8008b52:	2203      	movs	r2, #3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f005 f8ee 	bl	800dd36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008b5a:	4b25      	ldr	r3, [pc, #148]	@ (8008bf0 <USBD_CDC_Init+0x1ec>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	f003 020f 	and.w	r2, r3, #15
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	3324      	adds	r3, #36	@ 0x24
 8008b70:	2201      	movs	r2, #1
 8008b72:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	33b0      	adds	r3, #176	@ 0xb0
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008baa:	2302      	movs	r3, #2
 8008bac:	e018      	b.n	8008be0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7c1b      	ldrb	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10a      	bne.n	8008bcc <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bec <USBD_CDC_Init+0x1e8>)
 8008bb8:	7819      	ldrb	r1, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f005 f9a5 	bl	800df14 <USBD_LL_PrepareReceive>
 8008bca:	e008      	b.n	8008bde <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bcc:	4b07      	ldr	r3, [pc, #28]	@ (8008bec <USBD_CDC_Init+0x1e8>)
 8008bce:	7819      	ldrb	r1, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bd6:	2340      	movs	r3, #64	@ 0x40
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f005 f99b 	bl	800df14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20000097 	.word	0x20000097
 8008bec:	20000098 	.word	0x20000098
 8008bf0:	20000099 	.word	0x20000099

08008bf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008c00:	4b3a      	ldr	r3, [pc, #232]	@ (8008cec <USBD_CDC_DeInit+0xf8>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f005 f8bb 	bl	800dd82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008c0c:	4b37      	ldr	r3, [pc, #220]	@ (8008cec <USBD_CDC_DeInit+0xf8>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	f003 020f 	and.w	r2, r3, #15
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	3324      	adds	r3, #36	@ 0x24
 8008c22:	2200      	movs	r2, #0
 8008c24:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008c26:	4b32      	ldr	r3, [pc, #200]	@ (8008cf0 <USBD_CDC_DeInit+0xfc>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f005 f8a8 	bl	800dd82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008c32:	4b2f      	ldr	r3, [pc, #188]	@ (8008cf0 <USBD_CDC_DeInit+0xfc>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	f003 020f 	and.w	r2, r3, #15
 8008c3a:	6879      	ldr	r1, [r7, #4]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008c4e:	4b29      	ldr	r3, [pc, #164]	@ (8008cf4 <USBD_CDC_DeInit+0x100>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f005 f894 	bl	800dd82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008c5a:	4b26      	ldr	r3, [pc, #152]	@ (8008cf4 <USBD_CDC_DeInit+0x100>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	f003 020f 	and.w	r2, r3, #15
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	3324      	adds	r3, #36	@ 0x24
 8008c70:	2200      	movs	r2, #0
 8008c72:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008c74:	4b1f      	ldr	r3, [pc, #124]	@ (8008cf4 <USBD_CDC_DeInit+0x100>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	f003 020f 	and.w	r2, r3, #15
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	3326      	adds	r3, #38	@ 0x26
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	32b0      	adds	r2, #176	@ 0xb0
 8008c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01f      	beq.n	8008ce0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	33b0      	adds	r3, #176	@ 0xb0
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	32b0      	adds	r2, #176	@ 0xb0
 8008cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f012 f9b8 	bl	801b038 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	32b0      	adds	r2, #176	@ 0xb0
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000097 	.word	0x20000097
 8008cf0:	20000098 	.word	0x20000098
 8008cf4:	20000099 	.word	0x20000099

08008cf8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	32b0      	adds	r2, #176	@ 0xb0
 8008d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e0bf      	b.n	8008ea8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d050      	beq.n	8008dd6 <USBD_CDC_Setup+0xde>
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	f040 80af 	bne.w	8008e98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	88db      	ldrh	r3, [r3, #6]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d03a      	beq.n	8008db8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b25b      	sxtb	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	da1b      	bge.n	8008d84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	33b0      	adds	r3, #176	@ 0xb0
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008d62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	88d2      	ldrh	r2, [r2, #6]
 8008d68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	88db      	ldrh	r3, [r3, #6]
 8008d6e:	2b07      	cmp	r3, #7
 8008d70:	bf28      	it	cs
 8008d72:	2307      	movcs	r3, #7
 8008d74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	89fa      	ldrh	r2, [r7, #14]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fd7d 	bl	800a87c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008d82:	e090      	b.n	8008ea6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	785a      	ldrb	r2, [r3, #1]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	88db      	ldrh	r3, [r3, #6]
 8008d92:	2b3f      	cmp	r3, #63	@ 0x3f
 8008d94:	d803      	bhi.n	8008d9e <USBD_CDC_Setup+0xa6>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	88db      	ldrh	r3, [r3, #6]
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	e000      	b.n	8008da0 <USBD_CDC_Setup+0xa8>
 8008d9e:	2240      	movs	r2, #64	@ 0x40
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008da6:	6939      	ldr	r1, [r7, #16]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008dae:	461a      	mov	r2, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 fd8f 	bl	800a8d4 <USBD_CtlPrepareRx>
      break;
 8008db6:	e076      	b.n	8008ea6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	33b0      	adds	r3, #176	@ 0xb0
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	7850      	ldrb	r0, [r2, #1]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	4798      	blx	r3
      break;
 8008dd4:	e067      	b.n	8008ea6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	2b0b      	cmp	r3, #11
 8008ddc:	d851      	bhi.n	8008e82 <USBD_CDC_Setup+0x18a>
 8008dde:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <USBD_CDC_Setup+0xec>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008e15 	.word	0x08008e15
 8008de8:	08008e91 	.word	0x08008e91
 8008dec:	08008e83 	.word	0x08008e83
 8008df0:	08008e83 	.word	0x08008e83
 8008df4:	08008e83 	.word	0x08008e83
 8008df8:	08008e83 	.word	0x08008e83
 8008dfc:	08008e83 	.word	0x08008e83
 8008e00:	08008e83 	.word	0x08008e83
 8008e04:	08008e83 	.word	0x08008e83
 8008e08:	08008e83 	.word	0x08008e83
 8008e0c:	08008e3f 	.word	0x08008e3f
 8008e10:	08008e69 	.word	0x08008e69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d107      	bne.n	8008e30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e20:	f107 030a 	add.w	r3, r7, #10
 8008e24:	2202      	movs	r2, #2
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 fd27 	bl	800a87c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e2e:	e032      	b.n	8008e96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fca5 	bl	800a782 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e3c:	e02b      	b.n	8008e96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d107      	bne.n	8008e5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e4a:	f107 030d 	add.w	r3, r7, #13
 8008e4e:	2201      	movs	r2, #1
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 fd12 	bl	800a87c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e58:	e01d      	b.n	8008e96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 fc90 	bl	800a782 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e62:	2303      	movs	r3, #3
 8008e64:	75fb      	strb	r3, [r7, #23]
          break;
 8008e66:	e016      	b.n	8008e96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d00f      	beq.n	8008e94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f001 fc83 	bl	800a782 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e80:	e008      	b.n	8008e94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f001 fc7c 	bl	800a782 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e8e:	e002      	b.n	8008e96 <USBD_CDC_Setup+0x19e>
          break;
 8008e90:	bf00      	nop
 8008e92:	e008      	b.n	8008ea6 <USBD_CDC_Setup+0x1ae>
          break;
 8008e94:	bf00      	nop
      }
      break;
 8008e96:	e006      	b.n	8008ea6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 fc71 	bl	800a782 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ec2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	32b0      	adds	r2, #176	@ 0xb0
 8008ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e065      	b.n	8008fa6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	32b0      	adds	r2, #176	@ 0xb0
 8008ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008eea:	78fb      	ldrb	r3, [r7, #3]
 8008eec:	f003 020f 	and.w	r2, r3, #15
 8008ef0:	6879      	ldr	r1, [r7, #4]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	440b      	add	r3, r1
 8008efc:	3318      	adds	r3, #24
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d02f      	beq.n	8008f64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	f003 020f 	and.w	r2, r3, #15
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	3318      	adds	r3, #24
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	f003 010f 	and.w	r1, r3, #15
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	460b      	mov	r3, r1
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	440b      	add	r3, r1
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4403      	add	r3, r0
 8008f2c:	331c      	adds	r3, #28
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f34:	fb01 f303 	mul.w	r3, r1, r3
 8008f38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d112      	bne.n	8008f64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	f003 020f 	and.w	r2, r3, #15
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	440b      	add	r3, r1
 8008f50:	3318      	adds	r3, #24
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f56:	78f9      	ldrb	r1, [r7, #3]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f004 ffb8 	bl	800ded2 <USBD_LL_Transmit>
 8008f62:	e01f      	b.n	8008fa4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	33b0      	adds	r3, #176	@ 0xb0
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d010      	beq.n	8008fa4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	33b0      	adds	r3, #176	@ 0xb0
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	32b0      	adds	r2, #176	@ 0xb0
 8008fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	32b0      	adds	r2, #176	@ 0xb0
 8008fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e01a      	b.n	8009016 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f004 ffb6 	bl	800df56 <USBD_LL_GetRxDataSize>
 8008fea:	4602      	mov	r2, r0
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	33b0      	adds	r3, #176	@ 0xb0
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009010:	4611      	mov	r1, r2
 8009012:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	32b0      	adds	r2, #176	@ 0xb0
 8009030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009034:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	e024      	b.n	800908a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	33b0      	adds	r3, #176	@ 0xb0
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d019      	beq.n	8009088 <USBD_CDC_EP0_RxReady+0x6a>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800905a:	2bff      	cmp	r3, #255	@ 0xff
 800905c:	d014      	beq.n	8009088 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	33b0      	adds	r3, #176	@ 0xb0
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009076:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800907e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	22ff      	movs	r2, #255	@ 0xff
 8009084:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800909c:	2182      	movs	r1, #130	@ 0x82
 800909e:	4818      	ldr	r0, [pc, #96]	@ (8009100 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80090a0:	f000 fd0f 	bl	8009ac2 <USBD_GetEpDesc>
 80090a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090a6:	2101      	movs	r1, #1
 80090a8:	4815      	ldr	r0, [pc, #84]	@ (8009100 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80090aa:	f000 fd0a 	bl	8009ac2 <USBD_GetEpDesc>
 80090ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090b0:	2181      	movs	r1, #129	@ 0x81
 80090b2:	4813      	ldr	r0, [pc, #76]	@ (8009100 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80090b4:	f000 fd05 	bl	8009ac2 <USBD_GetEpDesc>
 80090b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2210      	movs	r2, #16
 80090c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d006      	beq.n	80090da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090d4:	711a      	strb	r2, [r3, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d006      	beq.n	80090ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090e8:	711a      	strb	r2, [r3, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2243      	movs	r2, #67	@ 0x43
 80090f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090f4:	4b02      	ldr	r3, [pc, #8]	@ (8009100 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000054 	.word	0x20000054

08009104 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800910c:	2182      	movs	r1, #130	@ 0x82
 800910e:	4818      	ldr	r0, [pc, #96]	@ (8009170 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009110:	f000 fcd7 	bl	8009ac2 <USBD_GetEpDesc>
 8009114:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009116:	2101      	movs	r1, #1
 8009118:	4815      	ldr	r0, [pc, #84]	@ (8009170 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800911a:	f000 fcd2 	bl	8009ac2 <USBD_GetEpDesc>
 800911e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009120:	2181      	movs	r1, #129	@ 0x81
 8009122:	4813      	ldr	r0, [pc, #76]	@ (8009170 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009124:	f000 fccd 	bl	8009ac2 <USBD_GetEpDesc>
 8009128:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2210      	movs	r2, #16
 8009134:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d006      	beq.n	800914a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	2200      	movs	r2, #0
 8009140:	711a      	strb	r2, [r3, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f042 0202 	orr.w	r2, r2, #2
 8009148:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d006      	beq.n	800915e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	711a      	strb	r2, [r3, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f042 0202 	orr.w	r2, r2, #2
 800915c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2243      	movs	r2, #67	@ 0x43
 8009162:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009164:	4b02      	ldr	r3, [pc, #8]	@ (8009170 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000054 	.word	0x20000054

08009174 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800917c:	2182      	movs	r1, #130	@ 0x82
 800917e:	4818      	ldr	r0, [pc, #96]	@ (80091e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009180:	f000 fc9f 	bl	8009ac2 <USBD_GetEpDesc>
 8009184:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009186:	2101      	movs	r1, #1
 8009188:	4815      	ldr	r0, [pc, #84]	@ (80091e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800918a:	f000 fc9a 	bl	8009ac2 <USBD_GetEpDesc>
 800918e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009190:	2181      	movs	r1, #129	@ 0x81
 8009192:	4813      	ldr	r0, [pc, #76]	@ (80091e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009194:	f000 fc95 	bl	8009ac2 <USBD_GetEpDesc>
 8009198:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	2210      	movs	r2, #16
 80091a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d006      	beq.n	80091ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091b4:	711a      	strb	r2, [r3, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d006      	beq.n	80091ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091c8:	711a      	strb	r2, [r3, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2243      	movs	r2, #67	@ 0x43
 80091d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091d4:	4b02      	ldr	r3, [pc, #8]	@ (80091e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000054 	.word	0x20000054

080091e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	220a      	movs	r2, #10
 80091f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80091f2:	4b03      	ldr	r3, [pc, #12]	@ (8009200 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20000010 	.word	0x20000010

08009204 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009214:	2303      	movs	r3, #3
 8009216:	e009      	b.n	800922c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	33b0      	adds	r3, #176	@ 0xb0
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	32b0      	adds	r2, #176	@ 0xb0
 800924e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009252:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800925a:	2303      	movs	r3, #3
 800925c:	e008      	b.n	8009270 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	371c      	adds	r7, #28
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	32b0      	adds	r2, #176	@ 0xb0
 8009290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009294:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800929c:	2303      	movs	r3, #3
 800929e:	e004      	b.n	80092aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
	...

080092b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	32b0      	adds	r2, #176	@ 0xb0
 80092ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	32b0      	adds	r2, #176	@ 0xb0
 80092da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e018      	b.n	8009318 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7c1b      	ldrb	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009320 <USBD_CDC_ReceivePacket+0x68>)
 80092f0:	7819      	ldrb	r1, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80092f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f004 fe09 	bl	800df14 <USBD_LL_PrepareReceive>
 8009302:	e008      	b.n	8009316 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009304:	4b06      	ldr	r3, [pc, #24]	@ (8009320 <USBD_CDC_ReceivePacket+0x68>)
 8009306:	7819      	ldrb	r1, [r3, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800930e:	2340      	movs	r3, #64	@ 0x40
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f004 fdff 	bl	800df14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20000098 	.word	0x20000098

08009324 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	4613      	mov	r3, r2
 8009330:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009338:	2303      	movs	r3, #3
 800933a:	e01f      	b.n	800937c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	79fa      	ldrb	r2, [r7, #7]
 800936e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f004 fc79 	bl	800dc68 <USBD_LL_Init>
 8009376:	4603      	mov	r3, r0
 8009378:	75fb      	strb	r3, [r7, #23]

  return ret;
 800937a:	7dfb      	ldrb	r3, [r7, #23]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009398:	2303      	movs	r3, #3
 800939a:	e025      	b.n	80093e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	32ae      	adds	r2, #174	@ 0xae
 80093ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00f      	beq.n	80093d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	32ae      	adds	r2, #174	@ 0xae
 80093c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c8:	f107 020e 	add.w	r2, r7, #14
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	4602      	mov	r2, r0
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f004 fc81 	bl	800dd00 <USBD_LL_Start>
 80093fe:	4603      	mov	r3, r0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009410:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	460b      	mov	r3, r1
 8009428:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	4611      	mov	r1, r2
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	4798      	blx	r3
 8009448:	4603      	mov	r3, r0
 800944a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	4611      	mov	r1, r2
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800947c:	2303      	movs	r3, #3
 800947e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009480:	7bfb      	ldrb	r3, [r7, #15]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	4618      	mov	r0, r3
 800949e:	f001 f936 	bl	800a70e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80094b0:	461a      	mov	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094be:	f003 031f 	and.w	r3, r3, #31
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d01a      	beq.n	80094fc <USBD_LL_SetupStage+0x72>
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d822      	bhi.n	8009510 <USBD_LL_SetupStage+0x86>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <USBD_LL_SetupStage+0x4a>
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d00a      	beq.n	80094e8 <USBD_LL_SetupStage+0x5e>
 80094d2:	e01d      	b.n	8009510 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fb63 	bl	8009ba8 <USBD_StdDevReq>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]
      break;
 80094e6:	e020      	b.n	800952a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fbcb 	bl	8009c8c <USBD_StdItfReq>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73fb      	strb	r3, [r7, #15]
      break;
 80094fa:	e016      	b.n	800952a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fc2d 	bl	8009d64 <USBD_StdEPReq>
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
      break;
 800950e:	e00c      	b.n	800952a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009516:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800951a:	b2db      	uxtb	r3, r3
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f004 fc4e 	bl	800ddc0 <USBD_LL_StallEP>
 8009524:	4603      	mov	r3, r0
 8009526:	73fb      	strb	r3, [r7, #15]
      break;
 8009528:	bf00      	nop
  }

  return ret;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	460b      	mov	r3, r1
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d16e      	bne.n	800962a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009552:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800955a:	2b03      	cmp	r3, #3
 800955c:	f040 8098 	bne.w	8009690 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	689a      	ldr	r2, [r3, #8]
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	429a      	cmp	r2, r3
 800956a:	d913      	bls.n	8009594 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	689a      	ldr	r2, [r3, #8]
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	1ad2      	subs	r2, r2, r3
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	68da      	ldr	r2, [r3, #12]
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	4293      	cmp	r3, r2
 8009584:	bf28      	it	cs
 8009586:	4613      	movcs	r3, r2
 8009588:	461a      	mov	r2, r3
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f001 f9be 	bl	800a90e <USBD_CtlContinueRx>
 8009592:	e07d      	b.n	8009690 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800959a:	f003 031f 	and.w	r3, r3, #31
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d014      	beq.n	80095cc <USBD_LL_DataOutStage+0x98>
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d81d      	bhi.n	80095e2 <USBD_LL_DataOutStage+0xae>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <USBD_LL_DataOutStage+0x7c>
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d003      	beq.n	80095b6 <USBD_LL_DataOutStage+0x82>
 80095ae:	e018      	b.n	80095e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	75bb      	strb	r3, [r7, #22]
            break;
 80095b4:	e018      	b.n	80095e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	4619      	mov	r1, r3
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 fa64 	bl	8009a8e <USBD_CoreFindIF>
 80095c6:	4603      	mov	r3, r0
 80095c8:	75bb      	strb	r3, [r7, #22]
            break;
 80095ca:	e00d      	b.n	80095e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	4619      	mov	r1, r3
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 fa66 	bl	8009aa8 <USBD_CoreFindEP>
 80095dc:	4603      	mov	r3, r0
 80095de:	75bb      	strb	r3, [r7, #22]
            break;
 80095e0:	e002      	b.n	80095e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75bb      	strb	r3, [r7, #22]
            break;
 80095e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80095e8:	7dbb      	ldrb	r3, [r7, #22]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d119      	bne.n	8009622 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d113      	bne.n	8009622 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80095fa:	7dba      	ldrb	r2, [r7, #22]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	32ae      	adds	r2, #174	@ 0xae
 8009600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00b      	beq.n	8009622 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800960a:	7dba      	ldrb	r2, [r7, #22]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009612:	7dba      	ldrb	r2, [r7, #22]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	32ae      	adds	r2, #174	@ 0xae
 8009618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f001 f984 	bl	800a930 <USBD_CtlSendStatus>
 8009628:	e032      	b.n	8009690 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800962a:	7afb      	ldrb	r3, [r7, #11]
 800962c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009630:	b2db      	uxtb	r3, r3
 8009632:	4619      	mov	r1, r3
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 fa37 	bl	8009aa8 <USBD_CoreFindEP>
 800963a:	4603      	mov	r3, r0
 800963c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800963e:	7dbb      	ldrb	r3, [r7, #22]
 8009640:	2bff      	cmp	r3, #255	@ 0xff
 8009642:	d025      	beq.n	8009690 <USBD_LL_DataOutStage+0x15c>
 8009644:	7dbb      	ldrb	r3, [r7, #22]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d122      	bne.n	8009690 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b03      	cmp	r3, #3
 8009654:	d117      	bne.n	8009686 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009656:	7dba      	ldrb	r2, [r7, #22]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	32ae      	adds	r2, #174	@ 0xae
 800965c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00f      	beq.n	8009686 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009666:	7dba      	ldrb	r2, [r7, #22]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800966e:	7dba      	ldrb	r2, [r7, #22]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	32ae      	adds	r2, #174	@ 0xae
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	7afa      	ldrb	r2, [r7, #11]
 800967c:	4611      	mov	r1, r2
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	4798      	blx	r3
 8009682:	4603      	mov	r3, r0
 8009684:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	e000      	b.n	8009692 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	460b      	mov	r3, r1
 80096a4:	607a      	str	r2, [r7, #4]
 80096a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d16f      	bne.n	800978e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3314      	adds	r3, #20
 80096b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d15a      	bne.n	8009774 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d914      	bls.n	80096f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	1ad2      	subs	r2, r2, r3
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	461a      	mov	r2, r3
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f001 f8e6 	bl	800a8b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096e6:	2300      	movs	r3, #0
 80096e8:	2200      	movs	r2, #0
 80096ea:	2100      	movs	r1, #0
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f004 fc11 	bl	800df14 <USBD_LL_PrepareReceive>
 80096f2:	e03f      	b.n	8009774 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d11c      	bne.n	800973a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009708:	429a      	cmp	r2, r3
 800970a:	d316      	bcc.n	800973a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009716:	429a      	cmp	r2, r3
 8009718:	d20f      	bcs.n	800973a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800971a:	2200      	movs	r2, #0
 800971c:	2100      	movs	r1, #0
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f001 f8c7 	bl	800a8b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800972c:	2300      	movs	r3, #0
 800972e:	2200      	movs	r2, #0
 8009730:	2100      	movs	r1, #0
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f004 fbee 	bl	800df14 <USBD_LL_PrepareReceive>
 8009738:	e01c      	b.n	8009774 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b03      	cmp	r3, #3
 8009744:	d10f      	bne.n	8009766 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009766:	2180      	movs	r1, #128	@ 0x80
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f004 fb29 	bl	800ddc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f001 f8f1 	bl	800a956 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d03a      	beq.n	80097f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7ff fe42 	bl	8009408 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800978c:	e032      	b.n	80097f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800978e:	7afb      	ldrb	r3, [r7, #11]
 8009790:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009794:	b2db      	uxtb	r3, r3
 8009796:	4619      	mov	r1, r3
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 f985 	bl	8009aa8 <USBD_CoreFindEP>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	2bff      	cmp	r3, #255	@ 0xff
 80097a6:	d025      	beq.n	80097f4 <USBD_LL_DataInStage+0x15a>
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d122      	bne.n	80097f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d11c      	bne.n	80097f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80097ba:	7dfa      	ldrb	r2, [r7, #23]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	32ae      	adds	r2, #174	@ 0xae
 80097c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d014      	beq.n	80097f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80097ca:	7dfa      	ldrb	r2, [r7, #23]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80097d2:	7dfa      	ldrb	r2, [r7, #23]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	32ae      	adds	r2, #174	@ 0xae
 80097d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	7afa      	ldrb	r2, [r7, #11]
 80097e0:	4611      	mov	r1, r2
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	4798      	blx	r3
 80097e6:	4603      	mov	r3, r0
 80097e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80097ea:	7dbb      	ldrb	r3, [r7, #22]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80097f0:	7dbb      	ldrb	r3, [r7, #22]
 80097f2:	e000      	b.n	80097f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009836:	2b00      	cmp	r3, #0
 8009838:	d014      	beq.n	8009864 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00e      	beq.n	8009864 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	6852      	ldr	r2, [r2, #4]
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	4611      	mov	r1, r2
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009860:	2303      	movs	r3, #3
 8009862:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009864:	2340      	movs	r3, #64	@ 0x40
 8009866:	2200      	movs	r2, #0
 8009868:	2100      	movs	r1, #0
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f004 fa63 	bl	800dd36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2240      	movs	r2, #64	@ 0x40
 800987c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009880:	2340      	movs	r3, #64	@ 0x40
 8009882:	2200      	movs	r2, #0
 8009884:	2180      	movs	r1, #128	@ 0x80
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f004 fa55 	bl	800dd36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2240      	movs	r2, #64	@ 0x40
 8009896:	621a      	str	r2, [r3, #32]

  return ret;
 8009898:	7bfb      	ldrb	r3, [r7, #15]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	460b      	mov	r3, r1
 80098ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	78fa      	ldrb	r2, [r7, #3]
 80098b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b083      	sub	sp, #12
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d006      	beq.n	80098e4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2204      	movs	r2, #4
 80098e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b04      	cmp	r3, #4
 800990c:	d106      	bne.n	800991c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009914:	b2da      	uxtb	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b03      	cmp	r3, #3
 800993c:	d110      	bne.n	8009960 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	460b      	mov	r3, r1
 8009974:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	32ae      	adds	r2, #174	@ 0xae
 8009980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009988:	2303      	movs	r3, #3
 800998a:	e01c      	b.n	80099c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b03      	cmp	r3, #3
 8009996:	d115      	bne.n	80099c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	32ae      	adds	r2, #174	@ 0xae
 80099a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00b      	beq.n	80099c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	32ae      	adds	r2, #174	@ 0xae
 80099b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	78fa      	ldrb	r2, [r7, #3]
 80099be:	4611      	mov	r1, r2
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	460b      	mov	r3, r1
 80099d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	32ae      	adds	r2, #174	@ 0xae
 80099e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e01c      	b.n	8009a2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d115      	bne.n	8009a28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	32ae      	adds	r2, #174	@ 0xae
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	32ae      	adds	r2, #174	@ 0xae
 8009a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a20:	78fa      	ldrb	r2, [r7, #3]
 8009a22:	4611      	mov	r1, r2
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00e      	beq.n	8009a84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6852      	ldr	r2, [r2, #4]
 8009a72:	b2d2      	uxtb	r2, r2
 8009a74:	4611      	mov	r1, r2
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	4798      	blx	r3
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b083      	sub	sp, #12
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	460b      	mov	r3, r1
 8009a98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ab4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b086      	sub	sp, #24
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	885b      	ldrh	r3, [r3, #2]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d91f      	bls.n	8009b28 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009aee:	e013      	b.n	8009b18 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009af0:	f107 030a 	add.w	r3, r7, #10
 8009af4:	4619      	mov	r1, r3
 8009af6:	6978      	ldr	r0, [r7, #20]
 8009af8:	f000 f81b 	bl	8009b32 <USBD_GetNextDesc>
 8009afc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	785b      	ldrb	r3, [r3, #1]
 8009b02:	2b05      	cmp	r3, #5
 8009b04:	d108      	bne.n	8009b18 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	789b      	ldrb	r3, [r3, #2]
 8009b0e:	78fa      	ldrb	r2, [r7, #3]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d008      	beq.n	8009b26 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009b14:	2300      	movs	r3, #0
 8009b16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	885b      	ldrh	r3, [r3, #2]
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	897b      	ldrh	r3, [r7, #10]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d8e5      	bhi.n	8009af0 <USBD_GetEpDesc+0x2e>
 8009b24:	e000      	b.n	8009b28 <USBD_GetEpDesc+0x66>
          break;
 8009b26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009b28:	693b      	ldr	r3, [r7, #16]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b085      	sub	sp, #20
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	7812      	ldrb	r2, [r2, #0]
 8009b48:	4413      	add	r3, r2
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4413      	add	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b087      	sub	sp, #28
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b88:	8a3b      	ldrh	r3, [r7, #16]
 8009b8a:	021b      	lsls	r3, r3, #8
 8009b8c:	b21a      	sxth	r2, r3
 8009b8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	b21b      	sxth	r3, r3
 8009b96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b98:	89fb      	ldrh	r3, [r7, #14]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
	...

08009ba8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bbe:	2b40      	cmp	r3, #64	@ 0x40
 8009bc0:	d005      	beq.n	8009bce <USBD_StdDevReq+0x26>
 8009bc2:	2b40      	cmp	r3, #64	@ 0x40
 8009bc4:	d857      	bhi.n	8009c76 <USBD_StdDevReq+0xce>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00f      	beq.n	8009bea <USBD_StdDevReq+0x42>
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d153      	bne.n	8009c76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	32ae      	adds	r2, #174	@ 0xae
 8009bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]
      break;
 8009be8:	e04a      	b.n	8009c80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d83b      	bhi.n	8009c6a <USBD_StdDevReq+0xc2>
 8009bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf8 <USBD_StdDevReq+0x50>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c4d 	.word	0x08009c4d
 8009bfc:	08009c61 	.word	0x08009c61
 8009c00:	08009c6b 	.word	0x08009c6b
 8009c04:	08009c57 	.word	0x08009c57
 8009c08:	08009c6b 	.word	0x08009c6b
 8009c0c:	08009c2b 	.word	0x08009c2b
 8009c10:	08009c21 	.word	0x08009c21
 8009c14:	08009c6b 	.word	0x08009c6b
 8009c18:	08009c43 	.word	0x08009c43
 8009c1c:	08009c35 	.word	0x08009c35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa3c 	bl	800a0a0 <USBD_GetDescriptor>
          break;
 8009c28:	e024      	b.n	8009c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fbcb 	bl	800a3c8 <USBD_SetAddress>
          break;
 8009c32:	e01f      	b.n	8009c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fc0a 	bl	800a450 <USBD_SetConfig>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8009c40:	e018      	b.n	8009c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fcad 	bl	800a5a4 <USBD_GetConfig>
          break;
 8009c4a:	e013      	b.n	8009c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fcde 	bl	800a610 <USBD_GetStatus>
          break;
 8009c54:	e00e      	b.n	8009c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c56:	6839      	ldr	r1, [r7, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fd0d 	bl	800a678 <USBD_SetFeature>
          break;
 8009c5e:	e009      	b.n	8009c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fd31 	bl	800a6ca <USBD_ClrFeature>
          break;
 8009c68:	e004      	b.n	8009c74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fd88 	bl	800a782 <USBD_CtlError>
          break;
 8009c72:	bf00      	nop
      }
      break;
 8009c74:	e004      	b.n	8009c80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fd82 	bl	800a782 <USBD_CtlError>
      break;
 8009c7e:	bf00      	nop
  }

  return ret;
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop

08009c8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ca2:	2b40      	cmp	r3, #64	@ 0x40
 8009ca4:	d005      	beq.n	8009cb2 <USBD_StdItfReq+0x26>
 8009ca6:	2b40      	cmp	r3, #64	@ 0x40
 8009ca8:	d852      	bhi.n	8009d50 <USBD_StdItfReq+0xc4>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <USBD_StdItfReq+0x26>
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	d14e      	bne.n	8009d50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d840      	bhi.n	8009d42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	889b      	ldrh	r3, [r3, #4]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d836      	bhi.n	8009d38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	889b      	ldrh	r3, [r3, #4]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff fedb 	bl	8009a8e <USBD_CoreFindIF>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	2bff      	cmp	r3, #255	@ 0xff
 8009ce0:	d01d      	beq.n	8009d1e <USBD_StdItfReq+0x92>
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d11a      	bne.n	8009d1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ce8:	7bba      	ldrb	r2, [r7, #14]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	32ae      	adds	r2, #174	@ 0xae
 8009cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00f      	beq.n	8009d18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009cf8:	7bba      	ldrb	r2, [r7, #14]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d00:	7bba      	ldrb	r2, [r7, #14]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	32ae      	adds	r2, #174	@ 0xae
 8009d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	4798      	blx	r3
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d16:	e004      	b.n	8009d22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d1c:	e001      	b.n	8009d22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	88db      	ldrh	r3, [r3, #6]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d110      	bne.n	8009d4c <USBD_StdItfReq+0xc0>
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10d      	bne.n	8009d4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fdfd 	bl	800a930 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d36:	e009      	b.n	8009d4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fd21 	bl	800a782 <USBD_CtlError>
          break;
 8009d40:	e004      	b.n	8009d4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fd1c 	bl	800a782 <USBD_CtlError>
          break;
 8009d4a:	e000      	b.n	8009d4e <USBD_StdItfReq+0xc2>
          break;
 8009d4c:	bf00      	nop
      }
      break;
 8009d4e:	e004      	b.n	8009d5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fd15 	bl	800a782 <USBD_CtlError>
      break;
 8009d58:	bf00      	nop
  }

  return ret;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	889b      	ldrh	r3, [r3, #4]
 8009d76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d80:	2b40      	cmp	r3, #64	@ 0x40
 8009d82:	d007      	beq.n	8009d94 <USBD_StdEPReq+0x30>
 8009d84:	2b40      	cmp	r3, #64	@ 0x40
 8009d86:	f200 817f 	bhi.w	800a088 <USBD_StdEPReq+0x324>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d02a      	beq.n	8009de4 <USBD_StdEPReq+0x80>
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	f040 817a 	bne.w	800a088 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fe85 	bl	8009aa8 <USBD_CoreFindEP>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009da2:	7b7b      	ldrb	r3, [r7, #13]
 8009da4:	2bff      	cmp	r3, #255	@ 0xff
 8009da6:	f000 8174 	beq.w	800a092 <USBD_StdEPReq+0x32e>
 8009daa:	7b7b      	ldrb	r3, [r7, #13]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f040 8170 	bne.w	800a092 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009db2:	7b7a      	ldrb	r2, [r7, #13]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009dba:	7b7a      	ldrb	r2, [r7, #13]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	32ae      	adds	r2, #174	@ 0xae
 8009dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 8163 	beq.w	800a092 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009dcc:	7b7a      	ldrb	r2, [r7, #13]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	32ae      	adds	r2, #174	@ 0xae
 8009dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	4798      	blx	r3
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009de2:	e156      	b.n	800a092 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	785b      	ldrb	r3, [r3, #1]
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d008      	beq.n	8009dfe <USBD_StdEPReq+0x9a>
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	f300 8145 	bgt.w	800a07c <USBD_StdEPReq+0x318>
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 809b 	beq.w	8009f2e <USBD_StdEPReq+0x1ca>
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d03c      	beq.n	8009e76 <USBD_StdEPReq+0x112>
 8009dfc:	e13e      	b.n	800a07c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d002      	beq.n	8009e10 <USBD_StdEPReq+0xac>
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d016      	beq.n	8009e3c <USBD_StdEPReq+0xd8>
 8009e0e:	e02c      	b.n	8009e6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00d      	beq.n	8009e32 <USBD_StdEPReq+0xce>
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b80      	cmp	r3, #128	@ 0x80
 8009e1a:	d00a      	beq.n	8009e32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f003 ffcd 	bl	800ddc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e26:	2180      	movs	r1, #128	@ 0x80
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f003 ffc9 	bl	800ddc0 <USBD_LL_StallEP>
 8009e2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e30:	e020      	b.n	8009e74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fca4 	bl	800a782 <USBD_CtlError>
              break;
 8009e3a:	e01b      	b.n	8009e74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	885b      	ldrh	r3, [r3, #2]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10e      	bne.n	8009e62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00b      	beq.n	8009e62 <USBD_StdEPReq+0xfe>
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	2b80      	cmp	r3, #128	@ 0x80
 8009e4e:	d008      	beq.n	8009e62 <USBD_StdEPReq+0xfe>
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	88db      	ldrh	r3, [r3, #6]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d104      	bne.n	8009e62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f003 ffaf 	bl	800ddc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fd64 	bl	800a930 <USBD_CtlSendStatus>

              break;
 8009e68:	e004      	b.n	8009e74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fc88 	bl	800a782 <USBD_CtlError>
              break;
 8009e72:	bf00      	nop
          }
          break;
 8009e74:	e107      	b.n	800a086 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d002      	beq.n	8009e88 <USBD_StdEPReq+0x124>
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d016      	beq.n	8009eb4 <USBD_StdEPReq+0x150>
 8009e86:	e04b      	b.n	8009f20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00d      	beq.n	8009eaa <USBD_StdEPReq+0x146>
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	2b80      	cmp	r3, #128	@ 0x80
 8009e92:	d00a      	beq.n	8009eaa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f003 ff91 	bl	800ddc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e9e:	2180      	movs	r1, #128	@ 0x80
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f003 ff8d 	bl	800ddc0 <USBD_LL_StallEP>
 8009ea6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ea8:	e040      	b.n	8009f2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fc68 	bl	800a782 <USBD_CtlError>
              break;
 8009eb2:	e03b      	b.n	8009f2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	885b      	ldrh	r3, [r3, #2]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d136      	bne.n	8009f2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d004      	beq.n	8009ed0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f003 ff97 	bl	800ddfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fd2d 	bl	800a930 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7ff fde4 	bl	8009aa8 <USBD_CoreFindEP>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ee4:	7b7b      	ldrb	r3, [r7, #13]
 8009ee6:	2bff      	cmp	r3, #255	@ 0xff
 8009ee8:	d01f      	beq.n	8009f2a <USBD_StdEPReq+0x1c6>
 8009eea:	7b7b      	ldrb	r3, [r7, #13]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d11c      	bne.n	8009f2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ef0:	7b7a      	ldrb	r2, [r7, #13]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ef8:	7b7a      	ldrb	r2, [r7, #13]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	32ae      	adds	r2, #174	@ 0xae
 8009efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d010      	beq.n	8009f2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f08:	7b7a      	ldrb	r2, [r7, #13]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	32ae      	adds	r2, #174	@ 0xae
 8009f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	4798      	blx	r3
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009f1e:	e004      	b.n	8009f2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fc2d 	bl	800a782 <USBD_CtlError>
              break;
 8009f28:	e000      	b.n	8009f2c <USBD_StdEPReq+0x1c8>
              break;
 8009f2a:	bf00      	nop
          }
          break;
 8009f2c:	e0ab      	b.n	800a086 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d002      	beq.n	8009f40 <USBD_StdEPReq+0x1dc>
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d032      	beq.n	8009fa4 <USBD_StdEPReq+0x240>
 8009f3e:	e097      	b.n	800a070 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f40:	7bbb      	ldrb	r3, [r7, #14]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d007      	beq.n	8009f56 <USBD_StdEPReq+0x1f2>
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	2b80      	cmp	r3, #128	@ 0x80
 8009f4a:	d004      	beq.n	8009f56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fc17 	bl	800a782 <USBD_CtlError>
                break;
 8009f54:	e091      	b.n	800a07a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	da0b      	bge.n	8009f76 <USBD_StdEPReq+0x212>
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	3310      	adds	r3, #16
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	4413      	add	r3, r2
 8009f72:	3304      	adds	r3, #4
 8009f74:	e00b      	b.n	8009f8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fc6d 	bl	800a87c <USBD_CtlSendData>
              break;
 8009fa2:	e06a      	b.n	800a07a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	da11      	bge.n	8009fd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
 8009fae:	f003 020f 	and.w	r2, r3, #15
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	3324      	adds	r3, #36	@ 0x24
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d117      	bne.n	8009ff6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fbda 	bl	800a782 <USBD_CtlError>
                  break;
 8009fce:	e054      	b.n	800a07a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	f003 020f 	and.w	r2, r3, #15
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	440b      	add	r3, r1
 8009fe2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d104      	bne.n	8009ff6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fbc7 	bl	800a782 <USBD_CtlError>
                  break;
 8009ff4:	e041      	b.n	800a07a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	da0b      	bge.n	800a016 <USBD_StdEPReq+0x2b2>
 8009ffe:	7bbb      	ldrb	r3, [r7, #14]
 800a000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	3310      	adds	r3, #16
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	4413      	add	r3, r2
 800a012:	3304      	adds	r3, #4
 800a014:	e00b      	b.n	800a02e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a016:	7bbb      	ldrb	r3, [r7, #14]
 800a018:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a01c:	4613      	mov	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	4413      	add	r3, r2
 800a02c:	3304      	adds	r3, #4
 800a02e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a030:	7bbb      	ldrb	r3, [r7, #14]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <USBD_StdEPReq+0x2d8>
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	2b80      	cmp	r3, #128	@ 0x80
 800a03a:	d103      	bne.n	800a044 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	e00e      	b.n	800a062 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f003 fef7 	bl	800de3c <USBD_LL_IsStallEP>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2201      	movs	r2, #1
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	e002      	b.n	800a062 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2202      	movs	r2, #2
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fc07 	bl	800a87c <USBD_CtlSendData>
              break;
 800a06e:	e004      	b.n	800a07a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fb85 	bl	800a782 <USBD_CtlError>
              break;
 800a078:	bf00      	nop
          }
          break;
 800a07a:	e004      	b.n	800a086 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fb7f 	bl	800a782 <USBD_CtlError>
          break;
 800a084:	bf00      	nop
      }
      break;
 800a086:	e005      	b.n	800a094 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fb79 	bl	800a782 <USBD_CtlError>
      break;
 800a090:	e000      	b.n	800a094 <USBD_StdEPReq+0x330>
      break;
 800a092:	bf00      	nop
  }

  return ret;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	885b      	ldrh	r3, [r3, #2]
 800a0ba:	0a1b      	lsrs	r3, r3, #8
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	2b0e      	cmp	r3, #14
 800a0c2:	f200 8152 	bhi.w	800a36a <USBD_GetDescriptor+0x2ca>
 800a0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0cc <USBD_GetDescriptor+0x2c>)
 800a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0cc:	0800a13d 	.word	0x0800a13d
 800a0d0:	0800a155 	.word	0x0800a155
 800a0d4:	0800a195 	.word	0x0800a195
 800a0d8:	0800a36b 	.word	0x0800a36b
 800a0dc:	0800a36b 	.word	0x0800a36b
 800a0e0:	0800a30b 	.word	0x0800a30b
 800a0e4:	0800a337 	.word	0x0800a337
 800a0e8:	0800a36b 	.word	0x0800a36b
 800a0ec:	0800a36b 	.word	0x0800a36b
 800a0f0:	0800a36b 	.word	0x0800a36b
 800a0f4:	0800a36b 	.word	0x0800a36b
 800a0f8:	0800a36b 	.word	0x0800a36b
 800a0fc:	0800a36b 	.word	0x0800a36b
 800a100:	0800a36b 	.word	0x0800a36b
 800a104:	0800a109 	.word	0x0800a109
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	7c12      	ldrb	r2, [r2, #16]
 800a120:	f107 0108 	add.w	r1, r7, #8
 800a124:	4610      	mov	r0, r2
 800a126:	4798      	blx	r3
 800a128:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a12a:	e126      	b.n	800a37a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fb27 	bl	800a782 <USBD_CtlError>
        err++;
 800a134:	7afb      	ldrb	r3, [r7, #11]
 800a136:	3301      	adds	r3, #1
 800a138:	72fb      	strb	r3, [r7, #11]
      break;
 800a13a:	e11e      	b.n	800a37a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	7c12      	ldrb	r2, [r2, #16]
 800a148:	f107 0108 	add.w	r1, r7, #8
 800a14c:	4610      	mov	r0, r2
 800a14e:	4798      	blx	r3
 800a150:	60f8      	str	r0, [r7, #12]
      break;
 800a152:	e112      	b.n	800a37a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	7c1b      	ldrb	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10d      	bne.n	800a178 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a164:	f107 0208 	add.w	r2, r7, #8
 800a168:	4610      	mov	r0, r2
 800a16a:	4798      	blx	r3
 800a16c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3301      	adds	r3, #1
 800a172:	2202      	movs	r2, #2
 800a174:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a176:	e100      	b.n	800a37a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a180:	f107 0208 	add.w	r2, r7, #8
 800a184:	4610      	mov	r0, r2
 800a186:	4798      	blx	r3
 800a188:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3301      	adds	r3, #1
 800a18e:	2202      	movs	r2, #2
 800a190:	701a      	strb	r2, [r3, #0]
      break;
 800a192:	e0f2      	b.n	800a37a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	885b      	ldrh	r3, [r3, #2]
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b05      	cmp	r3, #5
 800a19c:	f200 80ac 	bhi.w	800a2f8 <USBD_GetDescriptor+0x258>
 800a1a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a8 <USBD_GetDescriptor+0x108>)
 800a1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a6:	bf00      	nop
 800a1a8:	0800a1c1 	.word	0x0800a1c1
 800a1ac:	0800a1f5 	.word	0x0800a1f5
 800a1b0:	0800a229 	.word	0x0800a229
 800a1b4:	0800a25d 	.word	0x0800a25d
 800a1b8:	0800a291 	.word	0x0800a291
 800a1bc:	0800a2c5 	.word	0x0800a2c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	7c12      	ldrb	r2, [r2, #16]
 800a1d8:	f107 0108 	add.w	r1, r7, #8
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
 800a1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1e2:	e091      	b.n	800a308 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 facb 	bl	800a782 <USBD_CtlError>
            err++;
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1f2:	e089      	b.n	800a308 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00b      	beq.n	800a218 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	7c12      	ldrb	r2, [r2, #16]
 800a20c:	f107 0108 	add.w	r1, r7, #8
 800a210:	4610      	mov	r0, r2
 800a212:	4798      	blx	r3
 800a214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a216:	e077      	b.n	800a308 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fab1 	bl	800a782 <USBD_CtlError>
            err++;
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	3301      	adds	r3, #1
 800a224:	72fb      	strb	r3, [r7, #11]
          break;
 800a226:	e06f      	b.n	800a308 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00b      	beq.n	800a24c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	7c12      	ldrb	r2, [r2, #16]
 800a240:	f107 0108 	add.w	r1, r7, #8
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3
 800a248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a24a:	e05d      	b.n	800a308 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa97 	bl	800a782 <USBD_CtlError>
            err++;
 800a254:	7afb      	ldrb	r3, [r7, #11]
 800a256:	3301      	adds	r3, #1
 800a258:	72fb      	strb	r3, [r7, #11]
          break;
 800a25a:	e055      	b.n	800a308 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	7c12      	ldrb	r2, [r2, #16]
 800a274:	f107 0108 	add.w	r1, r7, #8
 800a278:	4610      	mov	r0, r2
 800a27a:	4798      	blx	r3
 800a27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a27e:	e043      	b.n	800a308 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fa7d 	bl	800a782 <USBD_CtlError>
            err++;
 800a288:	7afb      	ldrb	r3, [r7, #11]
 800a28a:	3301      	adds	r3, #1
 800a28c:	72fb      	strb	r3, [r7, #11]
          break;
 800a28e:	e03b      	b.n	800a308 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00b      	beq.n	800a2b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	7c12      	ldrb	r2, [r2, #16]
 800a2a8:	f107 0108 	add.w	r1, r7, #8
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	4798      	blx	r3
 800a2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2b2:	e029      	b.n	800a308 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa63 	bl	800a782 <USBD_CtlError>
            err++;
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2c2:	e021      	b.n	800a308 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00b      	beq.n	800a2e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	7c12      	ldrb	r2, [r2, #16]
 800a2dc:	f107 0108 	add.w	r1, r7, #8
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	4798      	blx	r3
 800a2e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2e6:	e00f      	b.n	800a308 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fa49 	bl	800a782 <USBD_CtlError>
            err++;
 800a2f0:	7afb      	ldrb	r3, [r7, #11]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2f6:	e007      	b.n	800a308 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fa41 	bl	800a782 <USBD_CtlError>
          err++;
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	3301      	adds	r3, #1
 800a304:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a306:	bf00      	nop
      }
      break;
 800a308:	e037      	b.n	800a37a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	7c1b      	ldrb	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d109      	bne.n	800a326 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a31a:	f107 0208 	add.w	r2, r7, #8
 800a31e:	4610      	mov	r0, r2
 800a320:	4798      	blx	r3
 800a322:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a324:	e029      	b.n	800a37a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa2a 	bl	800a782 <USBD_CtlError>
        err++;
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	3301      	adds	r3, #1
 800a332:	72fb      	strb	r3, [r7, #11]
      break;
 800a334:	e021      	b.n	800a37a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	7c1b      	ldrb	r3, [r3, #16]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10d      	bne.n	800a35a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a346:	f107 0208 	add.w	r2, r7, #8
 800a34a:	4610      	mov	r0, r2
 800a34c:	4798      	blx	r3
 800a34e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	3301      	adds	r3, #1
 800a354:	2207      	movs	r2, #7
 800a356:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a358:	e00f      	b.n	800a37a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fa10 	bl	800a782 <USBD_CtlError>
        err++;
 800a362:	7afb      	ldrb	r3, [r7, #11]
 800a364:	3301      	adds	r3, #1
 800a366:	72fb      	strb	r3, [r7, #11]
      break;
 800a368:	e007      	b.n	800a37a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fa08 	bl	800a782 <USBD_CtlError>
      err++;
 800a372:	7afb      	ldrb	r3, [r7, #11]
 800a374:	3301      	adds	r3, #1
 800a376:	72fb      	strb	r3, [r7, #11]
      break;
 800a378:	bf00      	nop
  }

  if (err != 0U)
 800a37a:	7afb      	ldrb	r3, [r7, #11]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d11e      	bne.n	800a3be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	88db      	ldrh	r3, [r3, #6]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d016      	beq.n	800a3b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a388:	893b      	ldrh	r3, [r7, #8]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00e      	beq.n	800a3ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	88da      	ldrh	r2, [r3, #6]
 800a392:	893b      	ldrh	r3, [r7, #8]
 800a394:	4293      	cmp	r3, r2
 800a396:	bf28      	it	cs
 800a398:	4613      	movcs	r3, r2
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a39e:	893b      	ldrh	r3, [r7, #8]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	68f9      	ldr	r1, [r7, #12]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fa69 	bl	800a87c <USBD_CtlSendData>
 800a3aa:	e009      	b.n	800a3c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f9e7 	bl	800a782 <USBD_CtlError>
 800a3b4:	e004      	b.n	800a3c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 faba 	bl	800a930 <USBD_CtlSendStatus>
 800a3bc:	e000      	b.n	800a3c0 <USBD_GetDescriptor+0x320>
    return;
 800a3be:	bf00      	nop
  }
}
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop

0800a3c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	889b      	ldrh	r3, [r3, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d131      	bne.n	800a43e <USBD_SetAddress+0x76>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	88db      	ldrh	r3, [r3, #6]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d12d      	bne.n	800a43e <USBD_SetAddress+0x76>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	885b      	ldrh	r3, [r3, #2]
 800a3e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3e8:	d829      	bhi.n	800a43e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	885b      	ldrh	r3, [r3, #2]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d104      	bne.n	800a40c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f9bc 	bl	800a782 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a40a:	e01d      	b.n	800a448 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	7bfa      	ldrb	r2, [r7, #15]
 800a410:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f003 fd3b 	bl	800de94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 fa86 	bl	800a930 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d004      	beq.n	800a434 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2202      	movs	r2, #2
 800a42e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a432:	e009      	b.n	800a448 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43c:	e004      	b.n	800a448 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f99e 	bl	800a782 <USBD_CtlError>
  }
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	885b      	ldrh	r3, [r3, #2]
 800a462:	b2da      	uxtb	r2, r3
 800a464:	4b4e      	ldr	r3, [pc, #312]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a466:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a468:	4b4d      	ldr	r3, [pc, #308]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d905      	bls.n	800a47c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f985 	bl	800a782 <USBD_CtlError>
    return USBD_FAIL;
 800a478:	2303      	movs	r3, #3
 800a47a:	e08c      	b.n	800a596 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b02      	cmp	r3, #2
 800a486:	d002      	beq.n	800a48e <USBD_SetConfig+0x3e>
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d029      	beq.n	800a4e0 <USBD_SetConfig+0x90>
 800a48c:	e075      	b.n	800a57a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a48e:	4b44      	ldr	r3, [pc, #272]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d020      	beq.n	800a4d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a496:	4b42      	ldr	r3, [pc, #264]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4a0:	4b3f      	ldr	r3, [pc, #252]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7fe ffb9 	bl	800941e <USBD_SetClassConfig>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d008      	beq.n	800a4c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f962 	bl	800a782 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4c6:	e065      	b.n	800a594 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fa31 	bl	800a930 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4d6:	e05d      	b.n	800a594 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fa29 	bl	800a930 <USBD_CtlSendStatus>
      break;
 800a4de:	e059      	b.n	800a594 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a4e0:	4b2f      	ldr	r3, [pc, #188]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d112      	bne.n	800a50e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a4f0:	4b2b      	ldr	r3, [pc, #172]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4fa:	4b29      	ldr	r3, [pc, #164]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7fe ffa8 	bl	8009456 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa12 	bl	800a930 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a50c:	e042      	b.n	800a594 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a50e:	4b24      	ldr	r3, [pc, #144]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d02a      	beq.n	800a572 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7fe ff96 	bl	8009456 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a52a:	4b1d      	ldr	r3, [pc, #116]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a534:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7fe ff6f 	bl	800941e <USBD_SetClassConfig>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00f      	beq.n	800a56a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f918 	bl	800a782 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7fe ff7b 	bl	8009456 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a568:	e014      	b.n	800a594 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f9e0 	bl	800a930 <USBD_CtlSendStatus>
      break;
 800a570:	e010      	b.n	800a594 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f9dc 	bl	800a930 <USBD_CtlSendStatus>
      break;
 800a578:	e00c      	b.n	800a594 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f900 	bl	800a782 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a582:	4b07      	ldr	r3, [pc, #28]	@ (800a5a0 <USBD_SetConfig+0x150>)
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7fe ff64 	bl	8009456 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a58e:	2303      	movs	r3, #3
 800a590:	73fb      	strb	r3, [r7, #15]
      break;
 800a592:	bf00      	nop
  }

  return ret;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20007a44 	.word	0x20007a44

0800a5a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	88db      	ldrh	r3, [r3, #6]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d004      	beq.n	800a5c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f8e2 	bl	800a782 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5be:	e023      	b.n	800a608 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	dc02      	bgt.n	800a5d2 <USBD_GetConfig+0x2e>
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	dc03      	bgt.n	800a5d8 <USBD_GetConfig+0x34>
 800a5d0:	e015      	b.n	800a5fe <USBD_GetConfig+0x5a>
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	d00b      	beq.n	800a5ee <USBD_GetConfig+0x4a>
 800a5d6:	e012      	b.n	800a5fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f948 	bl	800a87c <USBD_CtlSendData>
        break;
 800a5ec:	e00c      	b.n	800a608 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f940 	bl	800a87c <USBD_CtlSendData>
        break;
 800a5fc:	e004      	b.n	800a608 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f8be 	bl	800a782 <USBD_CtlError>
        break;
 800a606:	bf00      	nop
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a620:	b2db      	uxtb	r3, r3
 800a622:	3b01      	subs	r3, #1
 800a624:	2b02      	cmp	r3, #2
 800a626:	d81e      	bhi.n	800a666 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	88db      	ldrh	r3, [r3, #6]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d004      	beq.n	800a63a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f8a5 	bl	800a782 <USBD_CtlError>
        break;
 800a638:	e01a      	b.n	800a670 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	f043 0202 	orr.w	r2, r3, #2
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	330c      	adds	r3, #12
 800a65a:	2202      	movs	r2, #2
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f90c 	bl	800a87c <USBD_CtlSendData>
      break;
 800a664:	e004      	b.n	800a670 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f88a 	bl	800a782 <USBD_CtlError>
      break;
 800a66e:	bf00      	nop
  }
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	885b      	ldrh	r3, [r3, #2]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d107      	bne.n	800a69a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f94c 	bl	800a930 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a698:	e013      	b.n	800a6c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	885b      	ldrh	r3, [r3, #2]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d10b      	bne.n	800a6ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	889b      	ldrh	r3, [r3, #4]
 800a6a6:	0a1b      	lsrs	r3, r3, #8
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f93c 	bl	800a930 <USBD_CtlSendStatus>
}
 800a6b8:	e003      	b.n	800a6c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f860 	bl	800a782 <USBD_CtlError>
}
 800a6c2:	bf00      	nop
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d80b      	bhi.n	800a6fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d10c      	bne.n	800a704 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f91c 	bl	800a930 <USBD_CtlSendStatus>
      }
      break;
 800a6f8:	e004      	b.n	800a704 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f840 	bl	800a782 <USBD_CtlError>
      break;
 800a702:	e000      	b.n	800a706 <USBD_ClrFeature+0x3c>
      break;
 800a704:	bf00      	nop
  }
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	781a      	ldrb	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3301      	adds	r3, #1
 800a728:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	3301      	adds	r3, #1
 800a736:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f7ff fa16 	bl	8009b6a <SWAPBYTE>
 800a73e:	4603      	mov	r3, r0
 800a740:	461a      	mov	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3301      	adds	r3, #1
 800a74a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3301      	adds	r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7ff fa09 	bl	8009b6a <SWAPBYTE>
 800a758:	4603      	mov	r3, r0
 800a75a:	461a      	mov	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3301      	adds	r3, #1
 800a76a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff f9fc 	bl	8009b6a <SWAPBYTE>
 800a772:	4603      	mov	r3, r0
 800a774:	461a      	mov	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	80da      	strh	r2, [r3, #6]
}
 800a77a:	bf00      	nop
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a78c:	2180      	movs	r1, #128	@ 0x80
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f003 fb16 	bl	800ddc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a794:	2100      	movs	r1, #0
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f003 fb12 	bl	800ddc0 <USBD_LL_StallEP>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d042      	beq.n	800a840 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a7be:	6938      	ldr	r0, [r7, #16]
 800a7c0:	f000 f842 	bl	800a848 <USBD_GetLen>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	005b      	lsls	r3, r3, #1
 800a7ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7ce:	d808      	bhi.n	800a7e2 <USBD_GetString+0x3e>
 800a7d0:	6938      	ldr	r0, [r7, #16]
 800a7d2:	f000 f839 	bl	800a848 <USBD_GetLen>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	3301      	adds	r3, #1
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	e001      	b.n	800a7e6 <USBD_GetString+0x42>
 800a7e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	7812      	ldrb	r2, [r2, #0]
 800a7f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	4413      	add	r3, r2
 800a802:	2203      	movs	r2, #3
 800a804:	701a      	strb	r2, [r3, #0]
  idx++;
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	3301      	adds	r3, #1
 800a80a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a80c:	e013      	b.n	800a836 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	4413      	add	r3, r2
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	7812      	ldrb	r2, [r2, #0]
 800a818:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	3301      	adds	r3, #1
 800a81e:	613b      	str	r3, [r7, #16]
    idx++;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	3301      	adds	r3, #1
 800a824:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	4413      	add	r3, r2
 800a82c:	2200      	movs	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	3301      	adds	r3, #1
 800a834:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e7      	bne.n	800a80e <USBD_GetString+0x6a>
 800a83e:	e000      	b.n	800a842 <USBD_GetString+0x9e>
    return;
 800a840:	bf00      	nop
  }
}
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a858:	e005      	b.n	800a866 <USBD_GetLen+0x1e>
  {
    len++;
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
 800a85c:	3301      	adds	r3, #1
 800a85e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	3301      	adds	r3, #1
 800a864:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1f5      	bne.n	800a85a <USBD_GetLen+0x12>
  }

  return len;
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2202      	movs	r2, #2
 800a88c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f003 fb15 	bl	800ded2 <USBD_LL_Transmit>

  return USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f003 fb04 	bl	800ded2 <USBD_LL_Transmit>

  return USBD_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2203      	movs	r2, #3
 800a8e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f003 fb08 	bl	800df14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	60b9      	str	r1, [r7, #8]
 800a918:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	2100      	movs	r1, #0
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f003 faf7 	bl	800df14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2204      	movs	r2, #4
 800a93c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a940:	2300      	movs	r3, #0
 800a942:	2200      	movs	r2, #0
 800a944:	2100      	movs	r1, #0
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f003 fac3 	bl	800ded2 <USBD_LL_Transmit>

  return USBD_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b082      	sub	sp, #8
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2205      	movs	r2, #5
 800a962:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a966:	2300      	movs	r3, #0
 800a968:	2200      	movs	r2, #0
 800a96a:	2100      	movs	r1, #0
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f003 fad1 	bl	800df14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a97c:	b480      	push	{r7}
 800a97e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a980:	bf00      	nop
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
	...

0800a98c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a992:	f3ef 8305 	mrs	r3, IPSR
 800a996:	60bb      	str	r3, [r7, #8]
  return(result);
 800a998:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10f      	bne.n	800a9be <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a99e:	f3ef 8310 	mrs	r3, PRIMASK
 800a9a2:	607b      	str	r3, [r7, #4]
  return(result);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d105      	bne.n	800a9b6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9aa:	f3ef 8311 	mrs	r3, BASEPRI
 800a9ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d007      	beq.n	800a9c6 <osKernelInitialize+0x3a>
 800a9b6:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f0 <osKernelInitialize+0x64>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d103      	bne.n	800a9c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a9be:	f06f 0305 	mvn.w	r3, #5
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	e00c      	b.n	800a9e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a9c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f0 <osKernelInitialize+0x64>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d105      	bne.n	800a9da <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a9ce:	4b08      	ldr	r3, [pc, #32]	@ (800a9f0 <osKernelInitialize+0x64>)
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e002      	b.n	800a9e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a9da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	20007a48 	.word	0x20007a48

0800a9f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9fa:	f3ef 8305 	mrs	r3, IPSR
 800a9fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10f      	bne.n	800aa26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa06:	f3ef 8310 	mrs	r3, PRIMASK
 800aa0a:	607b      	str	r3, [r7, #4]
  return(result);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d105      	bne.n	800aa1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa12:	f3ef 8311 	mrs	r3, BASEPRI
 800aa16:	603b      	str	r3, [r7, #0]
  return(result);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d007      	beq.n	800aa2e <osKernelStart+0x3a>
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	@ (800aa5c <osKernelStart+0x68>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d103      	bne.n	800aa2e <osKernelStart+0x3a>
    stat = osErrorISR;
 800aa26:	f06f 0305 	mvn.w	r3, #5
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	e010      	b.n	800aa50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aa2e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa5c <osKernelStart+0x68>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d109      	bne.n	800aa4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aa36:	f7ff ffa1 	bl	800a97c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aa3a:	4b08      	ldr	r3, [pc, #32]	@ (800aa5c <osKernelStart+0x68>)
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa40:	f001 f8ca 	bl	800bbd8 <vTaskStartScheduler>
      stat = osOK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	e002      	b.n	800aa50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800aa4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800aa50:	68fb      	ldr	r3, [r7, #12]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20007a48 	.word	0x20007a48

0800aa60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b090      	sub	sp, #64	@ 0x40
 800aa64:	af04      	add	r7, sp, #16
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa70:	f3ef 8305 	mrs	r3, IPSR
 800aa74:	61fb      	str	r3, [r7, #28]
  return(result);
 800aa76:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f040 808f 	bne.w	800ab9c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa7e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa82:	61bb      	str	r3, [r7, #24]
  return(result);
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d105      	bne.n	800aa96 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa8a:	f3ef 8311 	mrs	r3, BASEPRI
 800aa8e:	617b      	str	r3, [r7, #20]
  return(result);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <osThreadNew+0x3e>
 800aa96:	4b44      	ldr	r3, [pc, #272]	@ (800aba8 <osThreadNew+0x148>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d07e      	beq.n	800ab9c <osThreadNew+0x13c>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d07b      	beq.n	800ab9c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800aaa4:	2380      	movs	r3, #128	@ 0x80
 800aaa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800aaa8:	2318      	movs	r3, #24
 800aaaa:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800aaac:	2300      	movs	r3, #0
 800aaae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800aab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aab4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d045      	beq.n	800ab48 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <osThreadNew+0x6a>
        name = attr->name;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d002      	beq.n	800aad8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d008      	beq.n	800aaf0 <osThreadNew+0x90>
 800aade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae0:	2b38      	cmp	r3, #56	@ 0x38
 800aae2:	d805      	bhi.n	800aaf0 <osThreadNew+0x90>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <osThreadNew+0x94>
        return (NULL);
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	e054      	b.n	800ab9e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	089b      	lsrs	r3, r3, #2
 800ab02:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00e      	beq.n	800ab2a <osThreadNew+0xca>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	2b5b      	cmp	r3, #91	@ 0x5b
 800ab12:	d90a      	bls.n	800ab2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d006      	beq.n	800ab2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <osThreadNew+0xca>
        mem = 1;
 800ab24:	2301      	movs	r3, #1
 800ab26:	623b      	str	r3, [r7, #32]
 800ab28:	e010      	b.n	800ab4c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10c      	bne.n	800ab4c <osThreadNew+0xec>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d108      	bne.n	800ab4c <osThreadNew+0xec>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d104      	bne.n	800ab4c <osThreadNew+0xec>
          mem = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	623b      	str	r3, [r7, #32]
 800ab46:	e001      	b.n	800ab4c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ab4c:	6a3b      	ldr	r3, [r7, #32]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d110      	bne.n	800ab74 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab5a:	9202      	str	r2, [sp, #8]
 800ab5c:	9301      	str	r3, [sp, #4]
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 fe4f 	bl	800b80c <xTaskCreateStatic>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	613b      	str	r3, [r7, #16]
 800ab72:	e013      	b.n	800ab9c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d110      	bne.n	800ab9c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	f107 0310 	add.w	r3, r7, #16
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 fea3 	bl	800b8d8 <xTaskCreate>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d001      	beq.n	800ab9c <osThreadNew+0x13c>
          hTask = NULL;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab9c:	693b      	ldr	r3, [r7, #16]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3730      	adds	r7, #48	@ 0x30
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20007a48 	.word	0x20007a48

0800abac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abb4:	f3ef 8305 	mrs	r3, IPSR
 800abb8:	613b      	str	r3, [r7, #16]
  return(result);
 800abba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10f      	bne.n	800abe0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abc0:	f3ef 8310 	mrs	r3, PRIMASK
 800abc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d105      	bne.n	800abd8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800abcc:	f3ef 8311 	mrs	r3, BASEPRI
 800abd0:	60bb      	str	r3, [r7, #8]
  return(result);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d007      	beq.n	800abe8 <osDelay+0x3c>
 800abd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ac04 <osDelay+0x58>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d103      	bne.n	800abe8 <osDelay+0x3c>
    stat = osErrorISR;
 800abe0:	f06f 0305 	mvn.w	r3, #5
 800abe4:	617b      	str	r3, [r7, #20]
 800abe6:	e007      	b.n	800abf8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800abe8:	2300      	movs	r3, #0
 800abea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d002      	beq.n	800abf8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 ffb8 	bl	800bb68 <vTaskDelay>
    }
  }

  return (stat);
 800abf8:	697b      	ldr	r3, [r7, #20]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3718      	adds	r7, #24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20007a48 	.word	0x20007a48

0800ac08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4a07      	ldr	r2, [pc, #28]	@ (800ac34 <vApplicationGetIdleTaskMemory+0x2c>)
 800ac18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	4a06      	ldr	r2, [pc, #24]	@ (800ac38 <vApplicationGetIdleTaskMemory+0x30>)
 800ac1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2280      	movs	r2, #128	@ 0x80
 800ac24:	601a      	str	r2, [r3, #0]
}
 800ac26:	bf00      	nop
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20007a4c 	.word	0x20007a4c
 800ac38:	20007aa8 	.word	0x20007aa8

0800ac3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4a07      	ldr	r2, [pc, #28]	@ (800ac68 <vApplicationGetTimerTaskMemory+0x2c>)
 800ac4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	4a06      	ldr	r2, [pc, #24]	@ (800ac6c <vApplicationGetTimerTaskMemory+0x30>)
 800ac52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ac5a:	601a      	str	r2, [r3, #0]
}
 800ac5c:	bf00      	nop
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	20007ca8 	.word	0x20007ca8
 800ac6c:	20007d04 	.word	0x20007d04

0800ac70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f103 0208 	add.w	r2, r3, #8
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f103 0208 	add.w	r2, r3, #8
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f103 0208 	add.w	r2, r3, #8
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800acbe:	bf00      	nop
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800acca:	b480      	push	{r7}
 800accc:	b085      	sub	sp, #20
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	601a      	str	r2, [r3, #0]
}
 800ad06:	bf00      	nop
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad28:	d103      	bne.n	800ad32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	e00c      	b.n	800ad4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3308      	adds	r3, #8
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	e002      	b.n	800ad40 <vListInsert+0x2e>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	60fb      	str	r3, [r7, #12]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d2f6      	bcs.n	800ad3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	601a      	str	r2, [r3, #0]
}
 800ad78:	bf00      	nop
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6892      	ldr	r2, [r2, #8]
 800ad9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	6852      	ldr	r2, [r2, #4]
 800ada4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	429a      	cmp	r2, r3
 800adae:	d103      	bne.n	800adb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	1e5a      	subs	r2, r3, #1
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10d      	bne.n	800ae08 <xQueueGenericReset+0x30>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf0:	b672      	cpsid	i
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	b662      	cpsie	i
 800ae00:	60bb      	str	r3, [r7, #8]
}
 800ae02:	bf00      	nop
 800ae04:	bf00      	nop
 800ae06:	e7fd      	b.n	800ae04 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ae08:	f002 f8d0 	bl	800cfac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae14:	68f9      	ldr	r1, [r7, #12]
 800ae16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae18:	fb01 f303 	mul.w	r3, r1, r3
 800ae1c:	441a      	add	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	68f9      	ldr	r1, [r7, #12]
 800ae3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae3e:	fb01 f303 	mul.w	r3, r1, r3
 800ae42:	441a      	add	r2, r3
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	22ff      	movs	r2, #255	@ 0xff
 800ae4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	22ff      	movs	r2, #255	@ 0xff
 800ae54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d114      	bne.n	800ae88 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d01a      	beq.n	800ae9c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3310      	adds	r3, #16
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f001 f950 	bl	800c110 <xTaskRemoveFromEventList>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d012      	beq.n	800ae9c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae76:	4b0d      	ldr	r3, [pc, #52]	@ (800aeac <xQueueGenericReset+0xd4>)
 800ae78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	e009      	b.n	800ae9c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3310      	adds	r3, #16
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7ff feef 	bl	800ac70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3324      	adds	r3, #36	@ 0x24
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7ff feea 	bl	800ac70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae9c:	f002 f8bc 	bl	800d018 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aea0:	2301      	movs	r3, #1
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	e000ed04 	.word	0xe000ed04

0800aeb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08e      	sub	sp, #56	@ 0x38
 800aeb4:	af02      	add	r7, sp, #8
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10d      	bne.n	800aee0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec8:	b672      	cpsid	i
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	b662      	cpsie	i
 800aed8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aeda:	bf00      	nop
 800aedc:	bf00      	nop
 800aede:	e7fd      	b.n	800aedc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10d      	bne.n	800af02 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeea:	b672      	cpsid	i
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	b662      	cpsie	i
 800aefa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aefc:	bf00      	nop
 800aefe:	bf00      	nop
 800af00:	e7fd      	b.n	800aefe <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <xQueueGenericCreateStatic+0x5e>
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <xQueueGenericCreateStatic+0x62>
 800af0e:	2301      	movs	r3, #1
 800af10:	e000      	b.n	800af14 <xQueueGenericCreateStatic+0x64>
 800af12:	2300      	movs	r3, #0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10d      	bne.n	800af34 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1c:	b672      	cpsid	i
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	b662      	cpsie	i
 800af2c:	623b      	str	r3, [r7, #32]
}
 800af2e:	bf00      	nop
 800af30:	bf00      	nop
 800af32:	e7fd      	b.n	800af30 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <xQueueGenericCreateStatic+0x90>
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <xQueueGenericCreateStatic+0x94>
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <xQueueGenericCreateStatic+0x96>
 800af44:	2300      	movs	r3, #0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10d      	bne.n	800af66 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4e:	b672      	cpsid	i
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	b662      	cpsie	i
 800af5e:	61fb      	str	r3, [r7, #28]
}
 800af60:	bf00      	nop
 800af62:	bf00      	nop
 800af64:	e7fd      	b.n	800af62 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800af66:	2350      	movs	r3, #80	@ 0x50
 800af68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2b50      	cmp	r3, #80	@ 0x50
 800af6e:	d00d      	beq.n	800af8c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af74:	b672      	cpsid	i
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	b662      	cpsie	i
 800af84:	61bb      	str	r3, [r7, #24]
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	e7fd      	b.n	800af88 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800af8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800af92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00d      	beq.n	800afb4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800af98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800afa0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800afa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	4613      	mov	r3, r2
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	68b9      	ldr	r1, [r7, #8]
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f000 f805 	bl	800afbe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800afb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3730      	adds	r7, #48	@ 0x30
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	60f8      	str	r0, [r7, #12]
 800afc6:	60b9      	str	r1, [r7, #8]
 800afc8:	607a      	str	r2, [r7, #4]
 800afca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d103      	bne.n	800afda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	601a      	str	r2, [r3, #0]
 800afd8:	e002      	b.n	800afe0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800afec:	2101      	movs	r1, #1
 800afee:	69b8      	ldr	r0, [r7, #24]
 800aff0:	f7ff fef2 	bl	800add8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	78fa      	ldrb	r2, [r7, #3]
 800aff8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800affc:	bf00      	nop
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08e      	sub	sp, #56	@ 0x38
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
 800b010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b012:	2300      	movs	r3, #0
 800b014:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10d      	bne.n	800b03c <xQueueGenericSend+0x38>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b024:	b672      	cpsid	i
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	b662      	cpsie	i
 800b034:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b036:	bf00      	nop
 800b038:	bf00      	nop
 800b03a:	e7fd      	b.n	800b038 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d103      	bne.n	800b04a <xQueueGenericSend+0x46>
 800b042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <xQueueGenericSend+0x4a>
 800b04a:	2301      	movs	r3, #1
 800b04c:	e000      	b.n	800b050 <xQueueGenericSend+0x4c>
 800b04e:	2300      	movs	r3, #0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10d      	bne.n	800b070 <xQueueGenericSend+0x6c>
	__asm volatile
 800b054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b058:	b672      	cpsid	i
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	b662      	cpsie	i
 800b068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b06a:	bf00      	nop
 800b06c:	bf00      	nop
 800b06e:	e7fd      	b.n	800b06c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b02      	cmp	r3, #2
 800b074:	d103      	bne.n	800b07e <xQueueGenericSend+0x7a>
 800b076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d101      	bne.n	800b082 <xQueueGenericSend+0x7e>
 800b07e:	2301      	movs	r3, #1
 800b080:	e000      	b.n	800b084 <xQueueGenericSend+0x80>
 800b082:	2300      	movs	r3, #0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10d      	bne.n	800b0a4 <xQueueGenericSend+0xa0>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08c:	b672      	cpsid	i
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	b662      	cpsie	i
 800b09c:	623b      	str	r3, [r7, #32]
}
 800b09e:	bf00      	nop
 800b0a0:	bf00      	nop
 800b0a2:	e7fd      	b.n	800b0a0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0a4:	f001 fa26 	bl	800c4f4 <xTaskGetSchedulerState>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <xQueueGenericSend+0xb0>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d101      	bne.n	800b0b8 <xQueueGenericSend+0xb4>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e000      	b.n	800b0ba <xQueueGenericSend+0xb6>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10d      	bne.n	800b0da <xQueueGenericSend+0xd6>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c2:	b672      	cpsid	i
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	b662      	cpsie	i
 800b0d2:	61fb      	str	r3, [r7, #28]
}
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop
 800b0d8:	e7fd      	b.n	800b0d6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0da:	f001 ff67 	bl	800cfac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d302      	bcc.n	800b0f0 <xQueueGenericSend+0xec>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d129      	bne.n	800b144 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	68b9      	ldr	r1, [r7, #8]
 800b0f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0f6:	f000 fa1b 	bl	800b530 <prvCopyDataToQueue>
 800b0fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	d010      	beq.n	800b126 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b106:	3324      	adds	r3, #36	@ 0x24
 800b108:	4618      	mov	r0, r3
 800b10a:	f001 f801 	bl	800c110 <xTaskRemoveFromEventList>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d013      	beq.n	800b13c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b114:	4b3f      	ldr	r3, [pc, #252]	@ (800b214 <xQueueGenericSend+0x210>)
 800b116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	e00a      	b.n	800b13c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d007      	beq.n	800b13c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b12c:	4b39      	ldr	r3, [pc, #228]	@ (800b214 <xQueueGenericSend+0x210>)
 800b12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	f3bf 8f4f 	dsb	sy
 800b138:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b13c:	f001 ff6c 	bl	800d018 <vPortExitCritical>
				return pdPASS;
 800b140:	2301      	movs	r3, #1
 800b142:	e063      	b.n	800b20c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d103      	bne.n	800b152 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b14a:	f001 ff65 	bl	800d018 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	e05c      	b.n	800b20c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b154:	2b00      	cmp	r3, #0
 800b156:	d106      	bne.n	800b166 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b158:	f107 0314 	add.w	r3, r7, #20
 800b15c:	4618      	mov	r0, r3
 800b15e:	f001 f867 	bl	800c230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b162:	2301      	movs	r3, #1
 800b164:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b166:	f001 ff57 	bl	800d018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b16a:	f000 fda1 	bl	800bcb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b16e:	f001 ff1d 	bl	800cfac <vPortEnterCritical>
 800b172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b174:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b178:	b25b      	sxtb	r3, r3
 800b17a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b17e:	d103      	bne.n	800b188 <xQueueGenericSend+0x184>
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b18e:	b25b      	sxtb	r3, r3
 800b190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b194:	d103      	bne.n	800b19e <xQueueGenericSend+0x19a>
 800b196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b19e:	f001 ff3b 	bl	800d018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1a2:	1d3a      	adds	r2, r7, #4
 800b1a4:	f107 0314 	add.w	r3, r7, #20
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 f856 	bl	800c25c <xTaskCheckForTimeOut>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d124      	bne.n	800b200 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b1b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1b8:	f000 fab2 	bl	800b720 <prvIsQueueFull>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d018      	beq.n	800b1f4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c4:	3310      	adds	r3, #16
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 ff4a 	bl	800c064 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b1d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1d2:	f000 fa3d 	bl	800b650 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1d6:	f000 fd79 	bl	800bccc <xTaskResumeAll>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f47f af7c 	bne.w	800b0da <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b214 <xQueueGenericSend+0x210>)
 800b1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1e8:	601a      	str	r2, [r3, #0]
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	e772      	b.n	800b0da <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1f6:	f000 fa2b 	bl	800b650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1fa:	f000 fd67 	bl	800bccc <xTaskResumeAll>
 800b1fe:	e76c      	b.n	800b0da <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b202:	f000 fa25 	bl	800b650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b206:	f000 fd61 	bl	800bccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b20a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3738      	adds	r7, #56	@ 0x38
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	e000ed04 	.word	0xe000ed04

0800b218 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08e      	sub	sp, #56	@ 0x38
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10d      	bne.n	800b24c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b234:	b672      	cpsid	i
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	b662      	cpsie	i
 800b244:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b246:	bf00      	nop
 800b248:	bf00      	nop
 800b24a:	e7fd      	b.n	800b248 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d103      	bne.n	800b25a <xQueueGenericSendFromISR+0x42>
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <xQueueGenericSendFromISR+0x46>
 800b25a:	2301      	movs	r3, #1
 800b25c:	e000      	b.n	800b260 <xQueueGenericSendFromISR+0x48>
 800b25e:	2300      	movs	r3, #0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10d      	bne.n	800b280 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b268:	b672      	cpsid	i
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	b662      	cpsie	i
 800b278:	623b      	str	r3, [r7, #32]
}
 800b27a:	bf00      	nop
 800b27c:	bf00      	nop
 800b27e:	e7fd      	b.n	800b27c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b02      	cmp	r3, #2
 800b284:	d103      	bne.n	800b28e <xQueueGenericSendFromISR+0x76>
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d101      	bne.n	800b292 <xQueueGenericSendFromISR+0x7a>
 800b28e:	2301      	movs	r3, #1
 800b290:	e000      	b.n	800b294 <xQueueGenericSendFromISR+0x7c>
 800b292:	2300      	movs	r3, #0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10d      	bne.n	800b2b4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29c:	b672      	cpsid	i
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	b662      	cpsie	i
 800b2ac:	61fb      	str	r3, [r7, #28]
}
 800b2ae:	bf00      	nop
 800b2b0:	bf00      	nop
 800b2b2:	e7fd      	b.n	800b2b0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2b4:	f001 ff62 	bl	800d17c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b2b8:	f3ef 8211 	mrs	r2, BASEPRI
 800b2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c0:	b672      	cpsid	i
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	b662      	cpsie	i
 800b2d0:	61ba      	str	r2, [r7, #24]
 800b2d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b2d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d302      	bcc.n	800b2ea <xQueueGenericSendFromISR+0xd2>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d12c      	bne.n	800b344 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	68b9      	ldr	r1, [r7, #8]
 800b2f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2fa:	f000 f919 	bl	800b530 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b302:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b306:	d112      	bne.n	800b32e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d016      	beq.n	800b33e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b312:	3324      	adds	r3, #36	@ 0x24
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fefb 	bl	800c110 <xTaskRemoveFromEventList>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00e      	beq.n	800b33e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00b      	beq.n	800b33e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	601a      	str	r2, [r3, #0]
 800b32c:	e007      	b.n	800b33e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b32e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b332:	3301      	adds	r3, #1
 800b334:	b2db      	uxtb	r3, r3
 800b336:	b25a      	sxtb	r2, r3
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b33e:	2301      	movs	r3, #1
 800b340:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800b342:	e001      	b.n	800b348 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b344:	2300      	movs	r3, #0
 800b346:	637b      	str	r3, [r7, #52]	@ 0x34
 800b348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b352:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b356:	4618      	mov	r0, r3
 800b358:	3738      	adds	r7, #56	@ 0x38
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
	...

0800b360 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08c      	sub	sp, #48	@ 0x30
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b36c:	2300      	movs	r3, #0
 800b36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10d      	bne.n	800b396 <xQueueReceive+0x36>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37e:	b672      	cpsid	i
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	b662      	cpsie	i
 800b38e:	623b      	str	r3, [r7, #32]
}
 800b390:	bf00      	nop
 800b392:	bf00      	nop
 800b394:	e7fd      	b.n	800b392 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d103      	bne.n	800b3a4 <xQueueReceive+0x44>
 800b39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <xQueueReceive+0x48>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e000      	b.n	800b3aa <xQueueReceive+0x4a>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10d      	bne.n	800b3ca <xQueueReceive+0x6a>
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b2:	b672      	cpsid	i
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	b662      	cpsie	i
 800b3c2:	61fb      	str	r3, [r7, #28]
}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop
 800b3c8:	e7fd      	b.n	800b3c6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3ca:	f001 f893 	bl	800c4f4 <xTaskGetSchedulerState>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d102      	bne.n	800b3da <xQueueReceive+0x7a>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <xQueueReceive+0x7e>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e000      	b.n	800b3e0 <xQueueReceive+0x80>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10d      	bne.n	800b400 <xQueueReceive+0xa0>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e8:	b672      	cpsid	i
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	b662      	cpsie	i
 800b3f8:	61bb      	str	r3, [r7, #24]
}
 800b3fa:	bf00      	nop
 800b3fc:	bf00      	nop
 800b3fe:	e7fd      	b.n	800b3fc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b400:	f001 fdd4 	bl	800cfac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b408:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d01f      	beq.n	800b450 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b410:	68b9      	ldr	r1, [r7, #8]
 800b412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b414:	f000 f8f6 	bl	800b604 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41a:	1e5a      	subs	r2, r3, #1
 800b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00f      	beq.n	800b448 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42a:	3310      	adds	r3, #16
 800b42c:	4618      	mov	r0, r3
 800b42e:	f000 fe6f 	bl	800c110 <xTaskRemoveFromEventList>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d007      	beq.n	800b448 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b438:	4b3c      	ldr	r3, [pc, #240]	@ (800b52c <xQueueReceive+0x1cc>)
 800b43a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b448:	f001 fde6 	bl	800d018 <vPortExitCritical>
				return pdPASS;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e069      	b.n	800b524 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d103      	bne.n	800b45e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b456:	f001 fddf 	bl	800d018 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b45a:	2300      	movs	r3, #0
 800b45c:	e062      	b.n	800b524 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d106      	bne.n	800b472 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b464:	f107 0310 	add.w	r3, r7, #16
 800b468:	4618      	mov	r0, r3
 800b46a:	f000 fee1 	bl	800c230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b46e:	2301      	movs	r3, #1
 800b470:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b472:	f001 fdd1 	bl	800d018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b476:	f000 fc1b 	bl	800bcb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b47a:	f001 fd97 	bl	800cfac <vPortEnterCritical>
 800b47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b484:	b25b      	sxtb	r3, r3
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b48a:	d103      	bne.n	800b494 <xQueueReceive+0x134>
 800b48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b496:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b49a:	b25b      	sxtb	r3, r3
 800b49c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4a0:	d103      	bne.n	800b4aa <xQueueReceive+0x14a>
 800b4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4aa:	f001 fdb5 	bl	800d018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4ae:	1d3a      	adds	r2, r7, #4
 800b4b0:	f107 0310 	add.w	r3, r7, #16
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 fed0 	bl	800c25c <xTaskCheckForTimeOut>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d123      	bne.n	800b50a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4c4:	f000 f916 	bl	800b6f4 <prvIsQueueEmpty>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d017      	beq.n	800b4fe <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	3324      	adds	r3, #36	@ 0x24
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 fdc4 	bl	800c064 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b4dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4de:	f000 f8b7 	bl	800b650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4e2:	f000 fbf3 	bl	800bccc <xTaskResumeAll>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d189      	bne.n	800b400 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800b4ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b52c <xQueueReceive+0x1cc>)
 800b4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	e780      	b.n	800b400 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b4fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b500:	f000 f8a6 	bl	800b650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b504:	f000 fbe2 	bl	800bccc <xTaskResumeAll>
 800b508:	e77a      	b.n	800b400 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b50a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b50c:	f000 f8a0 	bl	800b650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b510:	f000 fbdc 	bl	800bccc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b516:	f000 f8ed 	bl	800b6f4 <prvIsQueueEmpty>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f43f af6f 	beq.w	800b400 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b522:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b524:	4618      	mov	r0, r3
 800b526:	3730      	adds	r7, #48	@ 0x30
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	e000ed04 	.word	0xe000ed04

0800b530 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b53c:	2300      	movs	r3, #0
 800b53e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b544:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10d      	bne.n	800b56a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d14d      	bne.n	800b5f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 ffe8 	bl	800c530 <xTaskPriorityDisinherit>
 800b560:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	609a      	str	r2, [r3, #8]
 800b568:	e043      	b.n	800b5f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d119      	bne.n	800b5a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6858      	ldr	r0, [r3, #4]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b578:	461a      	mov	r2, r3
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	f010 f9a3 	bl	801b8c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b588:	441a      	add	r2, r3
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	429a      	cmp	r2, r3
 800b598:	d32b      	bcc.n	800b5f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	605a      	str	r2, [r3, #4]
 800b5a2:	e026      	b.n	800b5f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	68d8      	ldr	r0, [r3, #12]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	68b9      	ldr	r1, [r7, #8]
 800b5b0:	f010 f989 	bl	801b8c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5bc:	425b      	negs	r3, r3
 800b5be:	441a      	add	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d207      	bcs.n	800b5e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	689a      	ldr	r2, [r3, #8]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5d8:	425b      	negs	r3, r3
 800b5da:	441a      	add	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d105      	bne.n	800b5f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	1c5a      	adds	r2, r3, #1
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b5fa:	697b      	ldr	r3, [r7, #20]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b612:	2b00      	cmp	r3, #0
 800b614:	d018      	beq.n	800b648 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b61e:	441a      	add	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d303      	bcc.n	800b638 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68d9      	ldr	r1, [r3, #12]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b640:	461a      	mov	r2, r3
 800b642:	6838      	ldr	r0, [r7, #0]
 800b644:	f010 f93f 	bl	801b8c6 <memcpy>
	}
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b658:	f001 fca8 	bl	800cfac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b662:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b664:	e011      	b.n	800b68a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d012      	beq.n	800b694 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3324      	adds	r3, #36	@ 0x24
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fd4c 	bl	800c110 <xTaskRemoveFromEventList>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b67e:	f000 fe55 	bl	800c32c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b682:	7bfb      	ldrb	r3, [r7, #15]
 800b684:	3b01      	subs	r3, #1
 800b686:	b2db      	uxtb	r3, r3
 800b688:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dce9      	bgt.n	800b666 <prvUnlockQueue+0x16>
 800b692:	e000      	b.n	800b696 <prvUnlockQueue+0x46>
					break;
 800b694:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	22ff      	movs	r2, #255	@ 0xff
 800b69a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b69e:	f001 fcbb 	bl	800d018 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b6a2:	f001 fc83 	bl	800cfac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6ae:	e011      	b.n	800b6d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d012      	beq.n	800b6de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3310      	adds	r3, #16
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 fd27 	bl	800c110 <xTaskRemoveFromEventList>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6c8:	f000 fe30 	bl	800c32c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6cc:	7bbb      	ldrb	r3, [r7, #14]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	dce9      	bgt.n	800b6b0 <prvUnlockQueue+0x60>
 800b6dc:	e000      	b.n	800b6e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	22ff      	movs	r2, #255	@ 0xff
 800b6e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b6e8:	f001 fc96 	bl	800d018 <vPortExitCritical>
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6fc:	f001 fc56 	bl	800cfac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	e001      	b.n	800b712 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b712:	f001 fc81 	bl	800d018 <vPortExitCritical>

	return xReturn;
 800b716:	68fb      	ldr	r3, [r7, #12]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b728:	f001 fc40 	bl	800cfac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b734:	429a      	cmp	r2, r3
 800b736:	d102      	bne.n	800b73e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b738:	2301      	movs	r3, #1
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	e001      	b.n	800b742 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b73e:	2300      	movs	r3, #0
 800b740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b742:	f001 fc69 	bl	800d018 <vPortExitCritical>

	return xReturn;
 800b746:	68fb      	ldr	r3, [r7, #12]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]
 800b75e:	e014      	b.n	800b78a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b760:	4a0f      	ldr	r2, [pc, #60]	@ (800b7a0 <vQueueAddToRegistry+0x50>)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10b      	bne.n	800b784 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b76c:	490c      	ldr	r1, [pc, #48]	@ (800b7a0 <vQueueAddToRegistry+0x50>)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b776:	4a0a      	ldr	r2, [pc, #40]	@ (800b7a0 <vQueueAddToRegistry+0x50>)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	4413      	add	r3, r2
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b782:	e006      	b.n	800b792 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3301      	adds	r3, #1
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b07      	cmp	r3, #7
 800b78e:	d9e7      	bls.n	800b760 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b790:	bf00      	nop
 800b792:	bf00      	nop
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	20008104 	.word	0x20008104

0800b7a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b7b4:	f001 fbfa 	bl	800cfac <vPortEnterCritical>
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7be:	b25b      	sxtb	r3, r3
 800b7c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7c4:	d103      	bne.n	800b7ce <vQueueWaitForMessageRestricted+0x2a>
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7d4:	b25b      	sxtb	r3, r3
 800b7d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7da:	d103      	bne.n	800b7e4 <vQueueWaitForMessageRestricted+0x40>
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7e4:	f001 fc18 	bl	800d018 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d106      	bne.n	800b7fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	3324      	adds	r3, #36	@ 0x24
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	68b9      	ldr	r1, [r7, #8]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f000 fc5b 	bl	800c0b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b7fe:	6978      	ldr	r0, [r7, #20]
 800b800:	f7ff ff26 	bl	800b650 <prvUnlockQueue>
	}
 800b804:	bf00      	nop
 800b806:	3718      	adds	r7, #24
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08e      	sub	sp, #56	@ 0x38
 800b810:	af04      	add	r7, sp, #16
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
 800b818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10d      	bne.n	800b83c <xTaskCreateStatic+0x30>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b824:	b672      	cpsid	i
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	b662      	cpsie	i
 800b834:	623b      	str	r3, [r7, #32]
}
 800b836:	bf00      	nop
 800b838:	bf00      	nop
 800b83a:	e7fd      	b.n	800b838 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10d      	bne.n	800b85e <xTaskCreateStatic+0x52>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b846:	b672      	cpsid	i
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	b662      	cpsie	i
 800b856:	61fb      	str	r3, [r7, #28]
}
 800b858:	bf00      	nop
 800b85a:	bf00      	nop
 800b85c:	e7fd      	b.n	800b85a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b85e:	235c      	movs	r3, #92	@ 0x5c
 800b860:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	2b5c      	cmp	r3, #92	@ 0x5c
 800b866:	d00d      	beq.n	800b884 <xTaskCreateStatic+0x78>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86c:	b672      	cpsid	i
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	b662      	cpsie	i
 800b87c:	61bb      	str	r3, [r7, #24]
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	e7fd      	b.n	800b880 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b884:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d01e      	beq.n	800b8ca <xTaskCreateStatic+0xbe>
 800b88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d01b      	beq.n	800b8ca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b894:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b89a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89e:	2202      	movs	r2, #2
 800b8a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9303      	str	r3, [sp, #12]
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8aa:	9302      	str	r3, [sp, #8]
 800b8ac:	f107 0314 	add.w	r3, r7, #20
 800b8b0:	9301      	str	r3, [sp, #4]
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	68b9      	ldr	r1, [r7, #8]
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f000 f850 	bl	800b962 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b8c4:	f000 f8e0 	bl	800ba88 <prvAddNewTaskToReadyList>
 800b8c8:	e001      	b.n	800b8ce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8ce:	697b      	ldr	r3, [r7, #20]
	}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3728      	adds	r7, #40	@ 0x28
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08c      	sub	sp, #48	@ 0x30
 800b8dc:	af04      	add	r7, sp, #16
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	603b      	str	r3, [r7, #0]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8e8:	88fb      	ldrh	r3, [r7, #6]
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 fc8b 	bl	800d208 <pvPortMalloc>
 800b8f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00e      	beq.n	800b918 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8fa:	205c      	movs	r0, #92	@ 0x5c
 800b8fc:	f001 fc84 	bl	800d208 <pvPortMalloc>
 800b900:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b90e:	e005      	b.n	800b91c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b910:	6978      	ldr	r0, [r7, #20]
 800b912:	f001 fd47 	bl	800d3a4 <vPortFree>
 800b916:	e001      	b.n	800b91c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b918:	2300      	movs	r3, #0
 800b91a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d017      	beq.n	800b952 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b92a:	88fa      	ldrh	r2, [r7, #6]
 800b92c:	2300      	movs	r3, #0
 800b92e:	9303      	str	r3, [sp, #12]
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	9302      	str	r3, [sp, #8]
 800b934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b936:	9301      	str	r3, [sp, #4]
 800b938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	68b9      	ldr	r1, [r7, #8]
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 f80e 	bl	800b962 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b946:	69f8      	ldr	r0, [r7, #28]
 800b948:	f000 f89e 	bl	800ba88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b94c:	2301      	movs	r3, #1
 800b94e:	61bb      	str	r3, [r7, #24]
 800b950:	e002      	b.n	800b958 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b956:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b958:	69bb      	ldr	r3, [r7, #24]
	}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3720      	adds	r7, #32
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b088      	sub	sp, #32
 800b966:	af00      	add	r7, sp, #0
 800b968:	60f8      	str	r0, [r7, #12]
 800b96a:	60b9      	str	r1, [r7, #8]
 800b96c:	607a      	str	r2, [r7, #4]
 800b96e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b972:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	461a      	mov	r2, r3
 800b97a:	21a5      	movs	r1, #165	@ 0xa5
 800b97c:	f00f feda 	bl	801b734 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b984:	6879      	ldr	r1, [r7, #4]
 800b986:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b98a:	440b      	add	r3, r1
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	f023 0307 	bic.w	r3, r3, #7
 800b998:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	f003 0307 	and.w	r3, r3, #7
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00d      	beq.n	800b9c0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a8:	b672      	cpsid	i
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	b662      	cpsie	i
 800b9b8:	617b      	str	r3, [r7, #20]
}
 800b9ba:	bf00      	nop
 800b9bc:	bf00      	nop
 800b9be:	e7fd      	b.n	800b9bc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d01f      	beq.n	800ba06 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	61fb      	str	r3, [r7, #28]
 800b9ca:	e012      	b.n	800b9f2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	7819      	ldrb	r1, [r3, #0]
 800b9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	4413      	add	r3, r2
 800b9da:	3334      	adds	r3, #52	@ 0x34
 800b9dc:	460a      	mov	r2, r1
 800b9de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d006      	beq.n	800b9fa <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	61fb      	str	r3, [r7, #28]
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	2b0f      	cmp	r3, #15
 800b9f6:	d9e9      	bls.n	800b9cc <prvInitialiseNewTask+0x6a>
 800b9f8:	e000      	b.n	800b9fc <prvInitialiseNewTask+0x9a>
			{
				break;
 800b9fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ba04:	e003      	b.n	800ba0e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba10:	2b37      	cmp	r3, #55	@ 0x37
 800ba12:	d901      	bls.n	800ba18 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba14:	2337      	movs	r3, #55	@ 0x37
 800ba16:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba22:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba26:	2200      	movs	r2, #0
 800ba28:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff f93e 	bl	800acb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba36:	3318      	adds	r3, #24
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7ff f939 	bl	800acb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba52:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba56:	2200      	movs	r2, #0
 800ba58:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	68f9      	ldr	r1, [r7, #12]
 800ba66:	69b8      	ldr	r0, [r7, #24]
 800ba68:	f001 f992 	bl	800cd90 <pxPortInitialiseStack>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba7e:	bf00      	nop
 800ba80:	3720      	adds	r7, #32
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
	...

0800ba88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba90:	f001 fa8c 	bl	800cfac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba94:	4b2d      	ldr	r3, [pc, #180]	@ (800bb4c <prvAddNewTaskToReadyList+0xc4>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	4a2c      	ldr	r2, [pc, #176]	@ (800bb4c <prvAddNewTaskToReadyList+0xc4>)
 800ba9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba9e:	4b2c      	ldr	r3, [pc, #176]	@ (800bb50 <prvAddNewTaskToReadyList+0xc8>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d109      	bne.n	800baba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800baa6:	4a2a      	ldr	r2, [pc, #168]	@ (800bb50 <prvAddNewTaskToReadyList+0xc8>)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800baac:	4b27      	ldr	r3, [pc, #156]	@ (800bb4c <prvAddNewTaskToReadyList+0xc4>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d110      	bne.n	800bad6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bab4:	f000 fc5e 	bl	800c374 <prvInitialiseTaskLists>
 800bab8:	e00d      	b.n	800bad6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baba:	4b26      	ldr	r3, [pc, #152]	@ (800bb54 <prvAddNewTaskToReadyList+0xcc>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d109      	bne.n	800bad6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bac2:	4b23      	ldr	r3, [pc, #140]	@ (800bb50 <prvAddNewTaskToReadyList+0xc8>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bacc:	429a      	cmp	r2, r3
 800bace:	d802      	bhi.n	800bad6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bad0:	4a1f      	ldr	r2, [pc, #124]	@ (800bb50 <prvAddNewTaskToReadyList+0xc8>)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bad6:	4b20      	ldr	r3, [pc, #128]	@ (800bb58 <prvAddNewTaskToReadyList+0xd0>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	4a1e      	ldr	r2, [pc, #120]	@ (800bb58 <prvAddNewTaskToReadyList+0xd0>)
 800bade:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bae0:	4b1d      	ldr	r3, [pc, #116]	@ (800bb58 <prvAddNewTaskToReadyList+0xd0>)
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baec:	4b1b      	ldr	r3, [pc, #108]	@ (800bb5c <prvAddNewTaskToReadyList+0xd4>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d903      	bls.n	800bafc <prvAddNewTaskToReadyList+0x74>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf8:	4a18      	ldr	r2, [pc, #96]	@ (800bb5c <prvAddNewTaskToReadyList+0xd4>)
 800bafa:	6013      	str	r3, [r2, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb00:	4613      	mov	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4a15      	ldr	r2, [pc, #84]	@ (800bb60 <prvAddNewTaskToReadyList+0xd8>)
 800bb0a:	441a      	add	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3304      	adds	r3, #4
 800bb10:	4619      	mov	r1, r3
 800bb12:	4610      	mov	r0, r2
 800bb14:	f7ff f8d9 	bl	800acca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb18:	f001 fa7e 	bl	800d018 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb1c:	4b0d      	ldr	r3, [pc, #52]	@ (800bb54 <prvAddNewTaskToReadyList+0xcc>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00e      	beq.n	800bb42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb24:	4b0a      	ldr	r3, [pc, #40]	@ (800bb50 <prvAddNewTaskToReadyList+0xc8>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d207      	bcs.n	800bb42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb32:	4b0c      	ldr	r3, [pc, #48]	@ (800bb64 <prvAddNewTaskToReadyList+0xdc>)
 800bb34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb42:	bf00      	nop
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20008618 	.word	0x20008618
 800bb50:	20008144 	.word	0x20008144
 800bb54:	20008624 	.word	0x20008624
 800bb58:	20008634 	.word	0x20008634
 800bb5c:	20008620 	.word	0x20008620
 800bb60:	20008148 	.word	0x20008148
 800bb64:	e000ed04 	.word	0xe000ed04

0800bb68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb70:	2300      	movs	r3, #0
 800bb72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d01a      	beq.n	800bbb0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb7a:	4b15      	ldr	r3, [pc, #84]	@ (800bbd0 <vTaskDelay+0x68>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00d      	beq.n	800bb9e <vTaskDelay+0x36>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb86:	b672      	cpsid	i
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	b662      	cpsie	i
 800bb96:	60bb      	str	r3, [r7, #8]
}
 800bb98:	bf00      	nop
 800bb9a:	bf00      	nop
 800bb9c:	e7fd      	b.n	800bb9a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bb9e:	f000 f887 	bl	800bcb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bba2:	2100      	movs	r1, #0
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 fd37 	bl	800c618 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbaa:	f000 f88f 	bl	800bccc <xTaskResumeAll>
 800bbae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d107      	bne.n	800bbc6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800bbb6:	4b07      	ldr	r3, [pc, #28]	@ (800bbd4 <vTaskDelay+0x6c>)
 800bbb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbc6:	bf00      	nop
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	20008640 	.word	0x20008640
 800bbd4:	e000ed04 	.word	0xe000ed04

0800bbd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08a      	sub	sp, #40	@ 0x28
 800bbdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbe6:	463a      	mov	r2, r7
 800bbe8:	1d39      	adds	r1, r7, #4
 800bbea:	f107 0308 	add.w	r3, r7, #8
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff f80a 	bl	800ac08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	9202      	str	r2, [sp, #8]
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	2300      	movs	r3, #0
 800bc04:	460a      	mov	r2, r1
 800bc06:	4924      	ldr	r1, [pc, #144]	@ (800bc98 <vTaskStartScheduler+0xc0>)
 800bc08:	4824      	ldr	r0, [pc, #144]	@ (800bc9c <vTaskStartScheduler+0xc4>)
 800bc0a:	f7ff fdff 	bl	800b80c <xTaskCreateStatic>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	4a23      	ldr	r2, [pc, #140]	@ (800bca0 <vTaskStartScheduler+0xc8>)
 800bc12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc14:	4b22      	ldr	r3, [pc, #136]	@ (800bca0 <vTaskStartScheduler+0xc8>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	e001      	b.n	800bc26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d102      	bne.n	800bc32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc2c:	f000 fd48 	bl	800c6c0 <xTimerCreateTimerTask>
 800bc30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d118      	bne.n	800bc6a <vTaskStartScheduler+0x92>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3c:	b672      	cpsid	i
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	b662      	cpsie	i
 800bc4c:	613b      	str	r3, [r7, #16]
}
 800bc4e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc50:	4b14      	ldr	r3, [pc, #80]	@ (800bca4 <vTaskStartScheduler+0xcc>)
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc58:	4b13      	ldr	r3, [pc, #76]	@ (800bca8 <vTaskStartScheduler+0xd0>)
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc5e:	4b13      	ldr	r3, [pc, #76]	@ (800bcac <vTaskStartScheduler+0xd4>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc64:	f001 f924 	bl	800ceb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc68:	e011      	b.n	800bc8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc70:	d10d      	bne.n	800bc8e <vTaskStartScheduler+0xb6>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc76:	b672      	cpsid	i
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	b662      	cpsie	i
 800bc86:	60fb      	str	r3, [r7, #12]
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	e7fd      	b.n	800bc8a <vTaskStartScheduler+0xb2>
}
 800bc8e:	bf00      	nop
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	0801c738 	.word	0x0801c738
 800bc9c:	0800c345 	.word	0x0800c345
 800bca0:	2000863c 	.word	0x2000863c
 800bca4:	20008638 	.word	0x20008638
 800bca8:	20008624 	.word	0x20008624
 800bcac:	2000861c 	.word	0x2000861c

0800bcb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bcb4:	4b04      	ldr	r3, [pc, #16]	@ (800bcc8 <vTaskSuspendAll+0x18>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	4a03      	ldr	r2, [pc, #12]	@ (800bcc8 <vTaskSuspendAll+0x18>)
 800bcbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bcbe:	bf00      	nop
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	20008640 	.word	0x20008640

0800bccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcda:	4b43      	ldr	r3, [pc, #268]	@ (800bde8 <xTaskResumeAll+0x11c>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10d      	bne.n	800bcfe <xTaskResumeAll+0x32>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce6:	b672      	cpsid	i
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	b662      	cpsie	i
 800bcf6:	603b      	str	r3, [r7, #0]
}
 800bcf8:	bf00      	nop
 800bcfa:	bf00      	nop
 800bcfc:	e7fd      	b.n	800bcfa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bcfe:	f001 f955 	bl	800cfac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd02:	4b39      	ldr	r3, [pc, #228]	@ (800bde8 <xTaskResumeAll+0x11c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	4a37      	ldr	r2, [pc, #220]	@ (800bde8 <xTaskResumeAll+0x11c>)
 800bd0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd0c:	4b36      	ldr	r3, [pc, #216]	@ (800bde8 <xTaskResumeAll+0x11c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d162      	bne.n	800bdda <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd14:	4b35      	ldr	r3, [pc, #212]	@ (800bdec <xTaskResumeAll+0x120>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d05e      	beq.n	800bdda <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd1c:	e02f      	b.n	800bd7e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd1e:	4b34      	ldr	r3, [pc, #208]	@ (800bdf0 <xTaskResumeAll+0x124>)
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3318      	adds	r3, #24
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff f82a 	bl	800ad84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3304      	adds	r3, #4
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff f825 	bl	800ad84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd3e:	4b2d      	ldr	r3, [pc, #180]	@ (800bdf4 <xTaskResumeAll+0x128>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d903      	bls.n	800bd4e <xTaskResumeAll+0x82>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4a:	4a2a      	ldr	r2, [pc, #168]	@ (800bdf4 <xTaskResumeAll+0x128>)
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4a27      	ldr	r2, [pc, #156]	@ (800bdf8 <xTaskResumeAll+0x12c>)
 800bd5c:	441a      	add	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	3304      	adds	r3, #4
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f7fe ffb0 	bl	800acca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd6e:	4b23      	ldr	r3, [pc, #140]	@ (800bdfc <xTaskResumeAll+0x130>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d302      	bcc.n	800bd7e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800bd78:	4b21      	ldr	r3, [pc, #132]	@ (800be00 <xTaskResumeAll+0x134>)
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd7e:	4b1c      	ldr	r3, [pc, #112]	@ (800bdf0 <xTaskResumeAll+0x124>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1cb      	bne.n	800bd1e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd8c:	f000 fb92 	bl	800c4b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bd90:	4b1c      	ldr	r3, [pc, #112]	@ (800be04 <xTaskResumeAll+0x138>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d010      	beq.n	800bdbe <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd9c:	f000 f846 	bl	800be2c <xTaskIncrementTick>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800bda6:	4b16      	ldr	r3, [pc, #88]	@ (800be00 <xTaskResumeAll+0x134>)
 800bda8:	2201      	movs	r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1f1      	bne.n	800bd9c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800bdb8:	4b12      	ldr	r3, [pc, #72]	@ (800be04 <xTaskResumeAll+0x138>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdbe:	4b10      	ldr	r3, [pc, #64]	@ (800be00 <xTaskResumeAll+0x134>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d009      	beq.n	800bdda <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdca:	4b0f      	ldr	r3, [pc, #60]	@ (800be08 <xTaskResumeAll+0x13c>)
 800bdcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdda:	f001 f91d 	bl	800d018 <vPortExitCritical>

	return xAlreadyYielded;
 800bdde:	68bb      	ldr	r3, [r7, #8]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	20008640 	.word	0x20008640
 800bdec:	20008618 	.word	0x20008618
 800bdf0:	200085d8 	.word	0x200085d8
 800bdf4:	20008620 	.word	0x20008620
 800bdf8:	20008148 	.word	0x20008148
 800bdfc:	20008144 	.word	0x20008144
 800be00:	2000862c 	.word	0x2000862c
 800be04:	20008628 	.word	0x20008628
 800be08:	e000ed04 	.word	0xe000ed04

0800be0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be12:	4b05      	ldr	r3, [pc, #20]	@ (800be28 <xTaskGetTickCount+0x1c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be18:	687b      	ldr	r3, [r7, #4]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	370c      	adds	r7, #12
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	2000861c 	.word	0x2000861c

0800be2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be32:	2300      	movs	r3, #0
 800be34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be36:	4b50      	ldr	r3, [pc, #320]	@ (800bf78 <xTaskIncrementTick+0x14c>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f040 808c 	bne.w	800bf58 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be40:	4b4e      	ldr	r3, [pc, #312]	@ (800bf7c <xTaskIncrementTick+0x150>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3301      	adds	r3, #1
 800be46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be48:	4a4c      	ldr	r2, [pc, #304]	@ (800bf7c <xTaskIncrementTick+0x150>)
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d123      	bne.n	800be9c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800be54:	4b4a      	ldr	r3, [pc, #296]	@ (800bf80 <xTaskIncrementTick+0x154>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00d      	beq.n	800be7a <xTaskIncrementTick+0x4e>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be62:	b672      	cpsid	i
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	b662      	cpsie	i
 800be72:	603b      	str	r3, [r7, #0]
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop
 800be78:	e7fd      	b.n	800be76 <xTaskIncrementTick+0x4a>
 800be7a:	4b41      	ldr	r3, [pc, #260]	@ (800bf80 <xTaskIncrementTick+0x154>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	60fb      	str	r3, [r7, #12]
 800be80:	4b40      	ldr	r3, [pc, #256]	@ (800bf84 <xTaskIncrementTick+0x158>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a3e      	ldr	r2, [pc, #248]	@ (800bf80 <xTaskIncrementTick+0x154>)
 800be86:	6013      	str	r3, [r2, #0]
 800be88:	4a3e      	ldr	r2, [pc, #248]	@ (800bf84 <xTaskIncrementTick+0x158>)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6013      	str	r3, [r2, #0]
 800be8e:	4b3e      	ldr	r3, [pc, #248]	@ (800bf88 <xTaskIncrementTick+0x15c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	3301      	adds	r3, #1
 800be94:	4a3c      	ldr	r2, [pc, #240]	@ (800bf88 <xTaskIncrementTick+0x15c>)
 800be96:	6013      	str	r3, [r2, #0]
 800be98:	f000 fb0c 	bl	800c4b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be9c:	4b3b      	ldr	r3, [pc, #236]	@ (800bf8c <xTaskIncrementTick+0x160>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d349      	bcc.n	800bf3a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bea6:	4b36      	ldr	r3, [pc, #216]	@ (800bf80 <xTaskIncrementTick+0x154>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d104      	bne.n	800beba <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beb0:	4b36      	ldr	r3, [pc, #216]	@ (800bf8c <xTaskIncrementTick+0x160>)
 800beb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800beb6:	601a      	str	r2, [r3, #0]
					break;
 800beb8:	e03f      	b.n	800bf3a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beba:	4b31      	ldr	r3, [pc, #196]	@ (800bf80 <xTaskIncrementTick+0x154>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d203      	bcs.n	800beda <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bed2:	4a2e      	ldr	r2, [pc, #184]	@ (800bf8c <xTaskIncrementTick+0x160>)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bed8:	e02f      	b.n	800bf3a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	3304      	adds	r3, #4
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe ff50 	bl	800ad84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d004      	beq.n	800bef6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	3318      	adds	r3, #24
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fe ff47 	bl	800ad84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800befa:	4b25      	ldr	r3, [pc, #148]	@ (800bf90 <xTaskIncrementTick+0x164>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d903      	bls.n	800bf0a <xTaskIncrementTick+0xde>
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf06:	4a22      	ldr	r2, [pc, #136]	@ (800bf90 <xTaskIncrementTick+0x164>)
 800bf08:	6013      	str	r3, [r2, #0]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf0e:	4613      	mov	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4a1f      	ldr	r2, [pc, #124]	@ (800bf94 <xTaskIncrementTick+0x168>)
 800bf18:	441a      	add	r2, r3
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	4619      	mov	r1, r3
 800bf20:	4610      	mov	r0, r2
 800bf22:	f7fe fed2 	bl	800acca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf2a:	4b1b      	ldr	r3, [pc, #108]	@ (800bf98 <xTaskIncrementTick+0x16c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d3b8      	bcc.n	800bea6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800bf34:	2301      	movs	r3, #1
 800bf36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf38:	e7b5      	b.n	800bea6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf3a:	4b17      	ldr	r3, [pc, #92]	@ (800bf98 <xTaskIncrementTick+0x16c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf40:	4914      	ldr	r1, [pc, #80]	@ (800bf94 <xTaskIncrementTick+0x168>)
 800bf42:	4613      	mov	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	440b      	add	r3, r1
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d907      	bls.n	800bf62 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800bf52:	2301      	movs	r3, #1
 800bf54:	617b      	str	r3, [r7, #20]
 800bf56:	e004      	b.n	800bf62 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bf58:	4b10      	ldr	r3, [pc, #64]	@ (800bf9c <xTaskIncrementTick+0x170>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	4a0f      	ldr	r2, [pc, #60]	@ (800bf9c <xTaskIncrementTick+0x170>)
 800bf60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bf62:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa0 <xTaskIncrementTick+0x174>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bf6e:	697b      	ldr	r3, [r7, #20]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	20008640 	.word	0x20008640
 800bf7c:	2000861c 	.word	0x2000861c
 800bf80:	200085d0 	.word	0x200085d0
 800bf84:	200085d4 	.word	0x200085d4
 800bf88:	20008630 	.word	0x20008630
 800bf8c:	20008638 	.word	0x20008638
 800bf90:	20008620 	.word	0x20008620
 800bf94:	20008148 	.word	0x20008148
 800bf98:	20008144 	.word	0x20008144
 800bf9c:	20008628 	.word	0x20008628
 800bfa0:	2000862c 	.word	0x2000862c

0800bfa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfaa:	4b29      	ldr	r3, [pc, #164]	@ (800c050 <vTaskSwitchContext+0xac>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfb2:	4b28      	ldr	r3, [pc, #160]	@ (800c054 <vTaskSwitchContext+0xb0>)
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bfb8:	e044      	b.n	800c044 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bfba:	4b26      	ldr	r3, [pc, #152]	@ (800c054 <vTaskSwitchContext+0xb0>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc0:	4b25      	ldr	r3, [pc, #148]	@ (800c058 <vTaskSwitchContext+0xb4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	60fb      	str	r3, [r7, #12]
 800bfc6:	e013      	b.n	800bff0 <vTaskSwitchContext+0x4c>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10d      	bne.n	800bfea <vTaskSwitchContext+0x46>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd2:	b672      	cpsid	i
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	b662      	cpsie	i
 800bfe2:	607b      	str	r3, [r7, #4]
}
 800bfe4:	bf00      	nop
 800bfe6:	bf00      	nop
 800bfe8:	e7fd      	b.n	800bfe6 <vTaskSwitchContext+0x42>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3b01      	subs	r3, #1
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	491a      	ldr	r1, [pc, #104]	@ (800c05c <vTaskSwitchContext+0xb8>)
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	4613      	mov	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	440b      	add	r3, r1
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d0e1      	beq.n	800bfc8 <vTaskSwitchContext+0x24>
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	4613      	mov	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4a13      	ldr	r2, [pc, #76]	@ (800c05c <vTaskSwitchContext+0xb8>)
 800c010:	4413      	add	r3, r2
 800c012:	60bb      	str	r3, [r7, #8]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	605a      	str	r2, [r3, #4]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	685a      	ldr	r2, [r3, #4]
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	3308      	adds	r3, #8
 800c026:	429a      	cmp	r2, r3
 800c028:	d104      	bne.n	800c034 <vTaskSwitchContext+0x90>
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	605a      	str	r2, [r3, #4]
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	4a09      	ldr	r2, [pc, #36]	@ (800c060 <vTaskSwitchContext+0xbc>)
 800c03c:	6013      	str	r3, [r2, #0]
 800c03e:	4a06      	ldr	r2, [pc, #24]	@ (800c058 <vTaskSwitchContext+0xb4>)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6013      	str	r3, [r2, #0]
}
 800c044:	bf00      	nop
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr
 800c050:	20008640 	.word	0x20008640
 800c054:	2000862c 	.word	0x2000862c
 800c058:	20008620 	.word	0x20008620
 800c05c:	20008148 	.word	0x20008148
 800c060:	20008144 	.word	0x20008144

0800c064 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10d      	bne.n	800c090 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c078:	b672      	cpsid	i
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	b662      	cpsie	i
 800c088:	60fb      	str	r3, [r7, #12]
}
 800c08a:	bf00      	nop
 800c08c:	bf00      	nop
 800c08e:	e7fd      	b.n	800c08c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c090:	4b07      	ldr	r3, [pc, #28]	@ (800c0b0 <vTaskPlaceOnEventList+0x4c>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	3318      	adds	r3, #24
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7fe fe3a 	bl	800ad12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c09e:	2101      	movs	r1, #1
 800c0a0:	6838      	ldr	r0, [r7, #0]
 800c0a2:	f000 fab9 	bl	800c618 <prvAddCurrentTaskToDelayedList>
}
 800c0a6:	bf00      	nop
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20008144 	.word	0x20008144

0800c0b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b086      	sub	sp, #24
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10d      	bne.n	800c0e2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ca:	b672      	cpsid	i
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	b662      	cpsie	i
 800c0da:	617b      	str	r3, [r7, #20]
}
 800c0dc:	bf00      	nop
 800c0de:	bf00      	nop
 800c0e0:	e7fd      	b.n	800c0de <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c10c <vTaskPlaceOnEventListRestricted+0x58>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3318      	adds	r3, #24
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f7fe fded 	bl	800acca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d002      	beq.n	800c0fc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800c0f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c0fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c0fc:	6879      	ldr	r1, [r7, #4]
 800c0fe:	68b8      	ldr	r0, [r7, #8]
 800c100:	f000 fa8a 	bl	800c618 <prvAddCurrentTaskToDelayedList>
	}
 800c104:	bf00      	nop
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	20008144 	.word	0x20008144

0800c110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10d      	bne.n	800c142 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12a:	b672      	cpsid	i
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	b662      	cpsie	i
 800c13a:	60fb      	str	r3, [r7, #12]
}
 800c13c:	bf00      	nop
 800c13e:	bf00      	nop
 800c140:	e7fd      	b.n	800c13e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	3318      	adds	r3, #24
 800c146:	4618      	mov	r0, r3
 800c148:	f7fe fe1c 	bl	800ad84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c14c:	4b1d      	ldr	r3, [pc, #116]	@ (800c1c4 <xTaskRemoveFromEventList+0xb4>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d11d      	bne.n	800c190 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	3304      	adds	r3, #4
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fe fe13 	bl	800ad84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c162:	4b19      	ldr	r3, [pc, #100]	@ (800c1c8 <xTaskRemoveFromEventList+0xb8>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	429a      	cmp	r2, r3
 800c168:	d903      	bls.n	800c172 <xTaskRemoveFromEventList+0x62>
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c16e:	4a16      	ldr	r2, [pc, #88]	@ (800c1c8 <xTaskRemoveFromEventList+0xb8>)
 800c170:	6013      	str	r3, [r2, #0]
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c176:	4613      	mov	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4a13      	ldr	r2, [pc, #76]	@ (800c1cc <xTaskRemoveFromEventList+0xbc>)
 800c180:	441a      	add	r2, r3
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	3304      	adds	r3, #4
 800c186:	4619      	mov	r1, r3
 800c188:	4610      	mov	r0, r2
 800c18a:	f7fe fd9e 	bl	800acca <vListInsertEnd>
 800c18e:	e005      	b.n	800c19c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	3318      	adds	r3, #24
 800c194:	4619      	mov	r1, r3
 800c196:	480e      	ldr	r0, [pc, #56]	@ (800c1d0 <xTaskRemoveFromEventList+0xc0>)
 800c198:	f7fe fd97 	bl	800acca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c1d4 <xTaskRemoveFromEventList+0xc4>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d905      	bls.n	800c1b6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d8 <xTaskRemoveFromEventList+0xc8>)
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	e001      	b.n	800c1ba <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1ba:	697b      	ldr	r3, [r7, #20]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	20008640 	.word	0x20008640
 800c1c8:	20008620 	.word	0x20008620
 800c1cc:	20008148 	.word	0x20008148
 800c1d0:	200085d8 	.word	0x200085d8
 800c1d4:	20008144 	.word	0x20008144
 800c1d8:	2000862c 	.word	0x2000862c

0800c1dc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10d      	bne.n	800c206 <vTaskSetTimeOutState+0x2a>
	__asm volatile
 800c1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ee:	b672      	cpsid	i
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	b662      	cpsie	i
 800c1fe:	60fb      	str	r3, [r7, #12]
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	e7fd      	b.n	800c202 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800c206:	f000 fed1 	bl	800cfac <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c20a:	4b07      	ldr	r3, [pc, #28]	@ (800c228 <vTaskSetTimeOutState+0x4c>)
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c212:	4b06      	ldr	r3, [pc, #24]	@ (800c22c <vTaskSetTimeOutState+0x50>)
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c21a:	f000 fefd 	bl	800d018 <vPortExitCritical>
}
 800c21e:	bf00      	nop
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20008630 	.word	0x20008630
 800c22c:	2000861c 	.word	0x2000861c

0800c230 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c238:	4b06      	ldr	r3, [pc, #24]	@ (800c254 <vTaskInternalSetTimeOutState+0x24>)
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c240:	4b05      	ldr	r3, [pc, #20]	@ (800c258 <vTaskInternalSetTimeOutState+0x28>)
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	605a      	str	r2, [r3, #4]
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	20008630 	.word	0x20008630
 800c258:	2000861c 	.word	0x2000861c

0800c25c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10d      	bne.n	800c288 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c270:	b672      	cpsid	i
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	b662      	cpsie	i
 800c280:	613b      	str	r3, [r7, #16]
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	e7fd      	b.n	800c284 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10d      	bne.n	800c2aa <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c292:	b672      	cpsid	i
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	b662      	cpsie	i
 800c2a2:	60fb      	str	r3, [r7, #12]
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop
 800c2a8:	e7fd      	b.n	800c2a6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800c2aa:	f000 fe7f 	bl	800cfac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c2ae:	4b1d      	ldr	r3, [pc, #116]	@ (800c324 <xTaskCheckForTimeOut+0xc8>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	69ba      	ldr	r2, [r7, #24]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2c6:	d102      	bne.n	800c2ce <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	e023      	b.n	800c316 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	4b15      	ldr	r3, [pc, #84]	@ (800c328 <xTaskCheckForTimeOut+0xcc>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d007      	beq.n	800c2ea <xTaskCheckForTimeOut+0x8e>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	69ba      	ldr	r2, [r7, #24]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d302      	bcc.n	800c2ea <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	61fb      	str	r3, [r7, #28]
 800c2e8:	e015      	b.n	800c316 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	697a      	ldr	r2, [r7, #20]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d20b      	bcs.n	800c30c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	1ad2      	subs	r2, r2, r3
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7ff ff95 	bl	800c230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c306:	2300      	movs	r3, #0
 800c308:	61fb      	str	r3, [r7, #28]
 800c30a:	e004      	b.n	800c316 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2200      	movs	r2, #0
 800c310:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c312:	2301      	movs	r3, #1
 800c314:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c316:	f000 fe7f 	bl	800d018 <vPortExitCritical>

	return xReturn;
 800c31a:	69fb      	ldr	r3, [r7, #28]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3720      	adds	r7, #32
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	2000861c 	.word	0x2000861c
 800c328:	20008630 	.word	0x20008630

0800c32c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c32c:	b480      	push	{r7}
 800c32e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c330:	4b03      	ldr	r3, [pc, #12]	@ (800c340 <vTaskMissedYield+0x14>)
 800c332:	2201      	movs	r2, #1
 800c334:	601a      	str	r2, [r3, #0]
}
 800c336:	bf00      	nop
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	2000862c 	.word	0x2000862c

0800c344 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c34c:	f000 f852 	bl	800c3f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c350:	4b06      	ldr	r3, [pc, #24]	@ (800c36c <prvIdleTask+0x28>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d9f9      	bls.n	800c34c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c358:	4b05      	ldr	r3, [pc, #20]	@ (800c370 <prvIdleTask+0x2c>)
 800c35a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c368:	e7f0      	b.n	800c34c <prvIdleTask+0x8>
 800c36a:	bf00      	nop
 800c36c:	20008148 	.word	0x20008148
 800c370:	e000ed04 	.word	0xe000ed04

0800c374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c37a:	2300      	movs	r3, #0
 800c37c:	607b      	str	r3, [r7, #4]
 800c37e:	e00c      	b.n	800c39a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	4613      	mov	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4a12      	ldr	r2, [pc, #72]	@ (800c3d4 <prvInitialiseTaskLists+0x60>)
 800c38c:	4413      	add	r3, r2
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fc6e 	bl	800ac70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	3301      	adds	r3, #1
 800c398:	607b      	str	r3, [r7, #4]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2b37      	cmp	r3, #55	@ 0x37
 800c39e:	d9ef      	bls.n	800c380 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3a0:	480d      	ldr	r0, [pc, #52]	@ (800c3d8 <prvInitialiseTaskLists+0x64>)
 800c3a2:	f7fe fc65 	bl	800ac70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c3a6:	480d      	ldr	r0, [pc, #52]	@ (800c3dc <prvInitialiseTaskLists+0x68>)
 800c3a8:	f7fe fc62 	bl	800ac70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3ac:	480c      	ldr	r0, [pc, #48]	@ (800c3e0 <prvInitialiseTaskLists+0x6c>)
 800c3ae:	f7fe fc5f 	bl	800ac70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3b2:	480c      	ldr	r0, [pc, #48]	@ (800c3e4 <prvInitialiseTaskLists+0x70>)
 800c3b4:	f7fe fc5c 	bl	800ac70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3b8:	480b      	ldr	r0, [pc, #44]	@ (800c3e8 <prvInitialiseTaskLists+0x74>)
 800c3ba:	f7fe fc59 	bl	800ac70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3be:	4b0b      	ldr	r3, [pc, #44]	@ (800c3ec <prvInitialiseTaskLists+0x78>)
 800c3c0:	4a05      	ldr	r2, [pc, #20]	@ (800c3d8 <prvInitialiseTaskLists+0x64>)
 800c3c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f0 <prvInitialiseTaskLists+0x7c>)
 800c3c6:	4a05      	ldr	r2, [pc, #20]	@ (800c3dc <prvInitialiseTaskLists+0x68>)
 800c3c8:	601a      	str	r2, [r3, #0]
}
 800c3ca:	bf00      	nop
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20008148 	.word	0x20008148
 800c3d8:	200085a8 	.word	0x200085a8
 800c3dc:	200085bc 	.word	0x200085bc
 800c3e0:	200085d8 	.word	0x200085d8
 800c3e4:	200085ec 	.word	0x200085ec
 800c3e8:	20008604 	.word	0x20008604
 800c3ec:	200085d0 	.word	0x200085d0
 800c3f0:	200085d4 	.word	0x200085d4

0800c3f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3fa:	e019      	b.n	800c430 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3fc:	f000 fdd6 	bl	800cfac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c400:	4b10      	ldr	r3, [pc, #64]	@ (800c444 <prvCheckTasksWaitingTermination+0x50>)
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	3304      	adds	r3, #4
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fe fcb9 	bl	800ad84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c412:	4b0d      	ldr	r3, [pc, #52]	@ (800c448 <prvCheckTasksWaitingTermination+0x54>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3b01      	subs	r3, #1
 800c418:	4a0b      	ldr	r2, [pc, #44]	@ (800c448 <prvCheckTasksWaitingTermination+0x54>)
 800c41a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c41c:	4b0b      	ldr	r3, [pc, #44]	@ (800c44c <prvCheckTasksWaitingTermination+0x58>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3b01      	subs	r3, #1
 800c422:	4a0a      	ldr	r2, [pc, #40]	@ (800c44c <prvCheckTasksWaitingTermination+0x58>)
 800c424:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c426:	f000 fdf7 	bl	800d018 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f810 	bl	800c450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c430:	4b06      	ldr	r3, [pc, #24]	@ (800c44c <prvCheckTasksWaitingTermination+0x58>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1e1      	bne.n	800c3fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c438:	bf00      	nop
 800c43a:	bf00      	nop
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	200085ec 	.word	0x200085ec
 800c448:	20008618 	.word	0x20008618
 800c44c:	20008600 	.word	0x20008600

0800c450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d108      	bne.n	800c474 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c466:	4618      	mov	r0, r3
 800c468:	f000 ff9c 	bl	800d3a4 <vPortFree>
				vPortFree( pxTCB );
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 ff99 	bl	800d3a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c472:	e01b      	b.n	800c4ac <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d103      	bne.n	800c486 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 ff90 	bl	800d3a4 <vPortFree>
	}
 800c484:	e012      	b.n	800c4ac <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	d00d      	beq.n	800c4ac <prvDeleteTCB+0x5c>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c494:	b672      	cpsid	i
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	b662      	cpsie	i
 800c4a4:	60fb      	str	r3, [r7, #12]
}
 800c4a6:	bf00      	nop
 800c4a8:	bf00      	nop
 800c4aa:	e7fd      	b.n	800c4a8 <prvDeleteTCB+0x58>
	}
 800c4ac:	bf00      	nop
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c4ec <prvResetNextTaskUnblockTime+0x38>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d104      	bne.n	800c4ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <prvResetNextTaskUnblockTime+0x3c>)
 800c4c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c4ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4cc:	e008      	b.n	800c4e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ce:	4b07      	ldr	r3, [pc, #28]	@ (800c4ec <prvResetNextTaskUnblockTime+0x38>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	4a04      	ldr	r2, [pc, #16]	@ (800c4f0 <prvResetNextTaskUnblockTime+0x3c>)
 800c4de:	6013      	str	r3, [r2, #0]
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	200085d0 	.word	0x200085d0
 800c4f0:	20008638 	.word	0x20008638

0800c4f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c528 <xTaskGetSchedulerState+0x34>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d102      	bne.n	800c508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c502:	2301      	movs	r3, #1
 800c504:	607b      	str	r3, [r7, #4]
 800c506:	e008      	b.n	800c51a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c508:	4b08      	ldr	r3, [pc, #32]	@ (800c52c <xTaskGetSchedulerState+0x38>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d102      	bne.n	800c516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c510:	2302      	movs	r3, #2
 800c512:	607b      	str	r3, [r7, #4]
 800c514:	e001      	b.n	800c51a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c516:	2300      	movs	r3, #0
 800c518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c51a:	687b      	ldr	r3, [r7, #4]
	}
 800c51c:	4618      	mov	r0, r3
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr
 800c528:	20008624 	.word	0x20008624
 800c52c:	20008640 	.word	0x20008640

0800c530 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c53c:	2300      	movs	r3, #0
 800c53e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d05c      	beq.n	800c600 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c546:	4b31      	ldr	r3, [pc, #196]	@ (800c60c <xTaskPriorityDisinherit+0xdc>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d00d      	beq.n	800c56c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c554:	b672      	cpsid	i
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	b662      	cpsie	i
 800c564:	60fb      	str	r3, [r7, #12]
}
 800c566:	bf00      	nop
 800c568:	bf00      	nop
 800c56a:	e7fd      	b.n	800c568 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10d      	bne.n	800c590 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c578:	b672      	cpsid	i
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	b662      	cpsie	i
 800c588:	60bb      	str	r3, [r7, #8]
}
 800c58a:	bf00      	nop
 800c58c:	bf00      	nop
 800c58e:	e7fd      	b.n	800c58c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c594:	1e5a      	subs	r2, r3, #1
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d02c      	beq.n	800c600 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d128      	bne.n	800c600 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe fbe6 	bl	800ad84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d0:	4b0f      	ldr	r3, [pc, #60]	@ (800c610 <xTaskPriorityDisinherit+0xe0>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d903      	bls.n	800c5e0 <xTaskPriorityDisinherit+0xb0>
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5dc:	4a0c      	ldr	r2, [pc, #48]	@ (800c610 <xTaskPriorityDisinherit+0xe0>)
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	4413      	add	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4a09      	ldr	r2, [pc, #36]	@ (800c614 <xTaskPriorityDisinherit+0xe4>)
 800c5ee:	441a      	add	r2, r3
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	3304      	adds	r3, #4
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	f7fe fb67 	bl	800acca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c600:	697b      	ldr	r3, [r7, #20]
	}
 800c602:	4618      	mov	r0, r3
 800c604:	3718      	adds	r7, #24
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	20008144 	.word	0x20008144
 800c610:	20008620 	.word	0x20008620
 800c614:	20008148 	.word	0x20008148

0800c618 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c622:	4b21      	ldr	r3, [pc, #132]	@ (800c6a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c628:	4b20      	ldr	r3, [pc, #128]	@ (800c6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3304      	adds	r3, #4
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fe fba8 	bl	800ad84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c63a:	d10a      	bne.n	800c652 <prvAddCurrentTaskToDelayedList+0x3a>
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d007      	beq.n	800c652 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c642:	4b1a      	ldr	r3, [pc, #104]	@ (800c6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3304      	adds	r3, #4
 800c648:	4619      	mov	r1, r3
 800c64a:	4819      	ldr	r0, [pc, #100]	@ (800c6b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c64c:	f7fe fb3d 	bl	800acca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c650:	e026      	b.n	800c6a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4413      	add	r3, r2
 800c658:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c65a:	4b14      	ldr	r3, [pc, #80]	@ (800c6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	429a      	cmp	r2, r3
 800c668:	d209      	bcs.n	800c67e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c66a:	4b12      	ldr	r3, [pc, #72]	@ (800c6b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	4b0f      	ldr	r3, [pc, #60]	@ (800c6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	3304      	adds	r3, #4
 800c674:	4619      	mov	r1, r3
 800c676:	4610      	mov	r0, r2
 800c678:	f7fe fb4b 	bl	800ad12 <vListInsert>
}
 800c67c:	e010      	b.n	800c6a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c67e:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	4b0a      	ldr	r3, [pc, #40]	@ (800c6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	3304      	adds	r3, #4
 800c688:	4619      	mov	r1, r3
 800c68a:	4610      	mov	r0, r2
 800c68c:	f7fe fb41 	bl	800ad12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c690:	4b0a      	ldr	r3, [pc, #40]	@ (800c6bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	429a      	cmp	r2, r3
 800c698:	d202      	bcs.n	800c6a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c69a:	4a08      	ldr	r2, [pc, #32]	@ (800c6bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	6013      	str	r3, [r2, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	2000861c 	.word	0x2000861c
 800c6ac:	20008144 	.word	0x20008144
 800c6b0:	20008604 	.word	0x20008604
 800c6b4:	200085d4 	.word	0x200085d4
 800c6b8:	200085d0 	.word	0x200085d0
 800c6bc:	20008638 	.word	0x20008638

0800c6c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08a      	sub	sp, #40	@ 0x28
 800c6c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6ca:	f000 fb21 	bl	800cd10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c6ce:	4b1e      	ldr	r3, [pc, #120]	@ (800c748 <xTimerCreateTimerTask+0x88>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d021      	beq.n	800c71a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c6de:	1d3a      	adds	r2, r7, #4
 800c6e0:	f107 0108 	add.w	r1, r7, #8
 800c6e4:	f107 030c 	add.w	r3, r7, #12
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7fe faa7 	bl	800ac3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6ee:	6879      	ldr	r1, [r7, #4]
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	9202      	str	r2, [sp, #8]
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	460a      	mov	r2, r1
 800c700:	4912      	ldr	r1, [pc, #72]	@ (800c74c <xTimerCreateTimerTask+0x8c>)
 800c702:	4813      	ldr	r0, [pc, #76]	@ (800c750 <xTimerCreateTimerTask+0x90>)
 800c704:	f7ff f882 	bl	800b80c <xTaskCreateStatic>
 800c708:	4603      	mov	r3, r0
 800c70a:	4a12      	ldr	r2, [pc, #72]	@ (800c754 <xTimerCreateTimerTask+0x94>)
 800c70c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c70e:	4b11      	ldr	r3, [pc, #68]	@ (800c754 <xTimerCreateTimerTask+0x94>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c716:	2301      	movs	r3, #1
 800c718:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10d      	bne.n	800c73c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c724:	b672      	cpsid	i
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	b662      	cpsie	i
 800c734:	613b      	str	r3, [r7, #16]
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	e7fd      	b.n	800c738 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c73c:	697b      	ldr	r3, [r7, #20]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20008674 	.word	0x20008674
 800c74c:	0801c740 	.word	0x0801c740
 800c750:	0800c899 	.word	0x0800c899
 800c754:	20008678 	.word	0x20008678

0800c758 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08a      	sub	sp, #40	@ 0x28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c766:	2300      	movs	r3, #0
 800c768:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10d      	bne.n	800c78c <xTimerGenericCommand+0x34>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c774:	b672      	cpsid	i
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	b662      	cpsie	i
 800c784:	623b      	str	r3, [r7, #32]
}
 800c786:	bf00      	nop
 800c788:	bf00      	nop
 800c78a:	e7fd      	b.n	800c788 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c78c:	4b19      	ldr	r3, [pc, #100]	@ (800c7f4 <xTimerGenericCommand+0x9c>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d02a      	beq.n	800c7ea <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	2b05      	cmp	r3, #5
 800c7a4:	dc18      	bgt.n	800c7d8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c7a6:	f7ff fea5 	bl	800c4f4 <xTaskGetSchedulerState>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d109      	bne.n	800c7c4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c7b0:	4b10      	ldr	r3, [pc, #64]	@ (800c7f4 <xTimerGenericCommand+0x9c>)
 800c7b2:	6818      	ldr	r0, [r3, #0]
 800c7b4:	f107 0110 	add.w	r1, r7, #16
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7bc:	f7fe fc22 	bl	800b004 <xQueueGenericSend>
 800c7c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c7c2:	e012      	b.n	800c7ea <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c7c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c7f4 <xTimerGenericCommand+0x9c>)
 800c7c6:	6818      	ldr	r0, [r3, #0]
 800c7c8:	f107 0110 	add.w	r1, r7, #16
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f7fe fc18 	bl	800b004 <xQueueGenericSend>
 800c7d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c7d6:	e008      	b.n	800c7ea <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7d8:	4b06      	ldr	r3, [pc, #24]	@ (800c7f4 <xTimerGenericCommand+0x9c>)
 800c7da:	6818      	ldr	r0, [r3, #0]
 800c7dc:	f107 0110 	add.w	r1, r7, #16
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	f7fe fd18 	bl	800b218 <xQueueGenericSendFromISR>
 800c7e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3728      	adds	r7, #40	@ 0x28
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20008674 	.word	0x20008674

0800c7f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b088      	sub	sp, #32
 800c7fc:	af02      	add	r7, sp, #8
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c802:	4b24      	ldr	r3, [pc, #144]	@ (800c894 <prvProcessExpiredTimer+0x9c>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	3304      	adds	r3, #4
 800c810:	4618      	mov	r0, r3
 800c812:	f7fe fab7 	bl	800ad84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	2b00      	cmp	r3, #0
 800c822:	d025      	beq.n	800c870 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	699a      	ldr	r2, [r3, #24]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	18d1      	adds	r1, r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	6978      	ldr	r0, [r7, #20]
 800c832:	f000 f8d7 	bl	800c9e4 <prvInsertTimerInActiveList>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d022      	beq.n	800c882 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c83c:	2300      	movs	r3, #0
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	2300      	movs	r3, #0
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	2100      	movs	r1, #0
 800c846:	6978      	ldr	r0, [r7, #20]
 800c848:	f7ff ff86 	bl	800c758 <xTimerGenericCommand>
 800c84c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d116      	bne.n	800c882 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c858:	b672      	cpsid	i
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	b662      	cpsie	i
 800c868:	60fb      	str	r3, [r7, #12]
}
 800c86a:	bf00      	nop
 800c86c:	bf00      	nop
 800c86e:	e7fd      	b.n	800c86c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c876:	f023 0301 	bic.w	r3, r3, #1
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	6978      	ldr	r0, [r7, #20]
 800c888:	4798      	blx	r3
}
 800c88a:	bf00      	nop
 800c88c:	3718      	adds	r7, #24
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	2000866c 	.word	0x2000866c

0800c898 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8a0:	f107 0308 	add.w	r3, r7, #8
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 f859 	bl	800c95c <prvGetNextExpireTime>
 800c8aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f000 f805 	bl	800c8c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c8b6:	f000 f8d7 	bl	800ca68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8ba:	bf00      	nop
 800c8bc:	e7f0      	b.n	800c8a0 <prvTimerTask+0x8>
	...

0800c8c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c8ca:	f7ff f9f1 	bl	800bcb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8ce:	f107 0308 	add.w	r3, r7, #8
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 f866 	bl	800c9a4 <prvSampleTimeNow>
 800c8d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d130      	bne.n	800c942 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10a      	bne.n	800c8fc <prvProcessTimerOrBlockTask+0x3c>
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d806      	bhi.n	800c8fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c8ee:	f7ff f9ed 	bl	800bccc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c8f2:	68f9      	ldr	r1, [r7, #12]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7ff ff7f 	bl	800c7f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c8fa:	e024      	b.n	800c946 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d008      	beq.n	800c914 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c902:	4b13      	ldr	r3, [pc, #76]	@ (800c950 <prvProcessTimerOrBlockTask+0x90>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d101      	bne.n	800c910 <prvProcessTimerOrBlockTask+0x50>
 800c90c:	2301      	movs	r3, #1
 800c90e:	e000      	b.n	800c912 <prvProcessTimerOrBlockTask+0x52>
 800c910:	2300      	movs	r3, #0
 800c912:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c914:	4b0f      	ldr	r3, [pc, #60]	@ (800c954 <prvProcessTimerOrBlockTask+0x94>)
 800c916:	6818      	ldr	r0, [r3, #0]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	4619      	mov	r1, r3
 800c922:	f7fe ff3f 	bl	800b7a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c926:	f7ff f9d1 	bl	800bccc <xTaskResumeAll>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10a      	bne.n	800c946 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c930:	4b09      	ldr	r3, [pc, #36]	@ (800c958 <prvProcessTimerOrBlockTask+0x98>)
 800c932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	f3bf 8f6f 	isb	sy
}
 800c940:	e001      	b.n	800c946 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c942:	f7ff f9c3 	bl	800bccc <xTaskResumeAll>
}
 800c946:	bf00      	nop
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	20008670 	.word	0x20008670
 800c954:	20008674 	.word	0x20008674
 800c958:	e000ed04 	.word	0xe000ed04

0800c95c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c964:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a0 <prvGetNextExpireTime+0x44>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <prvGetNextExpireTime+0x16>
 800c96e:	2201      	movs	r2, #1
 800c970:	e000      	b.n	800c974 <prvGetNextExpireTime+0x18>
 800c972:	2200      	movs	r2, #0
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d105      	bne.n	800c98c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c980:	4b07      	ldr	r3, [pc, #28]	@ (800c9a0 <prvGetNextExpireTime+0x44>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	60fb      	str	r3, [r7, #12]
 800c98a:	e001      	b.n	800c990 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c98c:	2300      	movs	r3, #0
 800c98e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c990:	68fb      	ldr	r3, [r7, #12]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3714      	adds	r7, #20
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	2000866c 	.word	0x2000866c

0800c9a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c9ac:	f7ff fa2e 	bl	800be0c <xTaskGetTickCount>
 800c9b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c9e0 <prvSampleTimeNow+0x3c>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d205      	bcs.n	800c9c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c9bc:	f000 f940 	bl	800cc40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	601a      	str	r2, [r3, #0]
 800c9c6:	e002      	b.n	800c9ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c9ce:	4a04      	ldr	r2, [pc, #16]	@ (800c9e0 <prvSampleTimeNow+0x3c>)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	2000867c 	.word	0x2000867c

0800c9e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
 800c9f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d812      	bhi.n	800ca30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	1ad2      	subs	r2, r2, r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d302      	bcc.n	800ca1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	617b      	str	r3, [r7, #20]
 800ca1c:	e01b      	b.n	800ca56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca1e:	4b10      	ldr	r3, [pc, #64]	@ (800ca60 <prvInsertTimerInActiveList+0x7c>)
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	3304      	adds	r3, #4
 800ca26:	4619      	mov	r1, r3
 800ca28:	4610      	mov	r0, r2
 800ca2a:	f7fe f972 	bl	800ad12 <vListInsert>
 800ca2e:	e012      	b.n	800ca56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d206      	bcs.n	800ca46 <prvInsertTimerInActiveList+0x62>
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d302      	bcc.n	800ca46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca40:	2301      	movs	r3, #1
 800ca42:	617b      	str	r3, [r7, #20]
 800ca44:	e007      	b.n	800ca56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca46:	4b07      	ldr	r3, [pc, #28]	@ (800ca64 <prvInsertTimerInActiveList+0x80>)
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4619      	mov	r1, r3
 800ca50:	4610      	mov	r0, r2
 800ca52:	f7fe f95e 	bl	800ad12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca56:	697b      	ldr	r3, [r7, #20]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20008670 	.word	0x20008670
 800ca64:	2000866c 	.word	0x2000866c

0800ca68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b08e      	sub	sp, #56	@ 0x38
 800ca6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca6e:	e0d4      	b.n	800cc1a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	da1b      	bge.n	800caae <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca76:	1d3b      	adds	r3, r7, #4
 800ca78:	3304      	adds	r3, #4
 800ca7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10d      	bne.n	800ca9e <prvProcessReceivedCommands+0x36>
	__asm volatile
 800ca82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca86:	b672      	cpsid	i
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	b662      	cpsie	i
 800ca96:	61fb      	str	r3, [r7, #28]
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800caa4:	6850      	ldr	r0, [r2, #4]
 800caa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800caa8:	6892      	ldr	r2, [r2, #8]
 800caaa:	4611      	mov	r1, r2
 800caac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f2c0 80b2 	blt.w	800cc1a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800caba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cabc:	695b      	ldr	r3, [r3, #20]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d004      	beq.n	800cacc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac4:	3304      	adds	r3, #4
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fe f95c 	bl	800ad84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cacc:	463b      	mov	r3, r7
 800cace:	4618      	mov	r0, r3
 800cad0:	f7ff ff68 	bl	800c9a4 <prvSampleTimeNow>
 800cad4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b09      	cmp	r3, #9
 800cada:	f200 809b 	bhi.w	800cc14 <prvProcessReceivedCommands+0x1ac>
 800cade:	a201      	add	r2, pc, #4	@ (adr r2, 800cae4 <prvProcessReceivedCommands+0x7c>)
 800cae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae4:	0800cb0d 	.word	0x0800cb0d
 800cae8:	0800cb0d 	.word	0x0800cb0d
 800caec:	0800cb0d 	.word	0x0800cb0d
 800caf0:	0800cb87 	.word	0x0800cb87
 800caf4:	0800cb9b 	.word	0x0800cb9b
 800caf8:	0800cbeb 	.word	0x0800cbeb
 800cafc:	0800cb0d 	.word	0x0800cb0d
 800cb00:	0800cb0d 	.word	0x0800cb0d
 800cb04:	0800cb87 	.word	0x0800cb87
 800cb08:	0800cb9b 	.word	0x0800cb9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb12:	f043 0301 	orr.w	r3, r3, #1
 800cb16:	b2da      	uxtb	r2, r3
 800cb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	18d1      	adds	r1, r2, r3
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb2c:	f7ff ff5a 	bl	800c9e4 <prvInsertTimerInActiveList>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d070      	beq.n	800cc18 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb38:	6a1b      	ldr	r3, [r3, #32]
 800cb3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d065      	beq.n	800cc18 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	441a      	add	r2, r3
 800cb54:	2300      	movs	r3, #0
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	2300      	movs	r3, #0
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb5e:	f7ff fdfb 	bl	800c758 <xTimerGenericCommand>
 800cb62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d156      	bne.n	800cc18 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6e:	b672      	cpsid	i
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	b662      	cpsie	i
 800cb7e:	61bb      	str	r3, [r7, #24]
}
 800cb80:	bf00      	nop
 800cb82:	bf00      	nop
 800cb84:	e7fd      	b.n	800cb82 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb8c:	f023 0301 	bic.w	r3, r3, #1
 800cb90:	b2da      	uxtb	r2, r3
 800cb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cb98:	e03f      	b.n	800cc1a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cba0:	f043 0301 	orr.w	r3, r3, #1
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cbac:	68ba      	ldr	r2, [r7, #8]
 800cbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb4:	699b      	ldr	r3, [r3, #24]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d10d      	bne.n	800cbd6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800cbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbbe:	b672      	cpsid	i
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	b662      	cpsie	i
 800cbce:	617b      	str	r3, [r7, #20]
}
 800cbd0:	bf00      	nop
 800cbd2:	bf00      	nop
 800cbd4:	e7fd      	b.n	800cbd2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd8:	699a      	ldr	r2, [r3, #24]
 800cbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbdc:	18d1      	adds	r1, r2, r3
 800cbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbe4:	f7ff fefe 	bl	800c9e4 <prvInsertTimerInActiveList>
					break;
 800cbe8:	e017      	b.n	800cc1a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbf0:	f003 0302 	and.w	r3, r3, #2
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d103      	bne.n	800cc00 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800cbf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbfa:	f000 fbd3 	bl	800d3a4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cbfe:	e00c      	b.n	800cc1a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc06:	f023 0301 	bic.w	r3, r3, #1
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cc12:	e002      	b.n	800cc1a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800cc14:	bf00      	nop
 800cc16:	e000      	b.n	800cc1a <prvProcessReceivedCommands+0x1b2>
					break;
 800cc18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc1a:	4b08      	ldr	r3, [pc, #32]	@ (800cc3c <prvProcessReceivedCommands+0x1d4>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	1d39      	adds	r1, r7, #4
 800cc20:	2200      	movs	r2, #0
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe fb9c 	bl	800b360 <xQueueReceive>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	f47f af20 	bne.w	800ca70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cc30:	bf00      	nop
 800cc32:	bf00      	nop
 800cc34:	3730      	adds	r7, #48	@ 0x30
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20008674 	.word	0x20008674

0800cc40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b088      	sub	sp, #32
 800cc44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc46:	e04b      	b.n	800cce0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc48:	4b2f      	ldr	r3, [pc, #188]	@ (800cd08 <prvSwitchTimerLists+0xc8>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc52:	4b2d      	ldr	r3, [pc, #180]	@ (800cd08 <prvSwitchTimerLists+0xc8>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	3304      	adds	r3, #4
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fe f88f 	bl	800ad84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d031      	beq.n	800cce0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	699b      	ldr	r3, [r3, #24]
 800cc80:	693a      	ldr	r2, [r7, #16]
 800cc82:	4413      	add	r3, r2
 800cc84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d90e      	bls.n	800ccac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc9a:	4b1b      	ldr	r3, [pc, #108]	@ (800cd08 <prvSwitchTimerLists+0xc8>)
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	3304      	adds	r3, #4
 800cca2:	4619      	mov	r1, r3
 800cca4:	4610      	mov	r0, r2
 800cca6:	f7fe f834 	bl	800ad12 <vListInsert>
 800ccaa:	e019      	b.n	800cce0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccac:	2300      	movs	r3, #0
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	693a      	ldr	r2, [r7, #16]
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f7ff fd4e 	bl	800c758 <xTimerGenericCommand>
 800ccbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10d      	bne.n	800cce0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc8:	b672      	cpsid	i
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	b662      	cpsie	i
 800ccd8:	603b      	str	r3, [r7, #0]
}
 800ccda:	bf00      	nop
 800ccdc:	bf00      	nop
 800ccde:	e7fd      	b.n	800ccdc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cce0:	4b09      	ldr	r3, [pc, #36]	@ (800cd08 <prvSwitchTimerLists+0xc8>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1ae      	bne.n	800cc48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ccea:	4b07      	ldr	r3, [pc, #28]	@ (800cd08 <prvSwitchTimerLists+0xc8>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ccf0:	4b06      	ldr	r3, [pc, #24]	@ (800cd0c <prvSwitchTimerLists+0xcc>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a04      	ldr	r2, [pc, #16]	@ (800cd08 <prvSwitchTimerLists+0xc8>)
 800ccf6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ccf8:	4a04      	ldr	r2, [pc, #16]	@ (800cd0c <prvSwitchTimerLists+0xcc>)
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	6013      	str	r3, [r2, #0]
}
 800ccfe:	bf00      	nop
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	2000866c 	.word	0x2000866c
 800cd0c:	20008670 	.word	0x20008670

0800cd10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cd16:	f000 f949 	bl	800cfac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cd1a:	4b15      	ldr	r3, [pc, #84]	@ (800cd70 <prvCheckForValidListAndQueue+0x60>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d120      	bne.n	800cd64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cd22:	4814      	ldr	r0, [pc, #80]	@ (800cd74 <prvCheckForValidListAndQueue+0x64>)
 800cd24:	f7fd ffa4 	bl	800ac70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cd28:	4813      	ldr	r0, [pc, #76]	@ (800cd78 <prvCheckForValidListAndQueue+0x68>)
 800cd2a:	f7fd ffa1 	bl	800ac70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd2e:	4b13      	ldr	r3, [pc, #76]	@ (800cd7c <prvCheckForValidListAndQueue+0x6c>)
 800cd30:	4a10      	ldr	r2, [pc, #64]	@ (800cd74 <prvCheckForValidListAndQueue+0x64>)
 800cd32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd34:	4b12      	ldr	r3, [pc, #72]	@ (800cd80 <prvCheckForValidListAndQueue+0x70>)
 800cd36:	4a10      	ldr	r2, [pc, #64]	@ (800cd78 <prvCheckForValidListAndQueue+0x68>)
 800cd38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	4b11      	ldr	r3, [pc, #68]	@ (800cd84 <prvCheckForValidListAndQueue+0x74>)
 800cd40:	4a11      	ldr	r2, [pc, #68]	@ (800cd88 <prvCheckForValidListAndQueue+0x78>)
 800cd42:	2110      	movs	r1, #16
 800cd44:	200a      	movs	r0, #10
 800cd46:	f7fe f8b3 	bl	800aeb0 <xQueueGenericCreateStatic>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	4a08      	ldr	r2, [pc, #32]	@ (800cd70 <prvCheckForValidListAndQueue+0x60>)
 800cd4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd50:	4b07      	ldr	r3, [pc, #28]	@ (800cd70 <prvCheckForValidListAndQueue+0x60>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d005      	beq.n	800cd64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd58:	4b05      	ldr	r3, [pc, #20]	@ (800cd70 <prvCheckForValidListAndQueue+0x60>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	490b      	ldr	r1, [pc, #44]	@ (800cd8c <prvCheckForValidListAndQueue+0x7c>)
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe fcf6 	bl	800b750 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd64:	f000 f958 	bl	800d018 <vPortExitCritical>
}
 800cd68:	bf00      	nop
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20008674 	.word	0x20008674
 800cd74:	20008644 	.word	0x20008644
 800cd78:	20008658 	.word	0x20008658
 800cd7c:	2000866c 	.word	0x2000866c
 800cd80:	20008670 	.word	0x20008670
 800cd84:	20008720 	.word	0x20008720
 800cd88:	20008680 	.word	0x20008680
 800cd8c:	0801c748 	.word	0x0801c748

0800cd90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3b04      	subs	r3, #4
 800cda0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cda8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	3b04      	subs	r3, #4
 800cdae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	f023 0201 	bic.w	r2, r3, #1
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	3b04      	subs	r3, #4
 800cdbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cdc0:	4a0c      	ldr	r2, [pc, #48]	@ (800cdf4 <pxPortInitialiseStack+0x64>)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	3b14      	subs	r3, #20
 800cdca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	3b04      	subs	r3, #4
 800cdd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f06f 0202 	mvn.w	r2, #2
 800cdde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	3b20      	subs	r3, #32
 800cde4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cde6:	68fb      	ldr	r3, [r7, #12]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	0800cdf9 	.word	0x0800cdf9

0800cdf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce02:	4b15      	ldr	r3, [pc, #84]	@ (800ce58 <prvTaskExitError+0x60>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce0a:	d00d      	beq.n	800ce28 <prvTaskExitError+0x30>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce10:	b672      	cpsid	i
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	b662      	cpsie	i
 800ce20:	60fb      	str	r3, [r7, #12]
}
 800ce22:	bf00      	nop
 800ce24:	bf00      	nop
 800ce26:	e7fd      	b.n	800ce24 <prvTaskExitError+0x2c>
	__asm volatile
 800ce28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2c:	b672      	cpsid	i
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	b662      	cpsie	i
 800ce3c:	60bb      	str	r3, [r7, #8]
}
 800ce3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ce40:	bf00      	nop
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d0fc      	beq.n	800ce42 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	3714      	adds	r7, #20
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	2000009c 	.word	0x2000009c
 800ce5c:	00000000 	.word	0x00000000

0800ce60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce60:	4b07      	ldr	r3, [pc, #28]	@ (800ce80 <pxCurrentTCBConst2>)
 800ce62:	6819      	ldr	r1, [r3, #0]
 800ce64:	6808      	ldr	r0, [r1, #0]
 800ce66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6a:	f380 8809 	msr	PSP, r0
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f04f 0000 	mov.w	r0, #0
 800ce76:	f380 8811 	msr	BASEPRI, r0
 800ce7a:	4770      	bx	lr
 800ce7c:	f3af 8000 	nop.w

0800ce80 <pxCurrentTCBConst2>:
 800ce80:	20008144 	.word	0x20008144
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce84:	bf00      	nop
 800ce86:	bf00      	nop

0800ce88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce88:	4808      	ldr	r0, [pc, #32]	@ (800ceac <prvPortStartFirstTask+0x24>)
 800ce8a:	6800      	ldr	r0, [r0, #0]
 800ce8c:	6800      	ldr	r0, [r0, #0]
 800ce8e:	f380 8808 	msr	MSP, r0
 800ce92:	f04f 0000 	mov.w	r0, #0
 800ce96:	f380 8814 	msr	CONTROL, r0
 800ce9a:	b662      	cpsie	i
 800ce9c:	b661      	cpsie	f
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	df00      	svc	0
 800cea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ceaa:	bf00      	nop
 800ceac:	e000ed08 	.word	0xe000ed08

0800ceb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ceb6:	4b37      	ldr	r3, [pc, #220]	@ (800cf94 <xPortStartScheduler+0xe4>)
 800ceb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	22ff      	movs	r2, #255	@ 0xff
 800cec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	4b2f      	ldr	r3, [pc, #188]	@ (800cf98 <xPortStartScheduler+0xe8>)
 800cedc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cede:	4b2f      	ldr	r3, [pc, #188]	@ (800cf9c <xPortStartScheduler+0xec>)
 800cee0:	2207      	movs	r2, #7
 800cee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cee4:	e009      	b.n	800cefa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cee6:	4b2d      	ldr	r3, [pc, #180]	@ (800cf9c <xPortStartScheduler+0xec>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	4a2b      	ldr	r2, [pc, #172]	@ (800cf9c <xPortStartScheduler+0xec>)
 800ceee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cefa:	78fb      	ldrb	r3, [r7, #3]
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf02:	2b80      	cmp	r3, #128	@ 0x80
 800cf04:	d0ef      	beq.n	800cee6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf06:	4b25      	ldr	r3, [pc, #148]	@ (800cf9c <xPortStartScheduler+0xec>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f1c3 0307 	rsb	r3, r3, #7
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	d00d      	beq.n	800cf2e <xPortStartScheduler+0x7e>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf16:	b672      	cpsid	i
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	b662      	cpsie	i
 800cf26:	60bb      	str	r3, [r7, #8]
}
 800cf28:	bf00      	nop
 800cf2a:	bf00      	nop
 800cf2c:	e7fd      	b.n	800cf2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf2e:	4b1b      	ldr	r3, [pc, #108]	@ (800cf9c <xPortStartScheduler+0xec>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	021b      	lsls	r3, r3, #8
 800cf34:	4a19      	ldr	r2, [pc, #100]	@ (800cf9c <xPortStartScheduler+0xec>)
 800cf36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf38:	4b18      	ldr	r3, [pc, #96]	@ (800cf9c <xPortStartScheduler+0xec>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cf40:	4a16      	ldr	r2, [pc, #88]	@ (800cf9c <xPortStartScheduler+0xec>)
 800cf42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf4c:	4b14      	ldr	r3, [pc, #80]	@ (800cfa0 <xPortStartScheduler+0xf0>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a13      	ldr	r2, [pc, #76]	@ (800cfa0 <xPortStartScheduler+0xf0>)
 800cf52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cf56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf58:	4b11      	ldr	r3, [pc, #68]	@ (800cfa0 <xPortStartScheduler+0xf0>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a10      	ldr	r2, [pc, #64]	@ (800cfa0 <xPortStartScheduler+0xf0>)
 800cf5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cf62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf64:	f000 f8dc 	bl	800d120 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf68:	4b0e      	ldr	r3, [pc, #56]	@ (800cfa4 <xPortStartScheduler+0xf4>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf6e:	f000 f8fb 	bl	800d168 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf72:	4b0d      	ldr	r3, [pc, #52]	@ (800cfa8 <xPortStartScheduler+0xf8>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a0c      	ldr	r2, [pc, #48]	@ (800cfa8 <xPortStartScheduler+0xf8>)
 800cf78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cf7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf7e:	f7ff ff83 	bl	800ce88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf82:	f7ff f80f 	bl	800bfa4 <vTaskSwitchContext>
	prvTaskExitError();
 800cf86:	f7ff ff37 	bl	800cdf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	e000e400 	.word	0xe000e400
 800cf98:	20008770 	.word	0x20008770
 800cf9c:	20008774 	.word	0x20008774
 800cfa0:	e000ed20 	.word	0xe000ed20
 800cfa4:	2000009c 	.word	0x2000009c
 800cfa8:	e000ef34 	.word	0xe000ef34

0800cfac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb6:	b672      	cpsid	i
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	b662      	cpsie	i
 800cfc6:	607b      	str	r3, [r7, #4]
}
 800cfc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cfca:	4b11      	ldr	r3, [pc, #68]	@ (800d010 <vPortEnterCritical+0x64>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	4a0f      	ldr	r2, [pc, #60]	@ (800d010 <vPortEnterCritical+0x64>)
 800cfd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cfd4:	4b0e      	ldr	r3, [pc, #56]	@ (800d010 <vPortEnterCritical+0x64>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d112      	bne.n	800d002 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cfdc:	4b0d      	ldr	r3, [pc, #52]	@ (800d014 <vPortEnterCritical+0x68>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00d      	beq.n	800d002 <vPortEnterCritical+0x56>
	__asm volatile
 800cfe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfea:	b672      	cpsid	i
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	b662      	cpsie	i
 800cffa:	603b      	str	r3, [r7, #0]
}
 800cffc:	bf00      	nop
 800cffe:	bf00      	nop
 800d000:	e7fd      	b.n	800cffe <vPortEnterCritical+0x52>
	}
}
 800d002:	bf00      	nop
 800d004:	370c      	adds	r7, #12
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	2000009c 	.word	0x2000009c
 800d014:	e000ed04 	.word	0xe000ed04

0800d018 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d01e:	4b13      	ldr	r3, [pc, #76]	@ (800d06c <vPortExitCritical+0x54>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10d      	bne.n	800d042 <vPortExitCritical+0x2a>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02a:	b672      	cpsid	i
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	b662      	cpsie	i
 800d03a:	607b      	str	r3, [r7, #4]
}
 800d03c:	bf00      	nop
 800d03e:	bf00      	nop
 800d040:	e7fd      	b.n	800d03e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d042:	4b0a      	ldr	r3, [pc, #40]	@ (800d06c <vPortExitCritical+0x54>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3b01      	subs	r3, #1
 800d048:	4a08      	ldr	r2, [pc, #32]	@ (800d06c <vPortExitCritical+0x54>)
 800d04a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d04c:	4b07      	ldr	r3, [pc, #28]	@ (800d06c <vPortExitCritical+0x54>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d105      	bne.n	800d060 <vPortExitCritical+0x48>
 800d054:	2300      	movs	r3, #0
 800d056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	f383 8811 	msr	BASEPRI, r3
}
 800d05e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	2000009c 	.word	0x2000009c

0800d070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d070:	f3ef 8009 	mrs	r0, PSP
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	4b15      	ldr	r3, [pc, #84]	@ (800d0d0 <pxCurrentTCBConst>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	f01e 0f10 	tst.w	lr, #16
 800d080:	bf08      	it	eq
 800d082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08a:	6010      	str	r0, [r2, #0]
 800d08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d094:	b672      	cpsid	i
 800d096:	f380 8811 	msr	BASEPRI, r0
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	b662      	cpsie	i
 800d0a4:	f7fe ff7e 	bl	800bfa4 <vTaskSwitchContext>
 800d0a8:	f04f 0000 	mov.w	r0, #0
 800d0ac:	f380 8811 	msr	BASEPRI, r0
 800d0b0:	bc09      	pop	{r0, r3}
 800d0b2:	6819      	ldr	r1, [r3, #0]
 800d0b4:	6808      	ldr	r0, [r1, #0]
 800d0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ba:	f01e 0f10 	tst.w	lr, #16
 800d0be:	bf08      	it	eq
 800d0c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d0c4:	f380 8809 	msr	PSP, r0
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop

0800d0d0 <pxCurrentTCBConst>:
 800d0d0:	20008144 	.word	0x20008144
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d0d4:	bf00      	nop
 800d0d6:	bf00      	nop

0800d0d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e2:	b672      	cpsid	i
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	b662      	cpsie	i
 800d0f2:	607b      	str	r3, [r7, #4]
}
 800d0f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d0f6:	f7fe fe99 	bl	800be2c <xTaskIncrementTick>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d003      	beq.n	800d108 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d100:	4b06      	ldr	r3, [pc, #24]	@ (800d11c <SysTick_Handler+0x44>)
 800d102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	2300      	movs	r3, #0
 800d10a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	f383 8811 	msr	BASEPRI, r3
}
 800d112:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d114:	bf00      	nop
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	e000ed04 	.word	0xe000ed04

0800d120 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d120:	b480      	push	{r7}
 800d122:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d124:	4b0b      	ldr	r3, [pc, #44]	@ (800d154 <vPortSetupTimerInterrupt+0x34>)
 800d126:	2200      	movs	r2, #0
 800d128:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d12a:	4b0b      	ldr	r3, [pc, #44]	@ (800d158 <vPortSetupTimerInterrupt+0x38>)
 800d12c:	2200      	movs	r2, #0
 800d12e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d130:	4b0a      	ldr	r3, [pc, #40]	@ (800d15c <vPortSetupTimerInterrupt+0x3c>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a0a      	ldr	r2, [pc, #40]	@ (800d160 <vPortSetupTimerInterrupt+0x40>)
 800d136:	fba2 2303 	umull	r2, r3, r2, r3
 800d13a:	099b      	lsrs	r3, r3, #6
 800d13c:	4a09      	ldr	r2, [pc, #36]	@ (800d164 <vPortSetupTimerInterrupt+0x44>)
 800d13e:	3b01      	subs	r3, #1
 800d140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d142:	4b04      	ldr	r3, [pc, #16]	@ (800d154 <vPortSetupTimerInterrupt+0x34>)
 800d144:	2207      	movs	r2, #7
 800d146:	601a      	str	r2, [r3, #0]
}
 800d148:	bf00      	nop
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	e000e010 	.word	0xe000e010
 800d158:	e000e018 	.word	0xe000e018
 800d15c:	20000004 	.word	0x20000004
 800d160:	10624dd3 	.word	0x10624dd3
 800d164:	e000e014 	.word	0xe000e014

0800d168 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d168:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d178 <vPortEnableVFP+0x10>
 800d16c:	6801      	ldr	r1, [r0, #0]
 800d16e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d172:	6001      	str	r1, [r0, #0]
 800d174:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d176:	bf00      	nop
 800d178:	e000ed88 	.word	0xe000ed88

0800d17c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d182:	f3ef 8305 	mrs	r3, IPSR
 800d186:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b0f      	cmp	r3, #15
 800d18c:	d917      	bls.n	800d1be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d18e:	4a1a      	ldr	r2, [pc, #104]	@ (800d1f8 <vPortValidateInterruptPriority+0x7c>)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	4413      	add	r3, r2
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d198:	4b18      	ldr	r3, [pc, #96]	@ (800d1fc <vPortValidateInterruptPriority+0x80>)
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	7afa      	ldrb	r2, [r7, #11]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d20d      	bcs.n	800d1be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a6:	b672      	cpsid	i
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	b662      	cpsie	i
 800d1b6:	607b      	str	r3, [r7, #4]
}
 800d1b8:	bf00      	nop
 800d1ba:	bf00      	nop
 800d1bc:	e7fd      	b.n	800d1ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d1be:	4b10      	ldr	r3, [pc, #64]	@ (800d200 <vPortValidateInterruptPriority+0x84>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d204 <vPortValidateInterruptPriority+0x88>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d90d      	bls.n	800d1ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d2:	b672      	cpsid	i
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	b662      	cpsie	i
 800d1e2:	603b      	str	r3, [r7, #0]
}
 800d1e4:	bf00      	nop
 800d1e6:	bf00      	nop
 800d1e8:	e7fd      	b.n	800d1e6 <vPortValidateInterruptPriority+0x6a>
	}
 800d1ea:	bf00      	nop
 800d1ec:	3714      	adds	r7, #20
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	e000e3f0 	.word	0xe000e3f0
 800d1fc:	20008770 	.word	0x20008770
 800d200:	e000ed0c 	.word	0xe000ed0c
 800d204:	20008774 	.word	0x20008774

0800d208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b08a      	sub	sp, #40	@ 0x28
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d210:	2300      	movs	r3, #0
 800d212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d214:	f7fe fd4c 	bl	800bcb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d218:	4b5d      	ldr	r3, [pc, #372]	@ (800d390 <pvPortMalloc+0x188>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d101      	bne.n	800d224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d220:	f000 f920 	bl	800d464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d224:	4b5b      	ldr	r3, [pc, #364]	@ (800d394 <pvPortMalloc+0x18c>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4013      	ands	r3, r2
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f040 8094 	bne.w	800d35a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d020      	beq.n	800d27a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800d238:	2208      	movs	r2, #8
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4413      	add	r3, r2
 800d23e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f003 0307 	and.w	r3, r3, #7
 800d246:	2b00      	cmp	r3, #0
 800d248:	d017      	beq.n	800d27a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f023 0307 	bic.w	r3, r3, #7
 800d250:	3308      	adds	r3, #8
 800d252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f003 0307 	and.w	r3, r3, #7
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00d      	beq.n	800d27a <pvPortMalloc+0x72>
	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d262:	b672      	cpsid	i
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	b662      	cpsie	i
 800d272:	617b      	str	r3, [r7, #20]
}
 800d274:	bf00      	nop
 800d276:	bf00      	nop
 800d278:	e7fd      	b.n	800d276 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d06c      	beq.n	800d35a <pvPortMalloc+0x152>
 800d280:	4b45      	ldr	r3, [pc, #276]	@ (800d398 <pvPortMalloc+0x190>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	429a      	cmp	r2, r3
 800d288:	d867      	bhi.n	800d35a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d28a:	4b44      	ldr	r3, [pc, #272]	@ (800d39c <pvPortMalloc+0x194>)
 800d28c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d28e:	4b43      	ldr	r3, [pc, #268]	@ (800d39c <pvPortMalloc+0x194>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d294:	e004      	b.n	800d2a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800d296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d903      	bls.n	800d2b2 <pvPortMalloc+0xaa>
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1f1      	bne.n	800d296 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d2b2:	4b37      	ldr	r3, [pc, #220]	@ (800d390 <pvPortMalloc+0x188>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d04e      	beq.n	800d35a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2208      	movs	r2, #8
 800d2c2:	4413      	add	r3, r2
 800d2c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	6a3b      	ldr	r3, [r7, #32]
 800d2cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d0:	685a      	ldr	r2, [r3, #4]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	1ad2      	subs	r2, r2, r3
 800d2d6:	2308      	movs	r3, #8
 800d2d8:	005b      	lsls	r3, r3, #1
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d922      	bls.n	800d324 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	f003 0307 	and.w	r3, r3, #7
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00d      	beq.n	800d30c <pvPortMalloc+0x104>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f4:	b672      	cpsid	i
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	b662      	cpsie	i
 800d304:	613b      	str	r3, [r7, #16]
}
 800d306:	bf00      	nop
 800d308:	bf00      	nop
 800d30a:	e7fd      	b.n	800d308 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	1ad2      	subs	r2, r2, r3
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d31e:	69b8      	ldr	r0, [r7, #24]
 800d320:	f000 f902 	bl	800d528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d324:	4b1c      	ldr	r3, [pc, #112]	@ (800d398 <pvPortMalloc+0x190>)
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	4a1a      	ldr	r2, [pc, #104]	@ (800d398 <pvPortMalloc+0x190>)
 800d330:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d332:	4b19      	ldr	r3, [pc, #100]	@ (800d398 <pvPortMalloc+0x190>)
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a0 <pvPortMalloc+0x198>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d203      	bcs.n	800d346 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d33e:	4b16      	ldr	r3, [pc, #88]	@ (800d398 <pvPortMalloc+0x190>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a17      	ldr	r2, [pc, #92]	@ (800d3a0 <pvPortMalloc+0x198>)
 800d344:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	685a      	ldr	r2, [r3, #4]
 800d34a:	4b12      	ldr	r3, [pc, #72]	@ (800d394 <pvPortMalloc+0x18c>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	431a      	orrs	r2, r3
 800d350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d352:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d356:	2200      	movs	r2, #0
 800d358:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d35a:	f7fe fcb7 	bl	800bccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	f003 0307 	and.w	r3, r3, #7
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00d      	beq.n	800d384 <pvPortMalloc+0x17c>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d36c:	b672      	cpsid	i
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	b662      	cpsie	i
 800d37c:	60fb      	str	r3, [r7, #12]
}
 800d37e:	bf00      	nop
 800d380:	bf00      	nop
 800d382:	e7fd      	b.n	800d380 <pvPortMalloc+0x178>
	return pvReturn;
 800d384:	69fb      	ldr	r3, [r7, #28]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3728      	adds	r7, #40	@ 0x28
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	2000c380 	.word	0x2000c380
 800d394:	2000c38c 	.word	0x2000c38c
 800d398:	2000c384 	.word	0x2000c384
 800d39c:	2000c378 	.word	0x2000c378
 800d3a0:	2000c388 	.word	0x2000c388

0800d3a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b086      	sub	sp, #24
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d04e      	beq.n	800d454 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d3b6:	2308      	movs	r3, #8
 800d3b8:	425b      	negs	r3, r3
 800d3ba:	697a      	ldr	r2, [r7, #20]
 800d3bc:	4413      	add	r3, r2
 800d3be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	685a      	ldr	r2, [r3, #4]
 800d3c8:	4b24      	ldr	r3, [pc, #144]	@ (800d45c <vPortFree+0xb8>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4013      	ands	r3, r2
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10d      	bne.n	800d3ee <vPortFree+0x4a>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d6:	b672      	cpsid	i
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	b662      	cpsie	i
 800d3e6:	60fb      	str	r3, [r7, #12]
}
 800d3e8:	bf00      	nop
 800d3ea:	bf00      	nop
 800d3ec:	e7fd      	b.n	800d3ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00d      	beq.n	800d412 <vPortFree+0x6e>
	__asm volatile
 800d3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3fa:	b672      	cpsid	i
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	b662      	cpsie	i
 800d40a:	60bb      	str	r3, [r7, #8]
}
 800d40c:	bf00      	nop
 800d40e:	bf00      	nop
 800d410:	e7fd      	b.n	800d40e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	685a      	ldr	r2, [r3, #4]
 800d416:	4b11      	ldr	r3, [pc, #68]	@ (800d45c <vPortFree+0xb8>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4013      	ands	r3, r2
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d019      	beq.n	800d454 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d115      	bne.n	800d454 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	4b0b      	ldr	r3, [pc, #44]	@ (800d45c <vPortFree+0xb8>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	43db      	mvns	r3, r3
 800d432:	401a      	ands	r2, r3
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d438:	f7fe fc3a 	bl	800bcb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	685a      	ldr	r2, [r3, #4]
 800d440:	4b07      	ldr	r3, [pc, #28]	@ (800d460 <vPortFree+0xbc>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4413      	add	r3, r2
 800d446:	4a06      	ldr	r2, [pc, #24]	@ (800d460 <vPortFree+0xbc>)
 800d448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d44a:	6938      	ldr	r0, [r7, #16]
 800d44c:	f000 f86c 	bl	800d528 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d450:	f7fe fc3c 	bl	800bccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d454:	bf00      	nop
 800d456:	3718      	adds	r7, #24
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	2000c38c 	.word	0x2000c38c
 800d460:	2000c384 	.word	0x2000c384

0800d464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d46a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d46e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d470:	4b27      	ldr	r3, [pc, #156]	@ (800d510 <prvHeapInit+0xac>)
 800d472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f003 0307 	and.w	r3, r3, #7
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00c      	beq.n	800d498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	3307      	adds	r3, #7
 800d482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f023 0307 	bic.w	r3, r3, #7
 800d48a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	4a1f      	ldr	r2, [pc, #124]	@ (800d510 <prvHeapInit+0xac>)
 800d494:	4413      	add	r3, r2
 800d496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d49c:	4a1d      	ldr	r2, [pc, #116]	@ (800d514 <prvHeapInit+0xb0>)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d4a2:	4b1c      	ldr	r3, [pc, #112]	@ (800d514 <prvHeapInit+0xb0>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d4b0:	2208      	movs	r2, #8
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	1a9b      	subs	r3, r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f023 0307 	bic.w	r3, r3, #7
 800d4be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	4a15      	ldr	r2, [pc, #84]	@ (800d518 <prvHeapInit+0xb4>)
 800d4c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d4c6:	4b14      	ldr	r3, [pc, #80]	@ (800d518 <prvHeapInit+0xb4>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d4ce:	4b12      	ldr	r3, [pc, #72]	@ (800d518 <prvHeapInit+0xb4>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	1ad2      	subs	r2, r2, r3
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d518 <prvHeapInit+0xb4>)
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	4a0a      	ldr	r2, [pc, #40]	@ (800d51c <prvHeapInit+0xb8>)
 800d4f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	4a09      	ldr	r2, [pc, #36]	@ (800d520 <prvHeapInit+0xbc>)
 800d4fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4fc:	4b09      	ldr	r3, [pc, #36]	@ (800d524 <prvHeapInit+0xc0>)
 800d4fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d502:	601a      	str	r2, [r3, #0]
}
 800d504:	bf00      	nop
 800d506:	3714      	adds	r7, #20
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	20008778 	.word	0x20008778
 800d514:	2000c378 	.word	0x2000c378
 800d518:	2000c380 	.word	0x2000c380
 800d51c:	2000c388 	.word	0x2000c388
 800d520:	2000c384 	.word	0x2000c384
 800d524:	2000c38c 	.word	0x2000c38c

0800d528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d530:	4b28      	ldr	r3, [pc, #160]	@ (800d5d4 <prvInsertBlockIntoFreeList+0xac>)
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	e002      	b.n	800d53c <prvInsertBlockIntoFreeList+0x14>
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	60fb      	str	r3, [r7, #12]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	429a      	cmp	r2, r3
 800d544:	d8f7      	bhi.n	800d536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	4413      	add	r3, r2
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	429a      	cmp	r2, r3
 800d556:	d108      	bne.n	800d56a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	441a      	add	r2, r3
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	441a      	add	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d118      	bne.n	800d5b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4b15      	ldr	r3, [pc, #84]	@ (800d5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	429a      	cmp	r2, r3
 800d588:	d00d      	beq.n	800d5a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	441a      	add	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	e008      	b.n	800d5b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	e003      	b.n	800d5b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d002      	beq.n	800d5c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5c6:	bf00      	nop
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	2000c378 	.word	0x2000c378
 800d5d8:	2000c380 	.word	0x2000c380

0800d5dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	4912      	ldr	r1, [pc, #72]	@ (800d62c <MX_USB_DEVICE_Init+0x50>)
 800d5e4:	4812      	ldr	r0, [pc, #72]	@ (800d630 <MX_USB_DEVICE_Init+0x54>)
 800d5e6:	f7fb fe9d 	bl	8009324 <USBD_Init>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d5f0:	f7f3 fdee 	bl	80011d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d5f4:	490f      	ldr	r1, [pc, #60]	@ (800d634 <MX_USB_DEVICE_Init+0x58>)
 800d5f6:	480e      	ldr	r0, [pc, #56]	@ (800d630 <MX_USB_DEVICE_Init+0x54>)
 800d5f8:	f7fb fec4 	bl	8009384 <USBD_RegisterClass>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d001      	beq.n	800d606 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d602:	f7f3 fde5 	bl	80011d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d606:	490c      	ldr	r1, [pc, #48]	@ (800d638 <MX_USB_DEVICE_Init+0x5c>)
 800d608:	4809      	ldr	r0, [pc, #36]	@ (800d630 <MX_USB_DEVICE_Init+0x54>)
 800d60a:	f7fb fdfb 	bl	8009204 <USBD_CDC_RegisterInterface>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d614:	f7f3 fddc 	bl	80011d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d618:	4805      	ldr	r0, [pc, #20]	@ (800d630 <MX_USB_DEVICE_Init+0x54>)
 800d61a:	f7fb fee9 	bl	80093f0 <USBD_Start>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d624:	f7f3 fdd4 	bl	80011d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d628:	bf00      	nop
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	200000b4 	.word	0x200000b4
 800d630:	2000c390 	.word	0x2000c390
 800d634:	2000001c 	.word	0x2000001c
 800d638:	200000a0 	.word	0x200000a0

0800d63c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d640:	2200      	movs	r2, #0
 800d642:	4905      	ldr	r1, [pc, #20]	@ (800d658 <CDC_Init_FS+0x1c>)
 800d644:	4805      	ldr	r0, [pc, #20]	@ (800d65c <CDC_Init_FS+0x20>)
 800d646:	f7fb fdf7 	bl	8009238 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d64a:	4905      	ldr	r1, [pc, #20]	@ (800d660 <CDC_Init_FS+0x24>)
 800d64c:	4803      	ldr	r0, [pc, #12]	@ (800d65c <CDC_Init_FS+0x20>)
 800d64e:	f7fb fe15 	bl	800927c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d652:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d654:	4618      	mov	r0, r3
 800d656:	bd80      	pop	{r7, pc}
 800d658:	2000ce6c 	.word	0x2000ce6c
 800d65c:	2000c390 	.word	0x2000c390
 800d660:	2000c66c 	.word	0x2000c66c

0800d664 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d664:	b480      	push	{r7}
 800d666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d668:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	4603      	mov	r3, r0
 800d67c:	6039      	str	r1, [r7, #0]
 800d67e:	71fb      	strb	r3, [r7, #7]
 800d680:	4613      	mov	r3, r2
 800d682:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	2b23      	cmp	r3, #35	@ 0x23
 800d688:	d84a      	bhi.n	800d720 <CDC_Control_FS+0xac>
 800d68a:	a201      	add	r2, pc, #4	@ (adr r2, 800d690 <CDC_Control_FS+0x1c>)
 800d68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d690:	0800d721 	.word	0x0800d721
 800d694:	0800d721 	.word	0x0800d721
 800d698:	0800d721 	.word	0x0800d721
 800d69c:	0800d721 	.word	0x0800d721
 800d6a0:	0800d721 	.word	0x0800d721
 800d6a4:	0800d721 	.word	0x0800d721
 800d6a8:	0800d721 	.word	0x0800d721
 800d6ac:	0800d721 	.word	0x0800d721
 800d6b0:	0800d721 	.word	0x0800d721
 800d6b4:	0800d721 	.word	0x0800d721
 800d6b8:	0800d721 	.word	0x0800d721
 800d6bc:	0800d721 	.word	0x0800d721
 800d6c0:	0800d721 	.word	0x0800d721
 800d6c4:	0800d721 	.word	0x0800d721
 800d6c8:	0800d721 	.word	0x0800d721
 800d6cc:	0800d721 	.word	0x0800d721
 800d6d0:	0800d721 	.word	0x0800d721
 800d6d4:	0800d721 	.word	0x0800d721
 800d6d8:	0800d721 	.word	0x0800d721
 800d6dc:	0800d721 	.word	0x0800d721
 800d6e0:	0800d721 	.word	0x0800d721
 800d6e4:	0800d721 	.word	0x0800d721
 800d6e8:	0800d721 	.word	0x0800d721
 800d6ec:	0800d721 	.word	0x0800d721
 800d6f0:	0800d721 	.word	0x0800d721
 800d6f4:	0800d721 	.word	0x0800d721
 800d6f8:	0800d721 	.word	0x0800d721
 800d6fc:	0800d721 	.word	0x0800d721
 800d700:	0800d721 	.word	0x0800d721
 800d704:	0800d721 	.word	0x0800d721
 800d708:	0800d721 	.word	0x0800d721
 800d70c:	0800d721 	.word	0x0800d721
 800d710:	0800d721 	.word	0x0800d721
 800d714:	0800d721 	.word	0x0800d721
 800d718:	0800d721 	.word	0x0800d721
 800d71c:	0800d721 	.word	0x0800d721
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d720:	bf00      	nop
  }

  return (USBD_OK);
 800d722:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d724:	4618      	mov	r0, r3
 800d726:	370c      	adds	r7, #12
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d73a:	6879      	ldr	r1, [r7, #4]
 800d73c:	4805      	ldr	r0, [pc, #20]	@ (800d754 <CDC_Receive_FS+0x24>)
 800d73e:	f7fb fd9d 	bl	800927c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d742:	4804      	ldr	r0, [pc, #16]	@ (800d754 <CDC_Receive_FS+0x24>)
 800d744:	f7fb fdb8 	bl	80092b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d748:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	2000c390 	.word	0x2000c390

0800d758 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d758:	b480      	push	{r7}
 800d75a:	b087      	sub	sp, #28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	4613      	mov	r3, r2
 800d764:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d766:	2300      	movs	r3, #0
 800d768:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d76a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	371c      	adds	r7, #28
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr
	...

0800d77c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	4603      	mov	r3, r0
 800d784:	6039      	str	r1, [r7, #0]
 800d786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	2212      	movs	r2, #18
 800d78c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d78e:	4b03      	ldr	r3, [pc, #12]	@ (800d79c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr
 800d79c:	200000d4 	.word	0x200000d4

0800d7a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	6039      	str	r1, [r7, #0]
 800d7aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	2204      	movs	r2, #4
 800d7b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7b2:	4b03      	ldr	r3, [pc, #12]	@ (800d7c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	200000f4 	.word	0x200000f4

0800d7c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	6039      	str	r1, [r7, #0]
 800d7ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7d0:	79fb      	ldrb	r3, [r7, #7]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d105      	bne.n	800d7e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	4907      	ldr	r1, [pc, #28]	@ (800d7f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7da:	4808      	ldr	r0, [pc, #32]	@ (800d7fc <USBD_FS_ProductStrDescriptor+0x38>)
 800d7dc:	f7fc ffe2 	bl	800a7a4 <USBD_GetString>
 800d7e0:	e004      	b.n	800d7ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7e2:	683a      	ldr	r2, [r7, #0]
 800d7e4:	4904      	ldr	r1, [pc, #16]	@ (800d7f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7e6:	4805      	ldr	r0, [pc, #20]	@ (800d7fc <USBD_FS_ProductStrDescriptor+0x38>)
 800d7e8:	f7fc ffdc 	bl	800a7a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7ec:	4b02      	ldr	r3, [pc, #8]	@ (800d7f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3708      	adds	r7, #8
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	2000d66c 	.word	0x2000d66c
 800d7fc:	0801c750 	.word	0x0801c750

0800d800 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	4603      	mov	r3, r0
 800d808:	6039      	str	r1, [r7, #0]
 800d80a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d80c:	683a      	ldr	r2, [r7, #0]
 800d80e:	4904      	ldr	r1, [pc, #16]	@ (800d820 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d810:	4804      	ldr	r0, [pc, #16]	@ (800d824 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d812:	f7fc ffc7 	bl	800a7a4 <USBD_GetString>
  return USBD_StrDesc;
 800d816:	4b02      	ldr	r3, [pc, #8]	@ (800d820 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	2000d66c 	.word	0x2000d66c
 800d824:	0801c768 	.word	0x0801c768

0800d828 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	4603      	mov	r3, r0
 800d830:	6039      	str	r1, [r7, #0]
 800d832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	221a      	movs	r2, #26
 800d838:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d83a:	f000 f855 	bl	800d8e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d83e:	4b02      	ldr	r3, [pc, #8]	@ (800d848 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d840:	4618      	mov	r0, r3
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	200000f8 	.word	0x200000f8

0800d84c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	6039      	str	r1, [r7, #0]
 800d856:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d858:	79fb      	ldrb	r3, [r7, #7]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d105      	bne.n	800d86a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	4907      	ldr	r1, [pc, #28]	@ (800d880 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d862:	4808      	ldr	r0, [pc, #32]	@ (800d884 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d864:	f7fc ff9e 	bl	800a7a4 <USBD_GetString>
 800d868:	e004      	b.n	800d874 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d86a:	683a      	ldr	r2, [r7, #0]
 800d86c:	4904      	ldr	r1, [pc, #16]	@ (800d880 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d86e:	4805      	ldr	r0, [pc, #20]	@ (800d884 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d870:	f7fc ff98 	bl	800a7a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d874:	4b02      	ldr	r3, [pc, #8]	@ (800d880 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d876:	4618      	mov	r0, r3
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	2000d66c 	.word	0x2000d66c
 800d884:	0801c77c 	.word	0x0801c77c

0800d888 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	6039      	str	r1, [r7, #0]
 800d892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d894:	79fb      	ldrb	r3, [r7, #7]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d105      	bne.n	800d8a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	4907      	ldr	r1, [pc, #28]	@ (800d8bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d89e:	4808      	ldr	r0, [pc, #32]	@ (800d8c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8a0:	f7fc ff80 	bl	800a7a4 <USBD_GetString>
 800d8a4:	e004      	b.n	800d8b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	4904      	ldr	r1, [pc, #16]	@ (800d8bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8aa:	4805      	ldr	r0, [pc, #20]	@ (800d8c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8ac:	f7fc ff7a 	bl	800a7a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8b0:	4b02      	ldr	r3, [pc, #8]	@ (800d8bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	2000d66c 	.word	0x2000d66c
 800d8c0:	0801c788 	.word	0x0801c788

0800d8c4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	6039      	str	r1, [r7, #0]
 800d8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	220c      	movs	r2, #12
 800d8d4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d8d6:	4b03      	ldr	r3, [pc, #12]	@ (800d8e4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	200000e8 	.word	0x200000e8

0800d8e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d009      	beq.n	800d910 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8fc:	2208      	movs	r2, #8
 800d8fe:	4906      	ldr	r1, [pc, #24]	@ (800d918 <Get_SerialNum+0x30>)
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f000 f80d 	bl	800d920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d906:	2204      	movs	r2, #4
 800d908:	4904      	ldr	r1, [pc, #16]	@ (800d91c <Get_SerialNum+0x34>)
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f808 	bl	800d920 <IntToUnicode>
  }
}
 800d910:	bf00      	nop
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	200000fa 	.word	0x200000fa
 800d91c:	2000010a 	.word	0x2000010a

0800d920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d920:	b480      	push	{r7}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	4613      	mov	r3, r2
 800d92c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d92e:	2300      	movs	r3, #0
 800d930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d932:	2300      	movs	r3, #0
 800d934:	75fb      	strb	r3, [r7, #23]
 800d936:	e027      	b.n	800d988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	0f1b      	lsrs	r3, r3, #28
 800d93c:	2b09      	cmp	r3, #9
 800d93e:	d80b      	bhi.n	800d958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	0f1b      	lsrs	r3, r3, #28
 800d944:	b2da      	uxtb	r2, r3
 800d946:	7dfb      	ldrb	r3, [r7, #23]
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	4619      	mov	r1, r3
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	440b      	add	r3, r1
 800d950:	3230      	adds	r2, #48	@ 0x30
 800d952:	b2d2      	uxtb	r2, r2
 800d954:	701a      	strb	r2, [r3, #0]
 800d956:	e00a      	b.n	800d96e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	0f1b      	lsrs	r3, r3, #28
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	7dfb      	ldrb	r3, [r7, #23]
 800d960:	005b      	lsls	r3, r3, #1
 800d962:	4619      	mov	r1, r3
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	440b      	add	r3, r1
 800d968:	3237      	adds	r2, #55	@ 0x37
 800d96a:	b2d2      	uxtb	r2, r2
 800d96c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	011b      	lsls	r3, r3, #4
 800d972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d974:	7dfb      	ldrb	r3, [r7, #23]
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	3301      	adds	r3, #1
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	4413      	add	r3, r2
 800d97e:	2200      	movs	r2, #0
 800d980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	3301      	adds	r3, #1
 800d986:	75fb      	strb	r3, [r7, #23]
 800d988:	7dfa      	ldrb	r2, [r7, #23]
 800d98a:	79fb      	ldrb	r3, [r7, #7]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d3d3      	bcc.n	800d938 <IntToUnicode+0x18>
  }
}
 800d990:	bf00      	nop
 800d992:	bf00      	nop
 800d994:	371c      	adds	r7, #28
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
	...

0800d9a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b0ae      	sub	sp, #184	@ 0xb8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]
 800d9b0:	605a      	str	r2, [r3, #4]
 800d9b2:	609a      	str	r2, [r3, #8]
 800d9b4:	60da      	str	r2, [r3, #12]
 800d9b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d9b8:	f107 0314 	add.w	r3, r7, #20
 800d9bc:	2290      	movs	r2, #144	@ 0x90
 800d9be:	2100      	movs	r1, #0
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f00d feb7 	bl	801b734 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d9ce:	d151      	bne.n	800da74 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d9d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d9d4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d9dc:	f107 0314 	add.w	r3, r7, #20
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7f7 f84d 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d001      	beq.n	800d9f0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d9ec:	f7f3 fbf0 	bl	80011d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9f0:	4b22      	ldr	r3, [pc, #136]	@ (800da7c <HAL_PCD_MspInit+0xdc>)
 800d9f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9f4:	4a21      	ldr	r2, [pc, #132]	@ (800da7c <HAL_PCD_MspInit+0xdc>)
 800d9f6:	f043 0301 	orr.w	r3, r3, #1
 800d9fa:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9fc:	4b1f      	ldr	r3, [pc, #124]	@ (800da7c <HAL_PCD_MspInit+0xdc>)
 800d9fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da00:	f003 0301 	and.w	r3, r3, #1
 800da04:	613b      	str	r3, [r7, #16]
 800da06:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800da08:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800da0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da10:	2302      	movs	r3, #2
 800da12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da16:	2300      	movs	r3, #0
 800da18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da1c:	2303      	movs	r3, #3
 800da1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800da22:	230a      	movs	r3, #10
 800da24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800da2c:	4619      	mov	r1, r3
 800da2e:	4814      	ldr	r0, [pc, #80]	@ (800da80 <HAL_PCD_MspInit+0xe0>)
 800da30:	f7f4 fe82 	bl	8002738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da34:	4b11      	ldr	r3, [pc, #68]	@ (800da7c <HAL_PCD_MspInit+0xdc>)
 800da36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da38:	4a10      	ldr	r2, [pc, #64]	@ (800da7c <HAL_PCD_MspInit+0xdc>)
 800da3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da3e:	6353      	str	r3, [r2, #52]	@ 0x34
 800da40:	4b0e      	ldr	r3, [pc, #56]	@ (800da7c <HAL_PCD_MspInit+0xdc>)
 800da42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da48:	60fb      	str	r3, [r7, #12]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	4b0b      	ldr	r3, [pc, #44]	@ (800da7c <HAL_PCD_MspInit+0xdc>)
 800da4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da50:	4a0a      	ldr	r2, [pc, #40]	@ (800da7c <HAL_PCD_MspInit+0xdc>)
 800da52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da56:	6453      	str	r3, [r2, #68]	@ 0x44
 800da58:	4b08      	ldr	r3, [pc, #32]	@ (800da7c <HAL_PCD_MspInit+0xdc>)
 800da5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da60:	60bb      	str	r3, [r7, #8]
 800da62:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800da64:	2200      	movs	r2, #0
 800da66:	2105      	movs	r1, #5
 800da68:	2043      	movs	r0, #67	@ 0x43
 800da6a:	f7f4 f9ad 	bl	8001dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da6e:	2043      	movs	r0, #67	@ 0x43
 800da70:	f7f4 f9c6 	bl	8001e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da74:	bf00      	nop
 800da76:	37b8      	adds	r7, #184	@ 0xb8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	40023800 	.word	0x40023800
 800da80:	40020000 	.word	0x40020000

0800da84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800da98:	4619      	mov	r1, r3
 800da9a:	4610      	mov	r0, r2
 800da9c:	f7fb fcf5 	bl	800948a <USBD_LL_SetupStage>
}
 800daa0:	bf00      	nop
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800daba:	78fa      	ldrb	r2, [r7, #3]
 800dabc:	6879      	ldr	r1, [r7, #4]
 800dabe:	4613      	mov	r3, r2
 800dac0:	00db      	lsls	r3, r3, #3
 800dac2:	4413      	add	r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	440b      	add	r3, r1
 800dac8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	78fb      	ldrb	r3, [r7, #3]
 800dad0:	4619      	mov	r1, r3
 800dad2:	f7fb fd2f 	bl	8009534 <USBD_LL_DataOutStage>
}
 800dad6:	bf00      	nop
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	460b      	mov	r3, r1
 800dae8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800daf0:	78fa      	ldrb	r2, [r7, #3]
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	4613      	mov	r3, r2
 800daf6:	00db      	lsls	r3, r3, #3
 800daf8:	4413      	add	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	440b      	add	r3, r1
 800dafe:	3320      	adds	r3, #32
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	78fb      	ldrb	r3, [r7, #3]
 800db04:	4619      	mov	r1, r3
 800db06:	f7fb fdc8 	bl	800969a <USBD_LL_DataInStage>
}
 800db0a:	bf00      	nop
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800db20:	4618      	mov	r0, r3
 800db22:	f7fb ff02 	bl	800992a <USBD_LL_SOF>
}
 800db26:	bf00      	nop
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db36:	2301      	movs	r3, #1
 800db38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	79db      	ldrb	r3, [r3, #7]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d102      	bne.n	800db48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800db42:	2300      	movs	r3, #0
 800db44:	73fb      	strb	r3, [r7, #15]
 800db46:	e008      	b.n	800db5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	79db      	ldrb	r3, [r3, #7]
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d102      	bne.n	800db56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800db50:	2301      	movs	r3, #1
 800db52:	73fb      	strb	r3, [r7, #15]
 800db54:	e001      	b.n	800db5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800db56:	f7f3 fb3b 	bl	80011d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800db60:	7bfa      	ldrb	r2, [r7, #15]
 800db62:	4611      	mov	r1, r2
 800db64:	4618      	mov	r0, r3
 800db66:	f7fb fe9c 	bl	80098a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800db70:	4618      	mov	r0, r3
 800db72:	f7fb fe44 	bl	80097fe <USBD_LL_Reset>
}
 800db76:	bf00      	nop
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
	...

0800db80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fb fe97 	bl	80098c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	6812      	ldr	r2, [r2, #0]
 800dba2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dba6:	f043 0301 	orr.w	r3, r3, #1
 800dbaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	7adb      	ldrb	r3, [r3, #11]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d005      	beq.n	800dbc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbb4:	4b04      	ldr	r3, [pc, #16]	@ (800dbc8 <HAL_PCD_SuspendCallback+0x48>)
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	4a03      	ldr	r2, [pc, #12]	@ (800dbc8 <HAL_PCD_SuspendCallback+0x48>)
 800dbba:	f043 0306 	orr.w	r3, r3, #6
 800dbbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dbc0:	bf00      	nop
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	e000ed00 	.word	0xe000ed00

0800dbcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fb fe8d 	bl	80098fa <USBD_LL_Resume>
}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dbfa:	78fa      	ldrb	r2, [r7, #3]
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fb fee5 	bl	80099ce <USBD_LL_IsoOUTIncomplete>
}
 800dc04:	bf00      	nop
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	460b      	mov	r3, r1
 800dc16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dc1e:	78fa      	ldrb	r2, [r7, #3]
 800dc20:	4611      	mov	r1, r2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fb fea1 	bl	800996a <USBD_LL_IsoINIncomplete>
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fb fef7 	bl	8009a32 <USBD_LL_DevConnected>
}
 800dc44:	bf00      	nop
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fb fef4 	bl	8009a48 <USBD_LL_DevDisconnected>
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d13c      	bne.n	800dcf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc78:	4a20      	ldr	r2, [pc, #128]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	4a1e      	ldr	r2, [pc, #120]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dc84:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc88:	4b1c      	ldr	r3, [pc, #112]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dc8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dc8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dc90:	4b1a      	ldr	r3, [pc, #104]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dc92:	2206      	movs	r2, #6
 800dc94:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dc96:	4b19      	ldr	r3, [pc, #100]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dc98:	2202      	movs	r2, #2
 800dc9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc9c:	4b17      	ldr	r3, [pc, #92]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dca2:	4b16      	ldr	r3, [pc, #88]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dca4:	2202      	movs	r2, #2
 800dca6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dca8:	4b14      	ldr	r3, [pc, #80]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dcae:	4b13      	ldr	r3, [pc, #76]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dcb4:	4b11      	ldr	r3, [pc, #68]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dcba:	4b10      	ldr	r3, [pc, #64]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dcc0:	4b0e      	ldr	r3, [pc, #56]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dcc6:	480d      	ldr	r0, [pc, #52]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dcc8:	f7f4 fefb 	bl	8002ac2 <HAL_PCD_Init>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d001      	beq.n	800dcd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dcd2:	f7f3 fa7d 	bl	80011d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dcd6:	2180      	movs	r1, #128	@ 0x80
 800dcd8:	4808      	ldr	r0, [pc, #32]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dcda:	f7f6 f946 	bl	8003f6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dcde:	2240      	movs	r2, #64	@ 0x40
 800dce0:	2100      	movs	r1, #0
 800dce2:	4806      	ldr	r0, [pc, #24]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dce4:	f7f6 f8fa 	bl	8003edc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dce8:	2280      	movs	r2, #128	@ 0x80
 800dcea:	2101      	movs	r1, #1
 800dcec:	4803      	ldr	r0, [pc, #12]	@ (800dcfc <USBD_LL_Init+0x94>)
 800dcee:	f7f6 f8f5 	bl	8003edc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	2000d86c 	.word	0x2000d86c

0800dd00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7f4 ffe9 	bl	8002cee <HAL_PCD_Start>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd20:	7bfb      	ldrb	r3, [r7, #15]
 800dd22:	4618      	mov	r0, r3
 800dd24:	f000 f97e 	bl	800e024 <USBD_Get_USB_Status>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b084      	sub	sp, #16
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	4608      	mov	r0, r1
 800dd40:	4611      	mov	r1, r2
 800dd42:	461a      	mov	r2, r3
 800dd44:	4603      	mov	r3, r0
 800dd46:	70fb      	strb	r3, [r7, #3]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70bb      	strb	r3, [r7, #2]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dd5e:	78bb      	ldrb	r3, [r7, #2]
 800dd60:	883a      	ldrh	r2, [r7, #0]
 800dd62:	78f9      	ldrb	r1, [r7, #3]
 800dd64:	f7f5 fcd7 	bl	8003716 <HAL_PCD_EP_Open>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f000 f958 	bl	800e024 <USBD_Get_USB_Status>
 800dd74:	4603      	mov	r3, r0
 800dd76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd78:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b084      	sub	sp, #16
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dd9c:	78fa      	ldrb	r2, [r7, #3]
 800dd9e:	4611      	mov	r1, r2
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7f5 fd20 	bl	80037e6 <HAL_PCD_EP_Close>
 800dda6:	4603      	mov	r3, r0
 800dda8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddaa:	7bfb      	ldrb	r3, [r7, #15]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 f939 	bl	800e024 <USBD_Get_USB_Status>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3710      	adds	r7, #16
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ddda:	78fa      	ldrb	r2, [r7, #3]
 800dddc:	4611      	mov	r1, r2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7f5 fdd8 	bl	8003994 <HAL_PCD_EP_SetStall>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 f91a 	bl	800e024 <USBD_Get_USB_Status>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	460b      	mov	r3, r1
 800de08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de0e:	2300      	movs	r3, #0
 800de10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de18:	78fa      	ldrb	r2, [r7, #3]
 800de1a:	4611      	mov	r1, r2
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7f5 fe1c 	bl	8003a5a <HAL_PCD_EP_ClrStall>
 800de22:	4603      	mov	r3, r0
 800de24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de26:	7bfb      	ldrb	r3, [r7, #15]
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 f8fb 	bl	800e024 <USBD_Get_USB_Status>
 800de2e:	4603      	mov	r3, r0
 800de30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de32:	7bbb      	ldrb	r3, [r7, #14]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800de50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de54:	2b00      	cmp	r3, #0
 800de56:	da0b      	bge.n	800de70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de58:	78fb      	ldrb	r3, [r7, #3]
 800de5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de5e:	68f9      	ldr	r1, [r7, #12]
 800de60:	4613      	mov	r3, r2
 800de62:	00db      	lsls	r3, r3, #3
 800de64:	4413      	add	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	440b      	add	r3, r1
 800de6a:	3316      	adds	r3, #22
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	e00b      	b.n	800de88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de76:	68f9      	ldr	r1, [r7, #12]
 800de78:	4613      	mov	r3, r2
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	4413      	add	r3, r2
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	440b      	add	r3, r1
 800de82:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800de86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3714      	adds	r7, #20
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	460b      	mov	r3, r1
 800de9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dea0:	2300      	movs	r3, #0
 800dea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dea4:	2300      	movs	r3, #0
 800dea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800deae:	78fa      	ldrb	r2, [r7, #3]
 800deb0:	4611      	mov	r1, r2
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7f5 fc0b 	bl	80036ce <HAL_PCD_SetAddress>
 800deb8:	4603      	mov	r3, r0
 800deba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800debc:	7bfb      	ldrb	r3, [r7, #15]
 800debe:	4618      	mov	r0, r3
 800dec0:	f000 f8b0 	bl	800e024 <USBD_Get_USB_Status>
 800dec4:	4603      	mov	r3, r0
 800dec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dec8:	7bbb      	ldrb	r3, [r7, #14]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b086      	sub	sp, #24
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	60f8      	str	r0, [r7, #12]
 800deda:	607a      	str	r2, [r7, #4]
 800dedc:	603b      	str	r3, [r7, #0]
 800dede:	460b      	mov	r3, r1
 800dee0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dee2:	2300      	movs	r3, #0
 800dee4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800def0:	7af9      	ldrb	r1, [r7, #11]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	f7f5 fd13 	bl	8003920 <HAL_PCD_EP_Transmit>
 800defa:	4603      	mov	r3, r0
 800defc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800defe:	7dfb      	ldrb	r3, [r7, #23]
 800df00:	4618      	mov	r0, r3
 800df02:	f000 f88f 	bl	800e024 <USBD_Get_USB_Status>
 800df06:	4603      	mov	r3, r0
 800df08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	607a      	str	r2, [r7, #4]
 800df1e:	603b      	str	r3, [r7, #0]
 800df20:	460b      	mov	r3, r1
 800df22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df24:	2300      	movs	r3, #0
 800df26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df28:	2300      	movs	r3, #0
 800df2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800df32:	7af9      	ldrb	r1, [r7, #11]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	f7f5 fc9f 	bl	800387a <HAL_PCD_EP_Receive>
 800df3c:	4603      	mov	r3, r0
 800df3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df40:	7dfb      	ldrb	r3, [r7, #23]
 800df42:	4618      	mov	r0, r3
 800df44:	f000 f86e 	bl	800e024 <USBD_Get_USB_Status>
 800df48:	4603      	mov	r3, r0
 800df4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3718      	adds	r7, #24
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df56:	b580      	push	{r7, lr}
 800df58:	b082      	sub	sp, #8
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
 800df5e:	460b      	mov	r3, r1
 800df60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df68:	78fa      	ldrb	r2, [r7, #3]
 800df6a:	4611      	mov	r1, r2
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7f5 fcbf 	bl	80038f0 <HAL_PCD_EP_GetRxCount>
 800df72:	4603      	mov	r3, r0
}
 800df74:	4618      	mov	r0, r3
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	460b      	mov	r3, r1
 800df86:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800df88:	78fb      	ldrb	r3, [r7, #3]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <HAL_PCDEx_LPM_Callback+0x18>
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d01f      	beq.n	800dfd2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800df92:	e03b      	b.n	800e00c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	7adb      	ldrb	r3, [r3, #11]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d007      	beq.n	800dfac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800df9c:	f000 f83c 	bl	800e018 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dfa0:	4b1c      	ldr	r3, [pc, #112]	@ (800e014 <HAL_PCDEx_LPM_Callback+0x98>)
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	4a1b      	ldr	r2, [pc, #108]	@ (800e014 <HAL_PCDEx_LPM_Callback+0x98>)
 800dfa6:	f023 0306 	bic.w	r3, r3, #6
 800dfaa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	6812      	ldr	r2, [r2, #0]
 800dfba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dfbe:	f023 0301 	bic.w	r3, r3, #1
 800dfc2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fb fc95 	bl	80098fa <USBD_LL_Resume>
    break;
 800dfd0:	e01c      	b.n	800e00c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	6812      	ldr	r2, [r2, #0]
 800dfe0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dfe4:	f043 0301 	orr.w	r3, r3, #1
 800dfe8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fb fc66 	bl	80098c2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	7adb      	ldrb	r3, [r3, #11]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d005      	beq.n	800e00a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dffe:	4b05      	ldr	r3, [pc, #20]	@ (800e014 <HAL_PCDEx_LPM_Callback+0x98>)
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	4a04      	ldr	r2, [pc, #16]	@ (800e014 <HAL_PCDEx_LPM_Callback+0x98>)
 800e004:	f043 0306 	orr.w	r3, r3, #6
 800e008:	6113      	str	r3, [r2, #16]
    break;
 800e00a:	bf00      	nop
}
 800e00c:	bf00      	nop
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	e000ed00 	.word	0xe000ed00

0800e018 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e01c:	f7f3 f82a 	bl	8001074 <SystemClock_Config>
}
 800e020:	bf00      	nop
 800e022:	bd80      	pop	{r7, pc}

0800e024 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e024:	b480      	push	{r7}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	4603      	mov	r3, r0
 800e02c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e02e:	2300      	movs	r3, #0
 800e030:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e032:	79fb      	ldrb	r3, [r7, #7]
 800e034:	2b03      	cmp	r3, #3
 800e036:	d817      	bhi.n	800e068 <USBD_Get_USB_Status+0x44>
 800e038:	a201      	add	r2, pc, #4	@ (adr r2, 800e040 <USBD_Get_USB_Status+0x1c>)
 800e03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e03e:	bf00      	nop
 800e040:	0800e051 	.word	0x0800e051
 800e044:	0800e057 	.word	0x0800e057
 800e048:	0800e05d 	.word	0x0800e05d
 800e04c:	0800e063 	.word	0x0800e063
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	73fb      	strb	r3, [r7, #15]
    break;
 800e054:	e00b      	b.n	800e06e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e056:	2303      	movs	r3, #3
 800e058:	73fb      	strb	r3, [r7, #15]
    break;
 800e05a:	e008      	b.n	800e06e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e05c:	2301      	movs	r3, #1
 800e05e:	73fb      	strb	r3, [r7, #15]
    break;
 800e060:	e005      	b.n	800e06e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e062:	2303      	movs	r3, #3
 800e064:	73fb      	strb	r3, [r7, #15]
    break;
 800e066:	e002      	b.n	800e06e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e068:	2303      	movs	r3, #3
 800e06a:	73fb      	strb	r3, [r7, #15]
    break;
 800e06c:	bf00      	nop
  }
  return usb_status;
 800e06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e070:	4618      	mov	r0, r3
 800e072:	3714      	adds	r7, #20
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800e07c:	4b04      	ldr	r3, [pc, #16]	@ (800e090 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	b10a      	cbz	r2, 800e086 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800e082:	4803      	ldr	r0, [pc, #12]	@ (800e090 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800e084:	4770      	bx	lr
 800e086:	4a03      	ldr	r2, [pc, #12]	@ (800e094 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800e088:	4801      	ldr	r0, [pc, #4]	@ (800e090 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800e08a:	6812      	ldr	r2, [r2, #0]
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	4770      	bx	lr
 800e090:	2000011c 	.word	0x2000011c
 800e094:	200002d0 	.word	0x200002d0

0800e098 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800e098:	4a02      	ldr	r2, [pc, #8]	@ (800e0a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800e09a:	4b03      	ldr	r3, [pc, #12]	@ (800e0a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800e09c:	6812      	ldr	r2, [r2, #0]
 800e09e:	601a      	str	r2, [r3, #0]
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	200002d0 	.word	0x200002d0
 800e0a8:	2000011c 	.word	0x2000011c

0800e0ac <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800e0ac:	f004 b8b8 	b.w	8012220 <geometry_msgs__msg__Twist__init>

0800e0b0 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800e0b0:	f004 b8da 	b.w	8012268 <geometry_msgs__msg__Twist__fini>

0800e0b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800e0b4:	b510      	push	{r4, lr}
 800e0b6:	4c08      	ldr	r4, [pc, #32]	@ (800e0d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800e0b8:	f000 f818 	bl	800e0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e0bc:	60e0      	str	r0, [r4, #12]
 800e0be:	f000 f815 	bl	800e0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e0c2:	4b06      	ldr	r3, [pc, #24]	@ (800e0dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800e0c4:	64a0      	str	r0, [r4, #72]	@ 0x48
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	b10a      	cbz	r2, 800e0ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800e0ca:	4804      	ldr	r0, [pc, #16]	@ (800e0dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800e0cc:	bd10      	pop	{r4, pc}
 800e0ce:	4a04      	ldr	r2, [pc, #16]	@ (800e0e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800e0d0:	4802      	ldr	r0, [pc, #8]	@ (800e0dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800e0d2:	6812      	ldr	r2, [r2, #0]
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	bd10      	pop	{r4, pc}
 800e0d8:	20000128 	.word	0x20000128
 800e0dc:	200001a0 	.word	0x200001a0
 800e0e0:	200002d4 	.word	0x200002d4

0800e0e4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800e0e4:	f004 b8cc 	b.w	8012280 <geometry_msgs__msg__Vector3__init>

0800e0e8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800e0e8:	f004 b8ce 	b.w	8012288 <geometry_msgs__msg__Vector3__fini>

0800e0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e0ec:	4b04      	ldr	r3, [pc, #16]	@ (800e100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	b10a      	cbz	r2, 800e0f6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800e0f2:	4803      	ldr	r0, [pc, #12]	@ (800e100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e0f4:	4770      	bx	lr
 800e0f6:	4a03      	ldr	r2, [pc, #12]	@ (800e104 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800e0f8:	4801      	ldr	r0, [pc, #4]	@ (800e100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e0fa:	6812      	ldr	r2, [r2, #0]
 800e0fc:	601a      	str	r2, [r3, #0]
 800e0fe:	4770      	bx	lr
 800e100:	20000260 	.word	0x20000260
 800e104:	200002d4 	.word	0x200002d4

0800e108 <get_serialized_size_geometry_msgs__msg__Twist>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	4604      	mov	r4, r0
 800e10c:	b150      	cbz	r0, 800e124 <get_serialized_size_geometry_msgs__msg__Twist+0x1c>
 800e10e:	460d      	mov	r5, r1
 800e110:	f000 f866 	bl	800e1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e114:	4603      	mov	r3, r0
 800e116:	f104 0018 	add.w	r0, r4, #24
 800e11a:	461c      	mov	r4, r3
 800e11c:	18e9      	adds	r1, r5, r3
 800e11e:	f000 f85f 	bl	800e1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e122:	4420      	add	r0, r4
 800e124:	bd38      	pop	{r3, r4, r5, pc}
 800e126:	bf00      	nop

0800e128 <_Twist__cdr_deserialize>:
 800e128:	b570      	push	{r4, r5, r6, lr}
 800e12a:	460c      	mov	r4, r1
 800e12c:	b199      	cbz	r1, 800e156 <_Twist__cdr_deserialize+0x2e>
 800e12e:	4605      	mov	r5, r0
 800e130:	f000 f8de 	bl	800e2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e134:	4603      	mov	r3, r0
 800e136:	4621      	mov	r1, r4
 800e138:	4628      	mov	r0, r5
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	4798      	blx	r3
 800e140:	f000 f8d6 	bl	800e2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e144:	4603      	mov	r3, r0
 800e146:	f104 0118 	add.w	r1, r4, #24
 800e14a:	4628      	mov	r0, r5
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	4718      	bx	r3
 800e156:	4608      	mov	r0, r1
 800e158:	bd70      	pop	{r4, r5, r6, pc}
 800e15a:	bf00      	nop

0800e15c <_Twist__cdr_serialize>:
 800e15c:	b510      	push	{r4, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	9101      	str	r1, [sp, #4]
 800e162:	b1a0      	cbz	r0, 800e18e <_Twist__cdr_serialize+0x32>
 800e164:	4604      	mov	r4, r0
 800e166:	f000 f8c3 	bl	800e2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e16a:	4603      	mov	r3, r0
 800e16c:	9901      	ldr	r1, [sp, #4]
 800e16e:	4620      	mov	r0, r4
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	4798      	blx	r3
 800e176:	f000 f8bb 	bl	800e2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e17a:	4603      	mov	r3, r0
 800e17c:	9901      	ldr	r1, [sp, #4]
 800e17e:	f104 0018 	add.w	r0, r4, #24
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	b002      	add	sp, #8
 800e188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e18c:	4718      	bx	r3
 800e18e:	b002      	add	sp, #8
 800e190:	bd10      	pop	{r4, pc}
 800e192:	bf00      	nop

0800e194 <_Twist__get_serialized_size>:
 800e194:	b510      	push	{r4, lr}
 800e196:	4604      	mov	r4, r0
 800e198:	b148      	cbz	r0, 800e1ae <_Twist__get_serialized_size+0x1a>
 800e19a:	2100      	movs	r1, #0
 800e19c:	f000 f820 	bl	800e1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e1a0:	4601      	mov	r1, r0
 800e1a2:	f104 0018 	add.w	r0, r4, #24
 800e1a6:	460c      	mov	r4, r1
 800e1a8:	f000 f81a 	bl	800e1e0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e1ac:	4420      	add	r0, r4
 800e1ae:	bd10      	pop	{r4, pc}

0800e1b0 <_Twist__max_serialized_size>:
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	f10d 0007 	add.w	r0, sp, #7
 800e1bc:	f88d 3007 	strb.w	r3, [sp, #7]
 800e1c0:	f000 f87c 	bl	800e2bc <max_serialized_size_geometry_msgs__msg__Vector3>
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	f10d 0007 	add.w	r0, sp, #7
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	f000 f876 	bl	800e2bc <max_serialized_size_geometry_msgs__msg__Vector3>
 800e1d0:	4420      	add	r0, r4
 800e1d2:	b002      	add	sp, #8
 800e1d4:	bd10      	pop	{r4, pc}
 800e1d6:	bf00      	nop

0800e1d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800e1d8:	4800      	ldr	r0, [pc, #0]	@ (800e1dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800e1da:	4770      	bx	lr
 800e1dc:	2000026c 	.word	0x2000026c

0800e1e0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800e1e0:	b1b8      	cbz	r0, 800e212 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800e1e2:	b538      	push	{r3, r4, r5, lr}
 800e1e4:	460d      	mov	r5, r1
 800e1e6:	2108      	movs	r1, #8
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	f001 f9f9 	bl	800f5e0 <ucdr_alignment>
 800e1ee:	f105 0308 	add.w	r3, r5, #8
 800e1f2:	2108      	movs	r1, #8
 800e1f4:	f1c5 0508 	rsb	r5, r5, #8
 800e1f8:	181c      	adds	r4, r3, r0
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f001 f9f0 	bl	800f5e0 <ucdr_alignment>
 800e200:	2108      	movs	r1, #8
 800e202:	4408      	add	r0, r1
 800e204:	4404      	add	r4, r0
 800e206:	4620      	mov	r0, r4
 800e208:	f001 f9ea 	bl	800f5e0 <ucdr_alignment>
 800e20c:	4428      	add	r0, r5
 800e20e:	4420      	add	r0, r4
 800e210:	bd38      	pop	{r3, r4, r5, pc}
 800e212:	4770      	bx	lr

0800e214 <_Vector3__cdr_deserialize>:
 800e214:	b538      	push	{r3, r4, r5, lr}
 800e216:	460c      	mov	r4, r1
 800e218:	b171      	cbz	r1, 800e238 <_Vector3__cdr_deserialize+0x24>
 800e21a:	4605      	mov	r5, r0
 800e21c:	f001 f8c2 	bl	800f3a4 <ucdr_deserialize_double>
 800e220:	f104 0108 	add.w	r1, r4, #8
 800e224:	4628      	mov	r0, r5
 800e226:	f001 f8bd 	bl	800f3a4 <ucdr_deserialize_double>
 800e22a:	f104 0110 	add.w	r1, r4, #16
 800e22e:	4628      	mov	r0, r5
 800e230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e234:	f001 b8b6 	b.w	800f3a4 <ucdr_deserialize_double>
 800e238:	4608      	mov	r0, r1
 800e23a:	bd38      	pop	{r3, r4, r5, pc}

0800e23c <_Vector3__cdr_serialize>:
 800e23c:	b198      	cbz	r0, 800e266 <_Vector3__cdr_serialize+0x2a>
 800e23e:	b538      	push	{r3, r4, r5, lr}
 800e240:	460d      	mov	r5, r1
 800e242:	4604      	mov	r4, r0
 800e244:	ed90 0b00 	vldr	d0, [r0]
 800e248:	4608      	mov	r0, r1
 800e24a:	f000 ffdb 	bl	800f204 <ucdr_serialize_double>
 800e24e:	4628      	mov	r0, r5
 800e250:	ed94 0b02 	vldr	d0, [r4, #8]
 800e254:	f000 ffd6 	bl	800f204 <ucdr_serialize_double>
 800e258:	4628      	mov	r0, r5
 800e25a:	ed94 0b04 	vldr	d0, [r4, #16]
 800e25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e262:	f000 bfcf 	b.w	800f204 <ucdr_serialize_double>
 800e266:	4770      	bx	lr

0800e268 <_Vector3__get_serialized_size>:
 800e268:	b190      	cbz	r0, 800e290 <_Vector3__get_serialized_size+0x28>
 800e26a:	2108      	movs	r1, #8
 800e26c:	2000      	movs	r0, #0
 800e26e:	b510      	push	{r4, lr}
 800e270:	f001 f9b6 	bl	800f5e0 <ucdr_alignment>
 800e274:	2108      	movs	r1, #8
 800e276:	1844      	adds	r4, r0, r1
 800e278:	4620      	mov	r0, r4
 800e27a:	f001 f9b1 	bl	800f5e0 <ucdr_alignment>
 800e27e:	2108      	movs	r1, #8
 800e280:	4408      	add	r0, r1
 800e282:	4404      	add	r4, r0
 800e284:	4620      	mov	r0, r4
 800e286:	f001 f9ab 	bl	800f5e0 <ucdr_alignment>
 800e28a:	3008      	adds	r0, #8
 800e28c:	4420      	add	r0, r4
 800e28e:	bd10      	pop	{r4, pc}
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop

0800e294 <_Vector3__max_serialized_size>:
 800e294:	b538      	push	{r3, r4, r5, lr}
 800e296:	2108      	movs	r1, #8
 800e298:	2000      	movs	r0, #0
 800e29a:	f001 f9a1 	bl	800f5e0 <ucdr_alignment>
 800e29e:	2108      	movs	r1, #8
 800e2a0:	1845      	adds	r5, r0, r1
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f001 f99c 	bl	800f5e0 <ucdr_alignment>
 800e2a8:	2108      	movs	r1, #8
 800e2aa:	1844      	adds	r4, r0, r1
 800e2ac:	442c      	add	r4, r5
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f001 f996 	bl	800f5e0 <ucdr_alignment>
 800e2b4:	3008      	adds	r0, #8
 800e2b6:	4420      	add	r0, r4
 800e2b8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ba:	bf00      	nop

0800e2bc <max_serialized_size_geometry_msgs__msg__Vector3>:
 800e2bc:	b570      	push	{r4, r5, r6, lr}
 800e2be:	460c      	mov	r4, r1
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	2108      	movs	r1, #8
 800e2c4:	f104 0508 	add.w	r5, r4, #8
 800e2c8:	7003      	strb	r3, [r0, #0]
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f1c4 0408 	rsb	r4, r4, #8
 800e2d0:	f001 f986 	bl	800f5e0 <ucdr_alignment>
 800e2d4:	1946      	adds	r6, r0, r5
 800e2d6:	2108      	movs	r1, #8
 800e2d8:	4630      	mov	r0, r6
 800e2da:	f001 f981 	bl	800f5e0 <ucdr_alignment>
 800e2de:	2108      	movs	r1, #8
 800e2e0:	1845      	adds	r5, r0, r1
 800e2e2:	4435      	add	r5, r6
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	f001 f97b 	bl	800f5e0 <ucdr_alignment>
 800e2ea:	4420      	add	r0, r4
 800e2ec:	4428      	add	r0, r5
 800e2ee:	bd70      	pop	{r4, r5, r6, pc}

0800e2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e2f0:	4800      	ldr	r0, [pc, #0]	@ (800e2f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800e2f2:	4770      	bx	lr
 800e2f4:	20000294 	.word	0x20000294

0800e2f8 <ucdr_serialize_bool>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	460d      	mov	r5, r1
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	4604      	mov	r4, r0
 800e300:	f001 f922 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e304:	b148      	cbz	r0, 800e31a <ucdr_serialize_bool+0x22>
 800e306:	68a3      	ldr	r3, [r4, #8]
 800e308:	2101      	movs	r1, #1
 800e30a:	701d      	strb	r5, [r3, #0]
 800e30c:	68a2      	ldr	r2, [r4, #8]
 800e30e:	6923      	ldr	r3, [r4, #16]
 800e310:	440a      	add	r2, r1
 800e312:	7561      	strb	r1, [r4, #21]
 800e314:	440b      	add	r3, r1
 800e316:	60a2      	str	r2, [r4, #8]
 800e318:	6123      	str	r3, [r4, #16]
 800e31a:	7da0      	ldrb	r0, [r4, #22]
 800e31c:	f080 0001 	eor.w	r0, r0, #1
 800e320:	bd38      	pop	{r3, r4, r5, pc}
 800e322:	bf00      	nop

0800e324 <ucdr_deserialize_bool>:
 800e324:	b538      	push	{r3, r4, r5, lr}
 800e326:	460d      	mov	r5, r1
 800e328:	2101      	movs	r1, #1
 800e32a:	4604      	mov	r4, r0
 800e32c:	f001 f90c 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e330:	b160      	cbz	r0, 800e34c <ucdr_deserialize_bool+0x28>
 800e332:	68a2      	ldr	r2, [r4, #8]
 800e334:	2101      	movs	r1, #1
 800e336:	6923      	ldr	r3, [r4, #16]
 800e338:	f812 0b01 	ldrb.w	r0, [r2], #1
 800e33c:	440b      	add	r3, r1
 800e33e:	3800      	subs	r0, #0
 800e340:	bf18      	it	ne
 800e342:	2001      	movne	r0, #1
 800e344:	7028      	strb	r0, [r5, #0]
 800e346:	60a2      	str	r2, [r4, #8]
 800e348:	6123      	str	r3, [r4, #16]
 800e34a:	7561      	strb	r1, [r4, #21]
 800e34c:	7da0      	ldrb	r0, [r4, #22]
 800e34e:	f080 0001 	eor.w	r0, r0, #1
 800e352:	bd38      	pop	{r3, r4, r5, pc}

0800e354 <ucdr_serialize_uint8_t>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	460d      	mov	r5, r1
 800e358:	2101      	movs	r1, #1
 800e35a:	4604      	mov	r4, r0
 800e35c:	f001 f8f4 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e360:	b148      	cbz	r0, 800e376 <ucdr_serialize_uint8_t+0x22>
 800e362:	68a3      	ldr	r3, [r4, #8]
 800e364:	2101      	movs	r1, #1
 800e366:	701d      	strb	r5, [r3, #0]
 800e368:	68a2      	ldr	r2, [r4, #8]
 800e36a:	6923      	ldr	r3, [r4, #16]
 800e36c:	440a      	add	r2, r1
 800e36e:	7561      	strb	r1, [r4, #21]
 800e370:	440b      	add	r3, r1
 800e372:	60a2      	str	r2, [r4, #8]
 800e374:	6123      	str	r3, [r4, #16]
 800e376:	7da0      	ldrb	r0, [r4, #22]
 800e378:	f080 0001 	eor.w	r0, r0, #1
 800e37c:	bd38      	pop	{r3, r4, r5, pc}
 800e37e:	bf00      	nop

0800e380 <ucdr_deserialize_uint8_t>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	460d      	mov	r5, r1
 800e384:	2101      	movs	r1, #1
 800e386:	4604      	mov	r4, r0
 800e388:	f001 f8de 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e38c:	b150      	cbz	r0, 800e3a4 <ucdr_deserialize_uint8_t+0x24>
 800e38e:	68a3      	ldr	r3, [r4, #8]
 800e390:	2101      	movs	r1, #1
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	702b      	strb	r3, [r5, #0]
 800e396:	68a2      	ldr	r2, [r4, #8]
 800e398:	6923      	ldr	r3, [r4, #16]
 800e39a:	440a      	add	r2, r1
 800e39c:	7561      	strb	r1, [r4, #21]
 800e39e:	440b      	add	r3, r1
 800e3a0:	60a2      	str	r2, [r4, #8]
 800e3a2:	6123      	str	r3, [r4, #16]
 800e3a4:	7da0      	ldrb	r0, [r4, #22]
 800e3a6:	f080 0001 	eor.w	r0, r0, #1
 800e3aa:	bd38      	pop	{r3, r4, r5, pc}

0800e3ac <ucdr_serialize_uint16_t>:
 800e3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	2102      	movs	r1, #2
 800e3b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e3bc:	f001 f918 	bl	800f5f0 <ucdr_buffer_alignment>
 800e3c0:	4601      	mov	r1, r0
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	7d67      	ldrb	r7, [r4, #21]
 800e3c6:	f001 f95b 	bl	800f680 <ucdr_advance_buffer>
 800e3ca:	2102      	movs	r1, #2
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f001 f8af 	bl	800f530 <ucdr_check_buffer_available_for>
 800e3d2:	bb78      	cbnz	r0, 800e434 <ucdr_serialize_uint16_t+0x88>
 800e3d4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e3d8:	42ab      	cmp	r3, r5
 800e3da:	d926      	bls.n	800e42a <ucdr_serialize_uint16_t+0x7e>
 800e3dc:	1b5e      	subs	r6, r3, r5
 800e3de:	60a3      	str	r3, [r4, #8]
 800e3e0:	6923      	ldr	r3, [r4, #16]
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f1c6 0802 	rsb	r8, r6, #2
 800e3e8:	4433      	add	r3, r6
 800e3ea:	4641      	mov	r1, r8
 800e3ec:	6123      	str	r3, [r4, #16]
 800e3ee:	f001 f8ab 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	d03b      	beq.n	800e46e <ucdr_serialize_uint16_t+0xc2>
 800e3f6:	7d23      	ldrb	r3, [r4, #20]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d04a      	beq.n	800e492 <ucdr_serialize_uint16_t+0xe6>
 800e3fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e400:	702b      	strb	r3, [r5, #0]
 800e402:	2e00      	cmp	r6, #0
 800e404:	d040      	beq.n	800e488 <ucdr_serialize_uint16_t+0xdc>
 800e406:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e40a:	706b      	strb	r3, [r5, #1]
 800e40c:	6923      	ldr	r3, [r4, #16]
 800e40e:	2102      	movs	r1, #2
 800e410:	68a2      	ldr	r2, [r4, #8]
 800e412:	3302      	adds	r3, #2
 800e414:	7da0      	ldrb	r0, [r4, #22]
 800e416:	4442      	add	r2, r8
 800e418:	7561      	strb	r1, [r4, #21]
 800e41a:	1b9e      	subs	r6, r3, r6
 800e41c:	f080 0001 	eor.w	r0, r0, #1
 800e420:	60a2      	str	r2, [r4, #8]
 800e422:	6126      	str	r6, [r4, #16]
 800e424:	b002      	add	sp, #8
 800e426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e42a:	2102      	movs	r1, #2
 800e42c:	4620      	mov	r0, r4
 800e42e:	f001 f88b 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e432:	b190      	cbz	r0, 800e45a <ucdr_serialize_uint16_t+0xae>
 800e434:	7d23      	ldrb	r3, [r4, #20]
 800e436:	2b01      	cmp	r3, #1
 800e438:	68a3      	ldr	r3, [r4, #8]
 800e43a:	d014      	beq.n	800e466 <ucdr_serialize_uint16_t+0xba>
 800e43c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e440:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e444:	7019      	strb	r1, [r3, #0]
 800e446:	68a3      	ldr	r3, [r4, #8]
 800e448:	705a      	strb	r2, [r3, #1]
 800e44a:	2102      	movs	r1, #2
 800e44c:	68a2      	ldr	r2, [r4, #8]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	440a      	add	r2, r1
 800e452:	7561      	strb	r1, [r4, #21]
 800e454:	440b      	add	r3, r1
 800e456:	60a2      	str	r2, [r4, #8]
 800e458:	6123      	str	r3, [r4, #16]
 800e45a:	7da0      	ldrb	r0, [r4, #22]
 800e45c:	f080 0001 	eor.w	r0, r0, #1
 800e460:	b002      	add	sp, #8
 800e462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e466:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e46a:	801a      	strh	r2, [r3, #0]
 800e46c:	e7ed      	b.n	800e44a <ucdr_serialize_uint16_t+0x9e>
 800e46e:	68a2      	ldr	r2, [r4, #8]
 800e470:	6923      	ldr	r3, [r4, #16]
 800e472:	7da0      	ldrb	r0, [r4, #22]
 800e474:	1b92      	subs	r2, r2, r6
 800e476:	1b9b      	subs	r3, r3, r6
 800e478:	7567      	strb	r7, [r4, #21]
 800e47a:	f080 0001 	eor.w	r0, r0, #1
 800e47e:	60a2      	str	r2, [r4, #8]
 800e480:	6123      	str	r3, [r4, #16]
 800e482:	b002      	add	sp, #8
 800e484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e488:	68a3      	ldr	r3, [r4, #8]
 800e48a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e48e:	701a      	strb	r2, [r3, #0]
 800e490:	e7bc      	b.n	800e40c <ucdr_serialize_uint16_t+0x60>
 800e492:	4628      	mov	r0, r5
 800e494:	f10d 0506 	add.w	r5, sp, #6
 800e498:	4632      	mov	r2, r6
 800e49a:	4629      	mov	r1, r5
 800e49c:	f00d fa13 	bl	801b8c6 <memcpy>
 800e4a0:	4642      	mov	r2, r8
 800e4a2:	19a9      	adds	r1, r5, r6
 800e4a4:	68a0      	ldr	r0, [r4, #8]
 800e4a6:	f00d fa0e 	bl	801b8c6 <memcpy>
 800e4aa:	e7af      	b.n	800e40c <ucdr_serialize_uint16_t+0x60>

0800e4ac <ucdr_serialize_endian_uint16_t>:
 800e4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	460d      	mov	r5, r1
 800e4b6:	2102      	movs	r1, #2
 800e4b8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e4bc:	f001 f898 	bl	800f5f0 <ucdr_buffer_alignment>
 800e4c0:	4601      	mov	r1, r0
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e4c8:	f001 f8da 	bl	800f680 <ucdr_advance_buffer>
 800e4cc:	2102      	movs	r1, #2
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f001 f82e 	bl	800f530 <ucdr_check_buffer_available_for>
 800e4d4:	bb70      	cbnz	r0, 800e534 <ucdr_serialize_endian_uint16_t+0x88>
 800e4d6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e4da:	42be      	cmp	r6, r7
 800e4dc:	d925      	bls.n	800e52a <ucdr_serialize_endian_uint16_t+0x7e>
 800e4de:	6923      	ldr	r3, [r4, #16]
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	60a6      	str	r6, [r4, #8]
 800e4e4:	1bf6      	subs	r6, r6, r7
 800e4e6:	4433      	add	r3, r6
 800e4e8:	f1c6 0902 	rsb	r9, r6, #2
 800e4ec:	6123      	str	r3, [r4, #16]
 800e4ee:	4649      	mov	r1, r9
 800e4f0:	f001 f82a 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d039      	beq.n	800e56c <ucdr_serialize_endian_uint16_t+0xc0>
 800e4f8:	2d01      	cmp	r5, #1
 800e4fa:	d04a      	beq.n	800e592 <ucdr_serialize_endian_uint16_t+0xe6>
 800e4fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e500:	703b      	strb	r3, [r7, #0]
 800e502:	2e00      	cmp	r6, #0
 800e504:	d040      	beq.n	800e588 <ucdr_serialize_endian_uint16_t+0xdc>
 800e506:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e50a:	707b      	strb	r3, [r7, #1]
 800e50c:	6923      	ldr	r3, [r4, #16]
 800e50e:	2102      	movs	r1, #2
 800e510:	68a2      	ldr	r2, [r4, #8]
 800e512:	7da0      	ldrb	r0, [r4, #22]
 800e514:	3302      	adds	r3, #2
 800e516:	444a      	add	r2, r9
 800e518:	7561      	strb	r1, [r4, #21]
 800e51a:	1b9b      	subs	r3, r3, r6
 800e51c:	f080 0001 	eor.w	r0, r0, #1
 800e520:	60a2      	str	r2, [r4, #8]
 800e522:	6123      	str	r3, [r4, #16]
 800e524:	b003      	add	sp, #12
 800e526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e52a:	2102      	movs	r1, #2
 800e52c:	4620      	mov	r0, r4
 800e52e:	f001 f80b 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e532:	b188      	cbz	r0, 800e558 <ucdr_serialize_endian_uint16_t+0xac>
 800e534:	2d01      	cmp	r5, #1
 800e536:	68a3      	ldr	r3, [r4, #8]
 800e538:	d014      	beq.n	800e564 <ucdr_serialize_endian_uint16_t+0xb8>
 800e53a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e53e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e542:	7019      	strb	r1, [r3, #0]
 800e544:	68a3      	ldr	r3, [r4, #8]
 800e546:	705a      	strb	r2, [r3, #1]
 800e548:	2102      	movs	r1, #2
 800e54a:	68a2      	ldr	r2, [r4, #8]
 800e54c:	6923      	ldr	r3, [r4, #16]
 800e54e:	440a      	add	r2, r1
 800e550:	7561      	strb	r1, [r4, #21]
 800e552:	440b      	add	r3, r1
 800e554:	60a2      	str	r2, [r4, #8]
 800e556:	6123      	str	r3, [r4, #16]
 800e558:	7da0      	ldrb	r0, [r4, #22]
 800e55a:	f080 0001 	eor.w	r0, r0, #1
 800e55e:	b003      	add	sp, #12
 800e560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e564:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e568:	801a      	strh	r2, [r3, #0]
 800e56a:	e7ed      	b.n	800e548 <ucdr_serialize_endian_uint16_t+0x9c>
 800e56c:	68a2      	ldr	r2, [r4, #8]
 800e56e:	6923      	ldr	r3, [r4, #16]
 800e570:	7da0      	ldrb	r0, [r4, #22]
 800e572:	1b92      	subs	r2, r2, r6
 800e574:	1b9b      	subs	r3, r3, r6
 800e576:	f884 8015 	strb.w	r8, [r4, #21]
 800e57a:	f080 0001 	eor.w	r0, r0, #1
 800e57e:	60a2      	str	r2, [r4, #8]
 800e580:	6123      	str	r3, [r4, #16]
 800e582:	b003      	add	sp, #12
 800e584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e588:	68a3      	ldr	r3, [r4, #8]
 800e58a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e58e:	701a      	strb	r2, [r3, #0]
 800e590:	e7bc      	b.n	800e50c <ucdr_serialize_endian_uint16_t+0x60>
 800e592:	f10d 0506 	add.w	r5, sp, #6
 800e596:	4632      	mov	r2, r6
 800e598:	4638      	mov	r0, r7
 800e59a:	4629      	mov	r1, r5
 800e59c:	f00d f993 	bl	801b8c6 <memcpy>
 800e5a0:	464a      	mov	r2, r9
 800e5a2:	19a9      	adds	r1, r5, r6
 800e5a4:	68a0      	ldr	r0, [r4, #8]
 800e5a6:	f00d f98e 	bl	801b8c6 <memcpy>
 800e5aa:	e7af      	b.n	800e50c <ucdr_serialize_endian_uint16_t+0x60>

0800e5ac <ucdr_deserialize_uint16_t>:
 800e5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	460d      	mov	r5, r1
 800e5b4:	2102      	movs	r1, #2
 800e5b6:	f001 f81b 	bl	800f5f0 <ucdr_buffer_alignment>
 800e5ba:	4601      	mov	r1, r0
 800e5bc:	4620      	mov	r0, r4
 800e5be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e5c2:	f001 f85d 	bl	800f680 <ucdr_advance_buffer>
 800e5c6:	2102      	movs	r1, #2
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	f000 ffb1 	bl	800f530 <ucdr_check_buffer_available_for>
 800e5ce:	bb60      	cbnz	r0, 800e62a <ucdr_deserialize_uint16_t+0x7e>
 800e5d0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e5d4:	42be      	cmp	r6, r7
 800e5d6:	d923      	bls.n	800e620 <ucdr_deserialize_uint16_t+0x74>
 800e5d8:	6923      	ldr	r3, [r4, #16]
 800e5da:	4620      	mov	r0, r4
 800e5dc:	60a6      	str	r6, [r4, #8]
 800e5de:	1bf6      	subs	r6, r6, r7
 800e5e0:	4433      	add	r3, r6
 800e5e2:	f1c6 0902 	rsb	r9, r6, #2
 800e5e6:	6123      	str	r3, [r4, #16]
 800e5e8:	4649      	mov	r1, r9
 800e5ea:	f000 ffad 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d034      	beq.n	800e65c <ucdr_deserialize_uint16_t+0xb0>
 800e5f2:	7d23      	ldrb	r3, [r4, #20]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d042      	beq.n	800e67e <ucdr_deserialize_uint16_t+0xd2>
 800e5f8:	787b      	ldrb	r3, [r7, #1]
 800e5fa:	702b      	strb	r3, [r5, #0]
 800e5fc:	2e00      	cmp	r6, #0
 800e5fe:	d03a      	beq.n	800e676 <ucdr_deserialize_uint16_t+0xca>
 800e600:	783b      	ldrb	r3, [r7, #0]
 800e602:	706b      	strb	r3, [r5, #1]
 800e604:	6923      	ldr	r3, [r4, #16]
 800e606:	2102      	movs	r1, #2
 800e608:	68a2      	ldr	r2, [r4, #8]
 800e60a:	3302      	adds	r3, #2
 800e60c:	7da0      	ldrb	r0, [r4, #22]
 800e60e:	444a      	add	r2, r9
 800e610:	7561      	strb	r1, [r4, #21]
 800e612:	1b9b      	subs	r3, r3, r6
 800e614:	f080 0001 	eor.w	r0, r0, #1
 800e618:	60a2      	str	r2, [r4, #8]
 800e61a:	6123      	str	r3, [r4, #16]
 800e61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e620:	2102      	movs	r1, #2
 800e622:	4620      	mov	r0, r4
 800e624:	f000 ff90 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e628:	b180      	cbz	r0, 800e64c <ucdr_deserialize_uint16_t+0xa0>
 800e62a:	7d23      	ldrb	r3, [r4, #20]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	68a3      	ldr	r3, [r4, #8]
 800e630:	d011      	beq.n	800e656 <ucdr_deserialize_uint16_t+0xaa>
 800e632:	785b      	ldrb	r3, [r3, #1]
 800e634:	702b      	strb	r3, [r5, #0]
 800e636:	68a3      	ldr	r3, [r4, #8]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	706b      	strb	r3, [r5, #1]
 800e63c:	2102      	movs	r1, #2
 800e63e:	68a2      	ldr	r2, [r4, #8]
 800e640:	6923      	ldr	r3, [r4, #16]
 800e642:	440a      	add	r2, r1
 800e644:	7561      	strb	r1, [r4, #21]
 800e646:	440b      	add	r3, r1
 800e648:	60a2      	str	r2, [r4, #8]
 800e64a:	6123      	str	r3, [r4, #16]
 800e64c:	7da0      	ldrb	r0, [r4, #22]
 800e64e:	f080 0001 	eor.w	r0, r0, #1
 800e652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	802b      	strh	r3, [r5, #0]
 800e65a:	e7ef      	b.n	800e63c <ucdr_deserialize_uint16_t+0x90>
 800e65c:	68a2      	ldr	r2, [r4, #8]
 800e65e:	6923      	ldr	r3, [r4, #16]
 800e660:	1b92      	subs	r2, r2, r6
 800e662:	7da0      	ldrb	r0, [r4, #22]
 800e664:	1b9b      	subs	r3, r3, r6
 800e666:	f884 8015 	strb.w	r8, [r4, #21]
 800e66a:	f080 0001 	eor.w	r0, r0, #1
 800e66e:	60a2      	str	r2, [r4, #8]
 800e670:	6123      	str	r3, [r4, #16]
 800e672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e676:	68a3      	ldr	r3, [r4, #8]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	706b      	strb	r3, [r5, #1]
 800e67c:	e7c2      	b.n	800e604 <ucdr_deserialize_uint16_t+0x58>
 800e67e:	4639      	mov	r1, r7
 800e680:	4632      	mov	r2, r6
 800e682:	4628      	mov	r0, r5
 800e684:	f00d f91f 	bl	801b8c6 <memcpy>
 800e688:	464a      	mov	r2, r9
 800e68a:	19a8      	adds	r0, r5, r6
 800e68c:	68a1      	ldr	r1, [r4, #8]
 800e68e:	f00d f91a 	bl	801b8c6 <memcpy>
 800e692:	e7b7      	b.n	800e604 <ucdr_deserialize_uint16_t+0x58>

0800e694 <ucdr_deserialize_endian_uint16_t>:
 800e694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e698:	4604      	mov	r4, r0
 800e69a:	460e      	mov	r6, r1
 800e69c:	2102      	movs	r1, #2
 800e69e:	4615      	mov	r5, r2
 800e6a0:	f000 ffa6 	bl	800f5f0 <ucdr_buffer_alignment>
 800e6a4:	4601      	mov	r1, r0
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e6ac:	f000 ffe8 	bl	800f680 <ucdr_advance_buffer>
 800e6b0:	2102      	movs	r1, #2
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f000 ff3c 	bl	800f530 <ucdr_check_buffer_available_for>
 800e6b8:	bb70      	cbnz	r0, 800e718 <ucdr_deserialize_endian_uint16_t+0x84>
 800e6ba:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800e6be:	454f      	cmp	r7, r9
 800e6c0:	d925      	bls.n	800e70e <ucdr_deserialize_endian_uint16_t+0x7a>
 800e6c2:	6923      	ldr	r3, [r4, #16]
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	60a7      	str	r7, [r4, #8]
 800e6c8:	eba7 0709 	sub.w	r7, r7, r9
 800e6cc:	443b      	add	r3, r7
 800e6ce:	f1c7 0a02 	rsb	sl, r7, #2
 800e6d2:	6123      	str	r3, [r4, #16]
 800e6d4:	4651      	mov	r1, sl
 800e6d6:	f000 ff37 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d034      	beq.n	800e748 <ucdr_deserialize_endian_uint16_t+0xb4>
 800e6de:	2e01      	cmp	r6, #1
 800e6e0:	d043      	beq.n	800e76a <ucdr_deserialize_endian_uint16_t+0xd6>
 800e6e2:	f899 3001 	ldrb.w	r3, [r9, #1]
 800e6e6:	702b      	strb	r3, [r5, #0]
 800e6e8:	2f00      	cmp	r7, #0
 800e6ea:	d03a      	beq.n	800e762 <ucdr_deserialize_endian_uint16_t+0xce>
 800e6ec:	f899 3000 	ldrb.w	r3, [r9]
 800e6f0:	706b      	strb	r3, [r5, #1]
 800e6f2:	6923      	ldr	r3, [r4, #16]
 800e6f4:	2102      	movs	r1, #2
 800e6f6:	68a2      	ldr	r2, [r4, #8]
 800e6f8:	3302      	adds	r3, #2
 800e6fa:	7da0      	ldrb	r0, [r4, #22]
 800e6fc:	4452      	add	r2, sl
 800e6fe:	7561      	strb	r1, [r4, #21]
 800e700:	1bdb      	subs	r3, r3, r7
 800e702:	f080 0001 	eor.w	r0, r0, #1
 800e706:	60a2      	str	r2, [r4, #8]
 800e708:	6123      	str	r3, [r4, #16]
 800e70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70e:	2102      	movs	r1, #2
 800e710:	4620      	mov	r0, r4
 800e712:	f000 ff19 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e716:	b178      	cbz	r0, 800e738 <ucdr_deserialize_endian_uint16_t+0xa4>
 800e718:	2e01      	cmp	r6, #1
 800e71a:	68a3      	ldr	r3, [r4, #8]
 800e71c:	d011      	beq.n	800e742 <ucdr_deserialize_endian_uint16_t+0xae>
 800e71e:	785b      	ldrb	r3, [r3, #1]
 800e720:	702b      	strb	r3, [r5, #0]
 800e722:	68a3      	ldr	r3, [r4, #8]
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	706b      	strb	r3, [r5, #1]
 800e728:	2102      	movs	r1, #2
 800e72a:	68a2      	ldr	r2, [r4, #8]
 800e72c:	6923      	ldr	r3, [r4, #16]
 800e72e:	440a      	add	r2, r1
 800e730:	7561      	strb	r1, [r4, #21]
 800e732:	440b      	add	r3, r1
 800e734:	60a2      	str	r2, [r4, #8]
 800e736:	6123      	str	r3, [r4, #16]
 800e738:	7da0      	ldrb	r0, [r4, #22]
 800e73a:	f080 0001 	eor.w	r0, r0, #1
 800e73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e742:	881b      	ldrh	r3, [r3, #0]
 800e744:	802b      	strh	r3, [r5, #0]
 800e746:	e7ef      	b.n	800e728 <ucdr_deserialize_endian_uint16_t+0x94>
 800e748:	68a2      	ldr	r2, [r4, #8]
 800e74a:	6923      	ldr	r3, [r4, #16]
 800e74c:	1bd2      	subs	r2, r2, r7
 800e74e:	7da0      	ldrb	r0, [r4, #22]
 800e750:	1bdb      	subs	r3, r3, r7
 800e752:	f884 8015 	strb.w	r8, [r4, #21]
 800e756:	f080 0001 	eor.w	r0, r0, #1
 800e75a:	60a2      	str	r2, [r4, #8]
 800e75c:	6123      	str	r3, [r4, #16]
 800e75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e762:	68a3      	ldr	r3, [r4, #8]
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	706b      	strb	r3, [r5, #1]
 800e768:	e7c3      	b.n	800e6f2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800e76a:	4649      	mov	r1, r9
 800e76c:	463a      	mov	r2, r7
 800e76e:	4628      	mov	r0, r5
 800e770:	f00d f8a9 	bl	801b8c6 <memcpy>
 800e774:	4652      	mov	r2, sl
 800e776:	19e8      	adds	r0, r5, r7
 800e778:	68a1      	ldr	r1, [r4, #8]
 800e77a:	f00d f8a4 	bl	801b8c6 <memcpy>
 800e77e:	e7b8      	b.n	800e6f2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800e780 <ucdr_serialize_uint32_t>:
 800e780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e784:	b082      	sub	sp, #8
 800e786:	4604      	mov	r4, r0
 800e788:	9101      	str	r1, [sp, #4]
 800e78a:	2104      	movs	r1, #4
 800e78c:	f000 ff30 	bl	800f5f0 <ucdr_buffer_alignment>
 800e790:	4601      	mov	r1, r0
 800e792:	4620      	mov	r0, r4
 800e794:	7d67      	ldrb	r7, [r4, #21]
 800e796:	f000 ff73 	bl	800f680 <ucdr_advance_buffer>
 800e79a:	2104      	movs	r1, #4
 800e79c:	4620      	mov	r0, r4
 800e79e:	f000 fec7 	bl	800f530 <ucdr_check_buffer_available_for>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d139      	bne.n	800e81a <ucdr_serialize_uint32_t+0x9a>
 800e7a6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e7aa:	42ab      	cmp	r3, r5
 800e7ac:	d930      	bls.n	800e810 <ucdr_serialize_uint32_t+0x90>
 800e7ae:	1b5e      	subs	r6, r3, r5
 800e7b0:	60a3      	str	r3, [r4, #8]
 800e7b2:	6923      	ldr	r3, [r4, #16]
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f1c6 0804 	rsb	r8, r6, #4
 800e7ba:	4433      	add	r3, r6
 800e7bc:	4641      	mov	r1, r8
 800e7be:	6123      	str	r3, [r4, #16]
 800e7c0:	f000 fec2 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d04c      	beq.n	800e862 <ucdr_serialize_uint32_t+0xe2>
 800e7c8:	7d23      	ldrb	r3, [r4, #20]
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d063      	beq.n	800e896 <ucdr_serialize_uint32_t+0x116>
 800e7ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e7d2:	702b      	strb	r3, [r5, #0]
 800e7d4:	2e00      	cmp	r6, #0
 800e7d6:	d051      	beq.n	800e87c <ucdr_serialize_uint32_t+0xfc>
 800e7d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e7dc:	2e01      	cmp	r6, #1
 800e7de:	706b      	strb	r3, [r5, #1]
 800e7e0:	d050      	beq.n	800e884 <ucdr_serialize_uint32_t+0x104>
 800e7e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e7e6:	2e02      	cmp	r6, #2
 800e7e8:	70ab      	strb	r3, [r5, #2]
 800e7ea:	d04f      	beq.n	800e88c <ucdr_serialize_uint32_t+0x10c>
 800e7ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e7f0:	70eb      	strb	r3, [r5, #3]
 800e7f2:	6923      	ldr	r3, [r4, #16]
 800e7f4:	2104      	movs	r1, #4
 800e7f6:	68a2      	ldr	r2, [r4, #8]
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	7da0      	ldrb	r0, [r4, #22]
 800e7fc:	4442      	add	r2, r8
 800e7fe:	7561      	strb	r1, [r4, #21]
 800e800:	1b9e      	subs	r6, r3, r6
 800e802:	f080 0001 	eor.w	r0, r0, #1
 800e806:	60a2      	str	r2, [r4, #8]
 800e808:	6126      	str	r6, [r4, #16]
 800e80a:	b002      	add	sp, #8
 800e80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e810:	2104      	movs	r1, #4
 800e812:	4620      	mov	r0, r4
 800e814:	f000 fe98 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e818:	b1d0      	cbz	r0, 800e850 <ucdr_serialize_uint32_t+0xd0>
 800e81a:	7d23      	ldrb	r3, [r4, #20]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	68a3      	ldr	r3, [r4, #8]
 800e820:	d01c      	beq.n	800e85c <ucdr_serialize_uint32_t+0xdc>
 800e822:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e826:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e82a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e82e:	7018      	strb	r0, [r3, #0]
 800e830:	68a3      	ldr	r3, [r4, #8]
 800e832:	705a      	strb	r2, [r3, #1]
 800e834:	68a3      	ldr	r3, [r4, #8]
 800e836:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e83a:	7099      	strb	r1, [r3, #2]
 800e83c:	68a3      	ldr	r3, [r4, #8]
 800e83e:	70da      	strb	r2, [r3, #3]
 800e840:	2104      	movs	r1, #4
 800e842:	68a2      	ldr	r2, [r4, #8]
 800e844:	6923      	ldr	r3, [r4, #16]
 800e846:	440a      	add	r2, r1
 800e848:	7561      	strb	r1, [r4, #21]
 800e84a:	440b      	add	r3, r1
 800e84c:	60a2      	str	r2, [r4, #8]
 800e84e:	6123      	str	r3, [r4, #16]
 800e850:	7da0      	ldrb	r0, [r4, #22]
 800e852:	f080 0001 	eor.w	r0, r0, #1
 800e856:	b002      	add	sp, #8
 800e858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85c:	9a01      	ldr	r2, [sp, #4]
 800e85e:	601a      	str	r2, [r3, #0]
 800e860:	e7ee      	b.n	800e840 <ucdr_serialize_uint32_t+0xc0>
 800e862:	68a2      	ldr	r2, [r4, #8]
 800e864:	6923      	ldr	r3, [r4, #16]
 800e866:	7da0      	ldrb	r0, [r4, #22]
 800e868:	1b92      	subs	r2, r2, r6
 800e86a:	1b9b      	subs	r3, r3, r6
 800e86c:	7567      	strb	r7, [r4, #21]
 800e86e:	f080 0001 	eor.w	r0, r0, #1
 800e872:	60a2      	str	r2, [r4, #8]
 800e874:	6123      	str	r3, [r4, #16]
 800e876:	b002      	add	sp, #8
 800e878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e87c:	68a3      	ldr	r3, [r4, #8]
 800e87e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e882:	701a      	strb	r2, [r3, #0]
 800e884:	68a3      	ldr	r3, [r4, #8]
 800e886:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e88a:	701a      	strb	r2, [r3, #0]
 800e88c:	68a3      	ldr	r3, [r4, #8]
 800e88e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e892:	701a      	strb	r2, [r3, #0]
 800e894:	e7ad      	b.n	800e7f2 <ucdr_serialize_uint32_t+0x72>
 800e896:	4628      	mov	r0, r5
 800e898:	ad01      	add	r5, sp, #4
 800e89a:	4632      	mov	r2, r6
 800e89c:	4629      	mov	r1, r5
 800e89e:	f00d f812 	bl	801b8c6 <memcpy>
 800e8a2:	4642      	mov	r2, r8
 800e8a4:	19a9      	adds	r1, r5, r6
 800e8a6:	68a0      	ldr	r0, [r4, #8]
 800e8a8:	f00d f80d 	bl	801b8c6 <memcpy>
 800e8ac:	e7a1      	b.n	800e7f2 <ucdr_serialize_uint32_t+0x72>
 800e8ae:	bf00      	nop

0800e8b0 <ucdr_serialize_endian_uint32_t>:
 800e8b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	460d      	mov	r5, r1
 800e8ba:	2104      	movs	r1, #4
 800e8bc:	9201      	str	r2, [sp, #4]
 800e8be:	f000 fe97 	bl	800f5f0 <ucdr_buffer_alignment>
 800e8c2:	4601      	mov	r1, r0
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e8ca:	f000 fed9 	bl	800f680 <ucdr_advance_buffer>
 800e8ce:	2104      	movs	r1, #4
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f000 fe2d 	bl	800f530 <ucdr_check_buffer_available_for>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d138      	bne.n	800e94c <ucdr_serialize_endian_uint32_t+0x9c>
 800e8da:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e8de:	42b7      	cmp	r7, r6
 800e8e0:	d92f      	bls.n	800e942 <ucdr_serialize_endian_uint32_t+0x92>
 800e8e2:	6923      	ldr	r3, [r4, #16]
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	60a7      	str	r7, [r4, #8]
 800e8e8:	1bbf      	subs	r7, r7, r6
 800e8ea:	443b      	add	r3, r7
 800e8ec:	f1c7 0904 	rsb	r9, r7, #4
 800e8f0:	6123      	str	r3, [r4, #16]
 800e8f2:	4649      	mov	r1, r9
 800e8f4:	f000 fe28 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d04a      	beq.n	800e992 <ucdr_serialize_endian_uint32_t+0xe2>
 800e8fc:	2d01      	cmp	r5, #1
 800e8fe:	d063      	beq.n	800e9c8 <ucdr_serialize_endian_uint32_t+0x118>
 800e900:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e904:	7033      	strb	r3, [r6, #0]
 800e906:	2f00      	cmp	r7, #0
 800e908:	d051      	beq.n	800e9ae <ucdr_serialize_endian_uint32_t+0xfe>
 800e90a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e90e:	2f01      	cmp	r7, #1
 800e910:	7073      	strb	r3, [r6, #1]
 800e912:	d050      	beq.n	800e9b6 <ucdr_serialize_endian_uint32_t+0x106>
 800e914:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e918:	2f02      	cmp	r7, #2
 800e91a:	70b3      	strb	r3, [r6, #2]
 800e91c:	d04f      	beq.n	800e9be <ucdr_serialize_endian_uint32_t+0x10e>
 800e91e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e922:	70f3      	strb	r3, [r6, #3]
 800e924:	6923      	ldr	r3, [r4, #16]
 800e926:	2104      	movs	r1, #4
 800e928:	68a2      	ldr	r2, [r4, #8]
 800e92a:	7da0      	ldrb	r0, [r4, #22]
 800e92c:	3304      	adds	r3, #4
 800e92e:	444a      	add	r2, r9
 800e930:	7561      	strb	r1, [r4, #21]
 800e932:	1bdb      	subs	r3, r3, r7
 800e934:	f080 0001 	eor.w	r0, r0, #1
 800e938:	60a2      	str	r2, [r4, #8]
 800e93a:	6123      	str	r3, [r4, #16]
 800e93c:	b003      	add	sp, #12
 800e93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e942:	2104      	movs	r1, #4
 800e944:	4620      	mov	r0, r4
 800e946:	f000 fdff 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800e94a:	b1c8      	cbz	r0, 800e980 <ucdr_serialize_endian_uint32_t+0xd0>
 800e94c:	2d01      	cmp	r5, #1
 800e94e:	68a3      	ldr	r3, [r4, #8]
 800e950:	d01c      	beq.n	800e98c <ucdr_serialize_endian_uint32_t+0xdc>
 800e952:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e956:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e95a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e95e:	7018      	strb	r0, [r3, #0]
 800e960:	68a3      	ldr	r3, [r4, #8]
 800e962:	705a      	strb	r2, [r3, #1]
 800e964:	68a3      	ldr	r3, [r4, #8]
 800e966:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e96a:	7099      	strb	r1, [r3, #2]
 800e96c:	68a3      	ldr	r3, [r4, #8]
 800e96e:	70da      	strb	r2, [r3, #3]
 800e970:	2104      	movs	r1, #4
 800e972:	68a2      	ldr	r2, [r4, #8]
 800e974:	6923      	ldr	r3, [r4, #16]
 800e976:	440a      	add	r2, r1
 800e978:	7561      	strb	r1, [r4, #21]
 800e97a:	440b      	add	r3, r1
 800e97c:	60a2      	str	r2, [r4, #8]
 800e97e:	6123      	str	r3, [r4, #16]
 800e980:	7da0      	ldrb	r0, [r4, #22]
 800e982:	f080 0001 	eor.w	r0, r0, #1
 800e986:	b003      	add	sp, #12
 800e988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e98c:	9a01      	ldr	r2, [sp, #4]
 800e98e:	601a      	str	r2, [r3, #0]
 800e990:	e7ee      	b.n	800e970 <ucdr_serialize_endian_uint32_t+0xc0>
 800e992:	68a2      	ldr	r2, [r4, #8]
 800e994:	6923      	ldr	r3, [r4, #16]
 800e996:	7da0      	ldrb	r0, [r4, #22]
 800e998:	1bd2      	subs	r2, r2, r7
 800e99a:	1bdb      	subs	r3, r3, r7
 800e99c:	f884 8015 	strb.w	r8, [r4, #21]
 800e9a0:	f080 0001 	eor.w	r0, r0, #1
 800e9a4:	60a2      	str	r2, [r4, #8]
 800e9a6:	6123      	str	r3, [r4, #16]
 800e9a8:	b003      	add	sp, #12
 800e9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9ae:	68a3      	ldr	r3, [r4, #8]
 800e9b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e9b4:	701a      	strb	r2, [r3, #0]
 800e9b6:	68a3      	ldr	r3, [r4, #8]
 800e9b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e9bc:	701a      	strb	r2, [r3, #0]
 800e9be:	68a3      	ldr	r3, [r4, #8]
 800e9c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e9c4:	701a      	strb	r2, [r3, #0]
 800e9c6:	e7ad      	b.n	800e924 <ucdr_serialize_endian_uint32_t+0x74>
 800e9c8:	ad01      	add	r5, sp, #4
 800e9ca:	463a      	mov	r2, r7
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	f00c ff79 	bl	801b8c6 <memcpy>
 800e9d4:	464a      	mov	r2, r9
 800e9d6:	19e9      	adds	r1, r5, r7
 800e9d8:	68a0      	ldr	r0, [r4, #8]
 800e9da:	f00c ff74 	bl	801b8c6 <memcpy>
 800e9de:	e7a1      	b.n	800e924 <ucdr_serialize_endian_uint32_t+0x74>

0800e9e0 <ucdr_deserialize_uint32_t>:
 800e9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	460d      	mov	r5, r1
 800e9e8:	2104      	movs	r1, #4
 800e9ea:	f000 fe01 	bl	800f5f0 <ucdr_buffer_alignment>
 800e9ee:	4601      	mov	r1, r0
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e9f6:	f000 fe43 	bl	800f680 <ucdr_advance_buffer>
 800e9fa:	2104      	movs	r1, #4
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f000 fd97 	bl	800f530 <ucdr_check_buffer_available_for>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d138      	bne.n	800ea78 <ucdr_deserialize_uint32_t+0x98>
 800ea06:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ea0a:	42b7      	cmp	r7, r6
 800ea0c:	d92f      	bls.n	800ea6e <ucdr_deserialize_uint32_t+0x8e>
 800ea0e:	6923      	ldr	r3, [r4, #16]
 800ea10:	4620      	mov	r0, r4
 800ea12:	60a7      	str	r7, [r4, #8]
 800ea14:	1bbf      	subs	r7, r7, r6
 800ea16:	443b      	add	r3, r7
 800ea18:	f1c7 0904 	rsb	r9, r7, #4
 800ea1c:	6123      	str	r3, [r4, #16]
 800ea1e:	4649      	mov	r1, r9
 800ea20:	f000 fd92 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d046      	beq.n	800eab6 <ucdr_deserialize_uint32_t+0xd6>
 800ea28:	7d23      	ldrb	r3, [r4, #20]
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d05c      	beq.n	800eae8 <ucdr_deserialize_uint32_t+0x108>
 800ea2e:	78f3      	ldrb	r3, [r6, #3]
 800ea30:	702b      	strb	r3, [r5, #0]
 800ea32:	2f00      	cmp	r7, #0
 800ea34:	d04c      	beq.n	800ead0 <ucdr_deserialize_uint32_t+0xf0>
 800ea36:	78b3      	ldrb	r3, [r6, #2]
 800ea38:	2f01      	cmp	r7, #1
 800ea3a:	706b      	strb	r3, [r5, #1]
 800ea3c:	f105 0302 	add.w	r3, r5, #2
 800ea40:	d04a      	beq.n	800ead8 <ucdr_deserialize_uint32_t+0xf8>
 800ea42:	7873      	ldrb	r3, [r6, #1]
 800ea44:	2f02      	cmp	r7, #2
 800ea46:	70ab      	strb	r3, [r5, #2]
 800ea48:	f105 0303 	add.w	r3, r5, #3
 800ea4c:	d048      	beq.n	800eae0 <ucdr_deserialize_uint32_t+0x100>
 800ea4e:	7833      	ldrb	r3, [r6, #0]
 800ea50:	70eb      	strb	r3, [r5, #3]
 800ea52:	6923      	ldr	r3, [r4, #16]
 800ea54:	2104      	movs	r1, #4
 800ea56:	68a2      	ldr	r2, [r4, #8]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	7da0      	ldrb	r0, [r4, #22]
 800ea5c:	444a      	add	r2, r9
 800ea5e:	7561      	strb	r1, [r4, #21]
 800ea60:	1bdb      	subs	r3, r3, r7
 800ea62:	f080 0001 	eor.w	r0, r0, #1
 800ea66:	60a2      	str	r2, [r4, #8]
 800ea68:	6123      	str	r3, [r4, #16]
 800ea6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea6e:	2104      	movs	r1, #4
 800ea70:	4620      	mov	r0, r4
 800ea72:	f000 fd69 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800ea76:	b1b0      	cbz	r0, 800eaa6 <ucdr_deserialize_uint32_t+0xc6>
 800ea78:	7d23      	ldrb	r3, [r4, #20]
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	68a3      	ldr	r3, [r4, #8]
 800ea7e:	d017      	beq.n	800eab0 <ucdr_deserialize_uint32_t+0xd0>
 800ea80:	78db      	ldrb	r3, [r3, #3]
 800ea82:	702b      	strb	r3, [r5, #0]
 800ea84:	68a3      	ldr	r3, [r4, #8]
 800ea86:	789b      	ldrb	r3, [r3, #2]
 800ea88:	706b      	strb	r3, [r5, #1]
 800ea8a:	68a3      	ldr	r3, [r4, #8]
 800ea8c:	785b      	ldrb	r3, [r3, #1]
 800ea8e:	70ab      	strb	r3, [r5, #2]
 800ea90:	68a3      	ldr	r3, [r4, #8]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	70eb      	strb	r3, [r5, #3]
 800ea96:	2104      	movs	r1, #4
 800ea98:	68a2      	ldr	r2, [r4, #8]
 800ea9a:	6923      	ldr	r3, [r4, #16]
 800ea9c:	440a      	add	r2, r1
 800ea9e:	7561      	strb	r1, [r4, #21]
 800eaa0:	440b      	add	r3, r1
 800eaa2:	60a2      	str	r2, [r4, #8]
 800eaa4:	6123      	str	r3, [r4, #16]
 800eaa6:	7da0      	ldrb	r0, [r4, #22]
 800eaa8:	f080 0001 	eor.w	r0, r0, #1
 800eaac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	602b      	str	r3, [r5, #0]
 800eab4:	e7ef      	b.n	800ea96 <ucdr_deserialize_uint32_t+0xb6>
 800eab6:	68a2      	ldr	r2, [r4, #8]
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	1bd2      	subs	r2, r2, r7
 800eabc:	7da0      	ldrb	r0, [r4, #22]
 800eabe:	1bdb      	subs	r3, r3, r7
 800eac0:	f884 8015 	strb.w	r8, [r4, #21]
 800eac4:	f080 0001 	eor.w	r0, r0, #1
 800eac8:	60a2      	str	r2, [r4, #8]
 800eaca:	6123      	str	r3, [r4, #16]
 800eacc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ead0:	68a3      	ldr	r3, [r4, #8]
 800ead2:	789b      	ldrb	r3, [r3, #2]
 800ead4:	706b      	strb	r3, [r5, #1]
 800ead6:	1cab      	adds	r3, r5, #2
 800ead8:	68a2      	ldr	r2, [r4, #8]
 800eada:	7852      	ldrb	r2, [r2, #1]
 800eadc:	f803 2b01 	strb.w	r2, [r3], #1
 800eae0:	68a2      	ldr	r2, [r4, #8]
 800eae2:	7812      	ldrb	r2, [r2, #0]
 800eae4:	701a      	strb	r2, [r3, #0]
 800eae6:	e7b4      	b.n	800ea52 <ucdr_deserialize_uint32_t+0x72>
 800eae8:	4631      	mov	r1, r6
 800eaea:	463a      	mov	r2, r7
 800eaec:	4628      	mov	r0, r5
 800eaee:	f00c feea 	bl	801b8c6 <memcpy>
 800eaf2:	464a      	mov	r2, r9
 800eaf4:	19e8      	adds	r0, r5, r7
 800eaf6:	68a1      	ldr	r1, [r4, #8]
 800eaf8:	f00c fee5 	bl	801b8c6 <memcpy>
 800eafc:	e7a9      	b.n	800ea52 <ucdr_deserialize_uint32_t+0x72>
 800eafe:	bf00      	nop

0800eb00 <ucdr_deserialize_endian_uint32_t>:
 800eb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb04:	4604      	mov	r4, r0
 800eb06:	460e      	mov	r6, r1
 800eb08:	2104      	movs	r1, #4
 800eb0a:	4615      	mov	r5, r2
 800eb0c:	f000 fd70 	bl	800f5f0 <ucdr_buffer_alignment>
 800eb10:	4601      	mov	r1, r0
 800eb12:	4620      	mov	r0, r4
 800eb14:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb18:	f000 fdb2 	bl	800f680 <ucdr_advance_buffer>
 800eb1c:	2104      	movs	r1, #4
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f000 fd06 	bl	800f530 <ucdr_check_buffer_available_for>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d13c      	bne.n	800eba2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800eb28:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800eb2c:	42bb      	cmp	r3, r7
 800eb2e:	d933      	bls.n	800eb98 <ucdr_deserialize_endian_uint32_t+0x98>
 800eb30:	eba3 0907 	sub.w	r9, r3, r7
 800eb34:	60a3      	str	r3, [r4, #8]
 800eb36:	6923      	ldr	r3, [r4, #16]
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f1c9 0a04 	rsb	sl, r9, #4
 800eb3e:	444b      	add	r3, r9
 800eb40:	4651      	mov	r1, sl
 800eb42:	6123      	str	r3, [r4, #16]
 800eb44:	f000 fd00 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d048      	beq.n	800ebde <ucdr_deserialize_endian_uint32_t+0xde>
 800eb4c:	2e01      	cmp	r6, #1
 800eb4e:	d061      	beq.n	800ec14 <ucdr_deserialize_endian_uint32_t+0x114>
 800eb50:	78fb      	ldrb	r3, [r7, #3]
 800eb52:	702b      	strb	r3, [r5, #0]
 800eb54:	f1b9 0f00 	cmp.w	r9, #0
 800eb58:	d050      	beq.n	800ebfc <ucdr_deserialize_endian_uint32_t+0xfc>
 800eb5a:	78bb      	ldrb	r3, [r7, #2]
 800eb5c:	f1b9 0f01 	cmp.w	r9, #1
 800eb60:	706b      	strb	r3, [r5, #1]
 800eb62:	f105 0302 	add.w	r3, r5, #2
 800eb66:	d04d      	beq.n	800ec04 <ucdr_deserialize_endian_uint32_t+0x104>
 800eb68:	787b      	ldrb	r3, [r7, #1]
 800eb6a:	f1b9 0f02 	cmp.w	r9, #2
 800eb6e:	70ab      	strb	r3, [r5, #2]
 800eb70:	f105 0303 	add.w	r3, r5, #3
 800eb74:	d04a      	beq.n	800ec0c <ucdr_deserialize_endian_uint32_t+0x10c>
 800eb76:	783b      	ldrb	r3, [r7, #0]
 800eb78:	70eb      	strb	r3, [r5, #3]
 800eb7a:	6923      	ldr	r3, [r4, #16]
 800eb7c:	2104      	movs	r1, #4
 800eb7e:	68a2      	ldr	r2, [r4, #8]
 800eb80:	3304      	adds	r3, #4
 800eb82:	7da0      	ldrb	r0, [r4, #22]
 800eb84:	4452      	add	r2, sl
 800eb86:	7561      	strb	r1, [r4, #21]
 800eb88:	eba3 0309 	sub.w	r3, r3, r9
 800eb8c:	f080 0001 	eor.w	r0, r0, #1
 800eb90:	60a2      	str	r2, [r4, #8]
 800eb92:	6123      	str	r3, [r4, #16]
 800eb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb98:	2104      	movs	r1, #4
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f000 fcd4 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800eba0:	b1a8      	cbz	r0, 800ebce <ucdr_deserialize_endian_uint32_t+0xce>
 800eba2:	2e01      	cmp	r6, #1
 800eba4:	68a3      	ldr	r3, [r4, #8]
 800eba6:	d017      	beq.n	800ebd8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800eba8:	78db      	ldrb	r3, [r3, #3]
 800ebaa:	702b      	strb	r3, [r5, #0]
 800ebac:	68a3      	ldr	r3, [r4, #8]
 800ebae:	789b      	ldrb	r3, [r3, #2]
 800ebb0:	706b      	strb	r3, [r5, #1]
 800ebb2:	68a3      	ldr	r3, [r4, #8]
 800ebb4:	785b      	ldrb	r3, [r3, #1]
 800ebb6:	70ab      	strb	r3, [r5, #2]
 800ebb8:	68a3      	ldr	r3, [r4, #8]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	70eb      	strb	r3, [r5, #3]
 800ebbe:	2104      	movs	r1, #4
 800ebc0:	68a2      	ldr	r2, [r4, #8]
 800ebc2:	6923      	ldr	r3, [r4, #16]
 800ebc4:	440a      	add	r2, r1
 800ebc6:	7561      	strb	r1, [r4, #21]
 800ebc8:	440b      	add	r3, r1
 800ebca:	60a2      	str	r2, [r4, #8]
 800ebcc:	6123      	str	r3, [r4, #16]
 800ebce:	7da0      	ldrb	r0, [r4, #22]
 800ebd0:	f080 0001 	eor.w	r0, r0, #1
 800ebd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	e7ef      	b.n	800ebbe <ucdr_deserialize_endian_uint32_t+0xbe>
 800ebde:	68a2      	ldr	r2, [r4, #8]
 800ebe0:	6923      	ldr	r3, [r4, #16]
 800ebe2:	eba2 0209 	sub.w	r2, r2, r9
 800ebe6:	7da0      	ldrb	r0, [r4, #22]
 800ebe8:	eba3 0309 	sub.w	r3, r3, r9
 800ebec:	f884 8015 	strb.w	r8, [r4, #21]
 800ebf0:	f080 0001 	eor.w	r0, r0, #1
 800ebf4:	60a2      	str	r2, [r4, #8]
 800ebf6:	6123      	str	r3, [r4, #16]
 800ebf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebfc:	68a3      	ldr	r3, [r4, #8]
 800ebfe:	789b      	ldrb	r3, [r3, #2]
 800ec00:	706b      	strb	r3, [r5, #1]
 800ec02:	1cab      	adds	r3, r5, #2
 800ec04:	68a2      	ldr	r2, [r4, #8]
 800ec06:	7852      	ldrb	r2, [r2, #1]
 800ec08:	f803 2b01 	strb.w	r2, [r3], #1
 800ec0c:	68a2      	ldr	r2, [r4, #8]
 800ec0e:	7812      	ldrb	r2, [r2, #0]
 800ec10:	701a      	strb	r2, [r3, #0]
 800ec12:	e7b2      	b.n	800eb7a <ucdr_deserialize_endian_uint32_t+0x7a>
 800ec14:	4639      	mov	r1, r7
 800ec16:	464a      	mov	r2, r9
 800ec18:	4628      	mov	r0, r5
 800ec1a:	f00c fe54 	bl	801b8c6 <memcpy>
 800ec1e:	4652      	mov	r2, sl
 800ec20:	eb05 0009 	add.w	r0, r5, r9
 800ec24:	68a1      	ldr	r1, [r4, #8]
 800ec26:	f00c fe4e 	bl	801b8c6 <memcpy>
 800ec2a:	e7a6      	b.n	800eb7a <ucdr_deserialize_endian_uint32_t+0x7a>

0800ec2c <ucdr_serialize_uint64_t>:
 800ec2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec30:	4604      	mov	r4, r0
 800ec32:	b082      	sub	sp, #8
 800ec34:	2108      	movs	r1, #8
 800ec36:	e9cd 2300 	strd	r2, r3, [sp]
 800ec3a:	f000 fcd9 	bl	800f5f0 <ucdr_buffer_alignment>
 800ec3e:	4601      	mov	r1, r0
 800ec40:	4620      	mov	r0, r4
 800ec42:	7d67      	ldrb	r7, [r4, #21]
 800ec44:	f000 fd1c 	bl	800f680 <ucdr_advance_buffer>
 800ec48:	2108      	movs	r1, #8
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 fc70 	bl	800f530 <ucdr_check_buffer_available_for>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d14e      	bne.n	800ecf2 <ucdr_serialize_uint64_t+0xc6>
 800ec54:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ec58:	42ab      	cmp	r3, r5
 800ec5a:	d945      	bls.n	800ece8 <ucdr_serialize_uint64_t+0xbc>
 800ec5c:	1b5e      	subs	r6, r3, r5
 800ec5e:	60a3      	str	r3, [r4, #8]
 800ec60:	6923      	ldr	r3, [r4, #16]
 800ec62:	4620      	mov	r0, r4
 800ec64:	f1c6 0808 	rsb	r8, r6, #8
 800ec68:	4433      	add	r3, r6
 800ec6a:	4641      	mov	r1, r8
 800ec6c:	6123      	str	r3, [r4, #16]
 800ec6e:	f000 fc6b 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d074      	beq.n	800ed60 <ucdr_serialize_uint64_t+0x134>
 800ec76:	7d23      	ldrb	r3, [r4, #20]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	f000 809b 	beq.w	800edb4 <ucdr_serialize_uint64_t+0x188>
 800ec7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec82:	702b      	strb	r3, [r5, #0]
 800ec84:	2e00      	cmp	r6, #0
 800ec86:	d078      	beq.n	800ed7a <ucdr_serialize_uint64_t+0x14e>
 800ec88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec8c:	2e01      	cmp	r6, #1
 800ec8e:	706b      	strb	r3, [r5, #1]
 800ec90:	d077      	beq.n	800ed82 <ucdr_serialize_uint64_t+0x156>
 800ec92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ec96:	2e02      	cmp	r6, #2
 800ec98:	70ab      	strb	r3, [r5, #2]
 800ec9a:	d076      	beq.n	800ed8a <ucdr_serialize_uint64_t+0x15e>
 800ec9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eca0:	2e03      	cmp	r6, #3
 800eca2:	70eb      	strb	r3, [r5, #3]
 800eca4:	d075      	beq.n	800ed92 <ucdr_serialize_uint64_t+0x166>
 800eca6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ecaa:	2e04      	cmp	r6, #4
 800ecac:	712b      	strb	r3, [r5, #4]
 800ecae:	d074      	beq.n	800ed9a <ucdr_serialize_uint64_t+0x16e>
 800ecb0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ecb4:	2e05      	cmp	r6, #5
 800ecb6:	716b      	strb	r3, [r5, #5]
 800ecb8:	d073      	beq.n	800eda2 <ucdr_serialize_uint64_t+0x176>
 800ecba:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ecbe:	2e06      	cmp	r6, #6
 800ecc0:	71ab      	strb	r3, [r5, #6]
 800ecc2:	d072      	beq.n	800edaa <ucdr_serialize_uint64_t+0x17e>
 800ecc4:	f89d 3000 	ldrb.w	r3, [sp]
 800ecc8:	71eb      	strb	r3, [r5, #7]
 800ecca:	6923      	ldr	r3, [r4, #16]
 800eccc:	2108      	movs	r1, #8
 800ecce:	68a2      	ldr	r2, [r4, #8]
 800ecd0:	3308      	adds	r3, #8
 800ecd2:	7da0      	ldrb	r0, [r4, #22]
 800ecd4:	4442      	add	r2, r8
 800ecd6:	7561      	strb	r1, [r4, #21]
 800ecd8:	1b9e      	subs	r6, r3, r6
 800ecda:	f080 0001 	eor.w	r0, r0, #1
 800ecde:	60a2      	str	r2, [r4, #8]
 800ece0:	6126      	str	r6, [r4, #16]
 800ece2:	b002      	add	sp, #8
 800ece4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece8:	2108      	movs	r1, #8
 800ecea:	4620      	mov	r0, r4
 800ecec:	f000 fc2c 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800ecf0:	b350      	cbz	r0, 800ed48 <ucdr_serialize_uint64_t+0x11c>
 800ecf2:	7d23      	ldrb	r3, [r4, #20]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d02d      	beq.n	800ed54 <ucdr_serialize_uint64_t+0x128>
 800ecf8:	68a3      	ldr	r3, [r4, #8]
 800ecfa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ecfe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed02:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ed06:	7018      	strb	r0, [r3, #0]
 800ed08:	68a3      	ldr	r3, [r4, #8]
 800ed0a:	705a      	strb	r2, [r3, #1]
 800ed0c:	68a3      	ldr	r3, [r4, #8]
 800ed0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ed12:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800ed16:	7099      	strb	r1, [r3, #2]
 800ed18:	68a3      	ldr	r3, [r4, #8]
 800ed1a:	70da      	strb	r2, [r3, #3]
 800ed1c:	68a3      	ldr	r3, [r4, #8]
 800ed1e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ed22:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800ed26:	7118      	strb	r0, [r3, #4]
 800ed28:	68a3      	ldr	r3, [r4, #8]
 800ed2a:	715a      	strb	r2, [r3, #5]
 800ed2c:	68a3      	ldr	r3, [r4, #8]
 800ed2e:	f89d 2000 	ldrb.w	r2, [sp]
 800ed32:	7199      	strb	r1, [r3, #6]
 800ed34:	68a3      	ldr	r3, [r4, #8]
 800ed36:	71da      	strb	r2, [r3, #7]
 800ed38:	2108      	movs	r1, #8
 800ed3a:	68a2      	ldr	r2, [r4, #8]
 800ed3c:	6923      	ldr	r3, [r4, #16]
 800ed3e:	440a      	add	r2, r1
 800ed40:	7561      	strb	r1, [r4, #21]
 800ed42:	440b      	add	r3, r1
 800ed44:	60a2      	str	r2, [r4, #8]
 800ed46:	6123      	str	r3, [r4, #16]
 800ed48:	7da0      	ldrb	r0, [r4, #22]
 800ed4a:	f080 0001 	eor.w	r0, r0, #1
 800ed4e:	b002      	add	sp, #8
 800ed50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed54:	466b      	mov	r3, sp
 800ed56:	68a2      	ldr	r2, [r4, #8]
 800ed58:	cb03      	ldmia	r3!, {r0, r1}
 800ed5a:	6010      	str	r0, [r2, #0]
 800ed5c:	6051      	str	r1, [r2, #4]
 800ed5e:	e7eb      	b.n	800ed38 <ucdr_serialize_uint64_t+0x10c>
 800ed60:	68a2      	ldr	r2, [r4, #8]
 800ed62:	6923      	ldr	r3, [r4, #16]
 800ed64:	7da0      	ldrb	r0, [r4, #22]
 800ed66:	1b92      	subs	r2, r2, r6
 800ed68:	1b9b      	subs	r3, r3, r6
 800ed6a:	7567      	strb	r7, [r4, #21]
 800ed6c:	f080 0001 	eor.w	r0, r0, #1
 800ed70:	60a2      	str	r2, [r4, #8]
 800ed72:	6123      	str	r3, [r4, #16]
 800ed74:	b002      	add	sp, #8
 800ed76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed7a:	68a3      	ldr	r3, [r4, #8]
 800ed7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed80:	701a      	strb	r2, [r3, #0]
 800ed82:	68a3      	ldr	r3, [r4, #8]
 800ed84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ed88:	701a      	strb	r2, [r3, #0]
 800ed8a:	68a3      	ldr	r3, [r4, #8]
 800ed8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ed90:	701a      	strb	r2, [r3, #0]
 800ed92:	68a3      	ldr	r3, [r4, #8]
 800ed94:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ed98:	701a      	strb	r2, [r3, #0]
 800ed9a:	68a3      	ldr	r3, [r4, #8]
 800ed9c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800eda0:	701a      	strb	r2, [r3, #0]
 800eda2:	68a3      	ldr	r3, [r4, #8]
 800eda4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800eda8:	701a      	strb	r2, [r3, #0]
 800edaa:	68a3      	ldr	r3, [r4, #8]
 800edac:	f89d 2000 	ldrb.w	r2, [sp]
 800edb0:	701a      	strb	r2, [r3, #0]
 800edb2:	e78a      	b.n	800ecca <ucdr_serialize_uint64_t+0x9e>
 800edb4:	4628      	mov	r0, r5
 800edb6:	466d      	mov	r5, sp
 800edb8:	4632      	mov	r2, r6
 800edba:	4629      	mov	r1, r5
 800edbc:	f00c fd83 	bl	801b8c6 <memcpy>
 800edc0:	4642      	mov	r2, r8
 800edc2:	19a9      	adds	r1, r5, r6
 800edc4:	68a0      	ldr	r0, [r4, #8]
 800edc6:	f00c fd7e 	bl	801b8c6 <memcpy>
 800edca:	e77e      	b.n	800ecca <ucdr_serialize_uint64_t+0x9e>

0800edcc <ucdr_serialize_int16_t>:
 800edcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd0:	460b      	mov	r3, r1
 800edd2:	b082      	sub	sp, #8
 800edd4:	4604      	mov	r4, r0
 800edd6:	2102      	movs	r1, #2
 800edd8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eddc:	f000 fc08 	bl	800f5f0 <ucdr_buffer_alignment>
 800ede0:	4601      	mov	r1, r0
 800ede2:	4620      	mov	r0, r4
 800ede4:	7d67      	ldrb	r7, [r4, #21]
 800ede6:	f000 fc4b 	bl	800f680 <ucdr_advance_buffer>
 800edea:	2102      	movs	r1, #2
 800edec:	4620      	mov	r0, r4
 800edee:	f000 fb9f 	bl	800f530 <ucdr_check_buffer_available_for>
 800edf2:	bb78      	cbnz	r0, 800ee54 <ucdr_serialize_int16_t+0x88>
 800edf4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800edf8:	42ab      	cmp	r3, r5
 800edfa:	d926      	bls.n	800ee4a <ucdr_serialize_int16_t+0x7e>
 800edfc:	1b5e      	subs	r6, r3, r5
 800edfe:	60a3      	str	r3, [r4, #8]
 800ee00:	6923      	ldr	r3, [r4, #16]
 800ee02:	4620      	mov	r0, r4
 800ee04:	f1c6 0802 	rsb	r8, r6, #2
 800ee08:	4433      	add	r3, r6
 800ee0a:	4641      	mov	r1, r8
 800ee0c:	6123      	str	r3, [r4, #16]
 800ee0e:	f000 fb9b 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800ee12:	2800      	cmp	r0, #0
 800ee14:	d03b      	beq.n	800ee8e <ucdr_serialize_int16_t+0xc2>
 800ee16:	7d23      	ldrb	r3, [r4, #20]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d04a      	beq.n	800eeb2 <ucdr_serialize_int16_t+0xe6>
 800ee1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee20:	702b      	strb	r3, [r5, #0]
 800ee22:	2e00      	cmp	r6, #0
 800ee24:	d040      	beq.n	800eea8 <ucdr_serialize_int16_t+0xdc>
 800ee26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee2a:	706b      	strb	r3, [r5, #1]
 800ee2c:	6923      	ldr	r3, [r4, #16]
 800ee2e:	2102      	movs	r1, #2
 800ee30:	68a2      	ldr	r2, [r4, #8]
 800ee32:	3302      	adds	r3, #2
 800ee34:	7da0      	ldrb	r0, [r4, #22]
 800ee36:	4442      	add	r2, r8
 800ee38:	7561      	strb	r1, [r4, #21]
 800ee3a:	1b9e      	subs	r6, r3, r6
 800ee3c:	f080 0001 	eor.w	r0, r0, #1
 800ee40:	60a2      	str	r2, [r4, #8]
 800ee42:	6126      	str	r6, [r4, #16]
 800ee44:	b002      	add	sp, #8
 800ee46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4a:	2102      	movs	r1, #2
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f000 fb7b 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800ee52:	b190      	cbz	r0, 800ee7a <ucdr_serialize_int16_t+0xae>
 800ee54:	7d23      	ldrb	r3, [r4, #20]
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	68a3      	ldr	r3, [r4, #8]
 800ee5a:	d014      	beq.n	800ee86 <ucdr_serialize_int16_t+0xba>
 800ee5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ee60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee64:	7019      	strb	r1, [r3, #0]
 800ee66:	68a3      	ldr	r3, [r4, #8]
 800ee68:	705a      	strb	r2, [r3, #1]
 800ee6a:	2102      	movs	r1, #2
 800ee6c:	68a2      	ldr	r2, [r4, #8]
 800ee6e:	6923      	ldr	r3, [r4, #16]
 800ee70:	440a      	add	r2, r1
 800ee72:	7561      	strb	r1, [r4, #21]
 800ee74:	440b      	add	r3, r1
 800ee76:	60a2      	str	r2, [r4, #8]
 800ee78:	6123      	str	r3, [r4, #16]
 800ee7a:	7da0      	ldrb	r0, [r4, #22]
 800ee7c:	f080 0001 	eor.w	r0, r0, #1
 800ee80:	b002      	add	sp, #8
 800ee82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee8a:	801a      	strh	r2, [r3, #0]
 800ee8c:	e7ed      	b.n	800ee6a <ucdr_serialize_int16_t+0x9e>
 800ee8e:	68a2      	ldr	r2, [r4, #8]
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	7da0      	ldrb	r0, [r4, #22]
 800ee94:	1b92      	subs	r2, r2, r6
 800ee96:	1b9b      	subs	r3, r3, r6
 800ee98:	7567      	strb	r7, [r4, #21]
 800ee9a:	f080 0001 	eor.w	r0, r0, #1
 800ee9e:	60a2      	str	r2, [r4, #8]
 800eea0:	6123      	str	r3, [r4, #16]
 800eea2:	b002      	add	sp, #8
 800eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea8:	68a3      	ldr	r3, [r4, #8]
 800eeaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eeae:	701a      	strb	r2, [r3, #0]
 800eeb0:	e7bc      	b.n	800ee2c <ucdr_serialize_int16_t+0x60>
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	f10d 0506 	add.w	r5, sp, #6
 800eeb8:	4632      	mov	r2, r6
 800eeba:	4629      	mov	r1, r5
 800eebc:	f00c fd03 	bl	801b8c6 <memcpy>
 800eec0:	4642      	mov	r2, r8
 800eec2:	19a9      	adds	r1, r5, r6
 800eec4:	68a0      	ldr	r0, [r4, #8]
 800eec6:	f00c fcfe 	bl	801b8c6 <memcpy>
 800eeca:	e7af      	b.n	800ee2c <ucdr_serialize_int16_t+0x60>

0800eecc <ucdr_deserialize_int16_t>:
 800eecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eed0:	4604      	mov	r4, r0
 800eed2:	460d      	mov	r5, r1
 800eed4:	2102      	movs	r1, #2
 800eed6:	f000 fb8b 	bl	800f5f0 <ucdr_buffer_alignment>
 800eeda:	4601      	mov	r1, r0
 800eedc:	4620      	mov	r0, r4
 800eede:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eee2:	f000 fbcd 	bl	800f680 <ucdr_advance_buffer>
 800eee6:	2102      	movs	r1, #2
 800eee8:	4620      	mov	r0, r4
 800eeea:	f000 fb21 	bl	800f530 <ucdr_check_buffer_available_for>
 800eeee:	bb60      	cbnz	r0, 800ef4a <ucdr_deserialize_int16_t+0x7e>
 800eef0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eef4:	42be      	cmp	r6, r7
 800eef6:	d923      	bls.n	800ef40 <ucdr_deserialize_int16_t+0x74>
 800eef8:	6923      	ldr	r3, [r4, #16]
 800eefa:	4620      	mov	r0, r4
 800eefc:	60a6      	str	r6, [r4, #8]
 800eefe:	1bf6      	subs	r6, r6, r7
 800ef00:	4433      	add	r3, r6
 800ef02:	f1c6 0902 	rsb	r9, r6, #2
 800ef06:	6123      	str	r3, [r4, #16]
 800ef08:	4649      	mov	r1, r9
 800ef0a:	f000 fb1d 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	d034      	beq.n	800ef7c <ucdr_deserialize_int16_t+0xb0>
 800ef12:	7d23      	ldrb	r3, [r4, #20]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d042      	beq.n	800ef9e <ucdr_deserialize_int16_t+0xd2>
 800ef18:	787b      	ldrb	r3, [r7, #1]
 800ef1a:	702b      	strb	r3, [r5, #0]
 800ef1c:	2e00      	cmp	r6, #0
 800ef1e:	d03a      	beq.n	800ef96 <ucdr_deserialize_int16_t+0xca>
 800ef20:	783b      	ldrb	r3, [r7, #0]
 800ef22:	706b      	strb	r3, [r5, #1]
 800ef24:	6923      	ldr	r3, [r4, #16]
 800ef26:	2102      	movs	r1, #2
 800ef28:	68a2      	ldr	r2, [r4, #8]
 800ef2a:	3302      	adds	r3, #2
 800ef2c:	7da0      	ldrb	r0, [r4, #22]
 800ef2e:	444a      	add	r2, r9
 800ef30:	7561      	strb	r1, [r4, #21]
 800ef32:	1b9b      	subs	r3, r3, r6
 800ef34:	f080 0001 	eor.w	r0, r0, #1
 800ef38:	60a2      	str	r2, [r4, #8]
 800ef3a:	6123      	str	r3, [r4, #16]
 800ef3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef40:	2102      	movs	r1, #2
 800ef42:	4620      	mov	r0, r4
 800ef44:	f000 fb00 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800ef48:	b180      	cbz	r0, 800ef6c <ucdr_deserialize_int16_t+0xa0>
 800ef4a:	7d23      	ldrb	r3, [r4, #20]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	68a3      	ldr	r3, [r4, #8]
 800ef50:	d011      	beq.n	800ef76 <ucdr_deserialize_int16_t+0xaa>
 800ef52:	785b      	ldrb	r3, [r3, #1]
 800ef54:	702b      	strb	r3, [r5, #0]
 800ef56:	68a3      	ldr	r3, [r4, #8]
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	706b      	strb	r3, [r5, #1]
 800ef5c:	2102      	movs	r1, #2
 800ef5e:	68a2      	ldr	r2, [r4, #8]
 800ef60:	6923      	ldr	r3, [r4, #16]
 800ef62:	440a      	add	r2, r1
 800ef64:	7561      	strb	r1, [r4, #21]
 800ef66:	440b      	add	r3, r1
 800ef68:	60a2      	str	r2, [r4, #8]
 800ef6a:	6123      	str	r3, [r4, #16]
 800ef6c:	7da0      	ldrb	r0, [r4, #22]
 800ef6e:	f080 0001 	eor.w	r0, r0, #1
 800ef72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef76:	881b      	ldrh	r3, [r3, #0]
 800ef78:	802b      	strh	r3, [r5, #0]
 800ef7a:	e7ef      	b.n	800ef5c <ucdr_deserialize_int16_t+0x90>
 800ef7c:	68a2      	ldr	r2, [r4, #8]
 800ef7e:	6923      	ldr	r3, [r4, #16]
 800ef80:	1b92      	subs	r2, r2, r6
 800ef82:	7da0      	ldrb	r0, [r4, #22]
 800ef84:	1b9b      	subs	r3, r3, r6
 800ef86:	f884 8015 	strb.w	r8, [r4, #21]
 800ef8a:	f080 0001 	eor.w	r0, r0, #1
 800ef8e:	60a2      	str	r2, [r4, #8]
 800ef90:	6123      	str	r3, [r4, #16]
 800ef92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	706b      	strb	r3, [r5, #1]
 800ef9c:	e7c2      	b.n	800ef24 <ucdr_deserialize_int16_t+0x58>
 800ef9e:	4639      	mov	r1, r7
 800efa0:	4632      	mov	r2, r6
 800efa2:	4628      	mov	r0, r5
 800efa4:	f00c fc8f 	bl	801b8c6 <memcpy>
 800efa8:	464a      	mov	r2, r9
 800efaa:	19a8      	adds	r0, r5, r6
 800efac:	68a1      	ldr	r1, [r4, #8]
 800efae:	f00c fc8a 	bl	801b8c6 <memcpy>
 800efb2:	e7b7      	b.n	800ef24 <ucdr_deserialize_int16_t+0x58>

0800efb4 <ucdr_serialize_int32_t>:
 800efb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb8:	b082      	sub	sp, #8
 800efba:	4604      	mov	r4, r0
 800efbc:	9101      	str	r1, [sp, #4]
 800efbe:	2104      	movs	r1, #4
 800efc0:	f000 fb16 	bl	800f5f0 <ucdr_buffer_alignment>
 800efc4:	4601      	mov	r1, r0
 800efc6:	4620      	mov	r0, r4
 800efc8:	7d67      	ldrb	r7, [r4, #21]
 800efca:	f000 fb59 	bl	800f680 <ucdr_advance_buffer>
 800efce:	2104      	movs	r1, #4
 800efd0:	4620      	mov	r0, r4
 800efd2:	f000 faad 	bl	800f530 <ucdr_check_buffer_available_for>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	d139      	bne.n	800f04e <ucdr_serialize_int32_t+0x9a>
 800efda:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800efde:	42ab      	cmp	r3, r5
 800efe0:	d930      	bls.n	800f044 <ucdr_serialize_int32_t+0x90>
 800efe2:	1b5e      	subs	r6, r3, r5
 800efe4:	60a3      	str	r3, [r4, #8]
 800efe6:	6923      	ldr	r3, [r4, #16]
 800efe8:	4620      	mov	r0, r4
 800efea:	f1c6 0804 	rsb	r8, r6, #4
 800efee:	4433      	add	r3, r6
 800eff0:	4641      	mov	r1, r8
 800eff2:	6123      	str	r3, [r4, #16]
 800eff4:	f000 faa8 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800eff8:	2800      	cmp	r0, #0
 800effa:	d04c      	beq.n	800f096 <ucdr_serialize_int32_t+0xe2>
 800effc:	7d23      	ldrb	r3, [r4, #20]
 800effe:	2b01      	cmp	r3, #1
 800f000:	d063      	beq.n	800f0ca <ucdr_serialize_int32_t+0x116>
 800f002:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f006:	702b      	strb	r3, [r5, #0]
 800f008:	2e00      	cmp	r6, #0
 800f00a:	d051      	beq.n	800f0b0 <ucdr_serialize_int32_t+0xfc>
 800f00c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f010:	2e01      	cmp	r6, #1
 800f012:	706b      	strb	r3, [r5, #1]
 800f014:	d050      	beq.n	800f0b8 <ucdr_serialize_int32_t+0x104>
 800f016:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f01a:	2e02      	cmp	r6, #2
 800f01c:	70ab      	strb	r3, [r5, #2]
 800f01e:	d04f      	beq.n	800f0c0 <ucdr_serialize_int32_t+0x10c>
 800f020:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f024:	70eb      	strb	r3, [r5, #3]
 800f026:	6923      	ldr	r3, [r4, #16]
 800f028:	2104      	movs	r1, #4
 800f02a:	68a2      	ldr	r2, [r4, #8]
 800f02c:	3304      	adds	r3, #4
 800f02e:	7da0      	ldrb	r0, [r4, #22]
 800f030:	4442      	add	r2, r8
 800f032:	7561      	strb	r1, [r4, #21]
 800f034:	1b9e      	subs	r6, r3, r6
 800f036:	f080 0001 	eor.w	r0, r0, #1
 800f03a:	60a2      	str	r2, [r4, #8]
 800f03c:	6126      	str	r6, [r4, #16]
 800f03e:	b002      	add	sp, #8
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f044:	2104      	movs	r1, #4
 800f046:	4620      	mov	r0, r4
 800f048:	f000 fa7e 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800f04c:	b1d0      	cbz	r0, 800f084 <ucdr_serialize_int32_t+0xd0>
 800f04e:	7d23      	ldrb	r3, [r4, #20]
 800f050:	2b01      	cmp	r3, #1
 800f052:	68a3      	ldr	r3, [r4, #8]
 800f054:	d01c      	beq.n	800f090 <ucdr_serialize_int32_t+0xdc>
 800f056:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f05a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f05e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f062:	7018      	strb	r0, [r3, #0]
 800f064:	68a3      	ldr	r3, [r4, #8]
 800f066:	705a      	strb	r2, [r3, #1]
 800f068:	68a3      	ldr	r3, [r4, #8]
 800f06a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f06e:	7099      	strb	r1, [r3, #2]
 800f070:	68a3      	ldr	r3, [r4, #8]
 800f072:	70da      	strb	r2, [r3, #3]
 800f074:	2104      	movs	r1, #4
 800f076:	68a2      	ldr	r2, [r4, #8]
 800f078:	6923      	ldr	r3, [r4, #16]
 800f07a:	440a      	add	r2, r1
 800f07c:	7561      	strb	r1, [r4, #21]
 800f07e:	440b      	add	r3, r1
 800f080:	60a2      	str	r2, [r4, #8]
 800f082:	6123      	str	r3, [r4, #16]
 800f084:	7da0      	ldrb	r0, [r4, #22]
 800f086:	f080 0001 	eor.w	r0, r0, #1
 800f08a:	b002      	add	sp, #8
 800f08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f090:	9a01      	ldr	r2, [sp, #4]
 800f092:	601a      	str	r2, [r3, #0]
 800f094:	e7ee      	b.n	800f074 <ucdr_serialize_int32_t+0xc0>
 800f096:	68a2      	ldr	r2, [r4, #8]
 800f098:	6923      	ldr	r3, [r4, #16]
 800f09a:	7da0      	ldrb	r0, [r4, #22]
 800f09c:	1b92      	subs	r2, r2, r6
 800f09e:	1b9b      	subs	r3, r3, r6
 800f0a0:	7567      	strb	r7, [r4, #21]
 800f0a2:	f080 0001 	eor.w	r0, r0, #1
 800f0a6:	60a2      	str	r2, [r4, #8]
 800f0a8:	6123      	str	r3, [r4, #16]
 800f0aa:	b002      	add	sp, #8
 800f0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0b0:	68a3      	ldr	r3, [r4, #8]
 800f0b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0b6:	701a      	strb	r2, [r3, #0]
 800f0b8:	68a3      	ldr	r3, [r4, #8]
 800f0ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f0be:	701a      	strb	r2, [r3, #0]
 800f0c0:	68a3      	ldr	r3, [r4, #8]
 800f0c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f0c6:	701a      	strb	r2, [r3, #0]
 800f0c8:	e7ad      	b.n	800f026 <ucdr_serialize_int32_t+0x72>
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	ad01      	add	r5, sp, #4
 800f0ce:	4632      	mov	r2, r6
 800f0d0:	4629      	mov	r1, r5
 800f0d2:	f00c fbf8 	bl	801b8c6 <memcpy>
 800f0d6:	4642      	mov	r2, r8
 800f0d8:	19a9      	adds	r1, r5, r6
 800f0da:	68a0      	ldr	r0, [r4, #8]
 800f0dc:	f00c fbf3 	bl	801b8c6 <memcpy>
 800f0e0:	e7a1      	b.n	800f026 <ucdr_serialize_int32_t+0x72>
 800f0e2:	bf00      	nop

0800f0e4 <ucdr_deserialize_int32_t>:
 800f0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	460d      	mov	r5, r1
 800f0ec:	2104      	movs	r1, #4
 800f0ee:	f000 fa7f 	bl	800f5f0 <ucdr_buffer_alignment>
 800f0f2:	4601      	mov	r1, r0
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f0fa:	f000 fac1 	bl	800f680 <ucdr_advance_buffer>
 800f0fe:	2104      	movs	r1, #4
 800f100:	4620      	mov	r0, r4
 800f102:	f000 fa15 	bl	800f530 <ucdr_check_buffer_available_for>
 800f106:	2800      	cmp	r0, #0
 800f108:	d138      	bne.n	800f17c <ucdr_deserialize_int32_t+0x98>
 800f10a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f10e:	42b7      	cmp	r7, r6
 800f110:	d92f      	bls.n	800f172 <ucdr_deserialize_int32_t+0x8e>
 800f112:	6923      	ldr	r3, [r4, #16]
 800f114:	4620      	mov	r0, r4
 800f116:	60a7      	str	r7, [r4, #8]
 800f118:	1bbf      	subs	r7, r7, r6
 800f11a:	443b      	add	r3, r7
 800f11c:	f1c7 0904 	rsb	r9, r7, #4
 800f120:	6123      	str	r3, [r4, #16]
 800f122:	4649      	mov	r1, r9
 800f124:	f000 fa10 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800f128:	2800      	cmp	r0, #0
 800f12a:	d046      	beq.n	800f1ba <ucdr_deserialize_int32_t+0xd6>
 800f12c:	7d23      	ldrb	r3, [r4, #20]
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d05c      	beq.n	800f1ec <ucdr_deserialize_int32_t+0x108>
 800f132:	78f3      	ldrb	r3, [r6, #3]
 800f134:	702b      	strb	r3, [r5, #0]
 800f136:	2f00      	cmp	r7, #0
 800f138:	d04c      	beq.n	800f1d4 <ucdr_deserialize_int32_t+0xf0>
 800f13a:	78b3      	ldrb	r3, [r6, #2]
 800f13c:	2f01      	cmp	r7, #1
 800f13e:	706b      	strb	r3, [r5, #1]
 800f140:	f105 0302 	add.w	r3, r5, #2
 800f144:	d04a      	beq.n	800f1dc <ucdr_deserialize_int32_t+0xf8>
 800f146:	7873      	ldrb	r3, [r6, #1]
 800f148:	2f02      	cmp	r7, #2
 800f14a:	70ab      	strb	r3, [r5, #2]
 800f14c:	f105 0303 	add.w	r3, r5, #3
 800f150:	d048      	beq.n	800f1e4 <ucdr_deserialize_int32_t+0x100>
 800f152:	7833      	ldrb	r3, [r6, #0]
 800f154:	70eb      	strb	r3, [r5, #3]
 800f156:	6923      	ldr	r3, [r4, #16]
 800f158:	2104      	movs	r1, #4
 800f15a:	68a2      	ldr	r2, [r4, #8]
 800f15c:	3304      	adds	r3, #4
 800f15e:	7da0      	ldrb	r0, [r4, #22]
 800f160:	444a      	add	r2, r9
 800f162:	7561      	strb	r1, [r4, #21]
 800f164:	1bdb      	subs	r3, r3, r7
 800f166:	f080 0001 	eor.w	r0, r0, #1
 800f16a:	60a2      	str	r2, [r4, #8]
 800f16c:	6123      	str	r3, [r4, #16]
 800f16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f172:	2104      	movs	r1, #4
 800f174:	4620      	mov	r0, r4
 800f176:	f000 f9e7 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800f17a:	b1b0      	cbz	r0, 800f1aa <ucdr_deserialize_int32_t+0xc6>
 800f17c:	7d23      	ldrb	r3, [r4, #20]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	68a3      	ldr	r3, [r4, #8]
 800f182:	d017      	beq.n	800f1b4 <ucdr_deserialize_int32_t+0xd0>
 800f184:	78db      	ldrb	r3, [r3, #3]
 800f186:	702b      	strb	r3, [r5, #0]
 800f188:	68a3      	ldr	r3, [r4, #8]
 800f18a:	789b      	ldrb	r3, [r3, #2]
 800f18c:	706b      	strb	r3, [r5, #1]
 800f18e:	68a3      	ldr	r3, [r4, #8]
 800f190:	785b      	ldrb	r3, [r3, #1]
 800f192:	70ab      	strb	r3, [r5, #2]
 800f194:	68a3      	ldr	r3, [r4, #8]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	70eb      	strb	r3, [r5, #3]
 800f19a:	2104      	movs	r1, #4
 800f19c:	68a2      	ldr	r2, [r4, #8]
 800f19e:	6923      	ldr	r3, [r4, #16]
 800f1a0:	440a      	add	r2, r1
 800f1a2:	7561      	strb	r1, [r4, #21]
 800f1a4:	440b      	add	r3, r1
 800f1a6:	60a2      	str	r2, [r4, #8]
 800f1a8:	6123      	str	r3, [r4, #16]
 800f1aa:	7da0      	ldrb	r0, [r4, #22]
 800f1ac:	f080 0001 	eor.w	r0, r0, #1
 800f1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	602b      	str	r3, [r5, #0]
 800f1b8:	e7ef      	b.n	800f19a <ucdr_deserialize_int32_t+0xb6>
 800f1ba:	68a2      	ldr	r2, [r4, #8]
 800f1bc:	6923      	ldr	r3, [r4, #16]
 800f1be:	1bd2      	subs	r2, r2, r7
 800f1c0:	7da0      	ldrb	r0, [r4, #22]
 800f1c2:	1bdb      	subs	r3, r3, r7
 800f1c4:	f884 8015 	strb.w	r8, [r4, #21]
 800f1c8:	f080 0001 	eor.w	r0, r0, #1
 800f1cc:	60a2      	str	r2, [r4, #8]
 800f1ce:	6123      	str	r3, [r4, #16]
 800f1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d4:	68a3      	ldr	r3, [r4, #8]
 800f1d6:	789b      	ldrb	r3, [r3, #2]
 800f1d8:	706b      	strb	r3, [r5, #1]
 800f1da:	1cab      	adds	r3, r5, #2
 800f1dc:	68a2      	ldr	r2, [r4, #8]
 800f1de:	7852      	ldrb	r2, [r2, #1]
 800f1e0:	f803 2b01 	strb.w	r2, [r3], #1
 800f1e4:	68a2      	ldr	r2, [r4, #8]
 800f1e6:	7812      	ldrb	r2, [r2, #0]
 800f1e8:	701a      	strb	r2, [r3, #0]
 800f1ea:	e7b4      	b.n	800f156 <ucdr_deserialize_int32_t+0x72>
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	463a      	mov	r2, r7
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	f00c fb68 	bl	801b8c6 <memcpy>
 800f1f6:	464a      	mov	r2, r9
 800f1f8:	19e8      	adds	r0, r5, r7
 800f1fa:	68a1      	ldr	r1, [r4, #8]
 800f1fc:	f00c fb63 	bl	801b8c6 <memcpy>
 800f200:	e7a9      	b.n	800f156 <ucdr_deserialize_int32_t+0x72>
 800f202:	bf00      	nop

0800f204 <ucdr_serialize_double>:
 800f204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f208:	4604      	mov	r4, r0
 800f20a:	b082      	sub	sp, #8
 800f20c:	2108      	movs	r1, #8
 800f20e:	ed8d 0b00 	vstr	d0, [sp]
 800f212:	f000 f9ed 	bl	800f5f0 <ucdr_buffer_alignment>
 800f216:	4601      	mov	r1, r0
 800f218:	4620      	mov	r0, r4
 800f21a:	7d67      	ldrb	r7, [r4, #21]
 800f21c:	f000 fa30 	bl	800f680 <ucdr_advance_buffer>
 800f220:	2108      	movs	r1, #8
 800f222:	4620      	mov	r0, r4
 800f224:	f000 f984 	bl	800f530 <ucdr_check_buffer_available_for>
 800f228:	2800      	cmp	r0, #0
 800f22a:	d14e      	bne.n	800f2ca <ucdr_serialize_double+0xc6>
 800f22c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f230:	42ab      	cmp	r3, r5
 800f232:	d945      	bls.n	800f2c0 <ucdr_serialize_double+0xbc>
 800f234:	1b5e      	subs	r6, r3, r5
 800f236:	60a3      	str	r3, [r4, #8]
 800f238:	6923      	ldr	r3, [r4, #16]
 800f23a:	4620      	mov	r0, r4
 800f23c:	f1c6 0808 	rsb	r8, r6, #8
 800f240:	4433      	add	r3, r6
 800f242:	4641      	mov	r1, r8
 800f244:	6123      	str	r3, [r4, #16]
 800f246:	f000 f97f 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d074      	beq.n	800f338 <ucdr_serialize_double+0x134>
 800f24e:	7d23      	ldrb	r3, [r4, #20]
 800f250:	2b01      	cmp	r3, #1
 800f252:	f000 809b 	beq.w	800f38c <ucdr_serialize_double+0x188>
 800f256:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f25a:	702b      	strb	r3, [r5, #0]
 800f25c:	2e00      	cmp	r6, #0
 800f25e:	d078      	beq.n	800f352 <ucdr_serialize_double+0x14e>
 800f260:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f264:	2e01      	cmp	r6, #1
 800f266:	706b      	strb	r3, [r5, #1]
 800f268:	d077      	beq.n	800f35a <ucdr_serialize_double+0x156>
 800f26a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f26e:	2e02      	cmp	r6, #2
 800f270:	70ab      	strb	r3, [r5, #2]
 800f272:	d076      	beq.n	800f362 <ucdr_serialize_double+0x15e>
 800f274:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f278:	2e03      	cmp	r6, #3
 800f27a:	70eb      	strb	r3, [r5, #3]
 800f27c:	d075      	beq.n	800f36a <ucdr_serialize_double+0x166>
 800f27e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f282:	2e04      	cmp	r6, #4
 800f284:	712b      	strb	r3, [r5, #4]
 800f286:	d074      	beq.n	800f372 <ucdr_serialize_double+0x16e>
 800f288:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f28c:	2e05      	cmp	r6, #5
 800f28e:	716b      	strb	r3, [r5, #5]
 800f290:	d073      	beq.n	800f37a <ucdr_serialize_double+0x176>
 800f292:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f296:	2e06      	cmp	r6, #6
 800f298:	71ab      	strb	r3, [r5, #6]
 800f29a:	d072      	beq.n	800f382 <ucdr_serialize_double+0x17e>
 800f29c:	f89d 3000 	ldrb.w	r3, [sp]
 800f2a0:	71eb      	strb	r3, [r5, #7]
 800f2a2:	6923      	ldr	r3, [r4, #16]
 800f2a4:	2108      	movs	r1, #8
 800f2a6:	68a2      	ldr	r2, [r4, #8]
 800f2a8:	3308      	adds	r3, #8
 800f2aa:	7da0      	ldrb	r0, [r4, #22]
 800f2ac:	4442      	add	r2, r8
 800f2ae:	7561      	strb	r1, [r4, #21]
 800f2b0:	1b9e      	subs	r6, r3, r6
 800f2b2:	f080 0001 	eor.w	r0, r0, #1
 800f2b6:	60a2      	str	r2, [r4, #8]
 800f2b8:	6126      	str	r6, [r4, #16]
 800f2ba:	b002      	add	sp, #8
 800f2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c0:	2108      	movs	r1, #8
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f000 f940 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800f2c8:	b350      	cbz	r0, 800f320 <ucdr_serialize_double+0x11c>
 800f2ca:	7d23      	ldrb	r3, [r4, #20]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d02d      	beq.n	800f32c <ucdr_serialize_double+0x128>
 800f2d0:	68a3      	ldr	r3, [r4, #8]
 800f2d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f2d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2da:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f2de:	7018      	strb	r0, [r3, #0]
 800f2e0:	68a3      	ldr	r3, [r4, #8]
 800f2e2:	705a      	strb	r2, [r3, #1]
 800f2e4:	68a3      	ldr	r3, [r4, #8]
 800f2e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f2ea:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f2ee:	7099      	strb	r1, [r3, #2]
 800f2f0:	68a3      	ldr	r3, [r4, #8]
 800f2f2:	70da      	strb	r2, [r3, #3]
 800f2f4:	68a3      	ldr	r3, [r4, #8]
 800f2f6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f2fa:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f2fe:	7118      	strb	r0, [r3, #4]
 800f300:	68a3      	ldr	r3, [r4, #8]
 800f302:	715a      	strb	r2, [r3, #5]
 800f304:	68a3      	ldr	r3, [r4, #8]
 800f306:	f89d 2000 	ldrb.w	r2, [sp]
 800f30a:	7199      	strb	r1, [r3, #6]
 800f30c:	68a3      	ldr	r3, [r4, #8]
 800f30e:	71da      	strb	r2, [r3, #7]
 800f310:	2108      	movs	r1, #8
 800f312:	68a2      	ldr	r2, [r4, #8]
 800f314:	6923      	ldr	r3, [r4, #16]
 800f316:	440a      	add	r2, r1
 800f318:	7561      	strb	r1, [r4, #21]
 800f31a:	440b      	add	r3, r1
 800f31c:	60a2      	str	r2, [r4, #8]
 800f31e:	6123      	str	r3, [r4, #16]
 800f320:	7da0      	ldrb	r0, [r4, #22]
 800f322:	f080 0001 	eor.w	r0, r0, #1
 800f326:	b002      	add	sp, #8
 800f328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f32c:	466b      	mov	r3, sp
 800f32e:	68a2      	ldr	r2, [r4, #8]
 800f330:	cb03      	ldmia	r3!, {r0, r1}
 800f332:	6010      	str	r0, [r2, #0]
 800f334:	6051      	str	r1, [r2, #4]
 800f336:	e7eb      	b.n	800f310 <ucdr_serialize_double+0x10c>
 800f338:	68a2      	ldr	r2, [r4, #8]
 800f33a:	6923      	ldr	r3, [r4, #16]
 800f33c:	7da0      	ldrb	r0, [r4, #22]
 800f33e:	1b92      	subs	r2, r2, r6
 800f340:	1b9b      	subs	r3, r3, r6
 800f342:	7567      	strb	r7, [r4, #21]
 800f344:	f080 0001 	eor.w	r0, r0, #1
 800f348:	60a2      	str	r2, [r4, #8]
 800f34a:	6123      	str	r3, [r4, #16]
 800f34c:	b002      	add	sp, #8
 800f34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f352:	68a3      	ldr	r3, [r4, #8]
 800f354:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f358:	701a      	strb	r2, [r3, #0]
 800f35a:	68a3      	ldr	r3, [r4, #8]
 800f35c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f360:	701a      	strb	r2, [r3, #0]
 800f362:	68a3      	ldr	r3, [r4, #8]
 800f364:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f368:	701a      	strb	r2, [r3, #0]
 800f36a:	68a3      	ldr	r3, [r4, #8]
 800f36c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f370:	701a      	strb	r2, [r3, #0]
 800f372:	68a3      	ldr	r3, [r4, #8]
 800f374:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f378:	701a      	strb	r2, [r3, #0]
 800f37a:	68a3      	ldr	r3, [r4, #8]
 800f37c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f380:	701a      	strb	r2, [r3, #0]
 800f382:	68a3      	ldr	r3, [r4, #8]
 800f384:	f89d 2000 	ldrb.w	r2, [sp]
 800f388:	701a      	strb	r2, [r3, #0]
 800f38a:	e78a      	b.n	800f2a2 <ucdr_serialize_double+0x9e>
 800f38c:	4628      	mov	r0, r5
 800f38e:	466d      	mov	r5, sp
 800f390:	4632      	mov	r2, r6
 800f392:	4629      	mov	r1, r5
 800f394:	f00c fa97 	bl	801b8c6 <memcpy>
 800f398:	4642      	mov	r2, r8
 800f39a:	19a9      	adds	r1, r5, r6
 800f39c:	68a0      	ldr	r0, [r4, #8]
 800f39e:	f00c fa92 	bl	801b8c6 <memcpy>
 800f3a2:	e77e      	b.n	800f2a2 <ucdr_serialize_double+0x9e>

0800f3a4 <ucdr_deserialize_double>:
 800f3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3a8:	4604      	mov	r4, r0
 800f3aa:	460d      	mov	r5, r1
 800f3ac:	2108      	movs	r1, #8
 800f3ae:	f000 f91f 	bl	800f5f0 <ucdr_buffer_alignment>
 800f3b2:	4601      	mov	r1, r0
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f3ba:	f000 f961 	bl	800f680 <ucdr_advance_buffer>
 800f3be:	2108      	movs	r1, #8
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f000 f8b5 	bl	800f530 <ucdr_check_buffer_available_for>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	d151      	bne.n	800f46e <ucdr_deserialize_double+0xca>
 800f3ca:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f3ce:	42be      	cmp	r6, r7
 800f3d0:	d948      	bls.n	800f464 <ucdr_deserialize_double+0xc0>
 800f3d2:	6923      	ldr	r3, [r4, #16]
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	60a6      	str	r6, [r4, #8]
 800f3d8:	1bf6      	subs	r6, r6, r7
 800f3da:	4433      	add	r3, r6
 800f3dc:	f1c6 0908 	rsb	r9, r6, #8
 800f3e0:	6123      	str	r3, [r4, #16]
 800f3e2:	4649      	mov	r1, r9
 800f3e4:	f000 f8b0 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	d06d      	beq.n	800f4c8 <ucdr_deserialize_double+0x124>
 800f3ec:	7d23      	ldrb	r3, [r4, #20]
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	f000 8093 	beq.w	800f51a <ucdr_deserialize_double+0x176>
 800f3f4:	79fb      	ldrb	r3, [r7, #7]
 800f3f6:	702b      	strb	r3, [r5, #0]
 800f3f8:	2e00      	cmp	r6, #0
 800f3fa:	d072      	beq.n	800f4e2 <ucdr_deserialize_double+0x13e>
 800f3fc:	79bb      	ldrb	r3, [r7, #6]
 800f3fe:	2e01      	cmp	r6, #1
 800f400:	706b      	strb	r3, [r5, #1]
 800f402:	f105 0302 	add.w	r3, r5, #2
 800f406:	d070      	beq.n	800f4ea <ucdr_deserialize_double+0x146>
 800f408:	797b      	ldrb	r3, [r7, #5]
 800f40a:	2e02      	cmp	r6, #2
 800f40c:	70ab      	strb	r3, [r5, #2]
 800f40e:	f105 0303 	add.w	r3, r5, #3
 800f412:	d06e      	beq.n	800f4f2 <ucdr_deserialize_double+0x14e>
 800f414:	793b      	ldrb	r3, [r7, #4]
 800f416:	2e03      	cmp	r6, #3
 800f418:	70eb      	strb	r3, [r5, #3]
 800f41a:	f105 0304 	add.w	r3, r5, #4
 800f41e:	d06c      	beq.n	800f4fa <ucdr_deserialize_double+0x156>
 800f420:	78fb      	ldrb	r3, [r7, #3]
 800f422:	2e04      	cmp	r6, #4
 800f424:	712b      	strb	r3, [r5, #4]
 800f426:	f105 0305 	add.w	r3, r5, #5
 800f42a:	d06a      	beq.n	800f502 <ucdr_deserialize_double+0x15e>
 800f42c:	78bb      	ldrb	r3, [r7, #2]
 800f42e:	2e05      	cmp	r6, #5
 800f430:	716b      	strb	r3, [r5, #5]
 800f432:	f105 0306 	add.w	r3, r5, #6
 800f436:	d068      	beq.n	800f50a <ucdr_deserialize_double+0x166>
 800f438:	787b      	ldrb	r3, [r7, #1]
 800f43a:	2e06      	cmp	r6, #6
 800f43c:	71ab      	strb	r3, [r5, #6]
 800f43e:	f105 0307 	add.w	r3, r5, #7
 800f442:	d066      	beq.n	800f512 <ucdr_deserialize_double+0x16e>
 800f444:	783b      	ldrb	r3, [r7, #0]
 800f446:	71eb      	strb	r3, [r5, #7]
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	2108      	movs	r1, #8
 800f44c:	68a2      	ldr	r2, [r4, #8]
 800f44e:	3308      	adds	r3, #8
 800f450:	7da0      	ldrb	r0, [r4, #22]
 800f452:	444a      	add	r2, r9
 800f454:	7561      	strb	r1, [r4, #21]
 800f456:	1b9e      	subs	r6, r3, r6
 800f458:	f080 0001 	eor.w	r0, r0, #1
 800f45c:	60a2      	str	r2, [r4, #8]
 800f45e:	6126      	str	r6, [r4, #16]
 800f460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f464:	2108      	movs	r1, #8
 800f466:	4620      	mov	r0, r4
 800f468:	f000 f86e 	bl	800f548 <ucdr_check_final_buffer_behavior>
 800f46c:	b310      	cbz	r0, 800f4b4 <ucdr_deserialize_double+0x110>
 800f46e:	7d23      	ldrb	r3, [r4, #20]
 800f470:	2b01      	cmp	r3, #1
 800f472:	68a3      	ldr	r3, [r4, #8]
 800f474:	d023      	beq.n	800f4be <ucdr_deserialize_double+0x11a>
 800f476:	79db      	ldrb	r3, [r3, #7]
 800f478:	702b      	strb	r3, [r5, #0]
 800f47a:	68a3      	ldr	r3, [r4, #8]
 800f47c:	799b      	ldrb	r3, [r3, #6]
 800f47e:	706b      	strb	r3, [r5, #1]
 800f480:	68a3      	ldr	r3, [r4, #8]
 800f482:	795b      	ldrb	r3, [r3, #5]
 800f484:	70ab      	strb	r3, [r5, #2]
 800f486:	68a3      	ldr	r3, [r4, #8]
 800f488:	791b      	ldrb	r3, [r3, #4]
 800f48a:	70eb      	strb	r3, [r5, #3]
 800f48c:	68a3      	ldr	r3, [r4, #8]
 800f48e:	78db      	ldrb	r3, [r3, #3]
 800f490:	712b      	strb	r3, [r5, #4]
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	789b      	ldrb	r3, [r3, #2]
 800f496:	716b      	strb	r3, [r5, #5]
 800f498:	68a3      	ldr	r3, [r4, #8]
 800f49a:	785b      	ldrb	r3, [r3, #1]
 800f49c:	71ab      	strb	r3, [r5, #6]
 800f49e:	68a3      	ldr	r3, [r4, #8]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	71eb      	strb	r3, [r5, #7]
 800f4a4:	2108      	movs	r1, #8
 800f4a6:	68a2      	ldr	r2, [r4, #8]
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	440a      	add	r2, r1
 800f4ac:	7561      	strb	r1, [r4, #21]
 800f4ae:	440b      	add	r3, r1
 800f4b0:	60a2      	str	r2, [r4, #8]
 800f4b2:	6123      	str	r3, [r4, #16]
 800f4b4:	7da0      	ldrb	r0, [r4, #22]
 800f4b6:	f080 0001 	eor.w	r0, r0, #1
 800f4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	602a      	str	r2, [r5, #0]
 800f4c4:	606b      	str	r3, [r5, #4]
 800f4c6:	e7ed      	b.n	800f4a4 <ucdr_deserialize_double+0x100>
 800f4c8:	68a2      	ldr	r2, [r4, #8]
 800f4ca:	6923      	ldr	r3, [r4, #16]
 800f4cc:	1b92      	subs	r2, r2, r6
 800f4ce:	7da0      	ldrb	r0, [r4, #22]
 800f4d0:	1b9b      	subs	r3, r3, r6
 800f4d2:	f884 8015 	strb.w	r8, [r4, #21]
 800f4d6:	f080 0001 	eor.w	r0, r0, #1
 800f4da:	60a2      	str	r2, [r4, #8]
 800f4dc:	6123      	str	r3, [r4, #16]
 800f4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e2:	68a3      	ldr	r3, [r4, #8]
 800f4e4:	799b      	ldrb	r3, [r3, #6]
 800f4e6:	706b      	strb	r3, [r5, #1]
 800f4e8:	1cab      	adds	r3, r5, #2
 800f4ea:	68a2      	ldr	r2, [r4, #8]
 800f4ec:	7952      	ldrb	r2, [r2, #5]
 800f4ee:	f803 2b01 	strb.w	r2, [r3], #1
 800f4f2:	68a2      	ldr	r2, [r4, #8]
 800f4f4:	7912      	ldrb	r2, [r2, #4]
 800f4f6:	f803 2b01 	strb.w	r2, [r3], #1
 800f4fa:	68a2      	ldr	r2, [r4, #8]
 800f4fc:	78d2      	ldrb	r2, [r2, #3]
 800f4fe:	f803 2b01 	strb.w	r2, [r3], #1
 800f502:	68a2      	ldr	r2, [r4, #8]
 800f504:	7892      	ldrb	r2, [r2, #2]
 800f506:	f803 2b01 	strb.w	r2, [r3], #1
 800f50a:	68a2      	ldr	r2, [r4, #8]
 800f50c:	7852      	ldrb	r2, [r2, #1]
 800f50e:	f803 2b01 	strb.w	r2, [r3], #1
 800f512:	68a2      	ldr	r2, [r4, #8]
 800f514:	7812      	ldrb	r2, [r2, #0]
 800f516:	701a      	strb	r2, [r3, #0]
 800f518:	e796      	b.n	800f448 <ucdr_deserialize_double+0xa4>
 800f51a:	4639      	mov	r1, r7
 800f51c:	4632      	mov	r2, r6
 800f51e:	4628      	mov	r0, r5
 800f520:	f00c f9d1 	bl	801b8c6 <memcpy>
 800f524:	464a      	mov	r2, r9
 800f526:	19a8      	adds	r0, r5, r6
 800f528:	68a1      	ldr	r1, [r4, #8]
 800f52a:	f00c f9cc 	bl	801b8c6 <memcpy>
 800f52e:	e78b      	b.n	800f448 <ucdr_deserialize_double+0xa4>

0800f530 <ucdr_check_buffer_available_for>:
 800f530:	7d83      	ldrb	r3, [r0, #22]
 800f532:	b93b      	cbnz	r3, 800f544 <ucdr_check_buffer_available_for+0x14>
 800f534:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f538:	4419      	add	r1, r3
 800f53a:	4288      	cmp	r0, r1
 800f53c:	bf34      	ite	cc
 800f53e:	2000      	movcc	r0, #0
 800f540:	2001      	movcs	r0, #1
 800f542:	4770      	bx	lr
 800f544:	2000      	movs	r0, #0
 800f546:	4770      	bx	lr

0800f548 <ucdr_check_final_buffer_behavior>:
 800f548:	7d83      	ldrb	r3, [r0, #22]
 800f54a:	b943      	cbnz	r3, 800f55e <ucdr_check_final_buffer_behavior+0x16>
 800f54c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f550:	b510      	push	{r4, lr}
 800f552:	4291      	cmp	r1, r2
 800f554:	4604      	mov	r4, r0
 800f556:	d205      	bcs.n	800f564 <ucdr_check_final_buffer_behavior+0x1c>
 800f558:	2301      	movs	r3, #1
 800f55a:	4618      	mov	r0, r3
 800f55c:	bd10      	pop	{r4, pc}
 800f55e:	2300      	movs	r3, #0
 800f560:	4618      	mov	r0, r3
 800f562:	4770      	bx	lr
 800f564:	6982      	ldr	r2, [r0, #24]
 800f566:	b13a      	cbz	r2, 800f578 <ucdr_check_final_buffer_behavior+0x30>
 800f568:	69c1      	ldr	r1, [r0, #28]
 800f56a:	4790      	blx	r2
 800f56c:	f080 0301 	eor.w	r3, r0, #1
 800f570:	75a0      	strb	r0, [r4, #22]
 800f572:	b2db      	uxtb	r3, r3
 800f574:	4618      	mov	r0, r3
 800f576:	bd10      	pop	{r4, pc}
 800f578:	2001      	movs	r0, #1
 800f57a:	75a0      	strb	r0, [r4, #22]
 800f57c:	e7fa      	b.n	800f574 <ucdr_check_final_buffer_behavior+0x2c>
 800f57e:	bf00      	nop

0800f580 <ucdr_set_on_full_buffer_callback>:
 800f580:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f584:	4770      	bx	lr
 800f586:	bf00      	nop

0800f588 <ucdr_init_buffer_origin_offset_endian>:
 800f588:	b410      	push	{r4}
 800f58a:	9c01      	ldr	r4, [sp, #4]
 800f58c:	440a      	add	r2, r1
 800f58e:	6001      	str	r1, [r0, #0]
 800f590:	6042      	str	r2, [r0, #4]
 800f592:	190a      	adds	r2, r1, r4
 800f594:	441c      	add	r4, r3
 800f596:	6082      	str	r2, [r0, #8]
 800f598:	2200      	movs	r2, #0
 800f59a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f59e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f5a2:	7542      	strb	r2, [r0, #21]
 800f5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5a8:	7582      	strb	r2, [r0, #22]
 800f5aa:	7503      	strb	r3, [r0, #20]
 800f5ac:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop

0800f5b4 <ucdr_init_buffer_origin_offset>:
 800f5b4:	b510      	push	{r4, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	9c04      	ldr	r4, [sp, #16]
 800f5ba:	9400      	str	r4, [sp, #0]
 800f5bc:	2401      	movs	r4, #1
 800f5be:	9401      	str	r4, [sp, #4]
 800f5c0:	f7ff ffe2 	bl	800f588 <ucdr_init_buffer_origin_offset_endian>
 800f5c4:	b002      	add	sp, #8
 800f5c6:	bd10      	pop	{r4, pc}

0800f5c8 <ucdr_init_buffer_origin>:
 800f5c8:	b510      	push	{r4, lr}
 800f5ca:	2400      	movs	r4, #0
 800f5cc:	b082      	sub	sp, #8
 800f5ce:	9400      	str	r4, [sp, #0]
 800f5d0:	f7ff fff0 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 800f5d4:	b002      	add	sp, #8
 800f5d6:	bd10      	pop	{r4, pc}

0800f5d8 <ucdr_init_buffer>:
 800f5d8:	2300      	movs	r3, #0
 800f5da:	f7ff bff5 	b.w	800f5c8 <ucdr_init_buffer_origin>
 800f5de:	bf00      	nop

0800f5e0 <ucdr_alignment>:
 800f5e0:	fbb0 f2f1 	udiv	r2, r0, r1
 800f5e4:	fb02 0011 	mls	r0, r2, r1, r0
 800f5e8:	1e4b      	subs	r3, r1, #1
 800f5ea:	1a08      	subs	r0, r1, r0
 800f5ec:	4018      	ands	r0, r3
 800f5ee:	4770      	bx	lr

0800f5f0 <ucdr_buffer_alignment>:
 800f5f0:	7d43      	ldrb	r3, [r0, #21]
 800f5f2:	428b      	cmp	r3, r1
 800f5f4:	d209      	bcs.n	800f60a <ucdr_buffer_alignment+0x1a>
 800f5f6:	6903      	ldr	r3, [r0, #16]
 800f5f8:	1e4a      	subs	r2, r1, #1
 800f5fa:	fbb3 f0f1 	udiv	r0, r3, r1
 800f5fe:	fb01 3010 	mls	r0, r1, r0, r3
 800f602:	1a09      	subs	r1, r1, r0
 800f604:	ea01 0002 	and.w	r0, r1, r2
 800f608:	4770      	bx	lr
 800f60a:	2000      	movs	r0, #0
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop

0800f610 <ucdr_align_to>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4604      	mov	r4, r0
 800f614:	460d      	mov	r5, r1
 800f616:	f7ff ffeb 	bl	800f5f0 <ucdr_buffer_alignment>
 800f61a:	68a3      	ldr	r3, [r4, #8]
 800f61c:	7565      	strb	r5, [r4, #21]
 800f61e:	181a      	adds	r2, r3, r0
 800f620:	6923      	ldr	r3, [r4, #16]
 800f622:	4418      	add	r0, r3
 800f624:	6863      	ldr	r3, [r4, #4]
 800f626:	4293      	cmp	r3, r2
 800f628:	6120      	str	r0, [r4, #16]
 800f62a:	bf28      	it	cs
 800f62c:	4613      	movcs	r3, r2
 800f62e:	60a3      	str	r3, [r4, #8]
 800f630:	bd38      	pop	{r3, r4, r5, pc}
 800f632:	bf00      	nop

0800f634 <ucdr_buffer_length>:
 800f634:	6882      	ldr	r2, [r0, #8]
 800f636:	6800      	ldr	r0, [r0, #0]
 800f638:	1a10      	subs	r0, r2, r0
 800f63a:	4770      	bx	lr

0800f63c <ucdr_buffer_remaining>:
 800f63c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f640:	1a10      	subs	r0, r2, r0
 800f642:	4770      	bx	lr

0800f644 <ucdr_check_final_buffer_behavior_array>:
 800f644:	b538      	push	{r3, r4, r5, lr}
 800f646:	7d83      	ldrb	r3, [r0, #22]
 800f648:	b9a3      	cbnz	r3, 800f674 <ucdr_check_final_buffer_behavior_array+0x30>
 800f64a:	4604      	mov	r4, r0
 800f64c:	460d      	mov	r5, r1
 800f64e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f652:	429a      	cmp	r2, r3
 800f654:	d300      	bcc.n	800f658 <ucdr_check_final_buffer_behavior_array+0x14>
 800f656:	b931      	cbnz	r1, 800f666 <ucdr_check_final_buffer_behavior_array+0x22>
 800f658:	4620      	mov	r0, r4
 800f65a:	f7ff ffef 	bl	800f63c <ucdr_buffer_remaining>
 800f65e:	42a8      	cmp	r0, r5
 800f660:	bf28      	it	cs
 800f662:	4628      	movcs	r0, r5
 800f664:	bd38      	pop	{r3, r4, r5, pc}
 800f666:	6983      	ldr	r3, [r0, #24]
 800f668:	b133      	cbz	r3, 800f678 <ucdr_check_final_buffer_behavior_array+0x34>
 800f66a:	69c1      	ldr	r1, [r0, #28]
 800f66c:	4798      	blx	r3
 800f66e:	75a0      	strb	r0, [r4, #22]
 800f670:	2800      	cmp	r0, #0
 800f672:	d0f1      	beq.n	800f658 <ucdr_check_final_buffer_behavior_array+0x14>
 800f674:	2000      	movs	r0, #0
 800f676:	bd38      	pop	{r3, r4, r5, pc}
 800f678:	2301      	movs	r3, #1
 800f67a:	7583      	strb	r3, [r0, #22]
 800f67c:	e7fa      	b.n	800f674 <ucdr_check_final_buffer_behavior_array+0x30>
 800f67e:	bf00      	nop

0800f680 <ucdr_advance_buffer>:
 800f680:	b538      	push	{r3, r4, r5, lr}
 800f682:	4604      	mov	r4, r0
 800f684:	460d      	mov	r5, r1
 800f686:	f7ff ff53 	bl	800f530 <ucdr_check_buffer_available_for>
 800f68a:	b178      	cbz	r0, 800f6ac <ucdr_advance_buffer+0x2c>
 800f68c:	6923      	ldr	r3, [r4, #16]
 800f68e:	68a2      	ldr	r2, [r4, #8]
 800f690:	442b      	add	r3, r5
 800f692:	442a      	add	r2, r5
 800f694:	6123      	str	r3, [r4, #16]
 800f696:	2301      	movs	r3, #1
 800f698:	60a2      	str	r2, [r4, #8]
 800f69a:	7563      	strb	r3, [r4, #21]
 800f69c:	bd38      	pop	{r3, r4, r5, pc}
 800f69e:	68a2      	ldr	r2, [r4, #8]
 800f6a0:	1a2d      	subs	r5, r5, r0
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	4402      	add	r2, r0
 800f6a6:	4418      	add	r0, r3
 800f6a8:	60a2      	str	r2, [r4, #8]
 800f6aa:	6120      	str	r0, [r4, #16]
 800f6ac:	4629      	mov	r1, r5
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f7ff ffc7 	bl	800f644 <ucdr_check_final_buffer_behavior_array>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d1f1      	bne.n	800f69e <ucdr_advance_buffer+0x1e>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	7563      	strb	r3, [r4, #21]
 800f6be:	bd38      	pop	{r3, r4, r5, pc}

0800f6c0 <rcl_get_zero_initialized_node>:
 800f6c0:	4a03      	ldr	r2, [pc, #12]	@ (800f6d0 <rcl_get_zero_initialized_node+0x10>)
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6c8:	e883 0003 	stmia.w	r3, {r0, r1}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	4770      	bx	lr
 800f6d0:	0801c9d8 	.word	0x0801c9d8

0800f6d4 <rcl_node_init>:
 800f6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d8:	b0a9      	sub	sp, #164	@ 0xa4
 800f6da:	4604      	mov	r4, r0
 800f6dc:	460e      	mov	r6, r1
 800f6de:	4615      	mov	r5, r2
 800f6e0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800f6e4:	a823      	add	r0, sp, #140	@ 0x8c
 800f6e6:	461f      	mov	r7, r3
 800f6e8:	f005 ff34 	bl	8015554 <rcl_guard_condition_get_default_options>
 800f6ec:	f1b8 0f00 	cmp.w	r8, #0
 800f6f0:	f000 80f3 	beq.w	800f8da <rcl_node_init+0x206>
 800f6f4:	4640      	mov	r0, r8
 800f6f6:	f001 fa15 	bl	8010b24 <rcutils_allocator_is_valid>
 800f6fa:	2d00      	cmp	r5, #0
 800f6fc:	bf18      	it	ne
 800f6fe:	2c00      	cmpne	r4, #0
 800f700:	f080 0001 	eor.w	r0, r0, #1
 800f704:	bf0c      	ite	eq
 800f706:	f04f 0c01 	moveq.w	ip, #1
 800f70a:	f04f 0c00 	movne.w	ip, #0
 800f70e:	2e00      	cmp	r6, #0
 800f710:	bf08      	it	eq
 800f712:	f04c 0c01 	orreq.w	ip, ip, #1
 800f716:	ea4c 0c00 	orr.w	ip, ip, r0
 800f71a:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 800f71e:	f040 80dc 	bne.w	800f8da <rcl_node_init+0x206>
 800f722:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f726:	f1ba 0f00 	cmp.w	sl, #0
 800f72a:	f040 80fc 	bne.w	800f926 <rcl_node_init+0x252>
 800f72e:	2f00      	cmp	r7, #0
 800f730:	f000 80d3 	beq.w	800f8da <rcl_node_init+0x206>
 800f734:	4638      	mov	r0, r7
 800f736:	f005 fe1b 	bl	8015370 <rcl_context_is_valid>
 800f73a:	4683      	mov	fp, r0
 800f73c:	2800      	cmp	r0, #0
 800f73e:	f000 80d2 	beq.w	800f8e6 <rcl_node_init+0x212>
 800f742:	4652      	mov	r2, sl
 800f744:	4630      	mov	r0, r6
 800f746:	a922      	add	r1, sp, #136	@ 0x88
 800f748:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 800f74c:	f001 fc7e 	bl	801104c <rmw_validate_node_name>
 800f750:	4682      	mov	sl, r0
 800f752:	2800      	cmp	r0, #0
 800f754:	f040 80c3 	bne.w	800f8de <rcl_node_init+0x20a>
 800f758:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800f75a:	2800      	cmp	r0, #0
 800f75c:	f040 80f1 	bne.w	800f942 <rcl_node_init+0x26e>
 800f760:	4628      	mov	r0, r5
 800f762:	f7f0 fd77 	bl	8000254 <strlen>
 800f766:	2800      	cmp	r0, #0
 800f768:	f040 80c0 	bne.w	800f8ec <rcl_node_init+0x218>
 800f76c:	4d79      	ldr	r5, [pc, #484]	@ (800f954 <rcl_node_init+0x280>)
 800f76e:	a922      	add	r1, sp, #136	@ 0x88
 800f770:	2200      	movs	r2, #0
 800f772:	4628      	mov	r0, r5
 800f774:	f001 fc4c 	bl	8011010 <rmw_validate_namespace>
 800f778:	4682      	mov	sl, r0
 800f77a:	2800      	cmp	r0, #0
 800f77c:	f040 80af 	bne.w	800f8de <rcl_node_init+0x20a>
 800f780:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800f782:	2800      	cmp	r0, #0
 800f784:	f040 80d5 	bne.w	800f932 <rcl_node_init+0x25e>
 800f788:	f8d8 3000 	ldr.w	r3, [r8]
 800f78c:	2078      	movs	r0, #120	@ 0x78
 800f78e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f792:	4798      	blx	r3
 800f794:	4682      	mov	sl, r0
 800f796:	6060      	str	r0, [r4, #4]
 800f798:	2800      	cmp	r0, #0
 800f79a:	f000 80cf 	beq.w	800f93c <rcl_node_init+0x268>
 800f79e:	2200      	movs	r2, #0
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	a808      	add	r0, sp, #32
 800f7a4:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 800f7a8:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 800f7ac:	f000 f902 	bl	800f9b4 <rcl_node_get_default_options>
 800f7b0:	a908      	add	r1, sp, #32
 800f7b2:	4650      	mov	r0, sl
 800f7b4:	2268      	movs	r2, #104	@ 0x68
 800f7b6:	f00c f886 	bl	801b8c6 <memcpy>
 800f7ba:	6861      	ldr	r1, [r4, #4]
 800f7bc:	4640      	mov	r0, r8
 800f7be:	6027      	str	r7, [r4, #0]
 800f7c0:	f000 f906 	bl	800f9d0 <rcl_node_options_copy>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d158      	bne.n	800f87a <rcl_node_init+0x1a6>
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	f7f0 fd43 	bl	8000254 <strlen>
 800f7ce:	4428      	add	r0, r5
 800f7d0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800f7d4:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800f7d8:	2b2f      	cmp	r3, #47	@ 0x2f
 800f7da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f7de:	9300      	str	r3, [sp, #0]
 800f7e0:	bf0c      	ite	eq
 800f7e2:	4b5d      	ldreq	r3, [pc, #372]	@ (800f958 <rcl_node_init+0x284>)
 800f7e4:	4b5d      	ldrne	r3, [pc, #372]	@ (800f95c <rcl_node_init+0x288>)
 800f7e6:	9302      	str	r3, [sp, #8]
 800f7e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f7ec:	9301      	str	r3, [sp, #4]
 800f7ee:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f7f2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f7f6:	f001 f9ef 	bl	8010bd8 <rcutils_format_string_limit>
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 800f800:	4631      	mov	r1, r6
 800f802:	6818      	ldr	r0, [r3, #0]
 800f804:	462a      	mov	r2, r5
 800f806:	6866      	ldr	r6, [r4, #4]
 800f808:	3028      	adds	r0, #40	@ 0x28
 800f80a:	f001 fd15 	bl	8011238 <rmw_create_node>
 800f80e:	6863      	ldr	r3, [r4, #4]
 800f810:	66b0      	str	r0, [r6, #104]	@ 0x68
 800f812:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800f814:	2800      	cmp	r0, #0
 800f816:	d032      	beq.n	800f87e <rcl_node_init+0x1aa>
 800f818:	f001 fd9e 	bl	8011358 <rmw_node_get_graph_guard_condition>
 800f81c:	4682      	mov	sl, r0
 800f81e:	b360      	cbz	r0, 800f87a <rcl_node_init+0x1a6>
 800f820:	f8d8 3000 	ldr.w	r3, [r8]
 800f824:	2008      	movs	r0, #8
 800f826:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f82a:	6866      	ldr	r6, [r4, #4]
 800f82c:	4798      	blx	r3
 800f82e:	6863      	ldr	r3, [r4, #4]
 800f830:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800f832:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800f836:	f1bb 0f00 	cmp.w	fp, #0
 800f83a:	d020      	beq.n	800f87e <rcl_node_init+0x1aa>
 800f83c:	a806      	add	r0, sp, #24
 800f83e:	ae23      	add	r6, sp, #140	@ 0x8c
 800f840:	f005 fdfc 	bl	801543c <rcl_get_zero_initialized_guard_condition>
 800f844:	a806      	add	r0, sp, #24
 800f846:	6863      	ldr	r3, [r4, #4]
 800f848:	46c4      	mov	ip, r8
 800f84a:	c803      	ldmia	r0, {r0, r1}
 800f84c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800f850:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f854:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f858:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f85a:	f8dc 3000 	ldr.w	r3, [ip]
 800f85e:	6033      	str	r3, [r6, #0]
 800f860:	ab28      	add	r3, sp, #160	@ 0xa0
 800f862:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800f866:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f86a:	4651      	mov	r1, sl
 800f86c:	463a      	mov	r2, r7
 800f86e:	4670      	mov	r0, lr
 800f870:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f872:	f005 fded 	bl	8015450 <rcl_guard_condition_init_from_rmw>
 800f876:	4682      	mov	sl, r0
 800f878:	b328      	cbz	r0, 800f8c6 <rcl_node_init+0x1f2>
 800f87a:	6863      	ldr	r3, [r4, #4]
 800f87c:	b1f3      	cbz	r3, 800f8bc <rcl_node_init+0x1e8>
 800f87e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f880:	b128      	cbz	r0, 800f88e <rcl_node_init+0x1ba>
 800f882:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f886:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f88a:	4798      	blx	r3
 800f88c:	6863      	ldr	r3, [r4, #4]
 800f88e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800f890:	b110      	cbz	r0, 800f898 <rcl_node_init+0x1c4>
 800f892:	f001 fce3 	bl	801125c <rmw_destroy_node>
 800f896:	6863      	ldr	r3, [r4, #4]
 800f898:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f89a:	b148      	cbz	r0, 800f8b0 <rcl_node_init+0x1dc>
 800f89c:	f005 fe34 	bl	8015508 <rcl_guard_condition_fini>
 800f8a0:	6863      	ldr	r3, [r4, #4]
 800f8a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f8a6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f8a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f8ac:	4798      	blx	r3
 800f8ae:	6863      	ldr	r3, [r4, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f8b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f8ba:	4798      	blx	r3
 800f8bc:	2300      	movs	r3, #0
 800f8be:	f04f 0a01 	mov.w	sl, #1
 800f8c2:	e9c4 3300 	strd	r3, r3, [r4]
 800f8c6:	f1b9 0f00 	cmp.w	r9, #0
 800f8ca:	d008      	beq.n	800f8de <rcl_node_init+0x20a>
 800f8cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f8d6:	4798      	blx	r3
 800f8d8:	e001      	b.n	800f8de <rcl_node_init+0x20a>
 800f8da:	f04f 0a0b 	mov.w	sl, #11
 800f8de:	4650      	mov	r0, sl
 800f8e0:	b029      	add	sp, #164	@ 0xa4
 800f8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e6:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 800f8ea:	e7f8      	b.n	800f8de <rcl_node_init+0x20a>
 800f8ec:	782b      	ldrb	r3, [r5, #0]
 800f8ee:	2b2f      	cmp	r3, #47	@ 0x2f
 800f8f0:	f43f af3d 	beq.w	800f76e <rcl_node_init+0x9a>
 800f8f4:	9503      	str	r5, [sp, #12]
 800f8f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f8fa:	9300      	str	r3, [sp, #0]
 800f8fc:	4b18      	ldr	r3, [pc, #96]	@ (800f960 <rcl_node_init+0x28c>)
 800f8fe:	9302      	str	r3, [sp, #8]
 800f900:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f904:	9301      	str	r3, [sp, #4]
 800f906:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f90a:	f001 f965 	bl	8010bd8 <rcutils_format_string_limit>
 800f90e:	4605      	mov	r5, r0
 800f910:	b1e0      	cbz	r0, 800f94c <rcl_node_init+0x278>
 800f912:	2200      	movs	r2, #0
 800f914:	a922      	add	r1, sp, #136	@ 0x88
 800f916:	9222      	str	r2, [sp, #136]	@ 0x88
 800f918:	f001 fb7a 	bl	8011010 <rmw_validate_namespace>
 800f91c:	4682      	mov	sl, r0
 800f91e:	2800      	cmp	r0, #0
 800f920:	d1d4      	bne.n	800f8cc <rcl_node_init+0x1f8>
 800f922:	46d9      	mov	r9, fp
 800f924:	e72c      	b.n	800f780 <rcl_node_init+0xac>
 800f926:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 800f92a:	4650      	mov	r0, sl
 800f92c:	b029      	add	sp, #164	@ 0xa4
 800f92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f932:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 800f936:	f001 fb7d 	bl	8011034 <rmw_namespace_validation_result_string>
 800f93a:	e7c4      	b.n	800f8c6 <rcl_node_init+0x1f2>
 800f93c:	f04f 0a0a 	mov.w	sl, #10
 800f940:	e7c1      	b.n	800f8c6 <rcl_node_init+0x1f2>
 800f942:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 800f946:	f001 fbd5 	bl	80110f4 <rmw_node_name_validation_result_string>
 800f94a:	e7c8      	b.n	800f8de <rcl_node_init+0x20a>
 800f94c:	f04f 0a0a 	mov.w	sl, #10
 800f950:	e7c5      	b.n	800f8de <rcl_node_init+0x20a>
 800f952:	bf00      	nop
 800f954:	0801c9c0 	.word	0x0801c9c0
 800f958:	0801c9c8 	.word	0x0801c9c8
 800f95c:	0801c9d0 	.word	0x0801c9d0
 800f960:	0801c9c4 	.word	0x0801c9c4

0800f964 <rcl_node_is_valid>:
 800f964:	b130      	cbz	r0, 800f974 <rcl_node_is_valid+0x10>
 800f966:	6843      	ldr	r3, [r0, #4]
 800f968:	b123      	cbz	r3, 800f974 <rcl_node_is_valid+0x10>
 800f96a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f96c:	b113      	cbz	r3, 800f974 <rcl_node_is_valid+0x10>
 800f96e:	6800      	ldr	r0, [r0, #0]
 800f970:	f005 bcfe 	b.w	8015370 <rcl_context_is_valid>
 800f974:	2000      	movs	r0, #0
 800f976:	4770      	bx	lr

0800f978 <rcl_node_get_name>:
 800f978:	b120      	cbz	r0, 800f984 <rcl_node_get_name+0xc>
 800f97a:	6840      	ldr	r0, [r0, #4]
 800f97c:	b110      	cbz	r0, 800f984 <rcl_node_get_name+0xc>
 800f97e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f980:	b100      	cbz	r0, 800f984 <rcl_node_get_name+0xc>
 800f982:	6880      	ldr	r0, [r0, #8]
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop

0800f988 <rcl_node_get_namespace>:
 800f988:	b120      	cbz	r0, 800f994 <rcl_node_get_namespace+0xc>
 800f98a:	6840      	ldr	r0, [r0, #4]
 800f98c:	b110      	cbz	r0, 800f994 <rcl_node_get_namespace+0xc>
 800f98e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f990:	b100      	cbz	r0, 800f994 <rcl_node_get_namespace+0xc>
 800f992:	68c0      	ldr	r0, [r0, #12]
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop

0800f998 <rcl_node_get_options>:
 800f998:	b128      	cbz	r0, 800f9a6 <rcl_node_get_options+0xe>
 800f99a:	6840      	ldr	r0, [r0, #4]
 800f99c:	b118      	cbz	r0, 800f9a6 <rcl_node_get_options+0xe>
 800f99e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	bf08      	it	eq
 800f9a4:	2000      	moveq	r0, #0
 800f9a6:	4770      	bx	lr

0800f9a8 <rcl_node_get_rmw_handle>:
 800f9a8:	b110      	cbz	r0, 800f9b0 <rcl_node_get_rmw_handle+0x8>
 800f9aa:	6840      	ldr	r0, [r0, #4]
 800f9ac:	b100      	cbz	r0, 800f9b0 <rcl_node_get_rmw_handle+0x8>
 800f9ae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop

0800f9b4 <rcl_node_get_default_options>:
 800f9b4:	b510      	push	{r4, lr}
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	2268      	movs	r2, #104	@ 0x68
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	f00b feba 	bl	801b734 <memset>
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f001 f8a1 	bl	8010b08 <rcutils_get_default_allocator>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	7523      	strb	r3, [r4, #20]
 800f9cc:	bd10      	pop	{r4, pc}
 800f9ce:	bf00      	nop

0800f9d0 <rcl_node_options_copy>:
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	bf18      	it	ne
 800f9d4:	4288      	cmpne	r0, r1
 800f9d6:	d01b      	beq.n	800fa10 <rcl_node_options_copy+0x40>
 800f9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9da:	fab1 f681 	clz	r6, r1
 800f9de:	460c      	mov	r4, r1
 800f9e0:	0976      	lsrs	r6, r6, #5
 800f9e2:	b199      	cbz	r1, 800fa0c <rcl_node_options_copy+0x3c>
 800f9e4:	4605      	mov	r5, r0
 800f9e6:	8a87      	ldrh	r7, [r0, #20]
 800f9e8:	4684      	mov	ip, r0
 800f9ea:	468e      	mov	lr, r1
 800f9ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f9f2:	682b      	ldr	r3, [r5, #0]
 800f9f4:	2250      	movs	r2, #80	@ 0x50
 800f9f6:	f10c 0118 	add.w	r1, ip, #24
 800f9fa:	f104 0018 	add.w	r0, r4, #24
 800f9fe:	f8ce 3000 	str.w	r3, [lr]
 800fa02:	82a7      	strh	r7, [r4, #20]
 800fa04:	f00b ff5f 	bl	801b8c6 <memcpy>
 800fa08:	4630      	mov	r0, r6
 800fa0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa0c:	200b      	movs	r0, #11
 800fa0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa10:	200b      	movs	r0, #11
 800fa12:	4770      	bx	lr

0800fa14 <rcl_get_zero_initialized_publisher>:
 800fa14:	4b01      	ldr	r3, [pc, #4]	@ (800fa1c <rcl_get_zero_initialized_publisher+0x8>)
 800fa16:	6818      	ldr	r0, [r3, #0]
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	0801c9e0 	.word	0x0801c9e0

0800fa20 <rcl_publisher_init>:
 800fa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa24:	b088      	sub	sp, #32
 800fa26:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800fa28:	2e00      	cmp	r6, #0
 800fa2a:	d06b      	beq.n	800fb04 <rcl_publisher_init+0xe4>
 800fa2c:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800fa30:	4605      	mov	r5, r0
 800fa32:	460f      	mov	r7, r1
 800fa34:	4690      	mov	r8, r2
 800fa36:	4650      	mov	r0, sl
 800fa38:	4699      	mov	r9, r3
 800fa3a:	f001 f873 	bl	8010b24 <rcutils_allocator_is_valid>
 800fa3e:	f080 0401 	eor.w	r4, r0, #1
 800fa42:	b2e4      	uxtb	r4, r4
 800fa44:	2c00      	cmp	r4, #0
 800fa46:	d15d      	bne.n	800fb04 <rcl_publisher_init+0xe4>
 800fa48:	2d00      	cmp	r5, #0
 800fa4a:	d05b      	beq.n	800fb04 <rcl_publisher_init+0xe4>
 800fa4c:	682b      	ldr	r3, [r5, #0]
 800fa4e:	b123      	cbz	r3, 800fa5a <rcl_publisher_init+0x3a>
 800fa50:	2464      	movs	r4, #100	@ 0x64
 800fa52:	4620      	mov	r0, r4
 800fa54:	b008      	add	sp, #32
 800fa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa5a:	4638      	mov	r0, r7
 800fa5c:	f7ff ff82 	bl	800f964 <rcl_node_is_valid>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d054      	beq.n	800fb0e <rcl_publisher_init+0xee>
 800fa64:	f1b8 0f00 	cmp.w	r8, #0
 800fa68:	d04c      	beq.n	800fb04 <rcl_publisher_init+0xe4>
 800fa6a:	fab9 f389 	clz	r3, r9
 800fa6e:	095b      	lsrs	r3, r3, #5
 800fa70:	f1b9 0f00 	cmp.w	r9, #0
 800fa74:	d046      	beq.n	800fb04 <rcl_publisher_init+0xe4>
 800fa76:	aa07      	add	r2, sp, #28
 800fa78:	9307      	str	r3, [sp, #28]
 800fa7a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800fa7e:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800fa82:	9205      	str	r2, [sp, #20]
 800fa84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa88:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fa8c:	4649      	mov	r1, r9
 800fa8e:	4638      	mov	r0, r7
 800fa90:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800fa94:	f005 ffa8 	bl	80159e8 <rcl_node_resolve_name>
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d14f      	bne.n	800fb3c <rcl_publisher_init+0x11c>
 800fa9c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800fa9e:	20c8      	movs	r0, #200	@ 0xc8
 800faa0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800faa2:	4798      	blx	r3
 800faa4:	6028      	str	r0, [r5, #0]
 800faa6:	2800      	cmp	r0, #0
 800faa8:	d050      	beq.n	800fb4c <rcl_publisher_init+0x12c>
 800faaa:	4638      	mov	r0, r7
 800faac:	f7ff ff7c 	bl	800f9a8 <rcl_node_get_rmw_handle>
 800fab0:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800fab4:	4641      	mov	r1, r8
 800fab6:	9a07      	ldr	r2, [sp, #28]
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	4633      	mov	r3, r6
 800fabc:	682c      	ldr	r4, [r5, #0]
 800fabe:	f001 fcb5 	bl	801142c <rmw_create_publisher>
 800fac2:	682b      	ldr	r3, [r5, #0]
 800fac4:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800fac8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800facc:	b370      	cbz	r0, 800fb2c <rcl_publisher_init+0x10c>
 800face:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800fad2:	f001 fd8f 	bl	80115f4 <rmw_publisher_get_actual_qos>
 800fad6:	682b      	ldr	r3, [r5, #0]
 800fad8:	4604      	mov	r4, r0
 800fada:	b9d0      	cbnz	r0, 800fb12 <rcl_publisher_init+0xf2>
 800fadc:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800fae0:	4631      	mov	r1, r6
 800fae2:	4618      	mov	r0, r3
 800fae4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fae8:	2270      	movs	r2, #112	@ 0x70
 800faea:	f00b feec 	bl	801b8c6 <memcpy>
 800faee:	683a      	ldr	r2, [r7, #0]
 800faf0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800faf4:	9807      	ldr	r0, [sp, #28]
 800faf6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800faf8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800fafa:	4798      	blx	r3
 800fafc:	4620      	mov	r0, r4
 800fafe:	b008      	add	sp, #32
 800fb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb04:	240b      	movs	r4, #11
 800fb06:	4620      	mov	r0, r4
 800fb08:	b008      	add	sp, #32
 800fb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb0e:	24c8      	movs	r4, #200	@ 0xc8
 800fb10:	e79f      	b.n	800fa52 <rcl_publisher_init+0x32>
 800fb12:	b1cb      	cbz	r3, 800fb48 <rcl_publisher_init+0x128>
 800fb14:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800fb18:	b142      	cbz	r2, 800fb2c <rcl_publisher_init+0x10c>
 800fb1a:	4638      	mov	r0, r7
 800fb1c:	f7ff ff44 	bl	800f9a8 <rcl_node_get_rmw_handle>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800fb26:	f001 fd79 	bl	801161c <rmw_destroy_publisher>
 800fb2a:	682b      	ldr	r3, [r5, #0]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800fb30:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800fb32:	2401      	movs	r4, #1
 800fb34:	4790      	blx	r2
 800fb36:	2300      	movs	r3, #0
 800fb38:	602b      	str	r3, [r5, #0]
 800fb3a:	e7db      	b.n	800faf4 <rcl_publisher_init+0xd4>
 800fb3c:	2867      	cmp	r0, #103	@ 0x67
 800fb3e:	d007      	beq.n	800fb50 <rcl_publisher_init+0x130>
 800fb40:	2869      	cmp	r0, #105	@ 0x69
 800fb42:	d005      	beq.n	800fb50 <rcl_publisher_init+0x130>
 800fb44:	280a      	cmp	r0, #10
 800fb46:	d001      	beq.n	800fb4c <rcl_publisher_init+0x12c>
 800fb48:	2401      	movs	r4, #1
 800fb4a:	e7d3      	b.n	800faf4 <rcl_publisher_init+0xd4>
 800fb4c:	240a      	movs	r4, #10
 800fb4e:	e7d1      	b.n	800faf4 <rcl_publisher_init+0xd4>
 800fb50:	2467      	movs	r4, #103	@ 0x67
 800fb52:	e7cf      	b.n	800faf4 <rcl_publisher_init+0xd4>

0800fb54 <rcl_publisher_get_default_options>:
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	4d14      	ldr	r5, [pc, #80]	@ (800fba8 <rcl_publisher_get_default_options+0x54>)
 800fb58:	b088      	sub	sp, #32
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	2250      	movs	r2, #80	@ 0x50
 800fb5e:	4913      	ldr	r1, [pc, #76]	@ (800fbac <rcl_publisher_get_default_options+0x58>)
 800fb60:	4628      	mov	r0, r5
 800fb62:	f00b feb0 	bl	801b8c6 <memcpy>
 800fb66:	a802      	add	r0, sp, #8
 800fb68:	f000 ffce 	bl	8010b08 <rcutils_get_default_allocator>
 800fb6c:	f10d 0c08 	add.w	ip, sp, #8
 800fb70:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800fb74:	466e      	mov	r6, sp
 800fb76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb7a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fb7e:	f8dc 3000 	ldr.w	r3, [ip]
 800fb82:	4630      	mov	r0, r6
 800fb84:	f8ce 3000 	str.w	r3, [lr]
 800fb88:	f001 f9ea 	bl	8010f60 <rmw_get_default_publisher_options>
 800fb8c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800fb90:	2270      	movs	r2, #112	@ 0x70
 800fb92:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fb96:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f00b fe92 	bl	801b8c6 <memcpy>
 800fba2:	4620      	mov	r0, r4
 800fba4:	b008      	add	sp, #32
 800fba6:	bd70      	pop	{r4, r5, r6, pc}
 800fba8:	2000dd50 	.word	0x2000dd50
 800fbac:	0801c9e8 	.word	0x0801c9e8

0800fbb0 <rcl_publish>:
 800fbb0:	b1f8      	cbz	r0, 800fbf2 <rcl_publish+0x42>
 800fbb2:	6803      	ldr	r3, [r0, #0]
 800fbb4:	b570      	push	{r4, r5, r6, lr}
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	b1b3      	cbz	r3, 800fbe8 <rcl_publish+0x38>
 800fbba:	4616      	mov	r6, r2
 800fbbc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800fbc0:	b192      	cbz	r2, 800fbe8 <rcl_publish+0x38>
 800fbc2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800fbc6:	460d      	mov	r5, r1
 800fbc8:	f005 fbd2 	bl	8015370 <rcl_context_is_valid>
 800fbcc:	b160      	cbz	r0, 800fbe8 <rcl_publish+0x38>
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800fbd4:	b140      	cbz	r0, 800fbe8 <rcl_publish+0x38>
 800fbd6:	b155      	cbz	r5, 800fbee <rcl_publish+0x3e>
 800fbd8:	4632      	mov	r2, r6
 800fbda:	4629      	mov	r1, r5
 800fbdc:	f001 fbc6 	bl	801136c <rmw_publish>
 800fbe0:	3800      	subs	r0, #0
 800fbe2:	bf18      	it	ne
 800fbe4:	2001      	movne	r0, #1
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
 800fbe8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800fbec:	bd70      	pop	{r4, r5, r6, pc}
 800fbee:	200b      	movs	r0, #11
 800fbf0:	bd70      	pop	{r4, r5, r6, pc}
 800fbf2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800fbf6:	4770      	bx	lr

0800fbf8 <rcl_publisher_is_valid>:
 800fbf8:	b1a0      	cbz	r0, 800fc24 <rcl_publisher_is_valid+0x2c>
 800fbfa:	6803      	ldr	r3, [r0, #0]
 800fbfc:	b510      	push	{r4, lr}
 800fbfe:	4604      	mov	r4, r0
 800fc00:	b173      	cbz	r3, 800fc20 <rcl_publisher_is_valid+0x28>
 800fc02:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800fc06:	b15a      	cbz	r2, 800fc20 <rcl_publisher_is_valid+0x28>
 800fc08:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800fc0c:	f005 fbb0 	bl	8015370 <rcl_context_is_valid>
 800fc10:	b130      	cbz	r0, 800fc20 <rcl_publisher_is_valid+0x28>
 800fc12:	6823      	ldr	r3, [r4, #0]
 800fc14:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800fc18:	3800      	subs	r0, #0
 800fc1a:	bf18      	it	ne
 800fc1c:	2001      	movne	r0, #1
 800fc1e:	bd10      	pop	{r4, pc}
 800fc20:	2000      	movs	r0, #0
 800fc22:	bd10      	pop	{r4, pc}
 800fc24:	2000      	movs	r0, #0
 800fc26:	4770      	bx	lr

0800fc28 <rcl_publisher_is_valid_except_context>:
 800fc28:	b130      	cbz	r0, 800fc38 <rcl_publisher_is_valid_except_context+0x10>
 800fc2a:	6800      	ldr	r0, [r0, #0]
 800fc2c:	b120      	cbz	r0, 800fc38 <rcl_publisher_is_valid_except_context+0x10>
 800fc2e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800fc32:	3800      	subs	r0, #0
 800fc34:	bf18      	it	ne
 800fc36:	2001      	movne	r0, #1
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop

0800fc3c <_rclc_check_for_new_data>:
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	d046      	beq.n	800fcce <_rclc_check_for_new_data+0x92>
 800fc40:	4603      	mov	r3, r0
 800fc42:	b530      	push	{r4, r5, lr}
 800fc44:	7802      	ldrb	r2, [r0, #0]
 800fc46:	b085      	sub	sp, #20
 800fc48:	2a0a      	cmp	r2, #10
 800fc4a:	d842      	bhi.n	800fcd2 <_rclc_check_for_new_data+0x96>
 800fc4c:	e8df f002 	tbb	[pc, r2]
 800fc50:	14181212 	.word	0x14181212
 800fc54:	06060614 	.word	0x06060614
 800fc58:	2e1a      	.short	0x2e1a
 800fc5a:	16          	.byte	0x16
 800fc5b:	00          	.byte	0x00
 800fc5c:	6a0a      	ldr	r2, [r1, #32]
 800fc5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800fc60:	2000      	movs	r0, #0
 800fc62:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800fc66:	1a12      	subs	r2, r2, r0
 800fc68:	bf18      	it	ne
 800fc6a:	2201      	movne	r2, #1
 800fc6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800fc70:	b005      	add	sp, #20
 800fc72:	bd30      	pop	{r4, r5, pc}
 800fc74:	680a      	ldr	r2, [r1, #0]
 800fc76:	e7f2      	b.n	800fc5e <_rclc_check_for_new_data+0x22>
 800fc78:	698a      	ldr	r2, [r1, #24]
 800fc7a:	e7f0      	b.n	800fc5e <_rclc_check_for_new_data+0x22>
 800fc7c:	688a      	ldr	r2, [r1, #8]
 800fc7e:	e7ee      	b.n	800fc5e <_rclc_check_for_new_data+0x22>
 800fc80:	690a      	ldr	r2, [r1, #16]
 800fc82:	e7ec      	b.n	800fc5e <_rclc_check_for_new_data+0x22>
 800fc84:	685c      	ldr	r4, [r3, #4]
 800fc86:	4608      	mov	r0, r1
 800fc88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc90:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800fc94:	f104 0110 	add.w	r1, r4, #16
 800fc98:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fc9c:	9500      	str	r5, [sp, #0]
 800fc9e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800fca2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800fca6:	f007 fbbb 	bl	8017420 <rcl_action_client_wait_set_get_entities_ready>
 800fcaa:	e7e1      	b.n	800fc70 <_rclc_check_for_new_data+0x34>
 800fcac:	685c      	ldr	r4, [r3, #4]
 800fcae:	4608      	mov	r0, r1
 800fcb0:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800fcb4:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800fcb8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800fcbc:	e9cd 2100 	strd	r2, r1, [sp]
 800fcc0:	f104 0220 	add.w	r2, r4, #32
 800fcc4:	f104 0110 	add.w	r1, r4, #16
 800fcc8:	f007 fdc4 	bl	8017854 <rcl_action_server_wait_set_get_entities_ready>
 800fccc:	e7d0      	b.n	800fc70 <_rclc_check_for_new_data+0x34>
 800fcce:	200b      	movs	r0, #11
 800fcd0:	4770      	bx	lr
 800fcd2:	2001      	movs	r0, #1
 800fcd4:	e7cc      	b.n	800fc70 <_rclc_check_for_new_data+0x34>
 800fcd6:	bf00      	nop

0800fcd8 <_rclc_take_new_data>:
 800fcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcda:	b09b      	sub	sp, #108	@ 0x6c
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	f000 8088 	beq.w	800fdf2 <_rclc_take_new_data+0x11a>
 800fce2:	7803      	ldrb	r3, [r0, #0]
 800fce4:	4604      	mov	r4, r0
 800fce6:	2b0a      	cmp	r3, #10
 800fce8:	f200 8167 	bhi.w	800ffba <_rclc_take_new_data+0x2e2>
 800fcec:	e8df f003 	tbb	[pc, r3]
 800fcf0:	44152d2d 	.word	0x44152d2d
 800fcf4:	19191944 	.word	0x19191944
 800fcf8:	065a      	.short	0x065a
 800fcfa:	15          	.byte	0x15
 800fcfb:	00          	.byte	0x00
 800fcfc:	6840      	ldr	r0, [r0, #4]
 800fcfe:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f040 80b2 	bne.w	800fe6c <_rclc_take_new_data+0x194>
 800fd08:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f040 80e4 	bne.w	800feda <_rclc_take_new_data+0x202>
 800fd12:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d16f      	bne.n	800fdfa <_rclc_take_new_data+0x122>
 800fd1a:	2500      	movs	r5, #0
 800fd1c:	4628      	mov	r0, r5
 800fd1e:	b01b      	add	sp, #108	@ 0x6c
 800fd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd22:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800fd24:	6a0b      	ldr	r3, [r1, #32]
 800fd26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d0f5      	beq.n	800fd1a <_rclc_take_new_data+0x42>
 800fd2e:	6882      	ldr	r2, [r0, #8]
 800fd30:	f100 0110 	add.w	r1, r0, #16
 800fd34:	6840      	ldr	r0, [r0, #4]
 800fd36:	f006 f831 	bl	8015d9c <rcl_take_request>
 800fd3a:	4605      	mov	r5, r0
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	d0ec      	beq.n	800fd1a <_rclc_take_new_data+0x42>
 800fd40:	f240 2359 	movw	r3, #601	@ 0x259
 800fd44:	4298      	cmp	r0, r3
 800fd46:	d013      	beq.n	800fd70 <_rclc_take_new_data+0x98>
 800fd48:	e029      	b.n	800fd9e <_rclc_take_new_data+0xc6>
 800fd4a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800fd4c:	680b      	ldr	r3, [r1, #0]
 800fd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d0e1      	beq.n	800fd1a <_rclc_take_new_data+0x42>
 800fd56:	2300      	movs	r3, #0
 800fd58:	aa0a      	add	r2, sp, #40	@ 0x28
 800fd5a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800fd5e:	f006 f961 	bl	8016024 <rcl_take>
 800fd62:	4605      	mov	r5, r0
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d0d9      	beq.n	800fd1c <_rclc_take_new_data+0x44>
 800fd68:	f240 1391 	movw	r3, #401	@ 0x191
 800fd6c:	4298      	cmp	r0, r3
 800fd6e:	d116      	bne.n	800fd9e <_rclc_take_new_data+0xc6>
 800fd70:	2300      	movs	r3, #0
 800fd72:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800fd76:	e7d1      	b.n	800fd1c <_rclc_take_new_data+0x44>
 800fd78:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800fd7a:	698b      	ldr	r3, [r1, #24]
 800fd7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d0ca      	beq.n	800fd1a <_rclc_take_new_data+0x42>
 800fd84:	6882      	ldr	r2, [r0, #8]
 800fd86:	f100 0110 	add.w	r1, r0, #16
 800fd8a:	6840      	ldr	r0, [r0, #4]
 800fd8c:	f005 fa80 	bl	8015290 <rcl_take_response>
 800fd90:	4605      	mov	r5, r0
 800fd92:	2800      	cmp	r0, #0
 800fd94:	d0c1      	beq.n	800fd1a <_rclc_take_new_data+0x42>
 800fd96:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800fd9a:	4298      	cmp	r0, r3
 800fd9c:	d0be      	beq.n	800fd1c <_rclc_take_new_data+0x44>
 800fd9e:	f000 feff 	bl	8010ba0 <rcutils_reset_error>
 800fda2:	e7bb      	b.n	800fd1c <_rclc_take_new_data+0x44>
 800fda4:	6840      	ldr	r0, [r0, #4]
 800fda6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d17d      	bne.n	800feaa <_rclc_take_new_data+0x1d2>
 800fdae:	69c3      	ldr	r3, [r0, #28]
 800fdb0:	b11b      	cbz	r3, 800fdba <_rclc_take_new_data+0xe2>
 800fdb2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d144      	bne.n	800fe44 <_rclc_take_new_data+0x16c>
 800fdba:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f040 80ac 	bne.w	800ff1c <_rclc_take_new_data+0x244>
 800fdc4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d0a6      	beq.n	800fd1a <_rclc_take_new_data+0x42>
 800fdcc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800fdce:	a90a      	add	r1, sp, #40	@ 0x28
 800fdd0:	3010      	adds	r0, #16
 800fdd2:	f007 f9fd 	bl	80171d0 <rcl_action_take_result_response>
 800fdd6:	4605      	mov	r5, r0
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d1e0      	bne.n	800fd9e <_rclc_take_new_data+0xc6>
 800fddc:	6860      	ldr	r0, [r4, #4]
 800fdde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fde2:	f007 fe67 	bl	8017ab4 <rclc_action_find_handle_by_result_request_sequence_number>
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d098      	beq.n	800fd1c <_rclc_take_new_data+0x44>
 800fdea:	2301      	movs	r3, #1
 800fdec:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800fdf0:	e794      	b.n	800fd1c <_rclc_take_new_data+0x44>
 800fdf2:	250b      	movs	r5, #11
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	b01b      	add	sp, #108	@ 0x6c
 800fdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdfa:	ae04      	add	r6, sp, #16
 800fdfc:	3010      	adds	r0, #16
 800fdfe:	aa0a      	add	r2, sp, #40	@ 0x28
 800fe00:	4631      	mov	r1, r6
 800fe02:	f007 fc5b 	bl	80176bc <rcl_action_take_cancel_request>
 800fe06:	4605      	mov	r5, r0
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d1c8      	bne.n	800fd9e <_rclc_take_new_data+0xc6>
 800fe0c:	a90a      	add	r1, sp, #40	@ 0x28
 800fe0e:	6860      	ldr	r0, [r4, #4]
 800fe10:	f007 fe10 	bl	8017a34 <rclc_action_find_goal_handle_by_uuid>
 800fe14:	4607      	mov	r7, r0
 800fe16:	2800      	cmp	r0, #0
 800fe18:	f000 80bb 	beq.w	800ff92 <_rclc_take_new_data+0x2ba>
 800fe1c:	2101      	movs	r1, #1
 800fe1e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800fe22:	f007 fd91 	bl	8017948 <rcl_action_transition_goal_state>
 800fe26:	2803      	cmp	r0, #3
 800fe28:	4684      	mov	ip, r0
 800fe2a:	f040 80a7 	bne.w	800ff7c <_rclc_take_new_data+0x2a4>
 800fe2e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800fe32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fe34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe36:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fe3a:	e884 0003 	stmia.w	r4, {r0, r1}
 800fe3e:	f887 c008 	strb.w	ip, [r7, #8]
 800fe42:	e76b      	b.n	800fd1c <_rclc_take_new_data+0x44>
 800fe44:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fe46:	3010      	adds	r0, #16
 800fe48:	f007 fa42 	bl	80172d0 <rcl_action_take_feedback>
 800fe4c:	4605      	mov	r5, r0
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d1a5      	bne.n	800fd9e <_rclc_take_new_data+0xc6>
 800fe52:	6860      	ldr	r0, [r4, #4]
 800fe54:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fe56:	f007 fded 	bl	8017a34 <rclc_action_find_goal_handle_by_uuid>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	f000 80a3 	beq.w	800ffa8 <_rclc_take_new_data+0x2d0>
 800fe62:	2201      	movs	r2, #1
 800fe64:	6860      	ldr	r0, [r4, #4]
 800fe66:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800fe6a:	e7a6      	b.n	800fdba <_rclc_take_new_data+0xe2>
 800fe6c:	f007 fdbc 	bl	80179e8 <rclc_action_take_goal_handle>
 800fe70:	4606      	mov	r6, r0
 800fe72:	6860      	ldr	r0, [r4, #4]
 800fe74:	2e00      	cmp	r6, #0
 800fe76:	f43f af47 	beq.w	800fd08 <_rclc_take_new_data+0x30>
 800fe7a:	6070      	str	r0, [r6, #4]
 800fe7c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800fe80:	69f2      	ldr	r2, [r6, #28]
 800fe82:	3010      	adds	r0, #16
 800fe84:	f007 fb62 	bl	801754c <rcl_action_take_goal_request>
 800fe88:	4605      	mov	r5, r0
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	f040 808e 	bne.w	800ffac <_rclc_take_new_data+0x2d4>
 800fe90:	69f7      	ldr	r7, [r6, #28]
 800fe92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fe94:	7235      	strb	r5, [r6, #8]
 800fe96:	f8c6 0009 	str.w	r0, [r6, #9]
 800fe9a:	f8c6 100d 	str.w	r1, [r6, #13]
 800fe9e:	6860      	ldr	r0, [r4, #4]
 800fea0:	f8c6 2011 	str.w	r2, [r6, #17]
 800fea4:	f8c6 3015 	str.w	r3, [r6, #21]
 800fea8:	e72e      	b.n	800fd08 <_rclc_take_new_data+0x30>
 800feaa:	aa04      	add	r2, sp, #16
 800feac:	a90a      	add	r1, sp, #40	@ 0x28
 800feae:	3010      	adds	r0, #16
 800feb0:	f007 f916 	bl	80170e0 <rcl_action_take_goal_response>
 800feb4:	4605      	mov	r5, r0
 800feb6:	2800      	cmp	r0, #0
 800feb8:	f47f af71 	bne.w	800fd9e <_rclc_take_new_data+0xc6>
 800febc:	6860      	ldr	r0, [r4, #4]
 800febe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fec2:	f007 fde5 	bl	8017a90 <rclc_action_find_handle_by_goal_request_sequence_number>
 800fec6:	b130      	cbz	r0, 800fed6 <_rclc_take_new_data+0x1fe>
 800fec8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800fecc:	2201      	movs	r2, #1
 800fece:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fed2:	f880 2020 	strb.w	r2, [r0, #32]
 800fed6:	6860      	ldr	r0, [r4, #4]
 800fed8:	e769      	b.n	800fdae <_rclc_take_new_data+0xd6>
 800feda:	3010      	adds	r0, #16
 800fedc:	aa04      	add	r2, sp, #16
 800fede:	a90a      	add	r1, sp, #40	@ 0x28
 800fee0:	f007 fbac 	bl	801763c <rcl_action_take_result_request>
 800fee4:	4605      	mov	r5, r0
 800fee6:	2800      	cmp	r0, #0
 800fee8:	f47f af59 	bne.w	800fd9e <_rclc_take_new_data+0xc6>
 800feec:	a904      	add	r1, sp, #16
 800feee:	6860      	ldr	r0, [r4, #4]
 800fef0:	f007 fda0 	bl	8017a34 <rclc_action_find_goal_handle_by_uuid>
 800fef4:	4607      	mov	r7, r0
 800fef6:	b160      	cbz	r0, 800ff12 <_rclc_take_new_data+0x23a>
 800fef8:	ad0a      	add	r5, sp, #40	@ 0x28
 800fefa:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800fefe:	f04f 0c02 	mov.w	ip, #2
 800ff02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ff06:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ff0a:	e886 0003 	stmia.w	r6, {r0, r1}
 800ff0e:	f887 c008 	strb.w	ip, [r7, #8]
 800ff12:	6860      	ldr	r0, [r4, #4]
 800ff14:	2300      	movs	r3, #0
 800ff16:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ff1a:	e6fa      	b.n	800fd12 <_rclc_take_new_data+0x3a>
 800ff1c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ff20:	a90a      	add	r1, sp, #40	@ 0x28
 800ff22:	3010      	adds	r0, #16
 800ff24:	f007 f994 	bl	8017250 <rcl_action_take_cancel_response>
 800ff28:	4605      	mov	r5, r0
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	f47f af37 	bne.w	800fd9e <_rclc_take_new_data+0xc6>
 800ff30:	6860      	ldr	r0, [r4, #4]
 800ff32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ff36:	f007 fdcf 	bl	8017ad8 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	6860      	ldr	r0, [r4, #4]
 800ff3e:	2e00      	cmp	r6, #0
 800ff40:	f43f af40 	beq.w	800fdc4 <_rclc_take_new_data+0xec>
 800ff44:	2701      	movs	r7, #1
 800ff46:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ff48:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f43f af3a 	beq.w	800fdc4 <_rclc_take_new_data+0xec>
 800ff50:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ff52:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ff56:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ff5a:	f007 fd6b 	bl	8017a34 <rclc_action_find_goal_handle_by_uuid>
 800ff5e:	b138      	cbz	r0, 800ff70 <_rclc_take_new_data+0x298>
 800ff60:	6860      	ldr	r0, [r4, #4]
 800ff62:	3501      	adds	r5, #1
 800ff64:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ff68:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ff6a:	42ab      	cmp	r3, r5
 800ff6c:	d8f0      	bhi.n	800ff50 <_rclc_take_new_data+0x278>
 800ff6e:	e729      	b.n	800fdc4 <_rclc_take_new_data+0xec>
 800ff70:	6860      	ldr	r0, [r4, #4]
 800ff72:	3501      	adds	r5, #1
 800ff74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ff76:	42ab      	cmp	r3, r5
 800ff78:	d8ea      	bhi.n	800ff50 <_rclc_take_new_data+0x278>
 800ff7a:	e723      	b.n	800fdc4 <_rclc_take_new_data+0xec>
 800ff7c:	ab06      	add	r3, sp, #24
 800ff7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff80:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ff84:	2103      	movs	r1, #3
 800ff86:	6860      	ldr	r0, [r4, #4]
 800ff88:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ff8c:	f007 fe18 	bl	8017bc0 <rclc_action_server_goal_cancel_reject>
 800ff90:	e6c4      	b.n	800fd1c <_rclc_take_new_data+0x44>
 800ff92:	ab06      	add	r3, sp, #24
 800ff94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff96:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ff9a:	2102      	movs	r1, #2
 800ff9c:	6860      	ldr	r0, [r4, #4]
 800ff9e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ffa2:	f007 fe0d 	bl	8017bc0 <rclc_action_server_goal_cancel_reject>
 800ffa6:	e6b9      	b.n	800fd1c <_rclc_take_new_data+0x44>
 800ffa8:	6860      	ldr	r0, [r4, #4]
 800ffaa:	e706      	b.n	800fdba <_rclc_take_new_data+0xe2>
 800ffac:	4631      	mov	r1, r6
 800ffae:	6860      	ldr	r0, [r4, #4]
 800ffb0:	f007 fd2a 	bl	8017a08 <rclc_action_remove_used_goal_handle>
 800ffb4:	f000 fdf4 	bl	8010ba0 <rcutils_reset_error>
 800ffb8:	e6b0      	b.n	800fd1c <_rclc_take_new_data+0x44>
 800ffba:	2501      	movs	r5, #1
 800ffbc:	e6ae      	b.n	800fd1c <_rclc_take_new_data+0x44>
 800ffbe:	bf00      	nop

0800ffc0 <_rclc_execute.part.0>:
 800ffc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffc2:	7803      	ldrb	r3, [r0, #0]
 800ffc4:	b085      	sub	sp, #20
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	2b0a      	cmp	r3, #10
 800ffca:	f200 8139 	bhi.w	8010240 <_rclc_execute.part.0+0x280>
 800ffce:	e8df f003 	tbb	[pc, r3]
 800ffd2:	4268      	.short	0x4268
 800ffd4:	06a75b4d 	.word	0x06a75b4d
 800ffd8:	721d0606 	.word	0x721d0606
 800ffdc:	62          	.byte	0x62
 800ffdd:	00          	.byte	0x00
 800ffde:	2b06      	cmp	r3, #6
 800ffe0:	f000 8126 	beq.w	8010230 <_rclc_execute.part.0+0x270>
 800ffe4:	2b07      	cmp	r3, #7
 800ffe6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ffe8:	f040 811c 	bne.w	8010224 <_rclc_execute.part.0+0x264>
 800ffec:	f104 0510 	add.w	r5, r4, #16
 800fff0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800fff4:	6880      	ldr	r0, [r0, #8]
 800fff6:	4798      	blx	r3
 800fff8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800fffa:	4629      	mov	r1, r5
 800fffc:	6860      	ldr	r0, [r4, #4]
 800fffe:	f005 ff0d 	bl	8015e1c <rcl_send_response>
 8010002:	4604      	mov	r4, r0
 8010004:	b378      	cbz	r0, 8010066 <_rclc_execute.part.0+0xa6>
 8010006:	f000 fdcb 	bl	8010ba0 <rcutils_reset_error>
 801000a:	e02c      	b.n	8010066 <_rclc_execute.part.0+0xa6>
 801000c:	6840      	ldr	r0, [r0, #4]
 801000e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8010012:	2b00      	cmp	r3, #0
 8010014:	f000 808e 	beq.w	8010134 <_rclc_execute.part.0+0x174>
 8010018:	2600      	movs	r6, #0
 801001a:	2701      	movs	r7, #1
 801001c:	e004      	b.n	8010028 <_rclc_execute.part.0+0x68>
 801001e:	f007 fcbd 	bl	801799c <rclc_action_send_result_request>
 8010022:	b998      	cbnz	r0, 801004c <_rclc_execute.part.0+0x8c>
 8010024:	722f      	strb	r7, [r5, #8]
 8010026:	6860      	ldr	r0, [r4, #4]
 8010028:	f007 fd68 	bl	8017afc <rclc_action_find_first_handle_with_goal_response>
 801002c:	4605      	mov	r5, r0
 801002e:	2800      	cmp	r0, #0
 8010030:	d07f      	beq.n	8010132 <_rclc_execute.part.0+0x172>
 8010032:	6863      	ldr	r3, [r4, #4]
 8010034:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010036:	699b      	ldr	r3, [r3, #24]
 8010038:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 801003c:	f885 6020 	strb.w	r6, [r5, #32]
 8010040:	4798      	blx	r3
 8010042:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8010046:	4628      	mov	r0, r5
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1e8      	bne.n	801001e <_rclc_execute.part.0+0x5e>
 801004c:	6860      	ldr	r0, [r4, #4]
 801004e:	4629      	mov	r1, r5
 8010050:	f007 fcda 	bl	8017a08 <rclc_action_remove_used_goal_handle>
 8010054:	e7e7      	b.n	8010026 <_rclc_execute.part.0+0x66>
 8010056:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801005a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 801005e:	b100      	cbz	r0, 8010062 <_rclc_execute.part.0+0xa2>
 8010060:	68a0      	ldr	r0, [r4, #8]
 8010062:	2400      	movs	r4, #0
 8010064:	4798      	blx	r3
 8010066:	4620      	mov	r0, r4
 8010068:	b005      	add	sp, #20
 801006a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801006c:	6840      	ldr	r0, [r0, #4]
 801006e:	f006 f8ed 	bl	801624c <rcl_timer_call>
 8010072:	f240 3321 	movw	r3, #801	@ 0x321
 8010076:	4604      	mov	r4, r0
 8010078:	4298      	cmp	r0, r3
 801007a:	d001      	beq.n	8010080 <_rclc_execute.part.0+0xc0>
 801007c:	2800      	cmp	r0, #0
 801007e:	d1c2      	bne.n	8010006 <_rclc_execute.part.0+0x46>
 8010080:	2400      	movs	r4, #0
 8010082:	4620      	mov	r0, r4
 8010084:	b005      	add	sp, #20
 8010086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010088:	2400      	movs	r4, #0
 801008a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801008c:	6880      	ldr	r0, [r0, #8]
 801008e:	4798      	blx	r3
 8010090:	4620      	mov	r0, r4
 8010092:	b005      	add	sp, #20
 8010094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010096:	2400      	movs	r4, #0
 8010098:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801009a:	4798      	blx	r3
 801009c:	4620      	mov	r0, r4
 801009e:	b005      	add	sp, #20
 80100a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a2:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80100a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80100a8:	b100      	cbz	r0, 80100ac <_rclc_execute.part.0+0xec>
 80100aa:	68a0      	ldr	r0, [r4, #8]
 80100ac:	2400      	movs	r4, #0
 80100ae:	4798      	blx	r3
 80100b0:	4620      	mov	r0, r4
 80100b2:	b005      	add	sp, #20
 80100b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100b6:	6840      	ldr	r0, [r0, #4]
 80100b8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80100bc:	bb3b      	cbnz	r3, 801010e <_rclc_execute.part.0+0x14e>
 80100be:	f890 3020 	ldrb.w	r3, [r0, #32]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d07d      	beq.n	80101c2 <_rclc_execute.part.0+0x202>
 80100c6:	f640 0634 	movw	r6, #2100	@ 0x834
 80100ca:	2701      	movs	r7, #1
 80100cc:	e007      	b.n	80100de <_rclc_execute.part.0+0x11e>
 80100ce:	4628      	mov	r0, r5
 80100d0:	f007 fd2c 	bl	8017b2c <rclc_action_server_response_goal_request>
 80100d4:	4629      	mov	r1, r5
 80100d6:	6860      	ldr	r0, [r4, #4]
 80100d8:	f007 fc96 	bl	8017a08 <rclc_action_remove_used_goal_handle>
 80100dc:	6860      	ldr	r0, [r4, #4]
 80100de:	2100      	movs	r1, #0
 80100e0:	f007 fcbe 	bl	8017a60 <rclc_action_find_first_handle_by_status>
 80100e4:	4605      	mov	r5, r0
 80100e6:	2800      	cmp	r0, #0
 80100e8:	d068      	beq.n	80101bc <_rclc_execute.part.0+0x1fc>
 80100ea:	6863      	ldr	r3, [r4, #4]
 80100ec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80100ee:	699b      	ldr	r3, [r3, #24]
 80100f0:	4798      	blx	r3
 80100f2:	42b0      	cmp	r0, r6
 80100f4:	f04f 0100 	mov.w	r1, #0
 80100f8:	d1e9      	bne.n	80100ce <_rclc_execute.part.0+0x10e>
 80100fa:	2101      	movs	r1, #1
 80100fc:	4628      	mov	r0, r5
 80100fe:	f007 fd15 	bl	8017b2c <rclc_action_server_response_goal_request>
 8010102:	722f      	strb	r7, [r5, #8]
 8010104:	e7ea      	b.n	80100dc <_rclc_execute.part.0+0x11c>
 8010106:	6848      	ldr	r0, [r1, #4]
 8010108:	f007 fc7e 	bl	8017a08 <rclc_action_remove_used_goal_handle>
 801010c:	6860      	ldr	r0, [r4, #4]
 801010e:	f007 fcb3 	bl	8017a78 <rclc_action_find_first_terminated_handle>
 8010112:	4601      	mov	r1, r0
 8010114:	2800      	cmp	r0, #0
 8010116:	d1f6      	bne.n	8010106 <_rclc_execute.part.0+0x146>
 8010118:	6860      	ldr	r0, [r4, #4]
 801011a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801011e:	e7ce      	b.n	80100be <_rclc_execute.part.0+0xfe>
 8010120:	2400      	movs	r4, #0
 8010122:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010124:	f100 0110 	add.w	r1, r0, #16
 8010128:	6880      	ldr	r0, [r0, #8]
 801012a:	4798      	blx	r3
 801012c:	4620      	mov	r0, r4
 801012e:	b005      	add	sp, #20
 8010130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010132:	6860      	ldr	r0, [r4, #4]
 8010134:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010138:	b18b      	cbz	r3, 801015e <_rclc_execute.part.0+0x19e>
 801013a:	68c5      	ldr	r5, [r0, #12]
 801013c:	b32d      	cbz	r5, 801018a <_rclc_execute.part.0+0x1ca>
 801013e:	2600      	movs	r6, #0
 8010140:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8010144:	b143      	cbz	r3, 8010158 <_rclc_execute.part.0+0x198>
 8010146:	69c3      	ldr	r3, [r0, #28]
 8010148:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 801014c:	b123      	cbz	r3, 8010158 <_rclc_execute.part.0+0x198>
 801014e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010150:	4628      	mov	r0, r5
 8010152:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010154:	4798      	blx	r3
 8010156:	6860      	ldr	r0, [r4, #4]
 8010158:	682d      	ldr	r5, [r5, #0]
 801015a:	2d00      	cmp	r5, #0
 801015c:	d1f0      	bne.n	8010140 <_rclc_execute.part.0+0x180>
 801015e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010162:	b193      	cbz	r3, 801018a <_rclc_execute.part.0+0x1ca>
 8010164:	68c5      	ldr	r5, [r0, #12]
 8010166:	b185      	cbz	r5, 801018a <_rclc_execute.part.0+0x1ca>
 8010168:	2600      	movs	r6, #0
 801016a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 801016e:	b14b      	cbz	r3, 8010184 <_rclc_execute.part.0+0x1c4>
 8010170:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010172:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8010176:	b12b      	cbz	r3, 8010184 <_rclc_execute.part.0+0x1c4>
 8010178:	4628      	mov	r0, r5
 801017a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801017e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010180:	4798      	blx	r3
 8010182:	6860      	ldr	r0, [r4, #4]
 8010184:	682d      	ldr	r5, [r5, #0]
 8010186:	2d00      	cmp	r5, #0
 8010188:	d1ef      	bne.n	801016a <_rclc_execute.part.0+0x1aa>
 801018a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801018e:	2b00      	cmp	r3, #0
 8010190:	f43f af76 	beq.w	8010080 <_rclc_execute.part.0+0xc0>
 8010194:	2700      	movs	r7, #0
 8010196:	e00b      	b.n	80101b0 <_rclc_execute.part.0+0x1f0>
 8010198:	6863      	ldr	r3, [r4, #4]
 801019a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801019c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801019e:	6a1e      	ldr	r6, [r3, #32]
 80101a0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80101a4:	47b0      	blx	r6
 80101a6:	6860      	ldr	r0, [r4, #4]
 80101a8:	4629      	mov	r1, r5
 80101aa:	f007 fc2d 	bl	8017a08 <rclc_action_remove_used_goal_handle>
 80101ae:	6860      	ldr	r0, [r4, #4]
 80101b0:	f007 fcb0 	bl	8017b14 <rclc_action_find_first_handle_with_result_response>
 80101b4:	4605      	mov	r5, r0
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d1ee      	bne.n	8010198 <_rclc_execute.part.0+0x1d8>
 80101ba:	e761      	b.n	8010080 <_rclc_execute.part.0+0xc0>
 80101bc:	6860      	ldr	r0, [r4, #4]
 80101be:	f880 5020 	strb.w	r5, [r0, #32]
 80101c2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f43f af5a 	beq.w	8010080 <_rclc_execute.part.0+0xc0>
 80101cc:	68c5      	ldr	r5, [r0, #12]
 80101ce:	b1b5      	cbz	r5, 80101fe <_rclc_execute.part.0+0x23e>
 80101d0:	2602      	movs	r6, #2
 80101d2:	e001      	b.n	80101d8 <_rclc_execute.part.0+0x218>
 80101d4:	682d      	ldr	r5, [r5, #0]
 80101d6:	b195      	cbz	r5, 80101fe <_rclc_execute.part.0+0x23e>
 80101d8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80101dc:	2b03      	cmp	r3, #3
 80101de:	d1f9      	bne.n	80101d4 <_rclc_execute.part.0+0x214>
 80101e0:	69c3      	ldr	r3, [r0, #28]
 80101e2:	4628      	mov	r0, r5
 80101e4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80101e6:	4798      	blx	r3
 80101e8:	4603      	mov	r3, r0
 80101ea:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 80101ee:	4628      	mov	r0, r5
 80101f0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80101f4:	b143      	cbz	r3, 8010208 <_rclc_execute.part.0+0x248>
 80101f6:	f007 fcb7 	bl	8017b68 <rclc_action_server_goal_cancel_accept>
 80101fa:	6860      	ldr	r0, [r4, #4]
 80101fc:	e7ea      	b.n	80101d4 <_rclc_execute.part.0+0x214>
 80101fe:	2300      	movs	r3, #0
 8010200:	461c      	mov	r4, r3
 8010202:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010206:	e72e      	b.n	8010066 <_rclc_execute.part.0+0xa6>
 8010208:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801020a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 801020e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010212:	2101      	movs	r1, #1
 8010214:	6860      	ldr	r0, [r4, #4]
 8010216:	e9d7 2300 	ldrd	r2, r3, [r7]
 801021a:	f007 fcd1 	bl	8017bc0 <rclc_action_server_goal_cancel_reject>
 801021e:	722e      	strb	r6, [r5, #8]
 8010220:	6860      	ldr	r0, [r4, #4]
 8010222:	e7d7      	b.n	80101d4 <_rclc_execute.part.0+0x214>
 8010224:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010226:	f104 0510 	add.w	r5, r4, #16
 801022a:	6880      	ldr	r0, [r0, #8]
 801022c:	4798      	blx	r3
 801022e:	e6e3      	b.n	800fff8 <_rclc_execute.part.0+0x38>
 8010230:	f100 0510 	add.w	r5, r0, #16
 8010234:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010236:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8010238:	4629      	mov	r1, r5
 801023a:	6880      	ldr	r0, [r0, #8]
 801023c:	4798      	blx	r3
 801023e:	e6db      	b.n	800fff8 <_rclc_execute.part.0+0x38>
 8010240:	2401      	movs	r4, #1
 8010242:	e710      	b.n	8010066 <_rclc_execute.part.0+0xa6>

08010244 <rclc_executor_trigger_any>:
 8010244:	2800      	cmp	r0, #0
 8010246:	d03d      	beq.n	80102c4 <rclc_executor_trigger_any+0x80>
 8010248:	2900      	cmp	r1, #0
 801024a:	d03c      	beq.n	80102c6 <rclc_executor_trigger_any+0x82>
 801024c:	4603      	mov	r3, r0
 801024e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8010252:	2200      	movs	r2, #0
 8010254:	2800      	cmp	r0, #0
 8010256:	d035      	beq.n	80102c4 <rclc_executor_trigger_any+0x80>
 8010258:	b430      	push	{r4, r5}
 801025a:	f893 c000 	ldrb.w	ip, [r3]
 801025e:	f1bc 0f08 	cmp.w	ip, #8
 8010262:	d11d      	bne.n	80102a0 <rclc_executor_trigger_any+0x5c>
 8010264:	685c      	ldr	r4, [r3, #4]
 8010266:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8010268:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 801026c:	d105      	bne.n	801027a <rclc_executor_trigger_any+0x36>
 801026e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8010272:	b910      	cbnz	r0, 801027a <rclc_executor_trigger_any+0x36>
 8010274:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8010278:	b128      	cbz	r0, 8010286 <rclc_executor_trigger_any+0x42>
 801027a:	bc30      	pop	{r4, r5}
 801027c:	4770      	bx	lr
 801027e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8010282:	2800      	cmp	r0, #0
 8010284:	d1f9      	bne.n	801027a <rclc_executor_trigger_any+0x36>
 8010286:	3201      	adds	r2, #1
 8010288:	3340      	adds	r3, #64	@ 0x40
 801028a:	4291      	cmp	r1, r2
 801028c:	d017      	beq.n	80102be <rclc_executor_trigger_any+0x7a>
 801028e:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8010292:	2800      	cmp	r0, #0
 8010294:	d0f1      	beq.n	801027a <rclc_executor_trigger_any+0x36>
 8010296:	f893 c000 	ldrb.w	ip, [r3]
 801029a:	f1bc 0f08 	cmp.w	ip, #8
 801029e:	d0e1      	beq.n	8010264 <rclc_executor_trigger_any+0x20>
 80102a0:	f1bc 0f09 	cmp.w	ip, #9
 80102a4:	d1eb      	bne.n	801027e <rclc_executor_trigger_any+0x3a>
 80102a6:	685c      	ldr	r4, [r3, #4]
 80102a8:	6a25      	ldr	r5, [r4, #32]
 80102aa:	2d00      	cmp	r5, #0
 80102ac:	d1e5      	bne.n	801027a <rclc_executor_trigger_any+0x36>
 80102ae:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d1e1      	bne.n	801027a <rclc_executor_trigger_any+0x36>
 80102b6:	3201      	adds	r2, #1
 80102b8:	3340      	adds	r3, #64	@ 0x40
 80102ba:	4291      	cmp	r1, r2
 80102bc:	d1e7      	bne.n	801028e <rclc_executor_trigger_any+0x4a>
 80102be:	2000      	movs	r0, #0
 80102c0:	bc30      	pop	{r4, r5}
 80102c2:	4770      	bx	lr
 80102c4:	4770      	bx	lr
 80102c6:	4608      	mov	r0, r1
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop

080102cc <rclc_executor_get_zero_initialized_executor>:
 80102cc:	b510      	push	{r4, lr}
 80102ce:	4604      	mov	r4, r0
 80102d0:	2288      	movs	r2, #136	@ 0x88
 80102d2:	4902      	ldr	r1, [pc, #8]	@ (80102dc <rclc_executor_get_zero_initialized_executor+0x10>)
 80102d4:	f00b faf7 	bl	801b8c6 <memcpy>
 80102d8:	4620      	mov	r0, r4
 80102da:	bd10      	pop	{r4, pc}
 80102dc:	0801ca38 	.word	0x0801ca38

080102e0 <rclc_executor_init>:
 80102e0:	2900      	cmp	r1, #0
 80102e2:	d06a      	beq.n	80103ba <rclc_executor_init+0xda>
 80102e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e8:	4605      	mov	r5, r0
 80102ea:	b0b0      	sub	sp, #192	@ 0xc0
 80102ec:	2800      	cmp	r0, #0
 80102ee:	d05c      	beq.n	80103aa <rclc_executor_init+0xca>
 80102f0:	4616      	mov	r6, r2
 80102f2:	4618      	mov	r0, r3
 80102f4:	4688      	mov	r8, r1
 80102f6:	461f      	mov	r7, r3
 80102f8:	f000 fc14 	bl	8010b24 <rcutils_allocator_is_valid>
 80102fc:	2e00      	cmp	r6, #0
 80102fe:	d054      	beq.n	80103aa <rclc_executor_init+0xca>
 8010300:	f080 0401 	eor.w	r4, r0, #1
 8010304:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8010308:	d14f      	bne.n	80103aa <rclc_executor_init+0xca>
 801030a:	2288      	movs	r2, #136	@ 0x88
 801030c:	4930      	ldr	r1, [pc, #192]	@ (80103d0 <rclc_executor_init+0xf0>)
 801030e:	a80e      	add	r0, sp, #56	@ 0x38
 8010310:	f00b fad9 	bl	801b8c6 <memcpy>
 8010314:	a90e      	add	r1, sp, #56	@ 0x38
 8010316:	2288      	movs	r2, #136	@ 0x88
 8010318:	4628      	mov	r0, r5
 801031a:	f00b fad4 	bl	801b8c6 <memcpy>
 801031e:	4668      	mov	r0, sp
 8010320:	f8c5 8000 	str.w	r8, [r5]
 8010324:	60ae      	str	r6, [r5, #8]
 8010326:	f006 f907 	bl	8016538 <rcl_get_zero_initialized_wait_set>
 801032a:	46ec      	mov	ip, sp
 801032c:	f105 0e14 	add.w	lr, r5, #20
 8010330:	f8d7 8000 	ldr.w	r8, [r7]
 8010334:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010338:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801033c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010340:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010344:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010348:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 80103c8 <rclc_executor_init+0xe8>
 801034c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010350:	f8dc 3000 	ldr.w	r3, [ip]
 8010354:	01b0      	lsls	r0, r6, #6
 8010356:	6939      	ldr	r1, [r7, #16]
 8010358:	f8ce 3000 	str.w	r3, [lr]
 801035c:	612f      	str	r7, [r5, #16]
 801035e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8010362:	47c0      	blx	r8
 8010364:	6068      	str	r0, [r5, #4]
 8010366:	b908      	cbnz	r0, 801036c <rclc_executor_init+0x8c>
 8010368:	e029      	b.n	80103be <rclc_executor_init+0xde>
 801036a:	6868      	ldr	r0, [r5, #4]
 801036c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8010370:	3401      	adds	r4, #1
 8010372:	4631      	mov	r1, r6
 8010374:	f000 fa7c 	bl	8010870 <rclc_executor_handle_init>
 8010378:	42a6      	cmp	r6, r4
 801037a:	d8f6      	bhi.n	801036a <rclc_executor_init+0x8a>
 801037c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8010380:	f000 fa6a 	bl	8010858 <rclc_executor_handle_counters_zero_init>
 8010384:	4a13      	ldr	r2, [pc, #76]	@ (80103d4 <rclc_executor_init+0xf4>)
 8010386:	2300      	movs	r3, #0
 8010388:	6868      	ldr	r0, [r5, #4]
 801038a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 801038e:	b168      	cbz	r0, 80103ac <rclc_executor_init+0xcc>
 8010390:	68ab      	ldr	r3, [r5, #8]
 8010392:	b173      	cbz	r3, 80103b2 <rclc_executor_init+0xd2>
 8010394:	692a      	ldr	r2, [r5, #16]
 8010396:	fab2 f382 	clz	r3, r2
 801039a:	095b      	lsrs	r3, r3, #5
 801039c:	b14a      	cbz	r2, 80103b2 <rclc_executor_init+0xd2>
 801039e:	4618      	mov	r0, r3
 80103a0:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 80103a4:	b030      	add	sp, #192	@ 0xc0
 80103a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103aa:	200b      	movs	r0, #11
 80103ac:	b030      	add	sp, #192	@ 0xc0
 80103ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b2:	2000      	movs	r0, #0
 80103b4:	b030      	add	sp, #192	@ 0xc0
 80103b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ba:	200b      	movs	r0, #11
 80103bc:	4770      	bx	lr
 80103be:	200a      	movs	r0, #10
 80103c0:	e7f4      	b.n	80103ac <rclc_executor_init+0xcc>
 80103c2:	bf00      	nop
 80103c4:	f3af 8000 	nop.w
 80103c8:	3b9aca00 	.word	0x3b9aca00
 80103cc:	00000000 	.word	0x00000000
 80103d0:	0801ca38 	.word	0x0801ca38
 80103d4:	08010245 	.word	0x08010245

080103d8 <rclc_executor_add_subscription>:
 80103d8:	2b00      	cmp	r3, #0
 80103da:	bf18      	it	ne
 80103dc:	2a00      	cmpne	r2, #0
 80103de:	b570      	push	{r4, r5, r6, lr}
 80103e0:	4604      	mov	r4, r0
 80103e2:	bf0c      	ite	eq
 80103e4:	2001      	moveq	r0, #1
 80103e6:	2000      	movne	r0, #0
 80103e8:	f89d c010 	ldrb.w	ip, [sp, #16]
 80103ec:	2900      	cmp	r1, #0
 80103ee:	bf08      	it	eq
 80103f0:	f040 0001 	orreq.w	r0, r0, #1
 80103f4:	bb28      	cbnz	r0, 8010442 <rclc_executor_add_subscription+0x6a>
 80103f6:	fab4 f584 	clz	r5, r4
 80103fa:	096d      	lsrs	r5, r5, #5
 80103fc:	b30c      	cbz	r4, 8010442 <rclc_executor_add_subscription+0x6a>
 80103fe:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8010402:	4286      	cmp	r6, r0
 8010404:	d301      	bcc.n	801040a <rclc_executor_add_subscription+0x32>
 8010406:	2001      	movs	r0, #1
 8010408:	bd70      	pop	{r4, r5, r6, pc}
 801040a:	6860      	ldr	r0, [r4, #4]
 801040c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8010410:	f800 500e 	strb.w	r5, [r0, lr]
 8010414:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8010418:	3601      	adds	r6, #1
 801041a:	6303      	str	r3, [r0, #48]	@ 0x30
 801041c:	2301      	movs	r3, #1
 801041e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8010420:	f104 0514 	add.w	r5, r4, #20
 8010424:	f880 c001 	strb.w	ip, [r0, #1]
 8010428:	8703      	strh	r3, [r0, #56]	@ 0x38
 801042a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801042e:	4628      	mov	r0, r5
 8010430:	60e6      	str	r6, [r4, #12]
 8010432:	f006 f895 	bl	8016560 <rcl_wait_set_is_valid>
 8010436:	b930      	cbnz	r0, 8010446 <rclc_executor_add_subscription+0x6e>
 8010438:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801043a:	2000      	movs	r0, #0
 801043c:	3301      	adds	r3, #1
 801043e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8010440:	bd70      	pop	{r4, r5, r6, pc}
 8010442:	200b      	movs	r0, #11
 8010444:	bd70      	pop	{r4, r5, r6, pc}
 8010446:	4628      	mov	r0, r5
 8010448:	f006 f890 	bl	801656c <rcl_wait_set_fini>
 801044c:	2800      	cmp	r0, #0
 801044e:	d0f3      	beq.n	8010438 <rclc_executor_add_subscription+0x60>
 8010450:	bd70      	pop	{r4, r5, r6, pc}
 8010452:	bf00      	nop

08010454 <rclc_executor_prepare>:
 8010454:	2800      	cmp	r0, #0
 8010456:	d044      	beq.n	80104e2 <rclc_executor_prepare+0x8e>
 8010458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801045a:	f100 0514 	add.w	r5, r0, #20
 801045e:	b09b      	sub	sp, #108	@ 0x6c
 8010460:	4604      	mov	r4, r0
 8010462:	4628      	mov	r0, r5
 8010464:	f006 f87c 	bl	8016560 <rcl_wait_set_is_valid>
 8010468:	b110      	cbz	r0, 8010470 <rclc_executor_prepare+0x1c>
 801046a:	2000      	movs	r0, #0
 801046c:	b01b      	add	sp, #108	@ 0x6c
 801046e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010470:	4628      	mov	r0, r5
 8010472:	f006 f87b 	bl	801656c <rcl_wait_set_fini>
 8010476:	2800      	cmp	r0, #0
 8010478:	d130      	bne.n	80104dc <rclc_executor_prepare+0x88>
 801047a:	a80c      	add	r0, sp, #48	@ 0x30
 801047c:	ae04      	add	r6, sp, #16
 801047e:	f006 f85b 	bl	8016538 <rcl_get_zero_initialized_wait_set>
 8010482:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010486:	46ae      	mov	lr, r5
 8010488:	6927      	ldr	r7, [r4, #16]
 801048a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801048e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010496:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801049a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801049e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80104a2:	f8dc 3000 	ldr.w	r3, [ip]
 80104a6:	f8ce 3000 	str.w	r3, [lr]
 80104aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80104ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	4628      	mov	r0, r5
 80104b2:	6822      	ldr	r2, [r4, #0]
 80104b4:	6033      	str	r3, [r6, #0]
 80104b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104b8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80104ba:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80104be:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80104c2:	e9cd 2100 	strd	r2, r1, [sp]
 80104c6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80104c8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80104ca:	f006 fb4f 	bl	8016b6c <rcl_wait_set_init>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d0cc      	beq.n	801046c <rclc_executor_prepare+0x18>
 80104d2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80104d4:	f000 fb64 	bl	8010ba0 <rcutils_reset_error>
 80104d8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80104da:	e7c7      	b.n	801046c <rclc_executor_prepare+0x18>
 80104dc:	f000 fb60 	bl	8010ba0 <rcutils_reset_error>
 80104e0:	e7cb      	b.n	801047a <rclc_executor_prepare+0x26>
 80104e2:	200b      	movs	r0, #11
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop

080104e8 <rclc_executor_spin_some.part.0>:
 80104e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ec:	4605      	mov	r5, r0
 80104ee:	4691      	mov	r9, r2
 80104f0:	4698      	mov	r8, r3
 80104f2:	f7ff ffaf 	bl	8010454 <rclc_executor_prepare>
 80104f6:	f105 0614 	add.w	r6, r5, #20
 80104fa:	4630      	mov	r0, r6
 80104fc:	f006 f902 	bl	8016704 <rcl_wait_set_clear>
 8010500:	4607      	mov	r7, r0
 8010502:	2800      	cmp	r0, #0
 8010504:	f040 80a8 	bne.w	8010658 <rclc_executor_spin_some.part.0+0x170>
 8010508:	68ab      	ldr	r3, [r5, #8]
 801050a:	b30b      	cbz	r3, 8010550 <rclc_executor_spin_some.part.0+0x68>
 801050c:	4604      	mov	r4, r0
 801050e:	6869      	ldr	r1, [r5, #4]
 8010510:	01a2      	lsls	r2, r4, #6
 8010512:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8010516:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 801051a:	b1cb      	cbz	r3, 8010550 <rclc_executor_spin_some.part.0+0x68>
 801051c:	5c8b      	ldrb	r3, [r1, r2]
 801051e:	2b0a      	cmp	r3, #10
 8010520:	f200 80de 	bhi.w	80106e0 <rclc_executor_spin_some.part.0+0x1f8>
 8010524:	e8df f003 	tbb	[pc, r3]
 8010528:	8da99d9d 	.word	0x8da99d9d
 801052c:	0606068d 	.word	0x0606068d
 8010530:	c1ce      	.short	0xc1ce
 8010532:	b5          	.byte	0xb5
 8010533:	00          	.byte	0x00
 8010534:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010538:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801053c:	4630      	mov	r0, r6
 801053e:	f006 fc31 	bl	8016da4 <rcl_wait_set_add_service>
 8010542:	2800      	cmp	r0, #0
 8010544:	f040 8087 	bne.w	8010656 <rclc_executor_spin_some.part.0+0x16e>
 8010548:	3401      	adds	r4, #1
 801054a:	68ab      	ldr	r3, [r5, #8]
 801054c:	429c      	cmp	r4, r3
 801054e:	d3de      	bcc.n	801050e <rclc_executor_spin_some.part.0+0x26>
 8010550:	4643      	mov	r3, r8
 8010552:	464a      	mov	r2, r9
 8010554:	4630      	mov	r0, r6
 8010556:	f006 fc53 	bl	8016e00 <rcl_wait>
 801055a:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 801055e:	2b00      	cmp	r3, #0
 8010560:	f000 80c6 	beq.w	80106f0 <rclc_executor_spin_some.part.0+0x208>
 8010564:	2b01      	cmp	r3, #1
 8010566:	f040 80bb 	bne.w	80106e0 <rclc_executor_spin_some.part.0+0x1f8>
 801056a:	68ab      	ldr	r3, [r5, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	f000 8159 	beq.w	8010824 <rclc_executor_spin_some.part.0+0x33c>
 8010572:	2400      	movs	r4, #0
 8010574:	f240 1991 	movw	r9, #401	@ 0x191
 8010578:	46a0      	mov	r8, r4
 801057a:	e00a      	b.n	8010592 <rclc_executor_spin_some.part.0+0xaa>
 801057c:	f7ff fb5e 	bl	800fc3c <_rclc_check_for_new_data>
 8010580:	4604      	mov	r4, r0
 8010582:	b110      	cbz	r0, 801058a <rclc_executor_spin_some.part.0+0xa2>
 8010584:	4548      	cmp	r0, r9
 8010586:	f040 80b1 	bne.w	80106ec <rclc_executor_spin_some.part.0+0x204>
 801058a:	68ab      	ldr	r3, [r5, #8]
 801058c:	4598      	cmp	r8, r3
 801058e:	f080 8126 	bcs.w	80107de <rclc_executor_spin_some.part.0+0x2f6>
 8010592:	686a      	ldr	r2, [r5, #4]
 8010594:	4631      	mov	r1, r6
 8010596:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801059a:	f108 0801 	add.w	r8, r8, #1
 801059e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80105a2:	f1bc 0f00 	cmp.w	ip, #0
 80105a6:	d1e9      	bne.n	801057c <rclc_executor_spin_some.part.0+0x94>
 80105a8:	4619      	mov	r1, r3
 80105aa:	4610      	mov	r0, r2
 80105ac:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80105b0:	4798      	blx	r3
 80105b2:	2800      	cmp	r0, #0
 80105b4:	f000 809a 	beq.w	80106ec <rclc_executor_spin_some.part.0+0x204>
 80105b8:	68ab      	ldr	r3, [r5, #8]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f000 8096 	beq.w	80106ec <rclc_executor_spin_some.part.0+0x204>
 80105c0:	f04f 0800 	mov.w	r8, #0
 80105c4:	f240 1991 	movw	r9, #401	@ 0x191
 80105c8:	e009      	b.n	80105de <rclc_executor_spin_some.part.0+0xf6>
 80105ca:	f7ff fb85 	bl	800fcd8 <_rclc_take_new_data>
 80105ce:	4604      	mov	r4, r0
 80105d0:	b110      	cbz	r0, 80105d8 <rclc_executor_spin_some.part.0+0xf0>
 80105d2:	4548      	cmp	r0, r9
 80105d4:	f040 808a 	bne.w	80106ec <rclc_executor_spin_some.part.0+0x204>
 80105d8:	68ab      	ldr	r3, [r5, #8]
 80105da:	4598      	cmp	r8, r3
 80105dc:	d209      	bcs.n	80105f2 <rclc_executor_spin_some.part.0+0x10a>
 80105de:	6868      	ldr	r0, [r5, #4]
 80105e0:	4631      	mov	r1, r6
 80105e2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80105e6:	f108 0801 	add.w	r8, r8, #1
 80105ea:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80105ee:	2a00      	cmp	r2, #0
 80105f0:	d1eb      	bne.n	80105ca <rclc_executor_spin_some.part.0+0xe2>
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d07a      	beq.n	80106ec <rclc_executor_spin_some.part.0+0x204>
 80105f6:	2600      	movs	r6, #0
 80105f8:	e00e      	b.n	8010618 <rclc_executor_spin_some.part.0+0x130>
 80105fa:	f812 200c 	ldrb.w	r2, [r2, ip]
 80105fe:	2a08      	cmp	r2, #8
 8010600:	f000 80fc 	beq.w	80107fc <rclc_executor_spin_some.part.0+0x314>
 8010604:	2a09      	cmp	r2, #9
 8010606:	f000 80ee 	beq.w	80107e6 <rclc_executor_spin_some.part.0+0x2fe>
 801060a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 801060e:	b98a      	cbnz	r2, 8010634 <rclc_executor_spin_some.part.0+0x14c>
 8010610:	3601      	adds	r6, #1
 8010612:	429e      	cmp	r6, r3
 8010614:	d267      	bcs.n	80106e6 <rclc_executor_spin_some.part.0+0x1fe>
 8010616:	2400      	movs	r4, #0
 8010618:	686a      	ldr	r2, [r5, #4]
 801061a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 801061e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8010622:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8010626:	2900      	cmp	r1, #0
 8010628:	d060      	beq.n	80106ec <rclc_executor_spin_some.part.0+0x204>
 801062a:	7841      	ldrb	r1, [r0, #1]
 801062c:	2900      	cmp	r1, #0
 801062e:	d0e4      	beq.n	80105fa <rclc_executor_spin_some.part.0+0x112>
 8010630:	2901      	cmp	r1, #1
 8010632:	d1ed      	bne.n	8010610 <rclc_executor_spin_some.part.0+0x128>
 8010634:	f7ff fcc4 	bl	800ffc0 <_rclc_execute.part.0>
 8010638:	2800      	cmp	r0, #0
 801063a:	f040 80b5 	bne.w	80107a8 <rclc_executor_spin_some.part.0+0x2c0>
 801063e:	68ab      	ldr	r3, [r5, #8]
 8010640:	e7e6      	b.n	8010610 <rclc_executor_spin_some.part.0+0x128>
 8010642:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010646:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801064a:	4630      	mov	r0, r6
 801064c:	f006 fb7e 	bl	8016d4c <rcl_wait_set_add_client>
 8010650:	2800      	cmp	r0, #0
 8010652:	f43f af79 	beq.w	8010548 <rclc_executor_spin_some.part.0+0x60>
 8010656:	4607      	mov	r7, r0
 8010658:	f000 faa2 	bl	8010ba0 <rcutils_reset_error>
 801065c:	4638      	mov	r0, r7
 801065e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010662:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010666:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801066a:	4630      	mov	r0, r6
 801066c:	f006 f81e 	bl	80166ac <rcl_wait_set_add_subscription>
 8010670:	2800      	cmp	r0, #0
 8010672:	f43f af69 	beq.w	8010548 <rclc_executor_spin_some.part.0+0x60>
 8010676:	4607      	mov	r7, r0
 8010678:	e7ee      	b.n	8010658 <rclc_executor_spin_some.part.0+0x170>
 801067a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801067e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010682:	4630      	mov	r0, r6
 8010684:	f006 fb32 	bl	8016cec <rcl_wait_set_add_timer>
 8010688:	2800      	cmp	r0, #0
 801068a:	f43f af5d 	beq.w	8010548 <rclc_executor_spin_some.part.0+0x60>
 801068e:	4607      	mov	r7, r0
 8010690:	e7e2      	b.n	8010658 <rclc_executor_spin_some.part.0+0x170>
 8010692:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010696:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801069a:	4630      	mov	r0, r6
 801069c:	f006 fafa 	bl	8016c94 <rcl_wait_set_add_guard_condition>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	f43f af51 	beq.w	8010548 <rclc_executor_spin_some.part.0+0x60>
 80106a6:	4607      	mov	r7, r0
 80106a8:	e7d6      	b.n	8010658 <rclc_executor_spin_some.part.0+0x170>
 80106aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80106ae:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80106b2:	4630      	mov	r0, r6
 80106b4:	3110      	adds	r1, #16
 80106b6:	f007 f879 	bl	80177ac <rcl_action_wait_set_add_action_server>
 80106ba:	2800      	cmp	r0, #0
 80106bc:	f43f af44 	beq.w	8010548 <rclc_executor_spin_some.part.0+0x60>
 80106c0:	4607      	mov	r7, r0
 80106c2:	e7c9      	b.n	8010658 <rclc_executor_spin_some.part.0+0x170>
 80106c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80106c8:	2300      	movs	r3, #0
 80106ca:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80106ce:	4630      	mov	r0, r6
 80106d0:	3110      	adds	r1, #16
 80106d2:	f006 fe41 	bl	8017358 <rcl_action_wait_set_add_action_client>
 80106d6:	2800      	cmp	r0, #0
 80106d8:	f43f af36 	beq.w	8010548 <rclc_executor_spin_some.part.0+0x60>
 80106dc:	4607      	mov	r7, r0
 80106de:	e7bb      	b.n	8010658 <rclc_executor_spin_some.part.0+0x170>
 80106e0:	2701      	movs	r7, #1
 80106e2:	f000 fa5d 	bl	8010ba0 <rcutils_reset_error>
 80106e6:	4638      	mov	r0, r7
 80106e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ec:	4627      	mov	r7, r4
 80106ee:	e7fa      	b.n	80106e6 <rclc_executor_spin_some.part.0+0x1fe>
 80106f0:	68ab      	ldr	r3, [r5, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f000 8093 	beq.w	801081e <rclc_executor_spin_some.part.0+0x336>
 80106f8:	2400      	movs	r4, #0
 80106fa:	f240 1991 	movw	r9, #401	@ 0x191
 80106fe:	46a0      	mov	r8, r4
 8010700:	e008      	b.n	8010714 <rclc_executor_spin_some.part.0+0x22c>
 8010702:	f7ff fa9b 	bl	800fc3c <_rclc_check_for_new_data>
 8010706:	4604      	mov	r4, r0
 8010708:	b108      	cbz	r0, 801070e <rclc_executor_spin_some.part.0+0x226>
 801070a:	4548      	cmp	r0, r9
 801070c:	d1ee      	bne.n	80106ec <rclc_executor_spin_some.part.0+0x204>
 801070e:	68ab      	ldr	r3, [r5, #8]
 8010710:	4598      	cmp	r8, r3
 8010712:	d266      	bcs.n	80107e2 <rclc_executor_spin_some.part.0+0x2fa>
 8010714:	686a      	ldr	r2, [r5, #4]
 8010716:	4631      	mov	r1, r6
 8010718:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801071c:	f108 0801 	add.w	r8, r8, #1
 8010720:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8010724:	f1bc 0f00 	cmp.w	ip, #0
 8010728:	d1eb      	bne.n	8010702 <rclc_executor_spin_some.part.0+0x21a>
 801072a:	4619      	mov	r1, r3
 801072c:	4610      	mov	r0, r2
 801072e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010732:	4798      	blx	r3
 8010734:	2800      	cmp	r0, #0
 8010736:	d0d9      	beq.n	80106ec <rclc_executor_spin_some.part.0+0x204>
 8010738:	68ab      	ldr	r3, [r5, #8]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d0d6      	beq.n	80106ec <rclc_executor_spin_some.part.0+0x204>
 801073e:	f04f 0a00 	mov.w	sl, #0
 8010742:	f240 1891 	movw	r8, #401	@ 0x191
 8010746:	f240 2959 	movw	r9, #601	@ 0x259
 801074a:	e00e      	b.n	801076a <rclc_executor_spin_some.part.0+0x282>
 801074c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8010750:	2b08      	cmp	r3, #8
 8010752:	d034      	beq.n	80107be <rclc_executor_spin_some.part.0+0x2d6>
 8010754:	2b09      	cmp	r3, #9
 8010756:	d029      	beq.n	80107ac <rclc_executor_spin_some.part.0+0x2c4>
 8010758:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 801075c:	bb03      	cbnz	r3, 80107a0 <rclc_executor_spin_some.part.0+0x2b8>
 801075e:	f10a 0a01 	add.w	sl, sl, #1
 8010762:	68ab      	ldr	r3, [r5, #8]
 8010764:	459a      	cmp	sl, r3
 8010766:	d2be      	bcs.n	80106e6 <rclc_executor_spin_some.part.0+0x1fe>
 8010768:	2400      	movs	r4, #0
 801076a:	6868      	ldr	r0, [r5, #4]
 801076c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8010770:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8010774:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010778:	2b00      	cmp	r3, #0
 801077a:	d0b7      	beq.n	80106ec <rclc_executor_spin_some.part.0+0x204>
 801077c:	4631      	mov	r1, r6
 801077e:	f7ff faab 	bl	800fcd8 <_rclc_take_new_data>
 8010782:	2800      	cmp	r0, #0
 8010784:	bf18      	it	ne
 8010786:	4540      	cmpne	r0, r8
 8010788:	d001      	beq.n	801078e <rclc_executor_spin_some.part.0+0x2a6>
 801078a:	4548      	cmp	r0, r9
 801078c:	d10c      	bne.n	80107a8 <rclc_executor_spin_some.part.0+0x2c0>
 801078e:	686b      	ldr	r3, [r5, #4]
 8010790:	eb13 000b 	adds.w	r0, r3, fp
 8010794:	d021      	beq.n	80107da <rclc_executor_spin_some.part.0+0x2f2>
 8010796:	7842      	ldrb	r2, [r0, #1]
 8010798:	2a00      	cmp	r2, #0
 801079a:	d0d7      	beq.n	801074c <rclc_executor_spin_some.part.0+0x264>
 801079c:	2a01      	cmp	r2, #1
 801079e:	d1de      	bne.n	801075e <rclc_executor_spin_some.part.0+0x276>
 80107a0:	f7ff fc0e 	bl	800ffc0 <_rclc_execute.part.0>
 80107a4:	2800      	cmp	r0, #0
 80107a6:	d0da      	beq.n	801075e <rclc_executor_spin_some.part.0+0x276>
 80107a8:	4607      	mov	r7, r0
 80107aa:	e79c      	b.n	80106e6 <rclc_executor_spin_some.part.0+0x1fe>
 80107ac:	6843      	ldr	r3, [r0, #4]
 80107ae:	6a1a      	ldr	r2, [r3, #32]
 80107b0:	2a00      	cmp	r2, #0
 80107b2:	d1f5      	bne.n	80107a0 <rclc_executor_spin_some.part.0+0x2b8>
 80107b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d0d0      	beq.n	801075e <rclc_executor_spin_some.part.0+0x276>
 80107bc:	e7f0      	b.n	80107a0 <rclc_executor_spin_some.part.0+0x2b8>
 80107be:	6843      	ldr	r3, [r0, #4]
 80107c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80107c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80107c6:	d1eb      	bne.n	80107a0 <rclc_executor_spin_some.part.0+0x2b8>
 80107c8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80107cc:	2a00      	cmp	r2, #0
 80107ce:	d1e7      	bne.n	80107a0 <rclc_executor_spin_some.part.0+0x2b8>
 80107d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d0c2      	beq.n	801075e <rclc_executor_spin_some.part.0+0x276>
 80107d8:	e7e2      	b.n	80107a0 <rclc_executor_spin_some.part.0+0x2b8>
 80107da:	270b      	movs	r7, #11
 80107dc:	e783      	b.n	80106e6 <rclc_executor_spin_some.part.0+0x1fe>
 80107de:	686a      	ldr	r2, [r5, #4]
 80107e0:	e6e2      	b.n	80105a8 <rclc_executor_spin_some.part.0+0xc0>
 80107e2:	686a      	ldr	r2, [r5, #4]
 80107e4:	e7a1      	b.n	801072a <rclc_executor_spin_some.part.0+0x242>
 80107e6:	6842      	ldr	r2, [r0, #4]
 80107e8:	6a11      	ldr	r1, [r2, #32]
 80107ea:	2900      	cmp	r1, #0
 80107ec:	f47f af22 	bne.w	8010634 <rclc_executor_spin_some.part.0+0x14c>
 80107f0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80107f4:	2a00      	cmp	r2, #0
 80107f6:	f43f af0b 	beq.w	8010610 <rclc_executor_spin_some.part.0+0x128>
 80107fa:	e71b      	b.n	8010634 <rclc_executor_spin_some.part.0+0x14c>
 80107fc:	6842      	ldr	r2, [r0, #4]
 80107fe:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8010800:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8010804:	f47f af16 	bne.w	8010634 <rclc_executor_spin_some.part.0+0x14c>
 8010808:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 801080c:	2900      	cmp	r1, #0
 801080e:	f47f af11 	bne.w	8010634 <rclc_executor_spin_some.part.0+0x14c>
 8010812:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8010816:	2a00      	cmp	r2, #0
 8010818:	f43f aefa 	beq.w	8010610 <rclc_executor_spin_some.part.0+0x128>
 801081c:	e70a      	b.n	8010634 <rclc_executor_spin_some.part.0+0x14c>
 801081e:	686a      	ldr	r2, [r5, #4]
 8010820:	461c      	mov	r4, r3
 8010822:	e782      	b.n	801072a <rclc_executor_spin_some.part.0+0x242>
 8010824:	686a      	ldr	r2, [r5, #4]
 8010826:	461c      	mov	r4, r3
 8010828:	e6be      	b.n	80105a8 <rclc_executor_spin_some.part.0+0xc0>
 801082a:	bf00      	nop

0801082c <rclc_executor_spin_some>:
 801082c:	b190      	cbz	r0, 8010854 <rclc_executor_spin_some+0x28>
 801082e:	b570      	push	{r4, r5, r6, lr}
 8010830:	4604      	mov	r4, r0
 8010832:	6800      	ldr	r0, [r0, #0]
 8010834:	4616      	mov	r6, r2
 8010836:	461d      	mov	r5, r3
 8010838:	f004 fd9a 	bl	8015370 <rcl_context_is_valid>
 801083c:	b130      	cbz	r0, 801084c <rclc_executor_spin_some+0x20>
 801083e:	4632      	mov	r2, r6
 8010840:	462b      	mov	r3, r5
 8010842:	4620      	mov	r0, r4
 8010844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010848:	f7ff be4e 	b.w	80104e8 <rclc_executor_spin_some.part.0>
 801084c:	f000 f9a8 	bl	8010ba0 <rcutils_reset_error>
 8010850:	2001      	movs	r0, #1
 8010852:	bd70      	pop	{r4, r5, r6, pc}
 8010854:	200b      	movs	r0, #11
 8010856:	4770      	bx	lr

08010858 <rclc_executor_handle_counters_zero_init>:
 8010858:	b130      	cbz	r0, 8010868 <rclc_executor_handle_counters_zero_init+0x10>
 801085a:	2220      	movs	r2, #32
 801085c:	2100      	movs	r1, #0
 801085e:	b508      	push	{r3, lr}
 8010860:	f00a ff68 	bl	801b734 <memset>
 8010864:	2000      	movs	r0, #0
 8010866:	bd08      	pop	{r3, pc}
 8010868:	200b      	movs	r0, #11
 801086a:	4770      	bx	lr
 801086c:	0000      	movs	r0, r0
	...

08010870 <rclc_executor_handle_init>:
 8010870:	4603      	mov	r3, r0
 8010872:	b178      	cbz	r0, 8010894 <rclc_executor_handle_init+0x24>
 8010874:	2200      	movs	r2, #0
 8010876:	f04f 0c0b 	mov.w	ip, #11
 801087a:	6341      	str	r1, [r0, #52]	@ 0x34
 801087c:	4610      	mov	r0, r2
 801087e:	f8a3 c000 	strh.w	ip, [r3]
 8010882:	631a      	str	r2, [r3, #48]	@ 0x30
 8010884:	871a      	strh	r2, [r3, #56]	@ 0x38
 8010886:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8010898 <rclc_executor_handle_init+0x28>
 801088a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801088e:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 8010892:	4770      	bx	lr
 8010894:	200b      	movs	r0, #11
 8010896:	4770      	bx	lr
	...

080108a0 <rclc_support_init>:
 80108a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108a4:	b086      	sub	sp, #24
 80108a6:	b3bb      	cbz	r3, 8010918 <rclc_support_init+0x78>
 80108a8:	4606      	mov	r6, r0
 80108aa:	b3a8      	cbz	r0, 8010918 <rclc_support_init+0x78>
 80108ac:	461c      	mov	r4, r3
 80108ae:	460f      	mov	r7, r1
 80108b0:	4690      	mov	r8, r2
 80108b2:	f004 ff77 	bl	80157a4 <rcl_get_zero_initialized_init_options>
 80108b6:	f104 050c 	add.w	r5, r4, #12
 80108ba:	9005      	str	r0, [sp, #20]
 80108bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80108c0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80108c4:	a805      	add	r0, sp, #20
 80108c6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80108ca:	f004 ff6d 	bl	80157a8 <rcl_init_options_init>
 80108ce:	4605      	mov	r5, r0
 80108d0:	b9e0      	cbnz	r0, 801090c <rclc_support_init+0x6c>
 80108d2:	ad02      	add	r5, sp, #8
 80108d4:	4628      	mov	r0, r5
 80108d6:	f004 fd41 	bl	801535c <rcl_get_zero_initialized_context>
 80108da:	4633      	mov	r3, r6
 80108dc:	aa05      	add	r2, sp, #20
 80108de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80108e2:	e886 0003 	stmia.w	r6, {r0, r1}
 80108e6:	4641      	mov	r1, r8
 80108e8:	4638      	mov	r0, r7
 80108ea:	f004 fe55 	bl	8015598 <rcl_init>
 80108ee:	4605      	mov	r5, r0
 80108f0:	b9b8      	cbnz	r0, 8010922 <rclc_support_init+0x82>
 80108f2:	4622      	mov	r2, r4
 80108f4:	f106 010c 	add.w	r1, r6, #12
 80108f8:	2003      	movs	r0, #3
 80108fa:	60b4      	str	r4, [r6, #8]
 80108fc:	f005 fc12 	bl	8016124 <rcl_clock_init>
 8010900:	4605      	mov	r5, r0
 8010902:	b970      	cbnz	r0, 8010922 <rclc_support_init+0x82>
 8010904:	a805      	add	r0, sp, #20
 8010906:	f004 ffb5 	bl	8015874 <rcl_init_options_fini>
 801090a:	b108      	cbz	r0, 8010910 <rclc_support_init+0x70>
 801090c:	f000 f948 	bl	8010ba0 <rcutils_reset_error>
 8010910:	4628      	mov	r0, r5
 8010912:	b006      	add	sp, #24
 8010914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010918:	250b      	movs	r5, #11
 801091a:	4628      	mov	r0, r5
 801091c:	b006      	add	sp, #24
 801091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010922:	f000 f93d 	bl	8010ba0 <rcutils_reset_error>
 8010926:	a805      	add	r0, sp, #20
 8010928:	f004 ffa4 	bl	8015874 <rcl_init_options_fini>
 801092c:	2800      	cmp	r0, #0
 801092e:	d0ef      	beq.n	8010910 <rclc_support_init+0x70>
 8010930:	e7ec      	b.n	801090c <rclc_support_init+0x6c>
 8010932:	bf00      	nop

08010934 <rclc_node_init_default>:
 8010934:	2b00      	cmp	r3, #0
 8010936:	bf18      	it	ne
 8010938:	2a00      	cmpne	r2, #0
 801093a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801093e:	4616      	mov	r6, r2
 8010940:	bf0c      	ite	eq
 8010942:	2201      	moveq	r2, #1
 8010944:	2200      	movne	r2, #0
 8010946:	b0a1      	sub	sp, #132	@ 0x84
 8010948:	2900      	cmp	r1, #0
 801094a:	bf08      	it	eq
 801094c:	f042 0201 	orreq.w	r2, r2, #1
 8010950:	bb22      	cbnz	r2, 801099c <rclc_node_init_default+0x68>
 8010952:	4604      	mov	r4, r0
 8010954:	b310      	cbz	r0, 801099c <rclc_node_init_default+0x68>
 8010956:	f10d 0810 	add.w	r8, sp, #16
 801095a:	461f      	mov	r7, r3
 801095c:	460d      	mov	r5, r1
 801095e:	f10d 0918 	add.w	r9, sp, #24
 8010962:	4640      	mov	r0, r8
 8010964:	f7fe feac 	bl	800f6c0 <rcl_get_zero_initialized_node>
 8010968:	e898 0003 	ldmia.w	r8, {r0, r1}
 801096c:	e884 0003 	stmia.w	r4, {r0, r1}
 8010970:	4648      	mov	r0, r9
 8010972:	f7ff f81f 	bl	800f9b4 <rcl_node_get_default_options>
 8010976:	4640      	mov	r0, r8
 8010978:	f7fe fea2 	bl	800f6c0 <rcl_get_zero_initialized_node>
 801097c:	f8cd 9000 	str.w	r9, [sp]
 8010980:	463b      	mov	r3, r7
 8010982:	4632      	mov	r2, r6
 8010984:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010988:	e884 0003 	stmia.w	r4, {r0, r1}
 801098c:	4629      	mov	r1, r5
 801098e:	4620      	mov	r0, r4
 8010990:	f7fe fea0 	bl	800f6d4 <rcl_node_init>
 8010994:	b930      	cbnz	r0, 80109a4 <rclc_node_init_default+0x70>
 8010996:	b021      	add	sp, #132	@ 0x84
 8010998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801099c:	200b      	movs	r0, #11
 801099e:	b021      	add	sp, #132	@ 0x84
 80109a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109a4:	9003      	str	r0, [sp, #12]
 80109a6:	f000 f8fb 	bl	8010ba0 <rcutils_reset_error>
 80109aa:	f000 f8f9 	bl	8010ba0 <rcutils_reset_error>
 80109ae:	9803      	ldr	r0, [sp, #12]
 80109b0:	b021      	add	sp, #132	@ 0x84
 80109b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109b6:	bf00      	nop

080109b8 <rclc_publisher_init_default>:
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	bf18      	it	ne
 80109bc:	2a00      	cmpne	r2, #0
 80109be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c2:	4616      	mov	r6, r2
 80109c4:	bf0c      	ite	eq
 80109c6:	2201      	moveq	r2, #1
 80109c8:	2200      	movne	r2, #0
 80109ca:	b0a0      	sub	sp, #128	@ 0x80
 80109cc:	2900      	cmp	r1, #0
 80109ce:	bf08      	it	eq
 80109d0:	f042 0201 	orreq.w	r2, r2, #1
 80109d4:	bb1a      	cbnz	r2, 8010a1e <rclc_publisher_init_default+0x66>
 80109d6:	4604      	mov	r4, r0
 80109d8:	b308      	cbz	r0, 8010a1e <rclc_publisher_init_default+0x66>
 80109da:	f10d 0810 	add.w	r8, sp, #16
 80109de:	461f      	mov	r7, r3
 80109e0:	460d      	mov	r5, r1
 80109e2:	f7ff f817 	bl	800fa14 <rcl_get_zero_initialized_publisher>
 80109e6:	6020      	str	r0, [r4, #0]
 80109e8:	4640      	mov	r0, r8
 80109ea:	f7ff f8b3 	bl	800fb54 <rcl_publisher_get_default_options>
 80109ee:	2250      	movs	r2, #80	@ 0x50
 80109f0:	490d      	ldr	r1, [pc, #52]	@ (8010a28 <rclc_publisher_init_default+0x70>)
 80109f2:	4640      	mov	r0, r8
 80109f4:	f00a ff67 	bl	801b8c6 <memcpy>
 80109f8:	463b      	mov	r3, r7
 80109fa:	4632      	mov	r2, r6
 80109fc:	4629      	mov	r1, r5
 80109fe:	4620      	mov	r0, r4
 8010a00:	f8cd 8000 	str.w	r8, [sp]
 8010a04:	f7ff f80c 	bl	800fa20 <rcl_publisher_init>
 8010a08:	b910      	cbnz	r0, 8010a10 <rclc_publisher_init_default+0x58>
 8010a0a:	b020      	add	sp, #128	@ 0x80
 8010a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a10:	9003      	str	r0, [sp, #12]
 8010a12:	f000 f8c5 	bl	8010ba0 <rcutils_reset_error>
 8010a16:	9803      	ldr	r0, [sp, #12]
 8010a18:	b020      	add	sp, #128	@ 0x80
 8010a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a1e:	200b      	movs	r0, #11
 8010a20:	b020      	add	sp, #128	@ 0x80
 8010a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a26:	bf00      	nop
 8010a28:	0801cac0 	.word	0x0801cac0

08010a2c <rclc_subscription_init_default>:
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	bf18      	it	ne
 8010a30:	2a00      	cmpne	r2, #0
 8010a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a36:	4616      	mov	r6, r2
 8010a38:	bf0c      	ite	eq
 8010a3a:	2201      	moveq	r2, #1
 8010a3c:	2200      	movne	r2, #0
 8010a3e:	b0a0      	sub	sp, #128	@ 0x80
 8010a40:	2900      	cmp	r1, #0
 8010a42:	bf08      	it	eq
 8010a44:	f042 0201 	orreq.w	r2, r2, #1
 8010a48:	bb1a      	cbnz	r2, 8010a92 <rclc_subscription_init_default+0x66>
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	b308      	cbz	r0, 8010a92 <rclc_subscription_init_default+0x66>
 8010a4e:	f10d 0810 	add.w	r8, sp, #16
 8010a52:	461f      	mov	r7, r3
 8010a54:	460d      	mov	r5, r1
 8010a56:	f005 fa03 	bl	8015e60 <rcl_get_zero_initialized_subscription>
 8010a5a:	6020      	str	r0, [r4, #0]
 8010a5c:	4640      	mov	r0, r8
 8010a5e:	f005 fab3 	bl	8015fc8 <rcl_subscription_get_default_options>
 8010a62:	2250      	movs	r2, #80	@ 0x50
 8010a64:	490d      	ldr	r1, [pc, #52]	@ (8010a9c <rclc_subscription_init_default+0x70>)
 8010a66:	4640      	mov	r0, r8
 8010a68:	f00a ff2d 	bl	801b8c6 <memcpy>
 8010a6c:	463b      	mov	r3, r7
 8010a6e:	4632      	mov	r2, r6
 8010a70:	4629      	mov	r1, r5
 8010a72:	4620      	mov	r0, r4
 8010a74:	f8cd 8000 	str.w	r8, [sp]
 8010a78:	f005 f9f8 	bl	8015e6c <rcl_subscription_init>
 8010a7c:	b910      	cbnz	r0, 8010a84 <rclc_subscription_init_default+0x58>
 8010a7e:	b020      	add	sp, #128	@ 0x80
 8010a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a84:	9003      	str	r0, [sp, #12]
 8010a86:	f000 f88b 	bl	8010ba0 <rcutils_reset_error>
 8010a8a:	9803      	ldr	r0, [sp, #12]
 8010a8c:	b020      	add	sp, #128	@ 0x80
 8010a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a92:	200b      	movs	r0, #11
 8010a94:	b020      	add	sp, #128	@ 0x80
 8010a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a9a:	bf00      	nop
 8010a9c:	0801cb10 	.word	0x0801cb10

08010aa0 <__default_zero_allocate>:
 8010aa0:	f00a ba5e 	b.w	801af60 <calloc>

08010aa4 <__default_reallocate>:
 8010aa4:	f00a bbea 	b.w	801b27c <realloc>

08010aa8 <__default_deallocate>:
 8010aa8:	f00a bac6 	b.w	801b038 <free>

08010aac <__default_allocate>:
 8010aac:	f00a babc 	b.w	801b028 <malloc>

08010ab0 <rcutils_get_zero_initialized_allocator>:
 8010ab0:	b510      	push	{r4, lr}
 8010ab2:	4c05      	ldr	r4, [pc, #20]	@ (8010ac8 <rcutils_get_zero_initialized_allocator+0x18>)
 8010ab4:	4686      	mov	lr, r0
 8010ab6:	4684      	mov	ip, r0
 8010ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010aba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010abe:	6823      	ldr	r3, [r4, #0]
 8010ac0:	4670      	mov	r0, lr
 8010ac2:	f8cc 3000 	str.w	r3, [ip]
 8010ac6:	bd10      	pop	{r4, pc}
 8010ac8:	0801cb60 	.word	0x0801cb60

08010acc <rcutils_set_default_allocator>:
 8010acc:	b1a8      	cbz	r0, 8010afa <rcutils_set_default_allocator+0x2e>
 8010ace:	6802      	ldr	r2, [r0, #0]
 8010ad0:	b1a2      	cbz	r2, 8010afc <rcutils_set_default_allocator+0x30>
 8010ad2:	6841      	ldr	r1, [r0, #4]
 8010ad4:	b1a1      	cbz	r1, 8010b00 <rcutils_set_default_allocator+0x34>
 8010ad6:	b410      	push	{r4}
 8010ad8:	68c4      	ldr	r4, [r0, #12]
 8010ada:	b164      	cbz	r4, 8010af6 <rcutils_set_default_allocator+0x2a>
 8010adc:	6880      	ldr	r0, [r0, #8]
 8010ade:	b138      	cbz	r0, 8010af0 <rcutils_set_default_allocator+0x24>
 8010ae0:	4b08      	ldr	r3, [pc, #32]	@ (8010b04 <rcutils_set_default_allocator+0x38>)
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010aea:	2001      	movs	r0, #1
 8010aec:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8010af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010af4:	4770      	bx	lr
 8010af6:	4620      	mov	r0, r4
 8010af8:	e7fa      	b.n	8010af0 <rcutils_set_default_allocator+0x24>
 8010afa:	4770      	bx	lr
 8010afc:	4610      	mov	r0, r2
 8010afe:	4770      	bx	lr
 8010b00:	4608      	mov	r0, r1
 8010b02:	4770      	bx	lr
 8010b04:	200002bc 	.word	0x200002bc

08010b08 <rcutils_get_default_allocator>:
 8010b08:	b510      	push	{r4, lr}
 8010b0a:	4c05      	ldr	r4, [pc, #20]	@ (8010b20 <rcutils_get_default_allocator+0x18>)
 8010b0c:	4686      	mov	lr, r0
 8010b0e:	4684      	mov	ip, r0
 8010b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b16:	6823      	ldr	r3, [r4, #0]
 8010b18:	4670      	mov	r0, lr
 8010b1a:	f8cc 3000 	str.w	r3, [ip]
 8010b1e:	bd10      	pop	{r4, pc}
 8010b20:	200002bc 	.word	0x200002bc

08010b24 <rcutils_allocator_is_valid>:
 8010b24:	b158      	cbz	r0, 8010b3e <rcutils_allocator_is_valid+0x1a>
 8010b26:	6803      	ldr	r3, [r0, #0]
 8010b28:	b143      	cbz	r3, 8010b3c <rcutils_allocator_is_valid+0x18>
 8010b2a:	6843      	ldr	r3, [r0, #4]
 8010b2c:	b133      	cbz	r3, 8010b3c <rcutils_allocator_is_valid+0x18>
 8010b2e:	68c3      	ldr	r3, [r0, #12]
 8010b30:	b123      	cbz	r3, 8010b3c <rcutils_allocator_is_valid+0x18>
 8010b32:	6880      	ldr	r0, [r0, #8]
 8010b34:	3800      	subs	r0, #0
 8010b36:	bf18      	it	ne
 8010b38:	2001      	movne	r0, #1
 8010b3a:	4770      	bx	lr
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	4770      	bx	lr

08010b40 <rcutils_get_env>:
 8010b40:	b168      	cbz	r0, 8010b5e <rcutils_get_env+0x1e>
 8010b42:	b510      	push	{r4, lr}
 8010b44:	460c      	mov	r4, r1
 8010b46:	b129      	cbz	r1, 8010b54 <rcutils_get_env+0x14>
 8010b48:	f00a fa26 	bl	801af98 <getenv>
 8010b4c:	b120      	cbz	r0, 8010b58 <rcutils_get_env+0x18>
 8010b4e:	6020      	str	r0, [r4, #0]
 8010b50:	2000      	movs	r0, #0
 8010b52:	bd10      	pop	{r4, pc}
 8010b54:	4803      	ldr	r0, [pc, #12]	@ (8010b64 <rcutils_get_env+0x24>)
 8010b56:	bd10      	pop	{r4, pc}
 8010b58:	4b03      	ldr	r3, [pc, #12]	@ (8010b68 <rcutils_get_env+0x28>)
 8010b5a:	6023      	str	r3, [r4, #0]
 8010b5c:	bd10      	pop	{r4, pc}
 8010b5e:	4803      	ldr	r0, [pc, #12]	@ (8010b6c <rcutils_get_env+0x2c>)
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	0801cb90 	.word	0x0801cb90
 8010b68:	0801ccb8 	.word	0x0801ccb8
 8010b6c:	0801cb74 	.word	0x0801cb74

08010b70 <rcutils_get_error_string>:
 8010b70:	4b06      	ldr	r3, [pc, #24]	@ (8010b8c <rcutils_get_error_string+0x1c>)
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	b13b      	cbz	r3, 8010b86 <rcutils_get_error_string+0x16>
 8010b76:	4b06      	ldr	r3, [pc, #24]	@ (8010b90 <rcutils_get_error_string+0x20>)
 8010b78:	781a      	ldrb	r2, [r3, #0]
 8010b7a:	b90a      	cbnz	r2, 8010b80 <rcutils_get_error_string+0x10>
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	701a      	strb	r2, [r3, #0]
 8010b80:	4b04      	ldr	r3, [pc, #16]	@ (8010b94 <rcutils_get_error_string+0x24>)
 8010b82:	7818      	ldrb	r0, [r3, #0]
 8010b84:	4770      	bx	lr
 8010b86:	4b04      	ldr	r3, [pc, #16]	@ (8010b98 <rcutils_get_error_string+0x28>)
 8010b88:	7818      	ldrb	r0, [r3, #0]
 8010b8a:	4770      	bx	lr
 8010b8c:	2000ddc0 	.word	0x2000ddc0
 8010b90:	2000ddd9 	.word	0x2000ddd9
 8010b94:	2000ddd8 	.word	0x2000ddd8
 8010b98:	0801cbac 	.word	0x0801cbac
 8010b9c:	00000000 	.word	0x00000000

08010ba0 <rcutils_reset_error>:
 8010ba0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8010bc0 <rcutils_reset_error+0x20>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	4a08      	ldr	r2, [pc, #32]	@ (8010bc8 <rcutils_reset_error+0x28>)
 8010ba8:	4808      	ldr	r0, [pc, #32]	@ (8010bcc <rcutils_reset_error+0x2c>)
 8010baa:	8013      	strh	r3, [r2, #0]
 8010bac:	4908      	ldr	r1, [pc, #32]	@ (8010bd0 <rcutils_reset_error+0x30>)
 8010bae:	7003      	strb	r3, [r0, #0]
 8010bb0:	700b      	strb	r3, [r1, #0]
 8010bb2:	ed82 7b02 	vstr	d7, [r2, #8]
 8010bb6:	4a07      	ldr	r2, [pc, #28]	@ (8010bd4 <rcutils_reset_error+0x34>)
 8010bb8:	7013      	strb	r3, [r2, #0]
 8010bba:	4770      	bx	lr
 8010bbc:	f3af 8000 	nop.w
	...
 8010bc8:	2000ddc8 	.word	0x2000ddc8
 8010bcc:	2000ddd9 	.word	0x2000ddd9
 8010bd0:	2000ddd8 	.word	0x2000ddd8
 8010bd4:	2000ddc0 	.word	0x2000ddc0

08010bd8 <rcutils_format_string_limit>:
 8010bd8:	b40f      	push	{r0, r1, r2, r3}
 8010bda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bdc:	b083      	sub	sp, #12
 8010bde:	ac08      	add	r4, sp, #32
 8010be0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8010be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010be6:	b326      	cbz	r6, 8010c32 <rcutils_format_string_limit+0x5a>
 8010be8:	a808      	add	r0, sp, #32
 8010bea:	f7ff ff9b 	bl	8010b24 <rcutils_allocator_is_valid>
 8010bee:	b300      	cbz	r0, 8010c32 <rcutils_format_string_limit+0x5a>
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	4608      	mov	r0, r1
 8010bf8:	e9cd 3300 	strd	r3, r3, [sp]
 8010bfc:	f000 f906 	bl	8010e0c <rcutils_vsnprintf>
 8010c00:	1c43      	adds	r3, r0, #1
 8010c02:	4605      	mov	r5, r0
 8010c04:	d015      	beq.n	8010c32 <rcutils_format_string_limit+0x5a>
 8010c06:	1c47      	adds	r7, r0, #1
 8010c08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c0a:	429f      	cmp	r7, r3
 8010c0c:	d901      	bls.n	8010c12 <rcutils_format_string_limit+0x3a>
 8010c0e:	1e5d      	subs	r5, r3, #1
 8010c10:	461f      	mov	r7, r3
 8010c12:	9b08      	ldr	r3, [sp, #32]
 8010c14:	4638      	mov	r0, r7
 8010c16:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010c18:	4798      	blx	r3
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	b148      	cbz	r0, 8010c32 <rcutils_format_string_limit+0x5a>
 8010c1e:	4632      	mov	r2, r6
 8010c20:	4639      	mov	r1, r7
 8010c22:	9b01      	ldr	r3, [sp, #4]
 8010c24:	f000 f8f2 	bl	8010e0c <rcutils_vsnprintf>
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	db09      	blt.n	8010c40 <rcutils_format_string_limit+0x68>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	5563      	strb	r3, [r4, r5]
 8010c30:	e000      	b.n	8010c34 <rcutils_format_string_limit+0x5c>
 8010c32:	2400      	movs	r4, #0
 8010c34:	4620      	mov	r0, r4
 8010c36:	b003      	add	sp, #12
 8010c38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010c3c:	b004      	add	sp, #16
 8010c3e:	4770      	bx	lr
 8010c40:	4620      	mov	r0, r4
 8010c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c44:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010c46:	2400      	movs	r4, #0
 8010c48:	4798      	blx	r3
 8010c4a:	e7f3      	b.n	8010c34 <rcutils_format_string_limit+0x5c>

08010c4c <rcutils_repl_str>:
 8010c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c50:	ed2d 8b02 	vpush	{d8}
 8010c54:	b087      	sub	sp, #28
 8010c56:	2600      	movs	r6, #0
 8010c58:	4680      	mov	r8, r0
 8010c5a:	468a      	mov	sl, r1
 8010c5c:	9000      	str	r0, [sp, #0]
 8010c5e:	4608      	mov	r0, r1
 8010c60:	ee08 2a10 	vmov	s16, r2
 8010c64:	4699      	mov	r9, r3
 8010c66:	2510      	movs	r5, #16
 8010c68:	f7ef faf4 	bl	8000254 <strlen>
 8010c6c:	4637      	mov	r7, r6
 8010c6e:	46b3      	mov	fp, r6
 8010c70:	9001      	str	r0, [sp, #4]
 8010c72:	e01e      	b.n	8010cb2 <rcutils_repl_str+0x66>
 8010c74:	f10b 0b01 	add.w	fp, fp, #1
 8010c78:	9b01      	ldr	r3, [sp, #4]
 8010c7a:	455e      	cmp	r6, fp
 8010c7c:	eb04 0803 	add.w	r8, r4, r3
 8010c80:	d211      	bcs.n	8010ca6 <rcutils_repl_str+0x5a>
 8010c82:	442e      	add	r6, r5
 8010c84:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010c88:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c90:	00b1      	lsls	r1, r6, #2
 8010c92:	4798      	blx	r3
 8010c94:	2800      	cmp	r0, #0
 8010c96:	f000 8088 	beq.w	8010daa <rcutils_repl_str+0x15e>
 8010c9a:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8010c9e:	4607      	mov	r7, r0
 8010ca0:	bf28      	it	cs
 8010ca2:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8010ca6:	9a00      	ldr	r2, [sp, #0]
 8010ca8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8010cac:	1aa4      	subs	r4, r4, r2
 8010cae:	f843 4c04 	str.w	r4, [r3, #-4]
 8010cb2:	4651      	mov	r1, sl
 8010cb4:	4640      	mov	r0, r8
 8010cb6:	f00a fd64 	bl	801b782 <strstr>
 8010cba:	4604      	mov	r4, r0
 8010cbc:	4638      	mov	r0, r7
 8010cbe:	2c00      	cmp	r4, #0
 8010cc0:	d1d8      	bne.n	8010c74 <rcutils_repl_str+0x28>
 8010cc2:	4640      	mov	r0, r8
 8010cc4:	f7ef fac6 	bl	8000254 <strlen>
 8010cc8:	9b00      	ldr	r3, [sp, #0]
 8010cca:	eba8 0803 	sub.w	r8, r8, r3
 8010cce:	eb08 0400 	add.w	r4, r8, r0
 8010cd2:	9402      	str	r4, [sp, #8]
 8010cd4:	f1bb 0f00 	cmp.w	fp, #0
 8010cd8:	d045      	beq.n	8010d66 <rcutils_repl_str+0x11a>
 8010cda:	ee18 0a10 	vmov	r0, s16
 8010cde:	f7ef fab9 	bl	8000254 <strlen>
 8010ce2:	9a01      	ldr	r2, [sp, #4]
 8010ce4:	4606      	mov	r6, r0
 8010ce6:	f8d9 3000 	ldr.w	r3, [r9]
 8010cea:	1a82      	subs	r2, r0, r2
 8010cec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010cf0:	fb0b 4202 	mla	r2, fp, r2, r4
 8010cf4:	1c50      	adds	r0, r2, #1
 8010cf6:	9205      	str	r2, [sp, #20]
 8010cf8:	4798      	blx	r3
 8010cfa:	4682      	mov	sl, r0
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d054      	beq.n	8010daa <rcutils_repl_str+0x15e>
 8010d00:	683a      	ldr	r2, [r7, #0]
 8010d02:	463d      	mov	r5, r7
 8010d04:	9900      	ldr	r1, [sp, #0]
 8010d06:	2401      	movs	r4, #1
 8010d08:	f00a fddd 	bl	801b8c6 <memcpy>
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8010d12:	eb0a 0803 	add.w	r8, sl, r3
 8010d16:	ee18 7a10 	vmov	r7, s16
 8010d1a:	f8dd a000 	ldr.w	sl, [sp]
 8010d1e:	f8cd 9000 	str.w	r9, [sp]
 8010d22:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010d26:	4632      	mov	r2, r6
 8010d28:	4639      	mov	r1, r7
 8010d2a:	4640      	mov	r0, r8
 8010d2c:	44b0      	add	r8, r6
 8010d2e:	f00a fdca 	bl	801b8c6 <memcpy>
 8010d32:	f855 2b04 	ldr.w	r2, [r5], #4
 8010d36:	45a3      	cmp	fp, r4
 8010d38:	444a      	add	r2, r9
 8010d3a:	eb0a 0102 	add.w	r1, sl, r2
 8010d3e:	d02a      	beq.n	8010d96 <rcutils_repl_str+0x14a>
 8010d40:	6828      	ldr	r0, [r5, #0]
 8010d42:	1a82      	subs	r2, r0, r2
 8010d44:	4640      	mov	r0, r8
 8010d46:	4490      	add	r8, r2
 8010d48:	f00a fdbd 	bl	801b8c6 <memcpy>
 8010d4c:	1c62      	adds	r2, r4, #1
 8010d4e:	45a3      	cmp	fp, r4
 8010d50:	4614      	mov	r4, r2
 8010d52:	d8e8      	bhi.n	8010d26 <rcutils_repl_str+0xda>
 8010d54:	f8dd 9000 	ldr.w	r9, [sp]
 8010d58:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	9a05      	ldr	r2, [sp, #20]
 8010d60:	f80a 3002 	strb.w	r3, [sl, r2]
 8010d64:	e00b      	b.n	8010d7e <rcutils_repl_str+0x132>
 8010d66:	4620      	mov	r0, r4
 8010d68:	f8d9 3000 	ldr.w	r3, [r9]
 8010d6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010d70:	3001      	adds	r0, #1
 8010d72:	4798      	blx	r3
 8010d74:	4682      	mov	sl, r0
 8010d76:	b110      	cbz	r0, 8010d7e <rcutils_repl_str+0x132>
 8010d78:	9900      	ldr	r1, [sp, #0]
 8010d7a:	f00a fd9c 	bl	801b8b6 <strcpy>
 8010d7e:	4638      	mov	r0, r7
 8010d80:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010d84:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010d88:	4798      	blx	r3
 8010d8a:	4650      	mov	r0, sl
 8010d8c:	b007      	add	sp, #28
 8010d8e:	ecbd 8b02 	vpop	{d8}
 8010d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d96:	9b02      	ldr	r3, [sp, #8]
 8010d98:	4640      	mov	r0, r8
 8010d9a:	f8dd 9000 	ldr.w	r9, [sp]
 8010d9e:	1a9a      	subs	r2, r3, r2
 8010da0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8010da4:	f00a fd8f 	bl	801b8c6 <memcpy>
 8010da8:	e7d8      	b.n	8010d5c <rcutils_repl_str+0x110>
 8010daa:	f04f 0a00 	mov.w	sl, #0
 8010dae:	e7e6      	b.n	8010d7e <rcutils_repl_str+0x132>

08010db0 <rcutils_snprintf>:
 8010db0:	b40c      	push	{r2, r3}
 8010db2:	b530      	push	{r4, r5, lr}
 8010db4:	b083      	sub	sp, #12
 8010db6:	ab06      	add	r3, sp, #24
 8010db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dbc:	9301      	str	r3, [sp, #4]
 8010dbe:	b1e2      	cbz	r2, 8010dfa <rcutils_snprintf+0x4a>
 8010dc0:	fab0 f480 	clz	r4, r0
 8010dc4:	fab1 f581 	clz	r5, r1
 8010dc8:	ea50 0c01 	orrs.w	ip, r0, r1
 8010dcc:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010dd0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010dd4:	d008      	beq.n	8010de8 <rcutils_snprintf+0x38>
 8010dd6:	b984      	cbnz	r4, 8010dfa <rcutils_snprintf+0x4a>
 8010dd8:	b97d      	cbnz	r5, 8010dfa <rcutils_snprintf+0x4a>
 8010dda:	f00a fc73 	bl	801b6c4 <vsniprintf>
 8010dde:	b003      	add	sp, #12
 8010de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010de4:	b002      	add	sp, #8
 8010de6:	4770      	bx	lr
 8010de8:	4661      	mov	r1, ip
 8010dea:	4660      	mov	r0, ip
 8010dec:	f00a fc6a 	bl	801b6c4 <vsniprintf>
 8010df0:	b003      	add	sp, #12
 8010df2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010df6:	b002      	add	sp, #8
 8010df8:	4770      	bx	lr
 8010dfa:	f00a fd2f 	bl	801b85c <__errno>
 8010dfe:	2216      	movs	r2, #22
 8010e00:	4603      	mov	r3, r0
 8010e02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e06:	601a      	str	r2, [r3, #0]
 8010e08:	e7e9      	b.n	8010dde <rcutils_snprintf+0x2e>
 8010e0a:	bf00      	nop

08010e0c <rcutils_vsnprintf>:
 8010e0c:	b570      	push	{r4, r5, r6, lr}
 8010e0e:	b1b2      	cbz	r2, 8010e3e <rcutils_vsnprintf+0x32>
 8010e10:	fab0 f480 	clz	r4, r0
 8010e14:	fab1 f581 	clz	r5, r1
 8010e18:	ea50 0c01 	orrs.w	ip, r0, r1
 8010e1c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010e20:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010e24:	d005      	beq.n	8010e32 <rcutils_vsnprintf+0x26>
 8010e26:	b954      	cbnz	r4, 8010e3e <rcutils_vsnprintf+0x32>
 8010e28:	b94d      	cbnz	r5, 8010e3e <rcutils_vsnprintf+0x32>
 8010e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e2e:	f00a bc49 	b.w	801b6c4 <vsniprintf>
 8010e32:	4661      	mov	r1, ip
 8010e34:	4660      	mov	r0, ip
 8010e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e3a:	f00a bc43 	b.w	801b6c4 <vsniprintf>
 8010e3e:	f00a fd0d 	bl	801b85c <__errno>
 8010e42:	2316      	movs	r3, #22
 8010e44:	6003      	str	r3, [r0, #0]
 8010e46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e4a:	bd70      	pop	{r4, r5, r6, pc}

08010e4c <rcutils_strdup>:
 8010e4c:	b084      	sub	sp, #16
 8010e4e:	b570      	push	{r4, r5, r6, lr}
 8010e50:	b082      	sub	sp, #8
 8010e52:	4605      	mov	r5, r0
 8010e54:	ac07      	add	r4, sp, #28
 8010e56:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8010e5a:	b1b0      	cbz	r0, 8010e8a <rcutils_strdup+0x3e>
 8010e5c:	f7ef f9fa 	bl	8000254 <strlen>
 8010e60:	1c42      	adds	r2, r0, #1
 8010e62:	9b07      	ldr	r3, [sp, #28]
 8010e64:	4606      	mov	r6, r0
 8010e66:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010e68:	4610      	mov	r0, r2
 8010e6a:	9201      	str	r2, [sp, #4]
 8010e6c:	4798      	blx	r3
 8010e6e:	4604      	mov	r4, r0
 8010e70:	b128      	cbz	r0, 8010e7e <rcutils_strdup+0x32>
 8010e72:	9a01      	ldr	r2, [sp, #4]
 8010e74:	4629      	mov	r1, r5
 8010e76:	f00a fd26 	bl	801b8c6 <memcpy>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	55a3      	strb	r3, [r4, r6]
 8010e7e:	4620      	mov	r0, r4
 8010e80:	b002      	add	sp, #8
 8010e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e86:	b004      	add	sp, #16
 8010e88:	4770      	bx	lr
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	e7f7      	b.n	8010e7e <rcutils_strdup+0x32>
 8010e8e:	bf00      	nop

08010e90 <rcutils_strndup>:
 8010e90:	b082      	sub	sp, #8
 8010e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e94:	ac06      	add	r4, sp, #24
 8010e96:	4605      	mov	r5, r0
 8010e98:	e884 000c 	stmia.w	r4, {r2, r3}
 8010e9c:	b188      	cbz	r0, 8010ec2 <rcutils_strndup+0x32>
 8010e9e:	1c4f      	adds	r7, r1, #1
 8010ea0:	460e      	mov	r6, r1
 8010ea2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010ea4:	4638      	mov	r0, r7
 8010ea6:	4790      	blx	r2
 8010ea8:	4604      	mov	r4, r0
 8010eaa:	b128      	cbz	r0, 8010eb8 <rcutils_strndup+0x28>
 8010eac:	463a      	mov	r2, r7
 8010eae:	4629      	mov	r1, r5
 8010eb0:	f00a fd09 	bl	801b8c6 <memcpy>
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	55a3      	strb	r3, [r4, r6]
 8010eb8:	4620      	mov	r0, r4
 8010eba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010ebe:	b002      	add	sp, #8
 8010ec0:	4770      	bx	lr
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	e7f8      	b.n	8010eb8 <rcutils_strndup+0x28>
 8010ec6:	bf00      	nop

08010ec8 <rcutils_system_time_now>:
 8010ec8:	b300      	cbz	r0, 8010f0c <rcutils_system_time_now+0x44>
 8010eca:	b570      	push	{r4, r5, r6, lr}
 8010ecc:	b084      	sub	sp, #16
 8010ece:	4604      	mov	r4, r0
 8010ed0:	2001      	movs	r0, #1
 8010ed2:	4669      	mov	r1, sp
 8010ed4:	f7f0 fa70 	bl	80013b8 <clock_gettime>
 8010ed8:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010edc:	2900      	cmp	r1, #0
 8010ede:	db12      	blt.n	8010f06 <rcutils_system_time_now+0x3e>
 8010ee0:	ea53 0201 	orrs.w	r2, r3, r1
 8010ee4:	9d02      	ldr	r5, [sp, #8]
 8010ee6:	d101      	bne.n	8010eec <rcutils_system_time_now+0x24>
 8010ee8:	2d00      	cmp	r5, #0
 8010eea:	db0c      	blt.n	8010f06 <rcutils_system_time_now+0x3e>
 8010eec:	4e08      	ldr	r6, [pc, #32]	@ (8010f10 <rcutils_system_time_now+0x48>)
 8010eee:	2000      	movs	r0, #0
 8010ef0:	fba3 3206 	umull	r3, r2, r3, r6
 8010ef4:	195b      	adds	r3, r3, r5
 8010ef6:	fb06 2201 	mla	r2, r6, r1, r2
 8010efa:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010efe:	e9c4 3200 	strd	r3, r2, [r4]
 8010f02:	b004      	add	sp, #16
 8010f04:	bd70      	pop	{r4, r5, r6, pc}
 8010f06:	2002      	movs	r0, #2
 8010f08:	b004      	add	sp, #16
 8010f0a:	bd70      	pop	{r4, r5, r6, pc}
 8010f0c:	200b      	movs	r0, #11
 8010f0e:	4770      	bx	lr
 8010f10:	3b9aca00 	.word	0x3b9aca00

08010f14 <rcutils_steady_time_now>:
 8010f14:	b300      	cbz	r0, 8010f58 <rcutils_steady_time_now+0x44>
 8010f16:	b570      	push	{r4, r5, r6, lr}
 8010f18:	b084      	sub	sp, #16
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	4669      	mov	r1, sp
 8010f20:	f7f0 fa4a 	bl	80013b8 <clock_gettime>
 8010f24:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010f28:	2900      	cmp	r1, #0
 8010f2a:	db12      	blt.n	8010f52 <rcutils_steady_time_now+0x3e>
 8010f2c:	ea53 0201 	orrs.w	r2, r3, r1
 8010f30:	9d02      	ldr	r5, [sp, #8]
 8010f32:	d101      	bne.n	8010f38 <rcutils_steady_time_now+0x24>
 8010f34:	2d00      	cmp	r5, #0
 8010f36:	db0c      	blt.n	8010f52 <rcutils_steady_time_now+0x3e>
 8010f38:	4e08      	ldr	r6, [pc, #32]	@ (8010f5c <rcutils_steady_time_now+0x48>)
 8010f3a:	2000      	movs	r0, #0
 8010f3c:	fba3 3206 	umull	r3, r2, r3, r6
 8010f40:	195b      	adds	r3, r3, r5
 8010f42:	fb06 2201 	mla	r2, r6, r1, r2
 8010f46:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010f4a:	e9c4 3200 	strd	r3, r2, [r4]
 8010f4e:	b004      	add	sp, #16
 8010f50:	bd70      	pop	{r4, r5, r6, pc}
 8010f52:	2002      	movs	r0, #2
 8010f54:	b004      	add	sp, #16
 8010f56:	bd70      	pop	{r4, r5, r6, pc}
 8010f58:	200b      	movs	r0, #11
 8010f5a:	4770      	bx	lr
 8010f5c:	3b9aca00 	.word	0x3b9aca00

08010f60 <rmw_get_default_publisher_options>:
 8010f60:	2200      	movs	r2, #0
 8010f62:	6002      	str	r2, [r0, #0]
 8010f64:	7102      	strb	r2, [r0, #4]
 8010f66:	4770      	bx	lr

08010f68 <rmw_validate_namespace_with_size>:
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	d043      	beq.n	8010ff4 <rmw_validate_namespace_with_size+0x8c>
 8010f6c:	b570      	push	{r4, r5, r6, lr}
 8010f6e:	4614      	mov	r4, r2
 8010f70:	b0c2      	sub	sp, #264	@ 0x108
 8010f72:	b32a      	cbz	r2, 8010fc0 <rmw_validate_namespace_with_size+0x58>
 8010f74:	2901      	cmp	r1, #1
 8010f76:	460d      	mov	r5, r1
 8010f78:	461e      	mov	r6, r3
 8010f7a:	d102      	bne.n	8010f82 <rmw_validate_namespace_with_size+0x1a>
 8010f7c:	7803      	ldrb	r3, [r0, #0]
 8010f7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010f80:	d012      	beq.n	8010fa8 <rmw_validate_namespace_with_size+0x40>
 8010f82:	aa01      	add	r2, sp, #4
 8010f84:	4669      	mov	r1, sp
 8010f86:	f007 f8f7 	bl	8018178 <rmw_validate_full_topic_name>
 8010f8a:	b980      	cbnz	r0, 8010fae <rmw_validate_namespace_with_size+0x46>
 8010f8c:	9a00      	ldr	r2, [sp, #0]
 8010f8e:	b14a      	cbz	r2, 8010fa4 <rmw_validate_namespace_with_size+0x3c>
 8010f90:	2a07      	cmp	r2, #7
 8010f92:	d007      	beq.n	8010fa4 <rmw_validate_namespace_with_size+0x3c>
 8010f94:	1e53      	subs	r3, r2, #1
 8010f96:	2b05      	cmp	r3, #5
 8010f98:	d82e      	bhi.n	8010ff8 <rmw_validate_namespace_with_size+0x90>
 8010f9a:	e8df f003 	tbb	[pc, r3]
 8010f9e:	1f1c      	.short	0x1f1c
 8010fa0:	14282522 	.word	0x14282522
 8010fa4:	2df5      	cmp	r5, #245	@ 0xf5
 8010fa6:	d804      	bhi.n	8010fb2 <rmw_validate_namespace_with_size+0x4a>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	4618      	mov	r0, r3
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	b042      	add	sp, #264	@ 0x108
 8010fb0:	bd70      	pop	{r4, r5, r6, pc}
 8010fb2:	2307      	movs	r3, #7
 8010fb4:	6023      	str	r3, [r4, #0]
 8010fb6:	2e00      	cmp	r6, #0
 8010fb8:	d0f9      	beq.n	8010fae <rmw_validate_namespace_with_size+0x46>
 8010fba:	23f4      	movs	r3, #244	@ 0xf4
 8010fbc:	6033      	str	r3, [r6, #0]
 8010fbe:	e7f6      	b.n	8010fae <rmw_validate_namespace_with_size+0x46>
 8010fc0:	200b      	movs	r0, #11
 8010fc2:	b042      	add	sp, #264	@ 0x108
 8010fc4:	bd70      	pop	{r4, r5, r6, pc}
 8010fc6:	2306      	movs	r3, #6
 8010fc8:	6023      	str	r3, [r4, #0]
 8010fca:	2e00      	cmp	r6, #0
 8010fcc:	d0ef      	beq.n	8010fae <rmw_validate_namespace_with_size+0x46>
 8010fce:	9b01      	ldr	r3, [sp, #4]
 8010fd0:	6033      	str	r3, [r6, #0]
 8010fd2:	b042      	add	sp, #264	@ 0x108
 8010fd4:	bd70      	pop	{r4, r5, r6, pc}
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	6023      	str	r3, [r4, #0]
 8010fda:	e7f6      	b.n	8010fca <rmw_validate_namespace_with_size+0x62>
 8010fdc:	2302      	movs	r3, #2
 8010fde:	6023      	str	r3, [r4, #0]
 8010fe0:	e7f3      	b.n	8010fca <rmw_validate_namespace_with_size+0x62>
 8010fe2:	2303      	movs	r3, #3
 8010fe4:	6023      	str	r3, [r4, #0]
 8010fe6:	e7f0      	b.n	8010fca <rmw_validate_namespace_with_size+0x62>
 8010fe8:	2304      	movs	r3, #4
 8010fea:	6023      	str	r3, [r4, #0]
 8010fec:	e7ed      	b.n	8010fca <rmw_validate_namespace_with_size+0x62>
 8010fee:	2305      	movs	r3, #5
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	e7ea      	b.n	8010fca <rmw_validate_namespace_with_size+0x62>
 8010ff4:	200b      	movs	r0, #11
 8010ff6:	4770      	bx	lr
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010ffe:	4a03      	ldr	r2, [pc, #12]	@ (801100c <rmw_validate_namespace_with_size+0xa4>)
 8011000:	a802      	add	r0, sp, #8
 8011002:	f7ff fed5 	bl	8010db0 <rcutils_snprintf>
 8011006:	2001      	movs	r0, #1
 8011008:	e7d1      	b.n	8010fae <rmw_validate_namespace_with_size+0x46>
 801100a:	bf00      	nop
 801100c:	0801cbb0 	.word	0x0801cbb0

08011010 <rmw_validate_namespace>:
 8011010:	b168      	cbz	r0, 801102e <rmw_validate_namespace+0x1e>
 8011012:	b570      	push	{r4, r5, r6, lr}
 8011014:	460d      	mov	r5, r1
 8011016:	4616      	mov	r6, r2
 8011018:	4604      	mov	r4, r0
 801101a:	f7ef f91b 	bl	8000254 <strlen>
 801101e:	4633      	mov	r3, r6
 8011020:	4601      	mov	r1, r0
 8011022:	462a      	mov	r2, r5
 8011024:	4620      	mov	r0, r4
 8011026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801102a:	f7ff bf9d 	b.w	8010f68 <rmw_validate_namespace_with_size>
 801102e:	200b      	movs	r0, #11
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop

08011034 <rmw_namespace_validation_result_string>:
 8011034:	2807      	cmp	r0, #7
 8011036:	d803      	bhi.n	8011040 <rmw_namespace_validation_result_string+0xc>
 8011038:	4b02      	ldr	r3, [pc, #8]	@ (8011044 <rmw_namespace_validation_result_string+0x10>)
 801103a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801103e:	4770      	bx	lr
 8011040:	4801      	ldr	r0, [pc, #4]	@ (8011048 <rmw_namespace_validation_result_string+0x14>)
 8011042:	4770      	bx	lr
 8011044:	0801cda8 	.word	0x0801cda8
 8011048:	0801cc00 	.word	0x0801cc00

0801104c <rmw_validate_node_name>:
 801104c:	2800      	cmp	r0, #0
 801104e:	d042      	beq.n	80110d6 <rmw_validate_node_name+0x8a>
 8011050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011054:	460d      	mov	r5, r1
 8011056:	2900      	cmp	r1, #0
 8011058:	d03f      	beq.n	80110da <rmw_validate_node_name+0x8e>
 801105a:	4604      	mov	r4, r0
 801105c:	4616      	mov	r6, r2
 801105e:	f7ef f8f9 	bl	8000254 <strlen>
 8011062:	b310      	cbz	r0, 80110aa <rmw_validate_node_name+0x5e>
 8011064:	1e63      	subs	r3, r4, #1
 8011066:	f1c4 0101 	rsb	r1, r4, #1
 801106a:	eb03 0800 	add.w	r8, r3, r0
 801106e:	18cf      	adds	r7, r1, r3
 8011070:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8011074:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8011078:	f02e 0c20 	bic.w	ip, lr, #32
 801107c:	2a09      	cmp	r2, #9
 801107e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8011082:	d905      	bls.n	8011090 <rmw_validate_node_name+0x44>
 8011084:	f1bc 0f19 	cmp.w	ip, #25
 8011088:	d902      	bls.n	8011090 <rmw_validate_node_name+0x44>
 801108a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801108e:	d114      	bne.n	80110ba <rmw_validate_node_name+0x6e>
 8011090:	4598      	cmp	r8, r3
 8011092:	d1ec      	bne.n	801106e <rmw_validate_node_name+0x22>
 8011094:	7822      	ldrb	r2, [r4, #0]
 8011096:	4b16      	ldr	r3, [pc, #88]	@ (80110f0 <rmw_validate_node_name+0xa4>)
 8011098:	5cd3      	ldrb	r3, [r2, r3]
 801109a:	f013 0304 	ands.w	r3, r3, #4
 801109e:	d113      	bne.n	80110c8 <rmw_validate_node_name+0x7c>
 80110a0:	28ff      	cmp	r0, #255	@ 0xff
 80110a2:	d81c      	bhi.n	80110de <rmw_validate_node_name+0x92>
 80110a4:	4618      	mov	r0, r3
 80110a6:	602b      	str	r3, [r5, #0]
 80110a8:	e00c      	b.n	80110c4 <rmw_validate_node_name+0x78>
 80110aa:	2301      	movs	r3, #1
 80110ac:	602b      	str	r3, [r5, #0]
 80110ae:	b17e      	cbz	r6, 80110d0 <rmw_validate_node_name+0x84>
 80110b0:	2300      	movs	r3, #0
 80110b2:	4618      	mov	r0, r3
 80110b4:	6033      	str	r3, [r6, #0]
 80110b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ba:	2302      	movs	r3, #2
 80110bc:	602b      	str	r3, [r5, #0]
 80110be:	b13e      	cbz	r6, 80110d0 <rmw_validate_node_name+0x84>
 80110c0:	2000      	movs	r0, #0
 80110c2:	6037      	str	r7, [r6, #0]
 80110c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c8:	2303      	movs	r3, #3
 80110ca:	602b      	str	r3, [r5, #0]
 80110cc:	2e00      	cmp	r6, #0
 80110ce:	d1ef      	bne.n	80110b0 <rmw_validate_node_name+0x64>
 80110d0:	2000      	movs	r0, #0
 80110d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110d6:	200b      	movs	r0, #11
 80110d8:	4770      	bx	lr
 80110da:	200b      	movs	r0, #11
 80110dc:	e7f2      	b.n	80110c4 <rmw_validate_node_name+0x78>
 80110de:	2204      	movs	r2, #4
 80110e0:	602a      	str	r2, [r5, #0]
 80110e2:	2e00      	cmp	r6, #0
 80110e4:	d0f4      	beq.n	80110d0 <rmw_validate_node_name+0x84>
 80110e6:	22fe      	movs	r2, #254	@ 0xfe
 80110e8:	4618      	mov	r0, r3
 80110ea:	6032      	str	r2, [r6, #0]
 80110ec:	e7ea      	b.n	80110c4 <rmw_validate_node_name+0x78>
 80110ee:	bf00      	nop
 80110f0:	0801d52c 	.word	0x0801d52c

080110f4 <rmw_node_name_validation_result_string>:
 80110f4:	2804      	cmp	r0, #4
 80110f6:	d803      	bhi.n	8011100 <rmw_node_name_validation_result_string+0xc>
 80110f8:	4b02      	ldr	r3, [pc, #8]	@ (8011104 <rmw_node_name_validation_result_string+0x10>)
 80110fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80110fe:	4770      	bx	lr
 8011100:	4801      	ldr	r0, [pc, #4]	@ (8011108 <rmw_node_name_validation_result_string+0x14>)
 8011102:	4770      	bx	lr
 8011104:	0801ceb4 	.word	0x0801ceb4
 8011108:	0801cdc8 	.word	0x0801cdc8

0801110c <rmw_uros_set_custom_transport>:
 801110c:	b470      	push	{r4, r5, r6}
 801110e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8011112:	b162      	cbz	r2, 801112e <rmw_uros_set_custom_transport+0x22>
 8011114:	b15b      	cbz	r3, 801112e <rmw_uros_set_custom_transport+0x22>
 8011116:	b155      	cbz	r5, 801112e <rmw_uros_set_custom_transport+0x22>
 8011118:	b14e      	cbz	r6, 801112e <rmw_uros_set_custom_transport+0x22>
 801111a:	4c06      	ldr	r4, [pc, #24]	@ (8011134 <rmw_uros_set_custom_transport+0x28>)
 801111c:	7020      	strb	r0, [r4, #0]
 801111e:	2000      	movs	r0, #0
 8011120:	6166      	str	r6, [r4, #20]
 8011122:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8011126:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801112a:	bc70      	pop	{r4, r5, r6}
 801112c:	4770      	bx	lr
 801112e:	200b      	movs	r0, #11
 8011130:	bc70      	pop	{r4, r5, r6}
 8011132:	4770      	bx	lr
 8011134:	2000dddc 	.word	0x2000dddc

08011138 <create_node>:
 8011138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801113c:	b083      	sub	sp, #12
 801113e:	2b00      	cmp	r3, #0
 8011140:	d064      	beq.n	801120c <create_node+0xd4>
 8011142:	4606      	mov	r6, r0
 8011144:	4838      	ldr	r0, [pc, #224]	@ (8011228 <create_node+0xf0>)
 8011146:	460f      	mov	r7, r1
 8011148:	4690      	mov	r8, r2
 801114a:	461d      	mov	r5, r3
 801114c:	f007 f890 	bl	8018270 <get_memory>
 8011150:	2800      	cmp	r0, #0
 8011152:	d05b      	beq.n	801120c <create_node+0xd4>
 8011154:	6884      	ldr	r4, [r0, #8]
 8011156:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8011158:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801115c:	f104 0518 	add.w	r5, r4, #24
 8011160:	6123      	str	r3, [r4, #16]
 8011162:	f007 f8ed 	bl	8018340 <rmw_get_implementation_identifier>
 8011166:	f8c4 9020 	str.w	r9, [r4, #32]
 801116a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801116e:	4630      	mov	r0, r6
 8011170:	f7ef f870 	bl	8000254 <strlen>
 8011174:	1c42      	adds	r2, r0, #1
 8011176:	2a3c      	cmp	r2, #60	@ 0x3c
 8011178:	d840      	bhi.n	80111fc <create_node+0xc4>
 801117a:	4648      	mov	r0, r9
 801117c:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8011180:	4631      	mov	r1, r6
 8011182:	f00a fba0 	bl	801b8c6 <memcpy>
 8011186:	4638      	mov	r0, r7
 8011188:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801118c:	f7ef f862 	bl	8000254 <strlen>
 8011190:	1c42      	adds	r2, r0, #1
 8011192:	2a3c      	cmp	r2, #60	@ 0x3c
 8011194:	d832      	bhi.n	80111fc <create_node+0xc4>
 8011196:	4639      	mov	r1, r7
 8011198:	4648      	mov	r0, r9
 801119a:	f00a fb94 	bl	801b8c6 <memcpy>
 801119e:	6923      	ldr	r3, [r4, #16]
 80111a0:	2101      	movs	r1, #1
 80111a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80111a6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80111aa:	1842      	adds	r2, r0, r1
 80111ac:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80111b0:	f001 fa6e 	bl	8012690 <uxr_object_id>
 80111b4:	6160      	str	r0, [r4, #20]
 80111b6:	783b      	ldrb	r3, [r7, #0]
 80111b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80111ba:	d12c      	bne.n	8011216 <create_node+0xde>
 80111bc:	787b      	ldrb	r3, [r7, #1]
 80111be:	bb53      	cbnz	r3, 8011216 <create_node+0xde>
 80111c0:	4633      	mov	r3, r6
 80111c2:	4a1a      	ldr	r2, [pc, #104]	@ (801122c <create_node+0xf4>)
 80111c4:	213c      	movs	r1, #60	@ 0x3c
 80111c6:	481a      	ldr	r0, [pc, #104]	@ (8011230 <create_node+0xf8>)
 80111c8:	f00a f9da 	bl	801b580 <sniprintf>
 80111cc:	6920      	ldr	r0, [r4, #16]
 80111ce:	2106      	movs	r1, #6
 80111d0:	fa1f f388 	uxth.w	r3, r8
 80111d4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80111d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80111dc:	9101      	str	r1, [sp, #4]
 80111de:	4914      	ldr	r1, [pc, #80]	@ (8011230 <create_node+0xf8>)
 80111e0:	9100      	str	r1, [sp, #0]
 80111e2:	6811      	ldr	r1, [r2, #0]
 80111e4:	6962      	ldr	r2, [r4, #20]
 80111e6:	f001 f89d 	bl	8012324 <uxr_buffer_create_participant_bin>
 80111ea:	4602      	mov	r2, r0
 80111ec:	6920      	ldr	r0, [r4, #16]
 80111ee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80111f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80111f6:	f000 fef9 	bl	8011fec <run_xrce_session>
 80111fa:	b918      	cbnz	r0, 8011204 <create_node+0xcc>
 80111fc:	4628      	mov	r0, r5
 80111fe:	2500      	movs	r5, #0
 8011200:	f000 fd76 	bl	8011cf0 <rmw_uxrce_fini_node_memory>
 8011204:	4628      	mov	r0, r5
 8011206:	b003      	add	sp, #12
 8011208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801120c:	2500      	movs	r5, #0
 801120e:	4628      	mov	r0, r5
 8011210:	b003      	add	sp, #12
 8011212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011216:	463b      	mov	r3, r7
 8011218:	4a06      	ldr	r2, [pc, #24]	@ (8011234 <create_node+0xfc>)
 801121a:	213c      	movs	r1, #60	@ 0x3c
 801121c:	9600      	str	r6, [sp, #0]
 801121e:	4804      	ldr	r0, [pc, #16]	@ (8011230 <create_node+0xf8>)
 8011220:	f00a f9ae 	bl	801b580 <sniprintf>
 8011224:	e7d2      	b.n	80111cc <create_node+0x94>
 8011226:	bf00      	nop
 8011228:	20012704 	.word	0x20012704
 801122c:	0801ced8 	.word	0x0801ced8
 8011230:	2000ddf8 	.word	0x2000ddf8
 8011234:	0801c9d0 	.word	0x0801c9d0

08011238 <rmw_create_node>:
 8011238:	468c      	mov	ip, r1
 801123a:	4611      	mov	r1, r2
 801123c:	f1bc 0f00 	cmp.w	ip, #0
 8011240:	d00a      	beq.n	8011258 <rmw_create_node+0x20>
 8011242:	f89c 3000 	ldrb.w	r3, [ip]
 8011246:	b13b      	cbz	r3, 8011258 <rmw_create_node+0x20>
 8011248:	b132      	cbz	r2, 8011258 <rmw_create_node+0x20>
 801124a:	7813      	ldrb	r3, [r2, #0]
 801124c:	b123      	cbz	r3, 8011258 <rmw_create_node+0x20>
 801124e:	4603      	mov	r3, r0
 8011250:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8011252:	4660      	mov	r0, ip
 8011254:	f7ff bf70 	b.w	8011138 <create_node>
 8011258:	2000      	movs	r0, #0
 801125a:	4770      	bx	lr

0801125c <rmw_destroy_node>:
 801125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125e:	b328      	cbz	r0, 80112ac <rmw_destroy_node+0x50>
 8011260:	4607      	mov	r7, r0
 8011262:	6800      	ldr	r0, [r0, #0]
 8011264:	b120      	cbz	r0, 8011270 <rmw_destroy_node+0x14>
 8011266:	4b37      	ldr	r3, [pc, #220]	@ (8011344 <rmw_destroy_node+0xe8>)
 8011268:	6819      	ldr	r1, [r3, #0]
 801126a:	f7ee ffe9 	bl	8000240 <strcmp>
 801126e:	b9e8      	cbnz	r0, 80112ac <rmw_destroy_node+0x50>
 8011270:	687d      	ldr	r5, [r7, #4]
 8011272:	b1dd      	cbz	r5, 80112ac <rmw_destroy_node+0x50>
 8011274:	4b34      	ldr	r3, [pc, #208]	@ (8011348 <rmw_destroy_node+0xec>)
 8011276:	681c      	ldr	r4, [r3, #0]
 8011278:	2c00      	cmp	r4, #0
 801127a:	d060      	beq.n	801133e <rmw_destroy_node+0xe2>
 801127c:	2600      	movs	r6, #0
 801127e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011282:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8011286:	429d      	cmp	r5, r3
 8011288:	d013      	beq.n	80112b2 <rmw_destroy_node+0x56>
 801128a:	2c00      	cmp	r4, #0
 801128c:	d1f7      	bne.n	801127e <rmw_destroy_node+0x22>
 801128e:	4b2f      	ldr	r3, [pc, #188]	@ (801134c <rmw_destroy_node+0xf0>)
 8011290:	681c      	ldr	r4, [r3, #0]
 8011292:	b1c4      	cbz	r4, 80112c6 <rmw_destroy_node+0x6a>
 8011294:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011298:	6a0b      	ldr	r3, [r1, #32]
 801129a:	429d      	cmp	r5, r3
 801129c:	d1f9      	bne.n	8011292 <rmw_destroy_node+0x36>
 801129e:	317c      	adds	r1, #124	@ 0x7c
 80112a0:	4638      	mov	r0, r7
 80112a2:	f000 fb5d 	bl	8011960 <rmw_destroy_subscription>
 80112a6:	2801      	cmp	r0, #1
 80112a8:	4606      	mov	r6, r0
 80112aa:	d1f2      	bne.n	8011292 <rmw_destroy_node+0x36>
 80112ac:	2601      	movs	r6, #1
 80112ae:	4630      	mov	r0, r6
 80112b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b2:	3184      	adds	r1, #132	@ 0x84
 80112b4:	4638      	mov	r0, r7
 80112b6:	f000 f9b1 	bl	801161c <rmw_destroy_publisher>
 80112ba:	2801      	cmp	r0, #1
 80112bc:	4606      	mov	r6, r0
 80112be:	d0f5      	beq.n	80112ac <rmw_destroy_node+0x50>
 80112c0:	2c00      	cmp	r4, #0
 80112c2:	d1dc      	bne.n	801127e <rmw_destroy_node+0x22>
 80112c4:	e7e3      	b.n	801128e <rmw_destroy_node+0x32>
 80112c6:	4b22      	ldr	r3, [pc, #136]	@ (8011350 <rmw_destroy_node+0xf4>)
 80112c8:	681c      	ldr	r4, [r3, #0]
 80112ca:	b16c      	cbz	r4, 80112e8 <rmw_destroy_node+0x8c>
 80112cc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112d0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80112d2:	429d      	cmp	r5, r3
 80112d4:	d1f9      	bne.n	80112ca <rmw_destroy_node+0x6e>
 80112d6:	317c      	adds	r1, #124	@ 0x7c
 80112d8:	4638      	mov	r0, r7
 80112da:	f000 f9f3 	bl	80116c4 <rmw_destroy_service>
 80112de:	2801      	cmp	r0, #1
 80112e0:	4606      	mov	r6, r0
 80112e2:	d0e3      	beq.n	80112ac <rmw_destroy_node+0x50>
 80112e4:	2c00      	cmp	r4, #0
 80112e6:	d1f1      	bne.n	80112cc <rmw_destroy_node+0x70>
 80112e8:	4b1a      	ldr	r3, [pc, #104]	@ (8011354 <rmw_destroy_node+0xf8>)
 80112ea:	681c      	ldr	r4, [r3, #0]
 80112ec:	b16c      	cbz	r4, 801130a <rmw_destroy_node+0xae>
 80112ee:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112f2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80112f4:	429d      	cmp	r5, r3
 80112f6:	d1f9      	bne.n	80112ec <rmw_destroy_node+0x90>
 80112f8:	317c      	adds	r1, #124	@ 0x7c
 80112fa:	4638      	mov	r0, r7
 80112fc:	f006 ffdc 	bl	80182b8 <rmw_destroy_client>
 8011300:	2801      	cmp	r0, #1
 8011302:	4606      	mov	r6, r0
 8011304:	d0d2      	beq.n	80112ac <rmw_destroy_node+0x50>
 8011306:	2c00      	cmp	r4, #0
 8011308:	d1f1      	bne.n	80112ee <rmw_destroy_node+0x92>
 801130a:	6928      	ldr	r0, [r5, #16]
 801130c:	696a      	ldr	r2, [r5, #20]
 801130e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011312:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011316:	6819      	ldr	r1, [r3, #0]
 8011318:	f000 ffb8 	bl	801228c <uxr_buffer_delete_entity>
 801131c:	4602      	mov	r2, r0
 801131e:	6928      	ldr	r0, [r5, #16]
 8011320:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011324:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011328:	f000 fe60 	bl	8011fec <run_xrce_session>
 801132c:	4603      	mov	r3, r0
 801132e:	4638      	mov	r0, r7
 8011330:	2b00      	cmp	r3, #0
 8011332:	bf08      	it	eq
 8011334:	2602      	moveq	r6, #2
 8011336:	f000 fcdb 	bl	8011cf0 <rmw_uxrce_fini_node_memory>
 801133a:	4630      	mov	r0, r6
 801133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801133e:	4626      	mov	r6, r4
 8011340:	e7a5      	b.n	801128e <rmw_destroy_node+0x32>
 8011342:	bf00      	nop
 8011344:	0801d284 	.word	0x0801d284
 8011348:	20012714 	.word	0x20012714
 801134c:	20012754 	.word	0x20012754
 8011350:	20012724 	.word	0x20012724
 8011354:	2000de34 	.word	0x2000de34

08011358 <rmw_node_get_graph_guard_condition>:
 8011358:	6843      	ldr	r3, [r0, #4]
 801135a:	6918      	ldr	r0, [r3, #16]
 801135c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8011360:	4770      	bx	lr
 8011362:	bf00      	nop

08011364 <flush_session>:
 8011364:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8011366:	f001 bfcf 	b.w	8013308 <uxr_run_session_until_confirm_delivery>
 801136a:	bf00      	nop

0801136c <rmw_publish>:
 801136c:	2800      	cmp	r0, #0
 801136e:	d053      	beq.n	8011418 <rmw_publish+0xac>
 8011370:	b570      	push	{r4, r5, r6, lr}
 8011372:	460d      	mov	r5, r1
 8011374:	b08e      	sub	sp, #56	@ 0x38
 8011376:	2900      	cmp	r1, #0
 8011378:	d04b      	beq.n	8011412 <rmw_publish+0xa6>
 801137a:	4604      	mov	r4, r0
 801137c:	6800      	ldr	r0, [r0, #0]
 801137e:	f000 feaf 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 8011382:	2800      	cmp	r0, #0
 8011384:	d045      	beq.n	8011412 <rmw_publish+0xa6>
 8011386:	6866      	ldr	r6, [r4, #4]
 8011388:	2e00      	cmp	r6, #0
 801138a:	d042      	beq.n	8011412 <rmw_publish+0xa6>
 801138c:	69b4      	ldr	r4, [r6, #24]
 801138e:	4628      	mov	r0, r5
 8011390:	6923      	ldr	r3, [r4, #16]
 8011392:	4798      	blx	r3
 8011394:	69f3      	ldr	r3, [r6, #28]
 8011396:	9005      	str	r0, [sp, #20]
 8011398:	b113      	cbz	r3, 80113a0 <rmw_publish+0x34>
 801139a:	a805      	add	r0, sp, #20
 801139c:	4798      	blx	r3
 801139e:	9805      	ldr	r0, [sp, #20]
 80113a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80113a4:	691b      	ldr	r3, [r3, #16]
 80113a6:	9000      	str	r0, [sp, #0]
 80113a8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80113ac:	6972      	ldr	r2, [r6, #20]
 80113ae:	ab06      	add	r3, sp, #24
 80113b0:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80113b2:	f002 fda7 	bl	8013f04 <uxr_prepare_output_stream>
 80113b6:	b1d8      	cbz	r0, 80113f0 <rmw_publish+0x84>
 80113b8:	68a3      	ldr	r3, [r4, #8]
 80113ba:	a906      	add	r1, sp, #24
 80113bc:	4628      	mov	r0, r5
 80113be:	4798      	blx	r3
 80113c0:	6a33      	ldr	r3, [r6, #32]
 80113c2:	4604      	mov	r4, r0
 80113c4:	b10b      	cbz	r3, 80113ca <rmw_publish+0x5e>
 80113c6:	a806      	add	r0, sp, #24
 80113c8:	4798      	blx	r3
 80113ca:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80113d4:	d022      	beq.n	801141c <rmw_publish+0xb0>
 80113d6:	6918      	ldr	r0, [r3, #16]
 80113d8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80113da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80113de:	f001 ff93 	bl	8013308 <uxr_run_session_until_confirm_delivery>
 80113e2:	4020      	ands	r0, r4
 80113e4:	b2c4      	uxtb	r4, r0
 80113e6:	f084 0001 	eor.w	r0, r4, #1
 80113ea:	b2c0      	uxtb	r0, r0
 80113ec:	b00e      	add	sp, #56	@ 0x38
 80113ee:	bd70      	pop	{r4, r5, r6, pc}
 80113f0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80113f4:	6918      	ldr	r0, [r3, #16]
 80113f6:	9b05      	ldr	r3, [sp, #20]
 80113f8:	9602      	str	r6, [sp, #8]
 80113fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80113fe:	9300      	str	r3, [sp, #0]
 8011400:	4b09      	ldr	r3, [pc, #36]	@ (8011428 <rmw_publish+0xbc>)
 8011402:	9301      	str	r3, [sp, #4]
 8011404:	ab06      	add	r3, sp, #24
 8011406:	6972      	ldr	r2, [r6, #20]
 8011408:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801140a:	f002 fdab 	bl	8013f64 <uxr_prepare_output_stream_fragmented>
 801140e:	2800      	cmp	r0, #0
 8011410:	d1d2      	bne.n	80113b8 <rmw_publish+0x4c>
 8011412:	2001      	movs	r0, #1
 8011414:	b00e      	add	sp, #56	@ 0x38
 8011416:	bd70      	pop	{r4, r5, r6, pc}
 8011418:	2001      	movs	r0, #1
 801141a:	4770      	bx	lr
 801141c:	6918      	ldr	r0, [r3, #16]
 801141e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011422:	f001 fbb7 	bl	8012b94 <uxr_flash_output_streams>
 8011426:	e7de      	b.n	80113e6 <rmw_publish+0x7a>
 8011428:	08011365 	.word	0x08011365

0801142c <rmw_create_publisher>:
 801142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011430:	b087      	sub	sp, #28
 8011432:	2800      	cmp	r0, #0
 8011434:	f000 80d2 	beq.w	80115dc <rmw_create_publisher+0x1b0>
 8011438:	460e      	mov	r6, r1
 801143a:	2900      	cmp	r1, #0
 801143c:	f000 80ce 	beq.w	80115dc <rmw_create_publisher+0x1b0>
 8011440:	4604      	mov	r4, r0
 8011442:	6800      	ldr	r0, [r0, #0]
 8011444:	4615      	mov	r5, r2
 8011446:	461f      	mov	r7, r3
 8011448:	f000 fe4a 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 801144c:	f080 0001 	eor.w	r0, r0, #1
 8011450:	b2c0      	uxtb	r0, r0
 8011452:	2800      	cmp	r0, #0
 8011454:	f040 80c2 	bne.w	80115dc <rmw_create_publisher+0x1b0>
 8011458:	2d00      	cmp	r5, #0
 801145a:	f000 80bf 	beq.w	80115dc <rmw_create_publisher+0x1b0>
 801145e:	782b      	ldrb	r3, [r5, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	f000 80bb 	beq.w	80115dc <rmw_create_publisher+0x1b0>
 8011466:	2f00      	cmp	r7, #0
 8011468:	f000 80b8 	beq.w	80115dc <rmw_create_publisher+0x1b0>
 801146c:	485e      	ldr	r0, [pc, #376]	@ (80115e8 <rmw_create_publisher+0x1bc>)
 801146e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011472:	f006 fefd 	bl	8018270 <get_memory>
 8011476:	2800      	cmp	r0, #0
 8011478:	f000 80b0 	beq.w	80115dc <rmw_create_publisher+0x1b0>
 801147c:	6884      	ldr	r4, [r0, #8]
 801147e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8011482:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8011486:	f006 ff5b 	bl	8018340 <rmw_get_implementation_identifier>
 801148a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801148e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8011492:	4628      	mov	r0, r5
 8011494:	f7ee fede 	bl	8000254 <strlen>
 8011498:	3001      	adds	r0, #1
 801149a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801149e:	283c      	cmp	r0, #60	@ 0x3c
 80114a0:	f200 808f 	bhi.w	80115c2 <rmw_create_publisher+0x196>
 80114a4:	462b      	mov	r3, r5
 80114a6:	4a51      	ldr	r2, [pc, #324]	@ (80115ec <rmw_create_publisher+0x1c0>)
 80114a8:	213c      	movs	r1, #60	@ 0x3c
 80114aa:	4650      	mov	r0, sl
 80114ac:	f00a f868 	bl	801b580 <sniprintf>
 80114b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114b4:	4639      	mov	r1, r7
 80114b6:	2250      	movs	r2, #80	@ 0x50
 80114b8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80114ba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80114be:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80114c2:	f00a fa00 	bl	801b8c6 <memcpy>
 80114c6:	7a3b      	ldrb	r3, [r7, #8]
 80114c8:	4630      	mov	r0, r6
 80114ca:	4949      	ldr	r1, [pc, #292]	@ (80115f0 <rmw_create_publisher+0x1c4>)
 80114cc:	2b02      	cmp	r3, #2
 80114ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80114d2:	bf0c      	ite	eq
 80114d4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80114d8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80114dc:	67a3      	str	r3, [r4, #120]	@ 0x78
 80114de:	2300      	movs	r3, #0
 80114e0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80114e4:	f000 fe0a 	bl	80120fc <get_message_typesupport_handle>
 80114e8:	2800      	cmp	r0, #0
 80114ea:	d06a      	beq.n	80115c2 <rmw_create_publisher+0x196>
 80114ec:	6842      	ldr	r2, [r0, #4]
 80114ee:	61a2      	str	r2, [r4, #24]
 80114f0:	2a00      	cmp	r2, #0
 80114f2:	d066      	beq.n	80115c2 <rmw_create_publisher+0x196>
 80114f4:	4629      	mov	r1, r5
 80114f6:	463b      	mov	r3, r7
 80114f8:	4648      	mov	r0, r9
 80114fa:	f007 f9b7 	bl	801886c <create_topic>
 80114fe:	6260      	str	r0, [r4, #36]	@ 0x24
 8011500:	2800      	cmp	r0, #0
 8011502:	d062      	beq.n	80115ca <rmw_create_publisher+0x19e>
 8011504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011508:	2103      	movs	r1, #3
 801150a:	2506      	movs	r5, #6
 801150c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011510:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8011514:	1c42      	adds	r2, r0, #1
 8011516:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801151a:	f001 f8b9 	bl	8012690 <uxr_object_id>
 801151e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011522:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011526:	6120      	str	r0, [r4, #16]
 8011528:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 801152c:	6910      	ldr	r0, [r2, #16]
 801152e:	9500      	str	r5, [sp, #0]
 8011530:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011534:	6819      	ldr	r1, [r3, #0]
 8011536:	6922      	ldr	r2, [r4, #16]
 8011538:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801153c:	f000 ff5a 	bl	80123f4 <uxr_buffer_create_publisher_bin>
 8011540:	4602      	mov	r2, r0
 8011542:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011546:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801154a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801154e:	f000 fd4d 	bl	8011fec <run_xrce_session>
 8011552:	b3b0      	cbz	r0, 80115c2 <rmw_create_publisher+0x196>
 8011554:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011558:	2105      	movs	r1, #5
 801155a:	f10d 0a10 	add.w	sl, sp, #16
 801155e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011562:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8011566:	1c42      	adds	r2, r0, #1
 8011568:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801156c:	f001 f890 	bl	8012690 <uxr_object_id>
 8011570:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011574:	4639      	mov	r1, r7
 8011576:	6160      	str	r0, [r4, #20]
 8011578:	691e      	ldr	r6, [r3, #16]
 801157a:	4650      	mov	r0, sl
 801157c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011580:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011584:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8011588:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 801158c:	f000 fd4a 	bl	8012024 <convert_qos_profile>
 8011590:	9503      	str	r5, [sp, #12]
 8011592:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8011596:	9001      	str	r0, [sp, #4]
 8011598:	4630      	mov	r0, r6
 801159a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801159e:	f8db 3010 	ldr.w	r3, [fp, #16]
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	6839      	ldr	r1, [r7, #0]
 80115a6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80115aa:	f000 ff83 	bl	80124b4 <uxr_buffer_create_datawriter_bin>
 80115ae:	4602      	mov	r2, r0
 80115b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80115b4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80115b8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80115bc:	f000 fd16 	bl	8011fec <run_xrce_session>
 80115c0:	b970      	cbnz	r0, 80115e0 <rmw_create_publisher+0x1b4>
 80115c2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80115c4:	b108      	cbz	r0, 80115ca <rmw_create_publisher+0x19e>
 80115c6:	f000 fc03 	bl	8011dd0 <rmw_uxrce_fini_topic_memory>
 80115ca:	4640      	mov	r0, r8
 80115cc:	f04f 0800 	mov.w	r8, #0
 80115d0:	f000 fba6 	bl	8011d20 <rmw_uxrce_fini_publisher_memory>
 80115d4:	4640      	mov	r0, r8
 80115d6:	b007      	add	sp, #28
 80115d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115dc:	f04f 0800 	mov.w	r8, #0
 80115e0:	4640      	mov	r0, r8
 80115e2:	b007      	add	sp, #28
 80115e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e8:	20012714 	.word	0x20012714
 80115ec:	0801ced8 	.word	0x0801ced8
 80115f0:	0801c8f0 	.word	0x0801c8f0

080115f4 <rmw_publisher_get_actual_qos>:
 80115f4:	b178      	cbz	r0, 8011616 <rmw_publisher_get_actual_qos+0x22>
 80115f6:	b510      	push	{r4, lr}
 80115f8:	fab1 f481 	clz	r4, r1
 80115fc:	0964      	lsrs	r4, r4, #5
 80115fe:	b141      	cbz	r1, 8011612 <rmw_publisher_get_actual_qos+0x1e>
 8011600:	6843      	ldr	r3, [r0, #4]
 8011602:	2250      	movs	r2, #80	@ 0x50
 8011604:	4608      	mov	r0, r1
 8011606:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801160a:	f00a f95c 	bl	801b8c6 <memcpy>
 801160e:	4620      	mov	r0, r4
 8011610:	bd10      	pop	{r4, pc}
 8011612:	200b      	movs	r0, #11
 8011614:	bd10      	pop	{r4, pc}
 8011616:	200b      	movs	r0, #11
 8011618:	4770      	bx	lr
 801161a:	bf00      	nop

0801161c <rmw_destroy_publisher>:
 801161c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011620:	b128      	cbz	r0, 801162e <rmw_destroy_publisher+0x12>
 8011622:	4604      	mov	r4, r0
 8011624:	6800      	ldr	r0, [r0, #0]
 8011626:	460d      	mov	r5, r1
 8011628:	f000 fd5a 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 801162c:	b918      	cbnz	r0, 8011636 <rmw_destroy_publisher+0x1a>
 801162e:	2401      	movs	r4, #1
 8011630:	4620      	mov	r0, r4
 8011632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011636:	6863      	ldr	r3, [r4, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d0f8      	beq.n	801162e <rmw_destroy_publisher+0x12>
 801163c:	fab5 f485 	clz	r4, r5
 8011640:	0964      	lsrs	r4, r4, #5
 8011642:	2d00      	cmp	r5, #0
 8011644:	d0f3      	beq.n	801162e <rmw_destroy_publisher+0x12>
 8011646:	6828      	ldr	r0, [r5, #0]
 8011648:	f000 fd4a 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 801164c:	2800      	cmp	r0, #0
 801164e:	d0ee      	beq.n	801162e <rmw_destroy_publisher+0x12>
 8011650:	686e      	ldr	r6, [r5, #4]
 8011652:	2e00      	cmp	r6, #0
 8011654:	d0eb      	beq.n	801162e <rmw_destroy_publisher+0x12>
 8011656:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8011658:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 801165c:	f007 f956 	bl	801890c <destroy_topic>
 8011660:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011664:	6972      	ldr	r2, [r6, #20]
 8011666:	6918      	ldr	r0, [r3, #16]
 8011668:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801166c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011670:	6819      	ldr	r1, [r3, #0]
 8011672:	f000 fe0b 	bl	801228c <uxr_buffer_delete_entity>
 8011676:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801167a:	4680      	mov	r8, r0
 801167c:	6932      	ldr	r2, [r6, #16]
 801167e:	6918      	ldr	r0, [r3, #16]
 8011680:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011684:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011688:	6819      	ldr	r1, [r3, #0]
 801168a:	f000 fdff 	bl	801228c <uxr_buffer_delete_entity>
 801168e:	4606      	mov	r6, r0
 8011690:	6938      	ldr	r0, [r7, #16]
 8011692:	4642      	mov	r2, r8
 8011694:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011698:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801169c:	f000 fca6 	bl	8011fec <run_xrce_session>
 80116a0:	693f      	ldr	r7, [r7, #16]
 80116a2:	4632      	mov	r2, r6
 80116a4:	4606      	mov	r6, r0
 80116a6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80116aa:	4638      	mov	r0, r7
 80116ac:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80116b0:	f000 fc9c 	bl	8011fec <run_xrce_session>
 80116b4:	b126      	cbz	r6, 80116c0 <rmw_destroy_publisher+0xa4>
 80116b6:	b118      	cbz	r0, 80116c0 <rmw_destroy_publisher+0xa4>
 80116b8:	4628      	mov	r0, r5
 80116ba:	f000 fb31 	bl	8011d20 <rmw_uxrce_fini_publisher_memory>
 80116be:	e7b7      	b.n	8011630 <rmw_destroy_publisher+0x14>
 80116c0:	2402      	movs	r4, #2
 80116c2:	e7f9      	b.n	80116b8 <rmw_destroy_publisher+0x9c>

080116c4 <rmw_destroy_service>:
 80116c4:	b570      	push	{r4, r5, r6, lr}
 80116c6:	b128      	cbz	r0, 80116d4 <rmw_destroy_service+0x10>
 80116c8:	4604      	mov	r4, r0
 80116ca:	6800      	ldr	r0, [r0, #0]
 80116cc:	460d      	mov	r5, r1
 80116ce:	f000 fd07 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 80116d2:	b910      	cbnz	r0, 80116da <rmw_destroy_service+0x16>
 80116d4:	2401      	movs	r4, #1
 80116d6:	4620      	mov	r0, r4
 80116d8:	bd70      	pop	{r4, r5, r6, pc}
 80116da:	6863      	ldr	r3, [r4, #4]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d0f9      	beq.n	80116d4 <rmw_destroy_service+0x10>
 80116e0:	2d00      	cmp	r5, #0
 80116e2:	d0f7      	beq.n	80116d4 <rmw_destroy_service+0x10>
 80116e4:	6828      	ldr	r0, [r5, #0]
 80116e6:	f000 fcfb 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d0f2      	beq.n	80116d4 <rmw_destroy_service+0x10>
 80116ee:	686e      	ldr	r6, [r5, #4]
 80116f0:	2e00      	cmp	r6, #0
 80116f2:	d0ef      	beq.n	80116d4 <rmw_destroy_service+0x10>
 80116f4:	6864      	ldr	r4, [r4, #4]
 80116f6:	6932      	ldr	r2, [r6, #16]
 80116f8:	6920      	ldr	r0, [r4, #16]
 80116fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80116fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011702:	6819      	ldr	r1, [r3, #0]
 8011704:	f001 f82e 	bl	8012764 <uxr_buffer_cancel_data>
 8011708:	4602      	mov	r2, r0
 801170a:	6920      	ldr	r0, [r4, #16]
 801170c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011710:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011714:	f000 fc6a 	bl	8011fec <run_xrce_session>
 8011718:	6920      	ldr	r0, [r4, #16]
 801171a:	6932      	ldr	r2, [r6, #16]
 801171c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011720:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011724:	6819      	ldr	r1, [r3, #0]
 8011726:	f000 fdb1 	bl	801228c <uxr_buffer_delete_entity>
 801172a:	4602      	mov	r2, r0
 801172c:	6920      	ldr	r0, [r4, #16]
 801172e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011732:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011736:	f000 fc59 	bl	8011fec <run_xrce_session>
 801173a:	4603      	mov	r3, r0
 801173c:	4628      	mov	r0, r5
 801173e:	2b00      	cmp	r3, #0
 8011740:	bf14      	ite	ne
 8011742:	2400      	movne	r4, #0
 8011744:	2402      	moveq	r4, #2
 8011746:	f000 fb17 	bl	8011d78 <rmw_uxrce_fini_service_memory>
 801174a:	e7c4      	b.n	80116d6 <rmw_destroy_service+0x12>

0801174c <rmw_create_subscription>:
 801174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011750:	b08d      	sub	sp, #52	@ 0x34
 8011752:	2900      	cmp	r1, #0
 8011754:	f000 80d8 	beq.w	8011908 <rmw_create_subscription+0x1bc>
 8011758:	4604      	mov	r4, r0
 801175a:	2800      	cmp	r0, #0
 801175c:	f000 80d4 	beq.w	8011908 <rmw_create_subscription+0x1bc>
 8011760:	6800      	ldr	r0, [r0, #0]
 8011762:	460e      	mov	r6, r1
 8011764:	4615      	mov	r5, r2
 8011766:	461f      	mov	r7, r3
 8011768:	f000 fcba 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 801176c:	f080 0001 	eor.w	r0, r0, #1
 8011770:	b2c0      	uxtb	r0, r0
 8011772:	2800      	cmp	r0, #0
 8011774:	f040 80c8 	bne.w	8011908 <rmw_create_subscription+0x1bc>
 8011778:	2d00      	cmp	r5, #0
 801177a:	f000 80c5 	beq.w	8011908 <rmw_create_subscription+0x1bc>
 801177e:	782b      	ldrb	r3, [r5, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	f000 80c1 	beq.w	8011908 <rmw_create_subscription+0x1bc>
 8011786:	2f00      	cmp	r7, #0
 8011788:	f000 80be 	beq.w	8011908 <rmw_create_subscription+0x1bc>
 801178c:	4867      	ldr	r0, [pc, #412]	@ (801192c <rmw_create_subscription+0x1e0>)
 801178e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011792:	f006 fd6d 	bl	8018270 <get_memory>
 8011796:	4604      	mov	r4, r0
 8011798:	2800      	cmp	r0, #0
 801179a:	f000 80b6 	beq.w	801190a <rmw_create_subscription+0x1be>
 801179e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80117a2:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 80117a6:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 80117aa:	f006 fdc9 	bl	8018340 <rmw_get_implementation_identifier>
 80117ae:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 80117b2:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 80117b6:	4628      	mov	r0, r5
 80117b8:	f7ee fd4c 	bl	8000254 <strlen>
 80117bc:	3001      	adds	r0, #1
 80117be:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 80117c2:	283c      	cmp	r0, #60	@ 0x3c
 80117c4:	f200 80a5 	bhi.w	8011912 <rmw_create_subscription+0x1c6>
 80117c8:	462b      	mov	r3, r5
 80117ca:	4a59      	ldr	r2, [pc, #356]	@ (8011930 <rmw_create_subscription+0x1e4>)
 80117cc:	213c      	movs	r1, #60	@ 0x3c
 80117ce:	4650      	mov	r0, sl
 80117d0:	f009 fed6 	bl	801b580 <sniprintf>
 80117d4:	4639      	mov	r1, r7
 80117d6:	2250      	movs	r2, #80	@ 0x50
 80117d8:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80117dc:	f8c8 9020 	str.w	r9, [r8, #32]
 80117e0:	f00a f871 	bl	801b8c6 <memcpy>
 80117e4:	4630      	mov	r0, r6
 80117e6:	4953      	ldr	r1, [pc, #332]	@ (8011934 <rmw_create_subscription+0x1e8>)
 80117e8:	f000 fc88 	bl	80120fc <get_message_typesupport_handle>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	f000 8090 	beq.w	8011912 <rmw_create_subscription+0x1c6>
 80117f2:	6842      	ldr	r2, [r0, #4]
 80117f4:	f8c8 2018 	str.w	r2, [r8, #24]
 80117f8:	2a00      	cmp	r2, #0
 80117fa:	f000 808a 	beq.w	8011912 <rmw_create_subscription+0x1c6>
 80117fe:	4629      	mov	r1, r5
 8011800:	463b      	mov	r3, r7
 8011802:	4648      	mov	r0, r9
 8011804:	f007 f832 	bl	801886c <create_topic>
 8011808:	f8c8 001c 	str.w	r0, [r8, #28]
 801180c:	2800      	cmp	r0, #0
 801180e:	f000 8085 	beq.w	801191c <rmw_create_subscription+0x1d0>
 8011812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011816:	2104      	movs	r1, #4
 8011818:	2506      	movs	r5, #6
 801181a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801181e:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8011822:	1c42      	adds	r2, r0, #1
 8011824:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8011828:	f000 ff32 	bl	8012690 <uxr_object_id>
 801182c:	f8c8 0010 	str.w	r0, [r8, #16]
 8011830:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011834:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8011838:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801183c:	9500      	str	r5, [sp, #0]
 801183e:	6819      	ldr	r1, [r3, #0]
 8011840:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011844:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011848:	f000 fe04 	bl	8012454 <uxr_buffer_create_subscriber_bin>
 801184c:	4602      	mov	r2, r0
 801184e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011852:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011856:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801185a:	f000 fbc7 	bl	8011fec <run_xrce_session>
 801185e:	2800      	cmp	r0, #0
 8011860:	d057      	beq.n	8011912 <rmw_create_subscription+0x1c6>
 8011862:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011866:	4629      	mov	r1, r5
 8011868:	ae08      	add	r6, sp, #32
 801186a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801186e:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8011872:	1c42      	adds	r2, r0, #1
 8011874:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8011878:	f000 ff0a 	bl	8012690 <uxr_object_id>
 801187c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011880:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8011884:	4639      	mov	r1, r7
 8011886:	f8c8 0014 	str.w	r0, [r8, #20]
 801188a:	4630      	mov	r0, r6
 801188c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8011890:	9305      	str	r3, [sp, #20]
 8011892:	f000 fbc7 	bl	8012024 <convert_qos_profile>
 8011896:	9503      	str	r5, [sp, #12]
 8011898:	9b05      	ldr	r3, [sp, #20]
 801189a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801189e:	9001      	str	r0, [sp, #4]
 80118a0:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80118a4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80118a8:	691b      	ldr	r3, [r3, #16]
 80118aa:	9300      	str	r3, [sp, #0]
 80118ac:	f8db 1000 	ldr.w	r1, [fp]
 80118b0:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 80118b4:	f000 fe74 	bl	80125a0 <uxr_buffer_create_datareader_bin>
 80118b8:	4602      	mov	r2, r0
 80118ba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80118be:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80118c2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80118c6:	f000 fb91 	bl	8011fec <run_xrce_session>
 80118ca:	b310      	cbz	r0, 8011912 <rmw_create_subscription+0x1c6>
 80118cc:	7a3b      	ldrb	r3, [r7, #8]
 80118ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80118d2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80118da:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80118de:	f04f 0200 	mov.w	r2, #0
 80118e2:	bf08      	it	eq
 80118e4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80118e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80118ec:	bf18      	it	ne
 80118ee:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 80118f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80118f4:	9307      	str	r3, [sp, #28]
 80118f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80118f8:	9300      	str	r3, [sp, #0]
 80118fa:	9b07      	ldr	r3, [sp, #28]
 80118fc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8011900:	6809      	ldr	r1, [r1, #0]
 8011902:	f000 fef5 	bl	80126f0 <uxr_buffer_request_data>
 8011906:	e000      	b.n	801190a <rmw_create_subscription+0x1be>
 8011908:	2400      	movs	r4, #0
 801190a:	4620      	mov	r0, r4
 801190c:	b00d      	add	sp, #52	@ 0x34
 801190e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011912:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8011916:	b108      	cbz	r0, 801191c <rmw_create_subscription+0x1d0>
 8011918:	f000 fa5a 	bl	8011dd0 <rmw_uxrce_fini_topic_memory>
 801191c:	4620      	mov	r0, r4
 801191e:	2400      	movs	r4, #0
 8011920:	f000 fa14 	bl	8011d4c <rmw_uxrce_fini_subscription_memory>
 8011924:	4620      	mov	r0, r4
 8011926:	b00d      	add	sp, #52	@ 0x34
 8011928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801192c:	20012754 	.word	0x20012754
 8011930:	0801ced8 	.word	0x0801ced8
 8011934:	0801c8f0 	.word	0x0801c8f0

08011938 <rmw_subscription_get_actual_qos>:
 8011938:	b178      	cbz	r0, 801195a <rmw_subscription_get_actual_qos+0x22>
 801193a:	b510      	push	{r4, lr}
 801193c:	fab1 f481 	clz	r4, r1
 8011940:	0964      	lsrs	r4, r4, #5
 8011942:	b141      	cbz	r1, 8011956 <rmw_subscription_get_actual_qos+0x1e>
 8011944:	6843      	ldr	r3, [r0, #4]
 8011946:	2250      	movs	r2, #80	@ 0x50
 8011948:	4608      	mov	r0, r1
 801194a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801194e:	f009 ffba 	bl	801b8c6 <memcpy>
 8011952:	4620      	mov	r0, r4
 8011954:	bd10      	pop	{r4, pc}
 8011956:	200b      	movs	r0, #11
 8011958:	bd10      	pop	{r4, pc}
 801195a:	200b      	movs	r0, #11
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop

08011960 <rmw_destroy_subscription>:
 8011960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011964:	b128      	cbz	r0, 8011972 <rmw_destroy_subscription+0x12>
 8011966:	4604      	mov	r4, r0
 8011968:	6800      	ldr	r0, [r0, #0]
 801196a:	460d      	mov	r5, r1
 801196c:	f000 fbb8 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 8011970:	b918      	cbnz	r0, 801197a <rmw_destroy_subscription+0x1a>
 8011972:	2401      	movs	r4, #1
 8011974:	4620      	mov	r0, r4
 8011976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801197a:	6863      	ldr	r3, [r4, #4]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d0f8      	beq.n	8011972 <rmw_destroy_subscription+0x12>
 8011980:	fab5 f485 	clz	r4, r5
 8011984:	0964      	lsrs	r4, r4, #5
 8011986:	2d00      	cmp	r5, #0
 8011988:	d0f3      	beq.n	8011972 <rmw_destroy_subscription+0x12>
 801198a:	6828      	ldr	r0, [r5, #0]
 801198c:	f000 fba8 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 8011990:	2800      	cmp	r0, #0
 8011992:	d0ee      	beq.n	8011972 <rmw_destroy_subscription+0x12>
 8011994:	686e      	ldr	r6, [r5, #4]
 8011996:	2e00      	cmp	r6, #0
 8011998:	d0eb      	beq.n	8011972 <rmw_destroy_subscription+0x12>
 801199a:	6a37      	ldr	r7, [r6, #32]
 801199c:	6972      	ldr	r2, [r6, #20]
 801199e:	6938      	ldr	r0, [r7, #16]
 80119a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80119a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80119a8:	6819      	ldr	r1, [r3, #0]
 80119aa:	f000 fedb 	bl	8012764 <uxr_buffer_cancel_data>
 80119ae:	4602      	mov	r2, r0
 80119b0:	6938      	ldr	r0, [r7, #16]
 80119b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80119b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80119ba:	f000 fb17 	bl	8011fec <run_xrce_session>
 80119be:	69f0      	ldr	r0, [r6, #28]
 80119c0:	f006 ffa4 	bl	801890c <destroy_topic>
 80119c4:	6a33      	ldr	r3, [r6, #32]
 80119c6:	6972      	ldr	r2, [r6, #20]
 80119c8:	6918      	ldr	r0, [r3, #16]
 80119ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80119ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80119d2:	6819      	ldr	r1, [r3, #0]
 80119d4:	f000 fc5a 	bl	801228c <uxr_buffer_delete_entity>
 80119d8:	6a33      	ldr	r3, [r6, #32]
 80119da:	4680      	mov	r8, r0
 80119dc:	6932      	ldr	r2, [r6, #16]
 80119de:	6918      	ldr	r0, [r3, #16]
 80119e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80119e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80119e8:	6819      	ldr	r1, [r3, #0]
 80119ea:	f000 fc4f 	bl	801228c <uxr_buffer_delete_entity>
 80119ee:	4606      	mov	r6, r0
 80119f0:	6938      	ldr	r0, [r7, #16]
 80119f2:	4642      	mov	r2, r8
 80119f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80119f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80119fc:	f000 faf6 	bl	8011fec <run_xrce_session>
 8011a00:	693f      	ldr	r7, [r7, #16]
 8011a02:	4632      	mov	r2, r6
 8011a04:	4606      	mov	r6, r0
 8011a06:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8011a0a:	4638      	mov	r0, r7
 8011a0c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8011a10:	f000 faec 	bl	8011fec <run_xrce_session>
 8011a14:	b126      	cbz	r6, 8011a20 <rmw_destroy_subscription+0xc0>
 8011a16:	b118      	cbz	r0, 8011a20 <rmw_destroy_subscription+0xc0>
 8011a18:	4628      	mov	r0, r5
 8011a1a:	f000 f997 	bl	8011d4c <rmw_uxrce_fini_subscription_memory>
 8011a1e:	e7a9      	b.n	8011974 <rmw_destroy_subscription+0x14>
 8011a20:	2402      	movs	r4, #2
 8011a22:	e7f9      	b.n	8011a18 <rmw_destroy_subscription+0xb8>

08011a24 <rmw_uxrce_init_service_memory>:
 8011a24:	b1e2      	cbz	r2, 8011a60 <rmw_uxrce_init_service_memory+0x3c>
 8011a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2a:	7b05      	ldrb	r5, [r0, #12]
 8011a2c:	4606      	mov	r6, r0
 8011a2e:	b9ad      	cbnz	r5, 8011a5c <rmw_uxrce_init_service_memory+0x38>
 8011a30:	23c8      	movs	r3, #200	@ 0xc8
 8011a32:	4617      	mov	r7, r2
 8011a34:	460c      	mov	r4, r1
 8011a36:	46a8      	mov	r8, r5
 8011a38:	6083      	str	r3, [r0, #8]
 8011a3a:	f240 1301 	movw	r3, #257	@ 0x101
 8011a3e:	e9c0 5500 	strd	r5, r5, [r0]
 8011a42:	8183      	strh	r3, [r0, #12]
 8011a44:	3501      	adds	r5, #1
 8011a46:	4621      	mov	r1, r4
 8011a48:	4630      	mov	r0, r6
 8011a4a:	f006 fc21 	bl	8018290 <put_memory>
 8011a4e:	42af      	cmp	r7, r5
 8011a50:	60a4      	str	r4, [r4, #8]
 8011a52:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011a56:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8011a5a:	d1f3      	bne.n	8011a44 <rmw_uxrce_init_service_memory+0x20>
 8011a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a60:	4770      	bx	lr
 8011a62:	bf00      	nop

08011a64 <rmw_uxrce_init_client_memory>:
 8011a64:	b1e2      	cbz	r2, 8011aa0 <rmw_uxrce_init_client_memory+0x3c>
 8011a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a6a:	7b05      	ldrb	r5, [r0, #12]
 8011a6c:	4606      	mov	r6, r0
 8011a6e:	b9ad      	cbnz	r5, 8011a9c <rmw_uxrce_init_client_memory+0x38>
 8011a70:	23c8      	movs	r3, #200	@ 0xc8
 8011a72:	4617      	mov	r7, r2
 8011a74:	460c      	mov	r4, r1
 8011a76:	46a8      	mov	r8, r5
 8011a78:	6083      	str	r3, [r0, #8]
 8011a7a:	f240 1301 	movw	r3, #257	@ 0x101
 8011a7e:	e9c0 5500 	strd	r5, r5, [r0]
 8011a82:	8183      	strh	r3, [r0, #12]
 8011a84:	3501      	adds	r5, #1
 8011a86:	4621      	mov	r1, r4
 8011a88:	4630      	mov	r0, r6
 8011a8a:	f006 fc01 	bl	8018290 <put_memory>
 8011a8e:	42af      	cmp	r7, r5
 8011a90:	60a4      	str	r4, [r4, #8]
 8011a92:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011a96:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8011a9a:	d1f3      	bne.n	8011a84 <rmw_uxrce_init_client_memory+0x20>
 8011a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop

08011aa4 <rmw_uxrce_init_publisher_memory>:
 8011aa4:	b1e2      	cbz	r2, 8011ae0 <rmw_uxrce_init_publisher_memory+0x3c>
 8011aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aaa:	7b05      	ldrb	r5, [r0, #12]
 8011aac:	4606      	mov	r6, r0
 8011aae:	b9ad      	cbnz	r5, 8011adc <rmw_uxrce_init_publisher_memory+0x38>
 8011ab0:	23d8      	movs	r3, #216	@ 0xd8
 8011ab2:	4617      	mov	r7, r2
 8011ab4:	460c      	mov	r4, r1
 8011ab6:	46a8      	mov	r8, r5
 8011ab8:	6083      	str	r3, [r0, #8]
 8011aba:	f240 1301 	movw	r3, #257	@ 0x101
 8011abe:	e9c0 5500 	strd	r5, r5, [r0]
 8011ac2:	8183      	strh	r3, [r0, #12]
 8011ac4:	3501      	adds	r5, #1
 8011ac6:	4621      	mov	r1, r4
 8011ac8:	4630      	mov	r0, r6
 8011aca:	f006 fbe1 	bl	8018290 <put_memory>
 8011ace:	42af      	cmp	r7, r5
 8011ad0:	60a4      	str	r4, [r4, #8]
 8011ad2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011ad6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8011ada:	d1f3      	bne.n	8011ac4 <rmw_uxrce_init_publisher_memory+0x20>
 8011adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae0:	4770      	bx	lr
 8011ae2:	bf00      	nop

08011ae4 <rmw_uxrce_init_subscription_memory>:
 8011ae4:	b1e2      	cbz	r2, 8011b20 <rmw_uxrce_init_subscription_memory+0x3c>
 8011ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aea:	7b05      	ldrb	r5, [r0, #12]
 8011aec:	4606      	mov	r6, r0
 8011aee:	b9ad      	cbnz	r5, 8011b1c <rmw_uxrce_init_subscription_memory+0x38>
 8011af0:	23d8      	movs	r3, #216	@ 0xd8
 8011af2:	4617      	mov	r7, r2
 8011af4:	460c      	mov	r4, r1
 8011af6:	46a8      	mov	r8, r5
 8011af8:	6083      	str	r3, [r0, #8]
 8011afa:	f240 1301 	movw	r3, #257	@ 0x101
 8011afe:	e9c0 5500 	strd	r5, r5, [r0]
 8011b02:	8183      	strh	r3, [r0, #12]
 8011b04:	3501      	adds	r5, #1
 8011b06:	4621      	mov	r1, r4
 8011b08:	4630      	mov	r0, r6
 8011b0a:	f006 fbc1 	bl	8018290 <put_memory>
 8011b0e:	42af      	cmp	r7, r5
 8011b10:	60a4      	str	r4, [r4, #8]
 8011b12:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011b16:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8011b1a:	d1f3      	bne.n	8011b04 <rmw_uxrce_init_subscription_memory+0x20>
 8011b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b20:	4770      	bx	lr
 8011b22:	bf00      	nop

08011b24 <rmw_uxrce_init_node_memory>:
 8011b24:	b1e2      	cbz	r2, 8011b60 <rmw_uxrce_init_node_memory+0x3c>
 8011b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b2a:	7b05      	ldrb	r5, [r0, #12]
 8011b2c:	4606      	mov	r6, r0
 8011b2e:	b9ad      	cbnz	r5, 8011b5c <rmw_uxrce_init_node_memory+0x38>
 8011b30:	23a4      	movs	r3, #164	@ 0xa4
 8011b32:	4617      	mov	r7, r2
 8011b34:	460c      	mov	r4, r1
 8011b36:	46a8      	mov	r8, r5
 8011b38:	6083      	str	r3, [r0, #8]
 8011b3a:	f240 1301 	movw	r3, #257	@ 0x101
 8011b3e:	e9c0 5500 	strd	r5, r5, [r0]
 8011b42:	8183      	strh	r3, [r0, #12]
 8011b44:	3501      	adds	r5, #1
 8011b46:	4621      	mov	r1, r4
 8011b48:	4630      	mov	r0, r6
 8011b4a:	f006 fba1 	bl	8018290 <put_memory>
 8011b4e:	42af      	cmp	r7, r5
 8011b50:	60a4      	str	r4, [r4, #8]
 8011b52:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8011b56:	f804 8c98 	strb.w	r8, [r4, #-152]
 8011b5a:	d1f3      	bne.n	8011b44 <rmw_uxrce_init_node_memory+0x20>
 8011b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop

08011b64 <rmw_uxrce_init_session_memory>:
 8011b64:	b1ea      	cbz	r2, 8011ba2 <rmw_uxrce_init_session_memory+0x3e>
 8011b66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b6a:	7b05      	ldrb	r5, [r0, #12]
 8011b6c:	4606      	mov	r6, r0
 8011b6e:	b9b5      	cbnz	r5, 8011b9e <rmw_uxrce_init_session_memory+0x3a>
 8011b70:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011b74:	f240 1301 	movw	r3, #257	@ 0x101
 8011b78:	4617      	mov	r7, r2
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	46a9      	mov	r9, r5
 8011b7e:	f8c0 8008 	str.w	r8, [r0, #8]
 8011b82:	8183      	strh	r3, [r0, #12]
 8011b84:	e9c0 5500 	strd	r5, r5, [r0]
 8011b88:	3501      	adds	r5, #1
 8011b8a:	4621      	mov	r1, r4
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f006 fb7f 	bl	8018290 <put_memory>
 8011b92:	42af      	cmp	r7, r5
 8011b94:	60a4      	str	r4, [r4, #8]
 8011b96:	f884 900c 	strb.w	r9, [r4, #12]
 8011b9a:	4444      	add	r4, r8
 8011b9c:	d1f4      	bne.n	8011b88 <rmw_uxrce_init_session_memory+0x24>
 8011b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ba2:	4770      	bx	lr

08011ba4 <rmw_uxrce_init_topic_memory>:
 8011ba4:	b1e2      	cbz	r2, 8011be0 <rmw_uxrce_init_topic_memory+0x3c>
 8011ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011baa:	7b05      	ldrb	r5, [r0, #12]
 8011bac:	4606      	mov	r6, r0
 8011bae:	b9ad      	cbnz	r5, 8011bdc <rmw_uxrce_init_topic_memory+0x38>
 8011bb0:	231c      	movs	r3, #28
 8011bb2:	4617      	mov	r7, r2
 8011bb4:	460c      	mov	r4, r1
 8011bb6:	46a8      	mov	r8, r5
 8011bb8:	6083      	str	r3, [r0, #8]
 8011bba:	f240 1301 	movw	r3, #257	@ 0x101
 8011bbe:	e9c0 5500 	strd	r5, r5, [r0]
 8011bc2:	8183      	strh	r3, [r0, #12]
 8011bc4:	3501      	adds	r5, #1
 8011bc6:	4621      	mov	r1, r4
 8011bc8:	4630      	mov	r0, r6
 8011bca:	f006 fb61 	bl	8018290 <put_memory>
 8011bce:	42af      	cmp	r7, r5
 8011bd0:	60a4      	str	r4, [r4, #8]
 8011bd2:	f104 041c 	add.w	r4, r4, #28
 8011bd6:	f804 8c10 	strb.w	r8, [r4, #-16]
 8011bda:	d1f3      	bne.n	8011bc4 <rmw_uxrce_init_topic_memory+0x20>
 8011bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop

08011be4 <rmw_uxrce_init_static_input_buffer_memory>:
 8011be4:	b1ea      	cbz	r2, 8011c22 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8011be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bea:	7b05      	ldrb	r5, [r0, #12]
 8011bec:	4606      	mov	r6, r0
 8011bee:	b9b5      	cbnz	r5, 8011c1e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8011bf0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8011bf4:	4617      	mov	r7, r2
 8011bf6:	460c      	mov	r4, r1
 8011bf8:	46a8      	mov	r8, r5
 8011bfa:	6083      	str	r3, [r0, #8]
 8011bfc:	f240 1301 	movw	r3, #257	@ 0x101
 8011c00:	e9c0 5500 	strd	r5, r5, [r0]
 8011c04:	8183      	strh	r3, [r0, #12]
 8011c06:	3501      	adds	r5, #1
 8011c08:	4621      	mov	r1, r4
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	f006 fb40 	bl	8018290 <put_memory>
 8011c10:	42af      	cmp	r7, r5
 8011c12:	60a4      	str	r4, [r4, #8]
 8011c14:	f884 800c 	strb.w	r8, [r4, #12]
 8011c18:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8011c1c:	d1f3      	bne.n	8011c06 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8011c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c22:	4770      	bx	lr

08011c24 <rmw_uxrce_init_init_options_impl_memory>:
 8011c24:	b1e2      	cbz	r2, 8011c60 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8011c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c2a:	7b05      	ldrb	r5, [r0, #12]
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	b9ad      	cbnz	r5, 8011c5c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011c30:	232c      	movs	r3, #44	@ 0x2c
 8011c32:	4617      	mov	r7, r2
 8011c34:	460c      	mov	r4, r1
 8011c36:	46a8      	mov	r8, r5
 8011c38:	6083      	str	r3, [r0, #8]
 8011c3a:	f240 1301 	movw	r3, #257	@ 0x101
 8011c3e:	e9c0 5500 	strd	r5, r5, [r0]
 8011c42:	8183      	strh	r3, [r0, #12]
 8011c44:	3501      	adds	r5, #1
 8011c46:	4621      	mov	r1, r4
 8011c48:	4630      	mov	r0, r6
 8011c4a:	f006 fb21 	bl	8018290 <put_memory>
 8011c4e:	42af      	cmp	r7, r5
 8011c50:	60a4      	str	r4, [r4, #8]
 8011c52:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8011c56:	f804 8c20 	strb.w	r8, [r4, #-32]
 8011c5a:	d1f3      	bne.n	8011c44 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c60:	4770      	bx	lr
 8011c62:	bf00      	nop

08011c64 <rmw_uxrce_init_wait_set_memory>:
 8011c64:	b1e2      	cbz	r2, 8011ca0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8011c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c6a:	7b05      	ldrb	r5, [r0, #12]
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	b9ad      	cbnz	r5, 8011c9c <rmw_uxrce_init_wait_set_memory+0x38>
 8011c70:	231c      	movs	r3, #28
 8011c72:	4617      	mov	r7, r2
 8011c74:	460c      	mov	r4, r1
 8011c76:	46a8      	mov	r8, r5
 8011c78:	6083      	str	r3, [r0, #8]
 8011c7a:	f240 1301 	movw	r3, #257	@ 0x101
 8011c7e:	e9c0 5500 	strd	r5, r5, [r0]
 8011c82:	8183      	strh	r3, [r0, #12]
 8011c84:	3501      	adds	r5, #1
 8011c86:	4621      	mov	r1, r4
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f006 fb01 	bl	8018290 <put_memory>
 8011c8e:	42af      	cmp	r7, r5
 8011c90:	60a4      	str	r4, [r4, #8]
 8011c92:	f104 041c 	add.w	r4, r4, #28
 8011c96:	f804 8c10 	strb.w	r8, [r4, #-16]
 8011c9a:	d1f3      	bne.n	8011c84 <rmw_uxrce_init_wait_set_memory+0x20>
 8011c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop

08011ca4 <rmw_uxrce_init_guard_condition_memory>:
 8011ca4:	b1e2      	cbz	r2, 8011ce0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8011ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011caa:	7b05      	ldrb	r5, [r0, #12]
 8011cac:	4606      	mov	r6, r0
 8011cae:	b9ad      	cbnz	r5, 8011cdc <rmw_uxrce_init_guard_condition_memory+0x38>
 8011cb0:	2320      	movs	r3, #32
 8011cb2:	4617      	mov	r7, r2
 8011cb4:	460c      	mov	r4, r1
 8011cb6:	46a8      	mov	r8, r5
 8011cb8:	6083      	str	r3, [r0, #8]
 8011cba:	f240 1301 	movw	r3, #257	@ 0x101
 8011cbe:	e9c0 5500 	strd	r5, r5, [r0]
 8011cc2:	8183      	strh	r3, [r0, #12]
 8011cc4:	3501      	adds	r5, #1
 8011cc6:	4621      	mov	r1, r4
 8011cc8:	4630      	mov	r0, r6
 8011cca:	f006 fae1 	bl	8018290 <put_memory>
 8011cce:	42af      	cmp	r7, r5
 8011cd0:	60a4      	str	r4, [r4, #8]
 8011cd2:	f104 0420 	add.w	r4, r4, #32
 8011cd6:	f804 8c14 	strb.w	r8, [r4, #-20]
 8011cda:	d1f3      	bne.n	8011cc4 <rmw_uxrce_init_guard_condition_memory+0x20>
 8011cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop

08011ce4 <rmw_uxrce_fini_session_memory>:
 8011ce4:	4601      	mov	r1, r0
 8011ce6:	4801      	ldr	r0, [pc, #4]	@ (8011cec <rmw_uxrce_fini_session_memory+0x8>)
 8011ce8:	f006 bad2 	b.w	8018290 <put_memory>
 8011cec:	20012734 	.word	0x20012734

08011cf0 <rmw_uxrce_fini_node_memory>:
 8011cf0:	b538      	push	{r3, r4, r5, lr}
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	6800      	ldr	r0, [r0, #0]
 8011cf6:	b128      	cbz	r0, 8011d04 <rmw_uxrce_fini_node_memory+0x14>
 8011cf8:	4b07      	ldr	r3, [pc, #28]	@ (8011d18 <rmw_uxrce_fini_node_memory+0x28>)
 8011cfa:	6819      	ldr	r1, [r3, #0]
 8011cfc:	f7ee faa0 	bl	8000240 <strcmp>
 8011d00:	b940      	cbnz	r0, 8011d14 <rmw_uxrce_fini_node_memory+0x24>
 8011d02:	6020      	str	r0, [r4, #0]
 8011d04:	6861      	ldr	r1, [r4, #4]
 8011d06:	b129      	cbz	r1, 8011d14 <rmw_uxrce_fini_node_memory+0x24>
 8011d08:	2500      	movs	r5, #0
 8011d0a:	4804      	ldr	r0, [pc, #16]	@ (8011d1c <rmw_uxrce_fini_node_memory+0x2c>)
 8011d0c:	610d      	str	r5, [r1, #16]
 8011d0e:	f006 fabf 	bl	8018290 <put_memory>
 8011d12:	6065      	str	r5, [r4, #4]
 8011d14:	bd38      	pop	{r3, r4, r5, pc}
 8011d16:	bf00      	nop
 8011d18:	0801d284 	.word	0x0801d284
 8011d1c:	20012704 	.word	0x20012704

08011d20 <rmw_uxrce_fini_publisher_memory>:
 8011d20:	b510      	push	{r4, lr}
 8011d22:	4604      	mov	r4, r0
 8011d24:	6800      	ldr	r0, [r0, #0]
 8011d26:	b128      	cbz	r0, 8011d34 <rmw_uxrce_fini_publisher_memory+0x14>
 8011d28:	4b06      	ldr	r3, [pc, #24]	@ (8011d44 <rmw_uxrce_fini_publisher_memory+0x24>)
 8011d2a:	6819      	ldr	r1, [r3, #0]
 8011d2c:	f7ee fa88 	bl	8000240 <strcmp>
 8011d30:	b938      	cbnz	r0, 8011d42 <rmw_uxrce_fini_publisher_memory+0x22>
 8011d32:	6020      	str	r0, [r4, #0]
 8011d34:	6861      	ldr	r1, [r4, #4]
 8011d36:	b121      	cbz	r1, 8011d42 <rmw_uxrce_fini_publisher_memory+0x22>
 8011d38:	4803      	ldr	r0, [pc, #12]	@ (8011d48 <rmw_uxrce_fini_publisher_memory+0x28>)
 8011d3a:	f006 faa9 	bl	8018290 <put_memory>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	6063      	str	r3, [r4, #4]
 8011d42:	bd10      	pop	{r4, pc}
 8011d44:	0801d284 	.word	0x0801d284
 8011d48:	20012714 	.word	0x20012714

08011d4c <rmw_uxrce_fini_subscription_memory>:
 8011d4c:	b510      	push	{r4, lr}
 8011d4e:	4604      	mov	r4, r0
 8011d50:	6800      	ldr	r0, [r0, #0]
 8011d52:	b128      	cbz	r0, 8011d60 <rmw_uxrce_fini_subscription_memory+0x14>
 8011d54:	4b06      	ldr	r3, [pc, #24]	@ (8011d70 <rmw_uxrce_fini_subscription_memory+0x24>)
 8011d56:	6819      	ldr	r1, [r3, #0]
 8011d58:	f7ee fa72 	bl	8000240 <strcmp>
 8011d5c:	b938      	cbnz	r0, 8011d6e <rmw_uxrce_fini_subscription_memory+0x22>
 8011d5e:	6020      	str	r0, [r4, #0]
 8011d60:	6861      	ldr	r1, [r4, #4]
 8011d62:	b121      	cbz	r1, 8011d6e <rmw_uxrce_fini_subscription_memory+0x22>
 8011d64:	4803      	ldr	r0, [pc, #12]	@ (8011d74 <rmw_uxrce_fini_subscription_memory+0x28>)
 8011d66:	f006 fa93 	bl	8018290 <put_memory>
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	6063      	str	r3, [r4, #4]
 8011d6e:	bd10      	pop	{r4, pc}
 8011d70:	0801d284 	.word	0x0801d284
 8011d74:	20012754 	.word	0x20012754

08011d78 <rmw_uxrce_fini_service_memory>:
 8011d78:	b510      	push	{r4, lr}
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	6800      	ldr	r0, [r0, #0]
 8011d7e:	b128      	cbz	r0, 8011d8c <rmw_uxrce_fini_service_memory+0x14>
 8011d80:	4b06      	ldr	r3, [pc, #24]	@ (8011d9c <rmw_uxrce_fini_service_memory+0x24>)
 8011d82:	6819      	ldr	r1, [r3, #0]
 8011d84:	f7ee fa5c 	bl	8000240 <strcmp>
 8011d88:	b938      	cbnz	r0, 8011d9a <rmw_uxrce_fini_service_memory+0x22>
 8011d8a:	6020      	str	r0, [r4, #0]
 8011d8c:	6861      	ldr	r1, [r4, #4]
 8011d8e:	b121      	cbz	r1, 8011d9a <rmw_uxrce_fini_service_memory+0x22>
 8011d90:	4803      	ldr	r0, [pc, #12]	@ (8011da0 <rmw_uxrce_fini_service_memory+0x28>)
 8011d92:	f006 fa7d 	bl	8018290 <put_memory>
 8011d96:	2300      	movs	r3, #0
 8011d98:	6063      	str	r3, [r4, #4]
 8011d9a:	bd10      	pop	{r4, pc}
 8011d9c:	0801d284 	.word	0x0801d284
 8011da0:	20012724 	.word	0x20012724

08011da4 <rmw_uxrce_fini_client_memory>:
 8011da4:	b510      	push	{r4, lr}
 8011da6:	4604      	mov	r4, r0
 8011da8:	6800      	ldr	r0, [r0, #0]
 8011daa:	b128      	cbz	r0, 8011db8 <rmw_uxrce_fini_client_memory+0x14>
 8011dac:	4b06      	ldr	r3, [pc, #24]	@ (8011dc8 <rmw_uxrce_fini_client_memory+0x24>)
 8011dae:	6819      	ldr	r1, [r3, #0]
 8011db0:	f7ee fa46 	bl	8000240 <strcmp>
 8011db4:	b938      	cbnz	r0, 8011dc6 <rmw_uxrce_fini_client_memory+0x22>
 8011db6:	6020      	str	r0, [r4, #0]
 8011db8:	6861      	ldr	r1, [r4, #4]
 8011dba:	b121      	cbz	r1, 8011dc6 <rmw_uxrce_fini_client_memory+0x22>
 8011dbc:	4803      	ldr	r0, [pc, #12]	@ (8011dcc <rmw_uxrce_fini_client_memory+0x28>)
 8011dbe:	f006 fa67 	bl	8018290 <put_memory>
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	6063      	str	r3, [r4, #4]
 8011dc6:	bd10      	pop	{r4, pc}
 8011dc8:	0801d284 	.word	0x0801d284
 8011dcc:	2000de34 	.word	0x2000de34

08011dd0 <rmw_uxrce_fini_topic_memory>:
 8011dd0:	b510      	push	{r4, lr}
 8011dd2:	4604      	mov	r4, r0
 8011dd4:	4803      	ldr	r0, [pc, #12]	@ (8011de4 <rmw_uxrce_fini_topic_memory+0x14>)
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	f006 fa5a 	bl	8018290 <put_memory>
 8011ddc:	2300      	movs	r3, #0
 8011dde:	61a3      	str	r3, [r4, #24]
 8011de0:	bd10      	pop	{r4, pc}
 8011de2:	bf00      	nop
 8011de4:	20012764 	.word	0x20012764

08011de8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011de8:	b082      	sub	sp, #8
 8011dea:	492b      	ldr	r1, [pc, #172]	@ (8011e98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8011dec:	b530      	push	{r4, r5, lr}
 8011dee:	680d      	ldr	r5, [r1, #0]
 8011df0:	ac03      	add	r4, sp, #12
 8011df2:	e884 000c 	stmia.w	r4, {r2, r3}
 8011df6:	461c      	mov	r4, r3
 8011df8:	2d00      	cmp	r5, #0
 8011dfa:	d04b      	beq.n	8011e94 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8011dfc:	462b      	mov	r3, r5
 8011dfe:	2100      	movs	r1, #0
 8011e00:	689a      	ldr	r2, [r3, #8]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8011e08:	4290      	cmp	r0, r2
 8011e0a:	bf08      	it	eq
 8011e0c:	3101      	addeq	r1, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d1f6      	bne.n	8011e00 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8011e12:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011e16:	2b02      	cmp	r3, #2
 8011e18:	d029      	beq.n	8011e6e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011e1a:	d820      	bhi.n	8011e5e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8011e1c:	428c      	cmp	r4, r1
 8011e1e:	d828      	bhi.n	8011e72 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8011e20:	fab4 f284 	clz	r2, r4
 8011e24:	0952      	lsrs	r2, r2, #5
 8011e26:	b324      	cbz	r4, 8011e72 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8011e28:	b1dd      	cbz	r5, 8011e62 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8011e2a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011e2e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011e32:	e001      	b.n	8011e38 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8011e34:	686d      	ldr	r5, [r5, #4]
 8011e36:	b1ad      	cbz	r5, 8011e64 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8011e38:	68ab      	ldr	r3, [r5, #8]
 8011e3a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8011e3e:	4288      	cmp	r0, r1
 8011e40:	d1f8      	bne.n	8011e34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8011e42:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8011e46:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8011e4a:	4561      	cmp	r1, ip
 8011e4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011e50:	eb73 0e04 	sbcs.w	lr, r3, r4
 8011e54:	daee      	bge.n	8011e34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8011e56:	468c      	mov	ip, r1
 8011e58:	461c      	mov	r4, r3
 8011e5a:	462a      	mov	r2, r5
 8011e5c:	e7ea      	b.n	8011e34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8011e5e:	2b03      	cmp	r3, #3
 8011e60:	d0dc      	beq.n	8011e1c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8011e62:	2200      	movs	r2, #0
 8011e64:	4610      	mov	r0, r2
 8011e66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e6a:	b002      	add	sp, #8
 8011e6c:	4770      	bx	lr
 8011e6e:	428c      	cmp	r4, r1
 8011e70:	d905      	bls.n	8011e7e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8011e72:	4809      	ldr	r0, [pc, #36]	@ (8011e98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8011e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e78:	b002      	add	sp, #8
 8011e7a:	f006 b9f9 	b.w	8018270 <get_memory>
 8011e7e:	fab4 f284 	clz	r2, r4
 8011e82:	0952      	lsrs	r2, r2, #5
 8011e84:	2c00      	cmp	r4, #0
 8011e86:	d1ed      	bne.n	8011e64 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8011e88:	4803      	ldr	r0, [pc, #12]	@ (8011e98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8011e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e8e:	b002      	add	sp, #8
 8011e90:	f006 b9ee 	b.w	8018270 <get_memory>
 8011e94:	4629      	mov	r1, r5
 8011e96:	e7bc      	b.n	8011e12 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8011e98:	20012744 	.word	0x20012744

08011e9c <rmw_uxrce_find_static_input_buffer_by_owner>:
 8011e9c:	4b12      	ldr	r3, [pc, #72]	@ (8011ee8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	b530      	push	{r4, r5, lr}
 8011ea2:	b1f3      	cbz	r3, 8011ee2 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8011ea4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8011ea8:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8011eac:	2400      	movs	r4, #0
 8011eae:	e001      	b.n	8011eb4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	b1a3      	cbz	r3, 8011ede <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8011eb4:	689a      	ldr	r2, [r3, #8]
 8011eb6:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8011eba:	4288      	cmp	r0, r1
 8011ebc:	d1f8      	bne.n	8011eb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011ebe:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8011ec2:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8011ec6:	4571      	cmp	r1, lr
 8011ec8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8011ecc:	eb72 050c 	sbcs.w	r5, r2, ip
 8011ed0:	daee      	bge.n	8011eb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011ed2:	461c      	mov	r4, r3
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	468e      	mov	lr, r1
 8011ed8:	4694      	mov	ip, r2
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d1ea      	bne.n	8011eb4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011ede:	4620      	mov	r0, r4
 8011ee0:	bd30      	pop	{r4, r5, pc}
 8011ee2:	461c      	mov	r4, r3
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	bd30      	pop	{r4, r5, pc}
 8011ee8:	20012744 	.word	0x20012744
 8011eec:	00000000 	.word	0x00000000

08011ef0 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8011fe8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef6:	681f      	ldr	r7, [r3, #0]
 8011ef8:	ed2d 8b06 	vpush	{d8-d10}
 8011efc:	b08d      	sub	sp, #52	@ 0x34
 8011efe:	f007 f865 	bl	8018fcc <rmw_uros_epoch_nanos>
 8011f02:	2f00      	cmp	r7, #0
 8011f04:	d05d      	beq.n	8011fc2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011f06:	46b8      	mov	r8, r7
 8011f08:	4681      	mov	r9, r0
 8011f0a:	468a      	mov	sl, r1
 8011f0c:	ac04      	add	r4, sp, #16
 8011f0e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011f12:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011f16:	2b04      	cmp	r3, #4
 8011f18:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8011fd0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011f1c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8011fd8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011f20:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8011fe0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8011f24:	d03f      	beq.n	8011fa6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011f26:	2b05      	cmp	r3, #5
 8011f28:	d044      	beq.n	8011fb4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8011f2a:	2b03      	cmp	r3, #3
 8011f2c:	d03b      	beq.n	8011fa6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011f2e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011f32:	ed8d ab06 	vstr	d10, [sp, #24]
 8011f36:	ab08      	add	r3, sp, #32
 8011f38:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011f3c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8011f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011f42:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011f46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011f4a:	f006 f885 	bl	8018058 <rmw_time_equal>
 8011f4e:	b118      	cbz	r0, 8011f58 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011f50:	ed8d 9b04 	vstr	d9, [sp, #16]
 8011f54:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011f58:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011f5c:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8011f60:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8011f64:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011f68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011f6c:	f006 f8ca 	bl	8018104 <rmw_time_total_nsec>
 8011f70:	1830      	adds	r0, r6, r0
 8011f72:	eb47 0101 	adc.w	r1, r7, r1
 8011f76:	4548      	cmp	r0, r9
 8011f78:	eb71 030a 	sbcs.w	r3, r1, sl
 8011f7c:	db05      	blt.n	8011f8a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8011f7e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8011f82:	4591      	cmp	r9, r2
 8011f84:	eb7a 0303 	sbcs.w	r3, sl, r3
 8011f88:	da03      	bge.n	8011f92 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8011f8a:	4641      	mov	r1, r8
 8011f8c:	4816      	ldr	r0, [pc, #88]	@ (8011fe8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011f8e:	f006 f97f 	bl	8018290 <put_memory>
 8011f92:	f1bb 0f00 	cmp.w	fp, #0
 8011f96:	d014      	beq.n	8011fc2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011f98:	46d8      	mov	r8, fp
 8011f9a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011f9e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011fa2:	2b04      	cmp	r3, #4
 8011fa4:	d1bf      	bne.n	8011f26 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8011fa6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8011faa:	3340      	adds	r3, #64	@ 0x40
 8011fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011fb2:	e7c0      	b.n	8011f36 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8011fb4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8011fb8:	3348      	adds	r3, #72	@ 0x48
 8011fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011fc0:	e7b9      	b.n	8011f36 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8011fc2:	b00d      	add	sp, #52	@ 0x34
 8011fc4:	ecbd 8b06 	vpop	{d8-d10}
 8011fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fcc:	f3af 8000 	nop.w
	...
 8011fd8:	00000001 	.word	0x00000001
 8011fdc:	00000000 	.word	0x00000000
 8011fe0:	0000001e 	.word	0x0000001e
 8011fe4:	00000000 	.word	0x00000000
 8011fe8:	20012744 	.word	0x20012744

08011fec <run_xrce_session>:
 8011fec:	b510      	push	{r4, lr}
 8011fee:	788c      	ldrb	r4, [r1, #2]
 8011ff0:	b086      	sub	sp, #24
 8011ff2:	2c01      	cmp	r4, #1
 8011ff4:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011ff8:	d00c      	beq.n	8012014 <run_xrce_session+0x28>
 8011ffa:	2401      	movs	r4, #1
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	f10d 020e 	add.w	r2, sp, #14
 8012002:	f10d 0317 	add.w	r3, sp, #23
 8012006:	9400      	str	r4, [sp, #0]
 8012008:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801200c:	f001 f9a0 	bl	8013350 <uxr_run_session_until_all_status>
 8012010:	b006      	add	sp, #24
 8012012:	bd10      	pop	{r4, pc}
 8012014:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012018:	f000 fdbc 	bl	8012b94 <uxr_flash_output_streams>
 801201c:	4620      	mov	r0, r4
 801201e:	b006      	add	sp, #24
 8012020:	bd10      	pop	{r4, pc}
 8012022:	bf00      	nop

08012024 <convert_qos_profile>:
 8012024:	7a4a      	ldrb	r2, [r1, #9]
 8012026:	f891 c008 	ldrb.w	ip, [r1, #8]
 801202a:	2a02      	cmp	r2, #2
 801202c:	bf18      	it	ne
 801202e:	2200      	movne	r2, #0
 8012030:	7002      	strb	r2, [r0, #0]
 8012032:	f1ac 0202 	sub.w	r2, ip, #2
 8012036:	fab2 f282 	clz	r2, r2
 801203a:	0952      	lsrs	r2, r2, #5
 801203c:	7042      	strb	r2, [r0, #1]
 801203e:	780a      	ldrb	r2, [r1, #0]
 8012040:	8889      	ldrh	r1, [r1, #4]
 8012042:	f1a2 0202 	sub.w	r2, r2, #2
 8012046:	8081      	strh	r1, [r0, #4]
 8012048:	fab2 f282 	clz	r2, r2
 801204c:	0952      	lsrs	r2, r2, #5
 801204e:	7082      	strb	r2, [r0, #2]
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop

08012054 <generate_type_name>:
 8012054:	2300      	movs	r3, #0
 8012056:	b530      	push	{r4, r5, lr}
 8012058:	700b      	strb	r3, [r1, #0]
 801205a:	b087      	sub	sp, #28
 801205c:	6803      	ldr	r3, [r0, #0]
 801205e:	4614      	mov	r4, r2
 8012060:	b1bb      	cbz	r3, 8012092 <generate_type_name+0x3e>
 8012062:	4a0e      	ldr	r2, [pc, #56]	@ (801209c <generate_type_name+0x48>)
 8012064:	4615      	mov	r5, r2
 8012066:	9500      	str	r5, [sp, #0]
 8012068:	9203      	str	r2, [sp, #12]
 801206a:	4d0d      	ldr	r5, [pc, #52]	@ (80120a0 <generate_type_name+0x4c>)
 801206c:	6842      	ldr	r2, [r0, #4]
 801206e:	4608      	mov	r0, r1
 8012070:	490c      	ldr	r1, [pc, #48]	@ (80120a4 <generate_type_name+0x50>)
 8012072:	9204      	str	r2, [sp, #16]
 8012074:	9105      	str	r1, [sp, #20]
 8012076:	9102      	str	r1, [sp, #8]
 8012078:	4621      	mov	r1, r4
 801207a:	4a0b      	ldr	r2, [pc, #44]	@ (80120a8 <generate_type_name+0x54>)
 801207c:	9501      	str	r5, [sp, #4]
 801207e:	f009 fa7f 	bl	801b580 <sniprintf>
 8012082:	2800      	cmp	r0, #0
 8012084:	bfa8      	it	ge
 8012086:	4284      	cmpge	r4, r0
 8012088:	bfcc      	ite	gt
 801208a:	2001      	movgt	r0, #1
 801208c:	2000      	movle	r0, #0
 801208e:	b007      	add	sp, #28
 8012090:	bd30      	pop	{r4, r5, pc}
 8012092:	4b06      	ldr	r3, [pc, #24]	@ (80120ac <generate_type_name+0x58>)
 8012094:	4a01      	ldr	r2, [pc, #4]	@ (801209c <generate_type_name+0x48>)
 8012096:	461d      	mov	r5, r3
 8012098:	e7e5      	b.n	8012066 <generate_type_name+0x12>
 801209a:	bf00      	nop
 801209c:	0801cec8 	.word	0x0801cec8
 80120a0:	0801cee0 	.word	0x0801cee0
 80120a4:	0801cedc 	.word	0x0801cedc
 80120a8:	0801cecc 	.word	0x0801cecc
 80120ac:	0801ccb8 	.word	0x0801ccb8

080120b0 <generate_topic_name>:
 80120b0:	b530      	push	{r4, r5, lr}
 80120b2:	4614      	mov	r4, r2
 80120b4:	b083      	sub	sp, #12
 80120b6:	4605      	mov	r5, r0
 80120b8:	4b07      	ldr	r3, [pc, #28]	@ (80120d8 <generate_topic_name+0x28>)
 80120ba:	4a08      	ldr	r2, [pc, #32]	@ (80120dc <generate_topic_name+0x2c>)
 80120bc:	4608      	mov	r0, r1
 80120be:	9500      	str	r5, [sp, #0]
 80120c0:	4621      	mov	r1, r4
 80120c2:	f009 fa5d 	bl	801b580 <sniprintf>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	bfa8      	it	ge
 80120ca:	4284      	cmpge	r4, r0
 80120cc:	bfcc      	ite	gt
 80120ce:	2001      	movgt	r0, #1
 80120d0:	2000      	movle	r0, #0
 80120d2:	b003      	add	sp, #12
 80120d4:	bd30      	pop	{r4, r5, pc}
 80120d6:	bf00      	nop
 80120d8:	0801cee4 	.word	0x0801cee4
 80120dc:	0801c9c8 	.word	0x0801c9c8

080120e0 <is_uxrce_rmw_identifier_valid>:
 80120e0:	b510      	push	{r4, lr}
 80120e2:	4604      	mov	r4, r0
 80120e4:	b140      	cbz	r0, 80120f8 <is_uxrce_rmw_identifier_valid+0x18>
 80120e6:	f006 f92b 	bl	8018340 <rmw_get_implementation_identifier>
 80120ea:	4601      	mov	r1, r0
 80120ec:	4620      	mov	r0, r4
 80120ee:	f7ee f8a7 	bl	8000240 <strcmp>
 80120f2:	fab0 f080 	clz	r0, r0
 80120f6:	0940      	lsrs	r0, r0, #5
 80120f8:	bd10      	pop	{r4, pc}
 80120fa:	bf00      	nop

080120fc <get_message_typesupport_handle>:
 80120fc:	6883      	ldr	r3, [r0, #8]
 80120fe:	4718      	bx	r3

08012100 <get_message_typesupport_handle_function>:
 8012100:	b510      	push	{r4, lr}
 8012102:	4604      	mov	r4, r0
 8012104:	6800      	ldr	r0, [r0, #0]
 8012106:	f7ee f89b 	bl	8000240 <strcmp>
 801210a:	2800      	cmp	r0, #0
 801210c:	bf0c      	ite	eq
 801210e:	4620      	moveq	r0, r4
 8012110:	2000      	movne	r0, #0
 8012112:	bd10      	pop	{r4, pc}

08012114 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012118:	6805      	ldr	r5, [r0, #0]
 801211a:	4604      	mov	r4, r0
 801211c:	460e      	mov	r6, r1
 801211e:	4628      	mov	r0, r5
 8012120:	f7ee f88e 	bl	8000240 <strcmp>
 8012124:	b1c8      	cbz	r0, 801215a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8012126:	4b11      	ldr	r3, [pc, #68]	@ (801216c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	429d      	cmp	r5, r3
 801212c:	d112      	bne.n	8012154 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801212e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012132:	f8d8 4000 	ldr.w	r4, [r8]
 8012136:	b16c      	cbz	r4, 8012154 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012138:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801213c:	2700      	movs	r7, #0
 801213e:	3d04      	subs	r5, #4
 8012140:	4631      	mov	r1, r6
 8012142:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012146:	f7ee f87b 	bl	8000240 <strcmp>
 801214a:	00bb      	lsls	r3, r7, #2
 801214c:	b140      	cbz	r0, 8012160 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801214e:	3701      	adds	r7, #1
 8012150:	42bc      	cmp	r4, r7
 8012152:	d1f5      	bne.n	8012140 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012154:	2000      	movs	r0, #0
 8012156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801215a:	4620      	mov	r0, r4
 801215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012160:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012168:	58d3      	ldr	r3, [r2, r3]
 801216a:	4718      	bx	r3
 801216c:	200002d0 	.word	0x200002d0

08012170 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012170:	4b04      	ldr	r3, [pc, #16]	@ (8012184 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012172:	681a      	ldr	r2, [r3, #0]
 8012174:	b10a      	cbz	r2, 801217a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8012176:	4803      	ldr	r0, [pc, #12]	@ (8012184 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012178:	4770      	bx	lr
 801217a:	4a03      	ldr	r2, [pc, #12]	@ (8012188 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 801217c:	4801      	ldr	r0, [pc, #4]	@ (8012184 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801217e:	6812      	ldr	r2, [r2, #0]
 8012180:	601a      	str	r2, [r3, #0]
 8012182:	4770      	bx	lr
 8012184:	200002e0 	.word	0x200002e0
 8012188:	200002d0 	.word	0x200002d0

0801218c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801218c:	4a02      	ldr	r2, [pc, #8]	@ (8012198 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 801218e:	4b03      	ldr	r3, [pc, #12]	@ (801219c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8012190:	6812      	ldr	r2, [r2, #0]
 8012192:	601a      	str	r2, [r3, #0]
 8012194:	4770      	bx	lr
 8012196:	bf00      	nop
 8012198:	200002d0 	.word	0x200002d0
 801219c:	200002e0 	.word	0x200002e0

080121a0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 80121a0:	f006 bf22 	b.w	8018fe8 <std_msgs__msg__Int32__init>

080121a4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 80121a4:	f006 bf24 	b.w	8018ff0 <std_msgs__msg__Int32__fini>

080121a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80121a8:	4b04      	ldr	r3, [pc, #16]	@ (80121bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	b10a      	cbz	r2, 80121b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80121ae:	4803      	ldr	r0, [pc, #12]	@ (80121bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80121b0:	4770      	bx	lr
 80121b2:	4a03      	ldr	r2, [pc, #12]	@ (80121c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80121b4:	4801      	ldr	r0, [pc, #4]	@ (80121bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80121b6:	6812      	ldr	r2, [r2, #0]
 80121b8:	601a      	str	r2, [r3, #0]
 80121ba:	4770      	bx	lr
 80121bc:	20000328 	.word	0x20000328
 80121c0:	200002d4 	.word	0x200002d4

080121c4 <_Int32__max_serialized_size>:
 80121c4:	2104      	movs	r1, #4
 80121c6:	2000      	movs	r0, #0
 80121c8:	b508      	push	{r3, lr}
 80121ca:	f7fd fa09 	bl	800f5e0 <ucdr_alignment>
 80121ce:	3004      	adds	r0, #4
 80121d0:	bd08      	pop	{r3, pc}
 80121d2:	bf00      	nop

080121d4 <_Int32__cdr_deserialize>:
 80121d4:	b109      	cbz	r1, 80121da <_Int32__cdr_deserialize+0x6>
 80121d6:	f7fc bf85 	b.w	800f0e4 <ucdr_deserialize_int32_t>
 80121da:	4608      	mov	r0, r1
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop

080121e0 <get_serialized_size_std_msgs__msg__Int32>:
 80121e0:	b138      	cbz	r0, 80121f2 <get_serialized_size_std_msgs__msg__Int32+0x12>
 80121e2:	b508      	push	{r3, lr}
 80121e4:	460b      	mov	r3, r1
 80121e6:	2104      	movs	r1, #4
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7fd f9f9 	bl	800f5e0 <ucdr_alignment>
 80121ee:	3004      	adds	r0, #4
 80121f0:	bd08      	pop	{r3, pc}
 80121f2:	4770      	bx	lr

080121f4 <_Int32__cdr_serialize>:
 80121f4:	460a      	mov	r2, r1
 80121f6:	b118      	cbz	r0, 8012200 <_Int32__cdr_serialize+0xc>
 80121f8:	6801      	ldr	r1, [r0, #0]
 80121fa:	4610      	mov	r0, r2
 80121fc:	f7fc beda 	b.w	800efb4 <ucdr_serialize_int32_t>
 8012200:	4770      	bx	lr
 8012202:	bf00      	nop

08012204 <_Int32__get_serialized_size>:
 8012204:	b130      	cbz	r0, 8012214 <_Int32__get_serialized_size+0x10>
 8012206:	2104      	movs	r1, #4
 8012208:	2000      	movs	r0, #0
 801220a:	b508      	push	{r3, lr}
 801220c:	f7fd f9e8 	bl	800f5e0 <ucdr_alignment>
 8012210:	3004      	adds	r0, #4
 8012212:	bd08      	pop	{r3, pc}
 8012214:	4770      	bx	lr
 8012216:	bf00      	nop

08012218 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012218:	4800      	ldr	r0, [pc, #0]	@ (801221c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801221a:	4770      	bx	lr
 801221c:	20000334 	.word	0x20000334

08012220 <geometry_msgs__msg__Twist__init>:
 8012220:	b570      	push	{r4, r5, r6, lr}
 8012222:	4605      	mov	r5, r0
 8012224:	b1a8      	cbz	r0, 8012252 <geometry_msgs__msg__Twist__init+0x32>
 8012226:	f000 f82b 	bl	8012280 <geometry_msgs__msg__Vector3__init>
 801222a:	4604      	mov	r4, r0
 801222c:	b140      	cbz	r0, 8012240 <geometry_msgs__msg__Twist__init+0x20>
 801222e:	f105 0618 	add.w	r6, r5, #24
 8012232:	4630      	mov	r0, r6
 8012234:	f000 f824 	bl	8012280 <geometry_msgs__msg__Vector3__init>
 8012238:	4604      	mov	r4, r0
 801223a:	b168      	cbz	r0, 8012258 <geometry_msgs__msg__Twist__init+0x38>
 801223c:	4620      	mov	r0, r4
 801223e:	bd70      	pop	{r4, r5, r6, pc}
 8012240:	4628      	mov	r0, r5
 8012242:	f000 f821 	bl	8012288 <geometry_msgs__msg__Vector3__fini>
 8012246:	f105 0018 	add.w	r0, r5, #24
 801224a:	f000 f81d 	bl	8012288 <geometry_msgs__msg__Vector3__fini>
 801224e:	4620      	mov	r0, r4
 8012250:	bd70      	pop	{r4, r5, r6, pc}
 8012252:	4604      	mov	r4, r0
 8012254:	4620      	mov	r0, r4
 8012256:	bd70      	pop	{r4, r5, r6, pc}
 8012258:	4628      	mov	r0, r5
 801225a:	f000 f815 	bl	8012288 <geometry_msgs__msg__Vector3__fini>
 801225e:	4630      	mov	r0, r6
 8012260:	f000 f812 	bl	8012288 <geometry_msgs__msg__Vector3__fini>
 8012264:	e7ea      	b.n	801223c <geometry_msgs__msg__Twist__init+0x1c>
 8012266:	bf00      	nop

08012268 <geometry_msgs__msg__Twist__fini>:
 8012268:	b148      	cbz	r0, 801227e <geometry_msgs__msg__Twist__fini+0x16>
 801226a:	b510      	push	{r4, lr}
 801226c:	4604      	mov	r4, r0
 801226e:	f000 f80b 	bl	8012288 <geometry_msgs__msg__Vector3__fini>
 8012272:	f104 0018 	add.w	r0, r4, #24
 8012276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801227a:	f000 b805 	b.w	8012288 <geometry_msgs__msg__Vector3__fini>
 801227e:	4770      	bx	lr

08012280 <geometry_msgs__msg__Vector3__init>:
 8012280:	3800      	subs	r0, #0
 8012282:	bf18      	it	ne
 8012284:	2001      	movne	r0, #1
 8012286:	4770      	bx	lr

08012288 <geometry_msgs__msg__Vector3__fini>:
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop

0801228c <uxr_buffer_delete_entity>:
 801228c:	b510      	push	{r4, lr}
 801228e:	2300      	movs	r3, #0
 8012290:	b08e      	sub	sp, #56	@ 0x38
 8012292:	4604      	mov	r4, r0
 8012294:	9103      	str	r1, [sp, #12]
 8012296:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801229a:	2303      	movs	r3, #3
 801229c:	2204      	movs	r2, #4
 801229e:	9300      	str	r3, [sp, #0]
 80122a0:	ab06      	add	r3, sp, #24
 80122a2:	f001 fa81 	bl	80137a8 <uxr_prepare_stream_to_write_submessage>
 80122a6:	b918      	cbnz	r0, 80122b0 <uxr_buffer_delete_entity+0x24>
 80122a8:	4604      	mov	r4, r0
 80122aa:	4620      	mov	r0, r4
 80122ac:	b00e      	add	sp, #56	@ 0x38
 80122ae:	bd10      	pop	{r4, pc}
 80122b0:	9902      	ldr	r1, [sp, #8]
 80122b2:	aa05      	add	r2, sp, #20
 80122b4:	4620      	mov	r0, r4
 80122b6:	f001 fbb3 	bl	8013a20 <uxr_init_base_object_request>
 80122ba:	4604      	mov	r4, r0
 80122bc:	a905      	add	r1, sp, #20
 80122be:	a806      	add	r0, sp, #24
 80122c0:	f002 fe08 	bl	8014ed4 <uxr_serialize_DELETE_Payload>
 80122c4:	4620      	mov	r0, r4
 80122c6:	b00e      	add	sp, #56	@ 0x38
 80122c8:	bd10      	pop	{r4, pc}
 80122ca:	bf00      	nop

080122cc <uxr_common_create_entity>:
 80122cc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80122d0:	b510      	push	{r4, lr}
 80122d2:	f1bc 0f01 	cmp.w	ip, #1
 80122d6:	b08c      	sub	sp, #48	@ 0x30
 80122d8:	4604      	mov	r4, r0
 80122da:	9202      	str	r2, [sp, #8]
 80122dc:	bf0c      	ite	eq
 80122de:	f003 0201 	andeq.w	r2, r3, #1
 80122e2:	2200      	movne	r2, #0
 80122e4:	330e      	adds	r3, #14
 80122e6:	9103      	str	r1, [sp, #12]
 80122e8:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80122ec:	441a      	add	r2, r3
 80122ee:	ab04      	add	r3, sp, #16
 80122f0:	9101      	str	r1, [sp, #4]
 80122f2:	2101      	movs	r1, #1
 80122f4:	b292      	uxth	r2, r2
 80122f6:	9100      	str	r1, [sp, #0]
 80122f8:	9903      	ldr	r1, [sp, #12]
 80122fa:	f001 fa55 	bl	80137a8 <uxr_prepare_stream_to_write_submessage>
 80122fe:	b918      	cbnz	r0, 8012308 <uxr_common_create_entity+0x3c>
 8012300:	4604      	mov	r4, r0
 8012302:	4620      	mov	r0, r4
 8012304:	b00c      	add	sp, #48	@ 0x30
 8012306:	bd10      	pop	{r4, pc}
 8012308:	9902      	ldr	r1, [sp, #8]
 801230a:	4620      	mov	r0, r4
 801230c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801230e:	f001 fb87 	bl	8013a20 <uxr_init_base_object_request>
 8012312:	4604      	mov	r4, r0
 8012314:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012316:	a804      	add	r0, sp, #16
 8012318:	f002 fd36 	bl	8014d88 <uxr_serialize_CREATE_Payload>
 801231c:	4620      	mov	r0, r4
 801231e:	b00c      	add	sp, #48	@ 0x30
 8012320:	bd10      	pop	{r4, pc}
 8012322:	bf00      	nop

08012324 <uxr_buffer_create_participant_bin>:
 8012324:	b570      	push	{r4, r5, r6, lr}
 8012326:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801232a:	4605      	mov	r5, r0
 801232c:	ac11      	add	r4, sp, #68	@ 0x44
 801232e:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8012332:	2303      	movs	r3, #3
 8012334:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012338:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801233c:	7223      	strb	r3, [r4, #8]
 801233e:	2300      	movs	r3, #0
 8012340:	2201      	movs	r2, #1
 8012342:	f88d 3014 	strb.w	r3, [sp, #20]
 8012346:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8012348:	7122      	strb	r2, [r4, #4]
 801234a:	b1cb      	cbz	r3, 8012380 <uxr_buffer_create_participant_bin+0x5c>
 801234c:	f88d 201c 	strb.w	r2, [sp, #28]
 8012350:	9308      	str	r3, [sp, #32]
 8012352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012356:	a915      	add	r1, sp, #84	@ 0x54
 8012358:	a809      	add	r0, sp, #36	@ 0x24
 801235a:	f7fd f93d 	bl	800f5d8 <ucdr_init_buffer>
 801235e:	a905      	add	r1, sp, #20
 8012360:	a809      	add	r0, sp, #36	@ 0x24
 8012362:	f002 f8fb 	bl	801455c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012368:	9600      	str	r6, [sp, #0]
 801236a:	4628      	mov	r0, r5
 801236c:	9401      	str	r4, [sp, #4]
 801236e:	60e3      	str	r3, [r4, #12]
 8012370:	b29b      	uxth	r3, r3
 8012372:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012376:	f7ff ffa9 	bl	80122cc <uxr_common_create_entity>
 801237a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801237e:	bd70      	pop	{r4, r5, r6, pc}
 8012380:	f88d 301c 	strb.w	r3, [sp, #28]
 8012384:	e7e5      	b.n	8012352 <uxr_buffer_create_participant_bin+0x2e>
 8012386:	bf00      	nop

08012388 <uxr_buffer_create_topic_bin>:
 8012388:	b570      	push	{r4, r5, r6, lr}
 801238a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801238e:	4605      	mov	r5, r0
 8012390:	4618      	mov	r0, r3
 8012392:	9105      	str	r1, [sp, #20]
 8012394:	a997      	add	r1, sp, #604	@ 0x25c
 8012396:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801239a:	ac13      	add	r4, sp, #76	@ 0x4c
 801239c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80123a0:	2302      	movs	r3, #2
 80123a2:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80123a6:	f000 f995 	bl	80126d4 <uxr_object_id_to_raw>
 80123aa:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80123ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123b0:	a917      	add	r1, sp, #92	@ 0x5c
 80123b2:	a80b      	add	r0, sp, #44	@ 0x2c
 80123b4:	9306      	str	r3, [sp, #24]
 80123b6:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80123b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80123ba:	2303      	movs	r3, #3
 80123bc:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80123c0:	2301      	movs	r3, #1
 80123c2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80123c6:	2300      	movs	r3, #0
 80123c8:	f88d 301c 	strb.w	r3, [sp, #28]
 80123cc:	f7fd f904 	bl	800f5d8 <ucdr_init_buffer>
 80123d0:	a906      	add	r1, sp, #24
 80123d2:	a80b      	add	r0, sp, #44	@ 0x2c
 80123d4:	f002 f8e4 	bl	80145a0 <uxr_serialize_OBJK_Topic_Binary>
 80123d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123da:	4628      	mov	r0, r5
 80123dc:	9600      	str	r6, [sp, #0]
 80123de:	9316      	str	r3, [sp, #88]	@ 0x58
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	9401      	str	r4, [sp, #4]
 80123e4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80123e8:	f7ff ff70 	bl	80122cc <uxr_common_create_entity>
 80123ec:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80123f0:	bd70      	pop	{r4, r5, r6, pc}
 80123f2:	bf00      	nop

080123f4 <uxr_buffer_create_publisher_bin>:
 80123f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123f6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80123fa:	2603      	movs	r6, #3
 80123fc:	4605      	mov	r5, r0
 80123fe:	4618      	mov	r0, r3
 8012400:	9105      	str	r1, [sp, #20]
 8012402:	a992      	add	r1, sp, #584	@ 0x248
 8012404:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012408:	ac0e      	add	r4, sp, #56	@ 0x38
 801240a:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801240e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012412:	f000 f95f 	bl	80126d4 <uxr_object_id_to_raw>
 8012416:	2300      	movs	r3, #0
 8012418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801241c:	a912      	add	r1, sp, #72	@ 0x48
 801241e:	a806      	add	r0, sp, #24
 8012420:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012424:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012428:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801242c:	f7fd f8d4 	bl	800f5d8 <ucdr_init_buffer>
 8012430:	a993      	add	r1, sp, #588	@ 0x24c
 8012432:	a806      	add	r0, sp, #24
 8012434:	f002 f968 	bl	8014708 <uxr_serialize_OBJK_Publisher_Binary>
 8012438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801243a:	4628      	mov	r0, r5
 801243c:	9700      	str	r7, [sp, #0]
 801243e:	9311      	str	r3, [sp, #68]	@ 0x44
 8012440:	b29b      	uxth	r3, r3
 8012442:	9401      	str	r4, [sp, #4]
 8012444:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012448:	f7ff ff40 	bl	80122cc <uxr_common_create_entity>
 801244c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012452:	bf00      	nop

08012454 <uxr_buffer_create_subscriber_bin>:
 8012454:	b570      	push	{r4, r5, r6, lr}
 8012456:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801245a:	4605      	mov	r5, r0
 801245c:	4618      	mov	r0, r3
 801245e:	9105      	str	r1, [sp, #20]
 8012460:	a992      	add	r1, sp, #584	@ 0x248
 8012462:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8012466:	ac0e      	add	r4, sp, #56	@ 0x38
 8012468:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801246c:	2304      	movs	r3, #4
 801246e:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8012472:	f000 f92f 	bl	80126d4 <uxr_object_id_to_raw>
 8012476:	2300      	movs	r3, #0
 8012478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801247c:	a912      	add	r1, sp, #72	@ 0x48
 801247e:	a806      	add	r0, sp, #24
 8012480:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012484:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012488:	2303      	movs	r3, #3
 801248a:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801248e:	f7fd f8a3 	bl	800f5d8 <ucdr_init_buffer>
 8012492:	a993      	add	r1, sp, #588	@ 0x24c
 8012494:	a806      	add	r0, sp, #24
 8012496:	f002 f9e7 	bl	8014868 <uxr_serialize_OBJK_Subscriber_Binary>
 801249a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801249c:	4628      	mov	r0, r5
 801249e:	9600      	str	r6, [sp, #0]
 80124a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	9401      	str	r4, [sp, #4]
 80124a6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80124aa:	f7ff ff0f 	bl	80122cc <uxr_common_create_entity>
 80124ae:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80124b2:	bd70      	pop	{r4, r5, r6, pc}

080124b4 <uxr_buffer_create_datawriter_bin>:
 80124b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124b8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80124bc:	4606      	mov	r6, r0
 80124be:	4618      	mov	r0, r3
 80124c0:	2703      	movs	r7, #3
 80124c2:	ac1d      	add	r4, sp, #116	@ 0x74
 80124c4:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80124c8:	9105      	str	r1, [sp, #20]
 80124ca:	a9a1      	add	r1, sp, #644	@ 0x284
 80124cc:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80124d0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80124d4:	2305      	movs	r3, #5
 80124d6:	7123      	strb	r3, [r4, #4]
 80124d8:	f000 f8fc 	bl	80126d4 <uxr_object_id_to_raw>
 80124dc:	a90e      	add	r1, sp, #56	@ 0x38
 80124de:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80124e0:	7227      	strb	r7, [r4, #8]
 80124e2:	f000 f8f7 	bl	80126d4 <uxr_object_id_to_raw>
 80124e6:	2300      	movs	r3, #0
 80124e8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80124ec:	3d00      	subs	r5, #0
 80124ee:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80124f2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80124f6:	bf18      	it	ne
 80124f8:	2501      	movne	r5, #1
 80124fa:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80124fe:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012502:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012506:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801250a:	2301      	movs	r3, #1
 801250c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012510:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012514:	bb8a      	cbnz	r2, 801257a <uxr_buffer_create_datawriter_bin+0xc6>
 8012516:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801251a:	f04f 0c13 	mov.w	ip, #19
 801251e:	250b      	movs	r5, #11
 8012520:	2221      	movs	r2, #33	@ 0x21
 8012522:	2111      	movs	r1, #17
 8012524:	2009      	movs	r0, #9
 8012526:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801252a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801252e:	b923      	cbnz	r3, 801253a <uxr_buffer_create_datawriter_bin+0x86>
 8012530:	4672      	mov	r2, lr
 8012532:	4661      	mov	r1, ip
 8012534:	4628      	mov	r0, r5
 8012536:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801253a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801253e:	2b01      	cmp	r3, #1
 8012540:	d025      	beq.n	801258e <uxr_buffer_create_datawriter_bin+0xda>
 8012542:	2b03      	cmp	r3, #3
 8012544:	d029      	beq.n	801259a <uxr_buffer_create_datawriter_bin+0xe6>
 8012546:	b32b      	cbz	r3, 8012594 <uxr_buffer_create_datawriter_bin+0xe0>
 8012548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801254c:	a921      	add	r1, sp, #132	@ 0x84
 801254e:	a806      	add	r0, sp, #24
 8012550:	f7fd f842 	bl	800f5d8 <ucdr_init_buffer>
 8012554:	a90e      	add	r1, sp, #56	@ 0x38
 8012556:	a806      	add	r0, sp, #24
 8012558:	f002 fa38 	bl	80149cc <uxr_serialize_OBJK_DataWriter_Binary>
 801255c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801255e:	f8cd 8000 	str.w	r8, [sp]
 8012562:	4630      	mov	r0, r6
 8012564:	9401      	str	r4, [sp, #4]
 8012566:	60e3      	str	r3, [r4, #12]
 8012568:	b29b      	uxth	r3, r3
 801256a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801256e:	f7ff fead 	bl	80122cc <uxr_common_create_entity>
 8012572:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801257a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801257e:	f04f 0c12 	mov.w	ip, #18
 8012582:	250a      	movs	r5, #10
 8012584:	2220      	movs	r2, #32
 8012586:	2110      	movs	r1, #16
 8012588:	2008      	movs	r0, #8
 801258a:	2702      	movs	r7, #2
 801258c:	e7cd      	b.n	801252a <uxr_buffer_create_datawriter_bin+0x76>
 801258e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012592:	e7d9      	b.n	8012548 <uxr_buffer_create_datawriter_bin+0x94>
 8012594:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8012598:	e7d6      	b.n	8012548 <uxr_buffer_create_datawriter_bin+0x94>
 801259a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801259e:	e7d3      	b.n	8012548 <uxr_buffer_create_datawriter_bin+0x94>

080125a0 <uxr_buffer_create_datareader_bin>:
 80125a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125a4:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80125a8:	4606      	mov	r6, r0
 80125aa:	4618      	mov	r0, r3
 80125ac:	2703      	movs	r7, #3
 80125ae:	ac1f      	add	r4, sp, #124	@ 0x7c
 80125b0:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80125b4:	9105      	str	r1, [sp, #20]
 80125b6:	a9a3      	add	r1, sp, #652	@ 0x28c
 80125b8:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80125bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80125c0:	2306      	movs	r3, #6
 80125c2:	7123      	strb	r3, [r4, #4]
 80125c4:	f000 f886 	bl	80126d4 <uxr_object_id_to_raw>
 80125c8:	a90e      	add	r1, sp, #56	@ 0x38
 80125ca:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80125cc:	7227      	strb	r7, [r4, #8]
 80125ce:	f000 f881 	bl	80126d4 <uxr_object_id_to_raw>
 80125d2:	2300      	movs	r3, #0
 80125d4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80125d8:	3d00      	subs	r5, #0
 80125da:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80125de:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80125e2:	bf18      	it	ne
 80125e4:	2501      	movne	r5, #1
 80125e6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80125ea:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80125ee:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80125f2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80125f6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80125fa:	2301      	movs	r3, #1
 80125fc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012600:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012604:	bb8a      	cbnz	r2, 801266a <uxr_buffer_create_datareader_bin+0xca>
 8012606:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801260a:	f04f 0c13 	mov.w	ip, #19
 801260e:	250b      	movs	r5, #11
 8012610:	2221      	movs	r2, #33	@ 0x21
 8012612:	2111      	movs	r1, #17
 8012614:	2009      	movs	r0, #9
 8012616:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801261a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801261e:	b923      	cbnz	r3, 801262a <uxr_buffer_create_datareader_bin+0x8a>
 8012620:	4672      	mov	r2, lr
 8012622:	4661      	mov	r1, ip
 8012624:	4628      	mov	r0, r5
 8012626:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801262a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801262e:	2b01      	cmp	r3, #1
 8012630:	d025      	beq.n	801267e <uxr_buffer_create_datareader_bin+0xde>
 8012632:	2b03      	cmp	r3, #3
 8012634:	d029      	beq.n	801268a <uxr_buffer_create_datareader_bin+0xea>
 8012636:	b32b      	cbz	r3, 8012684 <uxr_buffer_create_datareader_bin+0xe4>
 8012638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801263c:	a923      	add	r1, sp, #140	@ 0x8c
 801263e:	a806      	add	r0, sp, #24
 8012640:	f7fc ffca 	bl	800f5d8 <ucdr_init_buffer>
 8012644:	a90e      	add	r1, sp, #56	@ 0x38
 8012646:	a806      	add	r0, sp, #24
 8012648:	f002 f984 	bl	8014954 <uxr_serialize_OBJK_DataReader_Binary>
 801264c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801264e:	f8cd 8000 	str.w	r8, [sp]
 8012652:	4630      	mov	r0, r6
 8012654:	9401      	str	r4, [sp, #4]
 8012656:	60e3      	str	r3, [r4, #12]
 8012658:	b29b      	uxth	r3, r3
 801265a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801265e:	f7ff fe35 	bl	80122cc <uxr_common_create_entity>
 8012662:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801266a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801266e:	f04f 0c12 	mov.w	ip, #18
 8012672:	250a      	movs	r5, #10
 8012674:	2220      	movs	r2, #32
 8012676:	2110      	movs	r1, #16
 8012678:	2008      	movs	r0, #8
 801267a:	2702      	movs	r7, #2
 801267c:	e7cd      	b.n	801261a <uxr_buffer_create_datareader_bin+0x7a>
 801267e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012682:	e7d9      	b.n	8012638 <uxr_buffer_create_datareader_bin+0x98>
 8012684:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8012688:	e7d6      	b.n	8012638 <uxr_buffer_create_datareader_bin+0x98>
 801268a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801268e:	e7d3      	b.n	8012638 <uxr_buffer_create_datareader_bin+0x98>

08012690 <uxr_object_id>:
 8012690:	b082      	sub	sp, #8
 8012692:	2300      	movs	r3, #0
 8012694:	f88d 1006 	strb.w	r1, [sp, #6]
 8012698:	f360 030f 	bfi	r3, r0, #0, #16
 801269c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80126a0:	f362 431f 	bfi	r3, r2, #16, #16
 80126a4:	4618      	mov	r0, r3
 80126a6:	b002      	add	sp, #8
 80126a8:	4770      	bx	lr
 80126aa:	bf00      	nop

080126ac <uxr_object_id_from_raw>:
 80126ac:	7843      	ldrb	r3, [r0, #1]
 80126ae:	b082      	sub	sp, #8
 80126b0:	7801      	ldrb	r1, [r0, #0]
 80126b2:	2000      	movs	r0, #0
 80126b4:	091a      	lsrs	r2, r3, #4
 80126b6:	f003 030f 	and.w	r3, r3, #15
 80126ba:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80126be:	f88d 3006 	strb.w	r3, [sp, #6]
 80126c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80126c6:	f362 000f 	bfi	r0, r2, #0, #16
 80126ca:	f363 401f 	bfi	r0, r3, #16, #16
 80126ce:	b002      	add	sp, #8
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop

080126d4 <uxr_object_id_to_raw>:
 80126d4:	4602      	mov	r2, r0
 80126d6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80126da:	b082      	sub	sp, #8
 80126dc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80126e0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80126e4:	f881 c000 	strb.w	ip, [r1]
 80126e8:	7048      	strb	r0, [r1, #1]
 80126ea:	b002      	add	sp, #8
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop

080126f0 <uxr_buffer_request_data>:
 80126f0:	b530      	push	{r4, r5, lr}
 80126f2:	b095      	sub	sp, #84	@ 0x54
 80126f4:	4604      	mov	r4, r0
 80126f6:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80126f8:	9303      	str	r3, [sp, #12]
 80126fa:	2d00      	cmp	r5, #0
 80126fc:	f88d 301c 	strb.w	r3, [sp, #28]
 8012700:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012704:	f04f 0200 	mov.w	r2, #0
 8012708:	bf14      	ite	ne
 801270a:	2101      	movne	r1, #1
 801270c:	4611      	moveq	r1, r2
 801270e:	f88d 201d 	strb.w	r2, [sp, #29]
 8012712:	f88d 201e 	strb.w	r2, [sp, #30]
 8012716:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801271a:	d021      	beq.n	8012760 <uxr_buffer_request_data+0x70>
 801271c:	686b      	ldr	r3, [r5, #4]
 801271e:	2210      	movs	r2, #16
 8012720:	6829      	ldr	r1, [r5, #0]
 8012722:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012726:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 801272a:	2308      	movs	r3, #8
 801272c:	2100      	movs	r1, #0
 801272e:	4620      	mov	r0, r4
 8012730:	e9cd 3100 	strd	r3, r1, [sp]
 8012734:	ab0c      	add	r3, sp, #48	@ 0x30
 8012736:	9905      	ldr	r1, [sp, #20]
 8012738:	f001 f836 	bl	80137a8 <uxr_prepare_stream_to_write_submessage>
 801273c:	b918      	cbnz	r0, 8012746 <uxr_buffer_request_data+0x56>
 801273e:	4604      	mov	r4, r0
 8012740:	4620      	mov	r0, r4
 8012742:	b015      	add	sp, #84	@ 0x54
 8012744:	bd30      	pop	{r4, r5, pc}
 8012746:	9904      	ldr	r1, [sp, #16]
 8012748:	aa06      	add	r2, sp, #24
 801274a:	4620      	mov	r0, r4
 801274c:	f001 f968 	bl	8013a20 <uxr_init_base_object_request>
 8012750:	4604      	mov	r4, r0
 8012752:	a906      	add	r1, sp, #24
 8012754:	a80c      	add	r0, sp, #48	@ 0x30
 8012756:	f002 fc67 	bl	8015028 <uxr_serialize_READ_DATA_Payload>
 801275a:	4620      	mov	r0, r4
 801275c:	b015      	add	sp, #84	@ 0x54
 801275e:	bd30      	pop	{r4, r5, pc}
 8012760:	2208      	movs	r2, #8
 8012762:	e7e2      	b.n	801272a <uxr_buffer_request_data+0x3a>

08012764 <uxr_buffer_cancel_data>:
 8012764:	b510      	push	{r4, lr}
 8012766:	2300      	movs	r3, #0
 8012768:	b094      	sub	sp, #80	@ 0x50
 801276a:	4604      	mov	r4, r0
 801276c:	9205      	str	r2, [sp, #20]
 801276e:	9301      	str	r3, [sp, #4]
 8012770:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012774:	f88d 301e 	strb.w	r3, [sp, #30]
 8012778:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801277c:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8012780:	2308      	movs	r3, #8
 8012782:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012786:	2201      	movs	r2, #1
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	ab0c      	add	r3, sp, #48	@ 0x30
 801278c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8012790:	2210      	movs	r2, #16
 8012792:	f001 f809 	bl	80137a8 <uxr_prepare_stream_to_write_submessage>
 8012796:	b918      	cbnz	r0, 80127a0 <uxr_buffer_cancel_data+0x3c>
 8012798:	4604      	mov	r4, r0
 801279a:	4620      	mov	r0, r4
 801279c:	b014      	add	sp, #80	@ 0x50
 801279e:	bd10      	pop	{r4, pc}
 80127a0:	9905      	ldr	r1, [sp, #20]
 80127a2:	aa06      	add	r2, sp, #24
 80127a4:	4620      	mov	r0, r4
 80127a6:	f001 f93b 	bl	8013a20 <uxr_init_base_object_request>
 80127aa:	4604      	mov	r4, r0
 80127ac:	a906      	add	r1, sp, #24
 80127ae:	a80c      	add	r0, sp, #48	@ 0x30
 80127b0:	f002 fc3a 	bl	8015028 <uxr_serialize_READ_DATA_Payload>
 80127b4:	4620      	mov	r0, r4
 80127b6:	b014      	add	sp, #80	@ 0x50
 80127b8:	bd10      	pop	{r4, pc}
 80127ba:	bf00      	nop

080127bc <read_submessage_format>:
 80127bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127c0:	b095      	sub	sp, #84	@ 0x54
 80127c2:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80127c6:	b113      	cbz	r3, 80127ce <read_submessage_format+0x12>
 80127c8:	b015      	add	sp, #84	@ 0x54
 80127ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127ce:	4606      	mov	r6, r0
 80127d0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80127d2:	460c      	mov	r4, r1
 80127d4:	4615      	mov	r5, r2
 80127d6:	9004      	str	r0, [sp, #16]
 80127d8:	4699      	mov	r9, r3
 80127da:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80127dc:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80127e0:	9005      	str	r0, [sp, #20]
 80127e2:	a80c      	add	r0, sp, #48	@ 0x30
 80127e4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80127e8:	1a52      	subs	r2, r2, r1
 80127ea:	f7fc fef5 	bl	800f5d8 <ucdr_init_buffer>
 80127ee:	a80c      	add	r0, sp, #48	@ 0x30
 80127f0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80127f4:	f7fc fec4 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 80127f8:	69e2      	ldr	r2, [r4, #28]
 80127fa:	b19a      	cbz	r2, 8012824 <read_submessage_format+0x68>
 80127fc:	f1b8 0f07 	cmp.w	r8, #7
 8012800:	f882 9014 	strb.w	r9, [r2, #20]
 8012804:	d040      	beq.n	8012888 <read_submessage_format+0xcc>
 8012806:	f1b8 0f08 	cmp.w	r8, #8
 801280a:	d02e      	beq.n	801286a <read_submessage_format+0xae>
 801280c:	f1b8 0f06 	cmp.w	r8, #6
 8012810:	d011      	beq.n	8012836 <read_submessage_format+0x7a>
 8012812:	2301      	movs	r3, #1
 8012814:	7513      	strb	r3, [r2, #20]
 8012816:	4629      	mov	r1, r5
 8012818:	4620      	mov	r0, r4
 801281a:	f7fc ff31 	bl	800f680 <ucdr_advance_buffer>
 801281e:	b015      	add	sp, #84	@ 0x54
 8012820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012824:	f1b8 0f07 	cmp.w	r8, #7
 8012828:	d02e      	beq.n	8012888 <read_submessage_format+0xcc>
 801282a:	f1b8 0f08 	cmp.w	r8, #8
 801282e:	d01c      	beq.n	801286a <read_submessage_format+0xae>
 8012830:	f1b8 0f06 	cmp.w	r8, #6
 8012834:	d1ef      	bne.n	8012816 <read_submessage_format+0x5a>
 8012836:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 801283a:	f1b8 0f00 	cmp.w	r8, #0
 801283e:	d011      	beq.n	8012864 <read_submessage_format+0xa8>
 8012840:	ab0c      	add	r3, sp, #48	@ 0x30
 8012842:	9501      	str	r5, [sp, #4]
 8012844:	463a      	mov	r2, r7
 8012846:	4630      	mov	r0, r6
 8012848:	9300      	str	r3, [sp, #0]
 801284a:	2306      	movs	r3, #6
 801284c:	f88d 3016 	strb.w	r3, [sp, #22]
 8012850:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8012854:	9302      	str	r3, [sp, #8]
 8012856:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801285a:	47c0      	blx	r8
 801285c:	2301      	movs	r3, #1
 801285e:	69e2      	ldr	r2, [r4, #28]
 8012860:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8012864:	2a00      	cmp	r2, #0
 8012866:	d1d4      	bne.n	8012812 <read_submessage_format+0x56>
 8012868:	e7d5      	b.n	8012816 <read_submessage_format+0x5a>
 801286a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 801286e:	2b00      	cmp	r3, #0
 8012870:	d0f8      	beq.n	8012864 <read_submessage_format+0xa8>
 8012872:	a80c      	add	r0, sp, #48	@ 0x30
 8012874:	a906      	add	r1, sp, #24
 8012876:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801287a:	f002 fca1 	bl	80151c0 <uxr_deserialize_SampleIdentity>
 801287e:	b9a0      	cbnz	r0, 80128aa <read_submessage_format+0xee>
 8012880:	69e2      	ldr	r2, [r4, #28]
 8012882:	2a00      	cmp	r2, #0
 8012884:	d1c5      	bne.n	8012812 <read_submessage_format+0x56>
 8012886:	e7c6      	b.n	8012816 <read_submessage_format+0x5a>
 8012888:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 801288c:	b13b      	cbz	r3, 801289e <read_submessage_format+0xe2>
 801288e:	a906      	add	r1, sp, #24
 8012890:	a80c      	add	r0, sp, #48	@ 0x30
 8012892:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012896:	f002 f967 	bl	8014b68 <uxr_deserialize_BaseObjectRequest>
 801289a:	bb60      	cbnz	r0, 80128f6 <read_submessage_format+0x13a>
 801289c:	69e2      	ldr	r2, [r4, #28]
 801289e:	68a3      	ldr	r3, [r4, #8]
 80128a0:	442b      	add	r3, r5
 80128a2:	60a3      	str	r3, [r4, #8]
 80128a4:	2a00      	cmp	r2, #0
 80128a6:	d1b4      	bne.n	8012812 <read_submessage_format+0x56>
 80128a8:	e7b5      	b.n	8012816 <read_submessage_format+0x5a>
 80128aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80128ac:	a80c      	add	r0, sp, #48	@ 0x30
 80128ae:	eba8 0803 	sub.w	r8, r8, r3
 80128b2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80128b6:	44a8      	add	r8, r5
 80128b8:	1a52      	subs	r2, r2, r1
 80128ba:	f7fc fe8d 	bl	800f5d8 <ucdr_init_buffer>
 80128be:	a80c      	add	r0, sp, #48	@ 0x30
 80128c0:	fa1f f888 	uxth.w	r8, r8
 80128c4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80128c8:	f7fc fe5a 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 80128cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80128ce:	2108      	movs	r1, #8
 80128d0:	f8cd 8004 	str.w	r8, [sp, #4]
 80128d4:	9300      	str	r3, [sp, #0]
 80128d6:	463a      	mov	r2, r7
 80128d8:	f88d 1016 	strb.w	r1, [sp, #22]
 80128dc:	ab06      	add	r3, sp, #24
 80128de:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 80128e2:	4630      	mov	r0, r6
 80128e4:	9102      	str	r1, [sp, #8]
 80128e6:	9905      	ldr	r1, [sp, #20]
 80128e8:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 80128ec:	47b8      	blx	r7
 80128ee:	2301      	movs	r3, #1
 80128f0:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80128f4:	e7c4      	b.n	8012880 <read_submessage_format+0xc4>
 80128f6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80128fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80128fc:	a80c      	add	r0, sp, #48	@ 0x30
 80128fe:	1a52      	subs	r2, r2, r1
 8012900:	eba8 0803 	sub.w	r8, r8, r3
 8012904:	f7fc fe68 	bl	800f5d8 <ucdr_init_buffer>
 8012908:	a80c      	add	r0, sp, #48	@ 0x30
 801290a:	44a8      	add	r8, r5
 801290c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012910:	f7fc fe36 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 8012914:	ab0c      	add	r3, sp, #48	@ 0x30
 8012916:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801291a:	fa1f f888 	uxth.w	r8, r8
 801291e:	9300      	str	r3, [sp, #0]
 8012920:	463a      	mov	r2, r7
 8012922:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012926:	4630      	mov	r0, r6
 8012928:	f8cd 8004 	str.w	r8, [sp, #4]
 801292c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012930:	2107      	movs	r1, #7
 8012932:	f88d 1016 	strb.w	r1, [sp, #22]
 8012936:	b29b      	uxth	r3, r3
 8012938:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 801293c:	9102      	str	r1, [sp, #8]
 801293e:	9905      	ldr	r1, [sp, #20]
 8012940:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8012944:	47b8      	blx	r7
 8012946:	2301      	movs	r3, #1
 8012948:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 801294c:	e7a6      	b.n	801289c <read_submessage_format+0xe0>
 801294e:	bf00      	nop

08012950 <on_get_fragmentation_info>:
 8012950:	b500      	push	{lr}
 8012952:	b08b      	sub	sp, #44	@ 0x2c
 8012954:	4601      	mov	r1, r0
 8012956:	2204      	movs	r2, #4
 8012958:	a802      	add	r0, sp, #8
 801295a:	f7fc fe3d 	bl	800f5d8 <ucdr_init_buffer>
 801295e:	f10d 0305 	add.w	r3, sp, #5
 8012962:	f10d 0206 	add.w	r2, sp, #6
 8012966:	a901      	add	r1, sp, #4
 8012968:	a802      	add	r0, sp, #8
 801296a:	f001 f9e3 	bl	8013d34 <uxr_read_submessage_header>
 801296e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012972:	2b0d      	cmp	r3, #13
 8012974:	d003      	beq.n	801297e <on_get_fragmentation_info+0x2e>
 8012976:	2000      	movs	r0, #0
 8012978:	b00b      	add	sp, #44	@ 0x2c
 801297a:	f85d fb04 	ldr.w	pc, [sp], #4
 801297e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012982:	f013 0f02 	tst.w	r3, #2
 8012986:	bf14      	ite	ne
 8012988:	2002      	movne	r0, #2
 801298a:	2001      	moveq	r0, #1
 801298c:	b00b      	add	sp, #44	@ 0x2c
 801298e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012992:	bf00      	nop

08012994 <read_submessage_get_info>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	2500      	movs	r5, #0
 8012998:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801299c:	460e      	mov	r6, r1
 801299e:	4604      	mov	r4, r0
 80129a0:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80129a4:	4629      	mov	r1, r5
 80129a6:	a810      	add	r0, sp, #64	@ 0x40
 80129a8:	9503      	str	r5, [sp, #12]
 80129aa:	9504      	str	r5, [sp, #16]
 80129ac:	f008 fec2 	bl	801b734 <memset>
 80129b0:	a903      	add	r1, sp, #12
 80129b2:	4630      	mov	r0, r6
 80129b4:	f002 fa78 	bl	8014ea8 <uxr_deserialize_GET_INFO_Payload>
 80129b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80129bc:	4620      	mov	r0, r4
 80129be:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80129c2:	f001 f825 	bl	8013a10 <uxr_session_header_offset>
 80129c6:	462b      	mov	r3, r5
 80129c8:	220c      	movs	r2, #12
 80129ca:	a905      	add	r1, sp, #20
 80129cc:	9000      	str	r0, [sp, #0]
 80129ce:	a808      	add	r0, sp, #32
 80129d0:	f7fc fdf0 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 80129d4:	a910      	add	r1, sp, #64	@ 0x40
 80129d6:	a808      	add	r0, sp, #32
 80129d8:	f002 fada 	bl	8014f90 <uxr_serialize_INFO_Payload>
 80129dc:	9b08      	ldr	r3, [sp, #32]
 80129de:	462a      	mov	r2, r5
 80129e0:	4629      	mov	r1, r5
 80129e2:	4620      	mov	r0, r4
 80129e4:	f000 ffc0 	bl	8013968 <uxr_stamp_session_header>
 80129e8:	a808      	add	r0, sp, #32
 80129ea:	f7fc fe23 	bl	800f634 <ucdr_buffer_length>
 80129ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80129f0:	4602      	mov	r2, r0
 80129f2:	a905      	add	r1, sp, #20
 80129f4:	e9d3 0400 	ldrd	r0, r4, [r3]
 80129f8:	47a0      	blx	r4
 80129fa:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80129fe:	bd70      	pop	{r4, r5, r6, pc}

08012a00 <write_submessage_acknack.isra.0>:
 8012a00:	b570      	push	{r4, r5, r6, lr}
 8012a02:	b092      	sub	sp, #72	@ 0x48
 8012a04:	4605      	mov	r5, r0
 8012a06:	460e      	mov	r6, r1
 8012a08:	4614      	mov	r4, r2
 8012a0a:	f001 f801 	bl	8013a10 <uxr_session_header_offset>
 8012a0e:	a905      	add	r1, sp, #20
 8012a10:	9000      	str	r0, [sp, #0]
 8012a12:	2300      	movs	r3, #0
 8012a14:	a80a      	add	r0, sp, #40	@ 0x28
 8012a16:	2211      	movs	r2, #17
 8012a18:	f7fc fdcc 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 8012a1c:	2218      	movs	r2, #24
 8012a1e:	2300      	movs	r3, #0
 8012a20:	210a      	movs	r1, #10
 8012a22:	fb02 5404 	mla	r4, r2, r4, r5
 8012a26:	a80a      	add	r0, sp, #40	@ 0x28
 8012a28:	2205      	movs	r2, #5
 8012a2a:	3450      	adds	r4, #80	@ 0x50
 8012a2c:	f001 f968 	bl	8013d00 <uxr_buffer_submessage_header>
 8012a30:	a903      	add	r1, sp, #12
 8012a32:	4620      	mov	r0, r4
 8012a34:	f006 fed8 	bl	80197e8 <uxr_compute_acknack>
 8012a38:	ba40      	rev16	r0, r0
 8012a3a:	a903      	add	r1, sp, #12
 8012a3c:	f88d 6010 	strb.w	r6, [sp, #16]
 8012a40:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012a44:	a80a      	add	r0, sp, #40	@ 0x28
 8012a46:	f002 fb15 	bl	8015074 <uxr_serialize_ACKNACK_Payload>
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a4e:	4628      	mov	r0, r5
 8012a50:	4611      	mov	r1, r2
 8012a52:	f000 ff89 	bl	8013968 <uxr_stamp_session_header>
 8012a56:	a80a      	add	r0, sp, #40	@ 0x28
 8012a58:	f7fc fdec 	bl	800f634 <ucdr_buffer_length>
 8012a5c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8012a5e:	4602      	mov	r2, r0
 8012a60:	a905      	add	r1, sp, #20
 8012a62:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012a66:	47a0      	blx	r4
 8012a68:	b012      	add	sp, #72	@ 0x48
 8012a6a:	bd70      	pop	{r4, r5, r6, pc}
 8012a6c:	0000      	movs	r0, r0
	...

08012a70 <uxr_init_session>:
 8012a70:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012aa8 <uxr_init_session+0x38>
 8012a74:	2300      	movs	r3, #0
 8012a76:	b510      	push	{r4, lr}
 8012a78:	4604      	mov	r4, r0
 8012a7a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8012a7e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8012a82:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8012a86:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8012a8a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8012a8e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8012a92:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8012a96:	2181      	movs	r1, #129	@ 0x81
 8012a98:	f000 feca 	bl	8013830 <uxr_init_session_info>
 8012a9c:	f104 0008 	add.w	r0, r4, #8
 8012aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012aa4:	f001 b848 	b.w	8013b38 <uxr_init_stream_storage>
	...

08012ab0 <uxr_set_status_callback>:
 8012ab0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8012ab4:	4770      	bx	lr
 8012ab6:	bf00      	nop

08012ab8 <uxr_set_topic_callback>:
 8012ab8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8012abc:	4770      	bx	lr
 8012abe:	bf00      	nop

08012ac0 <uxr_set_request_callback>:
 8012ac0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8012ac4:	4770      	bx	lr
 8012ac6:	bf00      	nop

08012ac8 <uxr_set_reply_callback>:
 8012ac8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8012acc:	4770      	bx	lr
 8012ace:	bf00      	nop

08012ad0 <uxr_create_output_best_effort_stream>:
 8012ad0:	b510      	push	{r4, lr}
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	b084      	sub	sp, #16
 8012ad6:	e9cd 2100 	strd	r2, r1, [sp]
 8012ada:	f000 ff99 	bl	8013a10 <uxr_session_header_offset>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	f104 0008 	add.w	r0, r4, #8
 8012ae4:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012ae8:	b004      	add	sp, #16
 8012aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012aee:	f001 b869 	b.w	8013bc4 <uxr_add_output_best_effort_buffer>
 8012af2:	bf00      	nop

08012af4 <uxr_create_output_reliable_stream>:
 8012af4:	b530      	push	{r4, r5, lr}
 8012af6:	b089      	sub	sp, #36	@ 0x24
 8012af8:	4604      	mov	r4, r0
 8012afa:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012afe:	9303      	str	r3, [sp, #12]
 8012b00:	f000 ff86 	bl	8013a10 <uxr_session_header_offset>
 8012b04:	4605      	mov	r5, r0
 8012b06:	9905      	ldr	r1, [sp, #20]
 8012b08:	f104 0008 	add.w	r0, r4, #8
 8012b0c:	9500      	str	r5, [sp, #0]
 8012b0e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012b12:	f001 f86b 	bl	8013bec <uxr_add_output_reliable_buffer>
 8012b16:	2200      	movs	r2, #0
 8012b18:	fa5f fc80 	uxtb.w	ip, r0
 8012b1c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8012b20:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012b24:	0e03      	lsrs	r3, r0, #24
 8012b26:	f36c 0207 	bfi	r2, ip, #0, #8
 8012b2a:	f364 220f 	bfi	r2, r4, #8, #8
 8012b2e:	f361 4217 	bfi	r2, r1, #16, #8
 8012b32:	f363 621f 	bfi	r2, r3, #24, #8
 8012b36:	4610      	mov	r0, r2
 8012b38:	b009      	add	sp, #36	@ 0x24
 8012b3a:	bd30      	pop	{r4, r5, pc}

08012b3c <uxr_create_input_best_effort_stream>:
 8012b3c:	b082      	sub	sp, #8
 8012b3e:	3008      	adds	r0, #8
 8012b40:	b002      	add	sp, #8
 8012b42:	f001 b86d 	b.w	8013c20 <uxr_add_input_best_effort_buffer>
 8012b46:	bf00      	nop

08012b48 <uxr_create_input_reliable_stream>:
 8012b48:	b510      	push	{r4, lr}
 8012b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8012b7c <uxr_create_input_reliable_stream+0x34>)
 8012b4c:	b084      	sub	sp, #16
 8012b4e:	3008      	adds	r0, #8
 8012b50:	9400      	str	r4, [sp, #0]
 8012b52:	f001 f87b 	bl	8013c4c <uxr_add_input_reliable_buffer>
 8012b56:	2200      	movs	r2, #0
 8012b58:	fa5f fe80 	uxtb.w	lr, r0
 8012b5c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8012b60:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012b64:	0e03      	lsrs	r3, r0, #24
 8012b66:	f36e 0207 	bfi	r2, lr, #0, #8
 8012b6a:	f36c 220f 	bfi	r2, ip, #8, #8
 8012b6e:	f361 4217 	bfi	r2, r1, #16, #8
 8012b72:	f363 621f 	bfi	r2, r3, #24, #8
 8012b76:	4610      	mov	r0, r2
 8012b78:	b004      	add	sp, #16
 8012b7a:	bd10      	pop	{r4, pc}
 8012b7c:	08012951 	.word	0x08012951

08012b80 <uxr_epoch_nanos>:
 8012b80:	b510      	push	{r4, lr}
 8012b82:	4604      	mov	r4, r0
 8012b84:	f001 f91e 	bl	8013dc4 <uxr_nanos>
 8012b88:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012b8c:	1ac0      	subs	r0, r0, r3
 8012b8e:	eb61 0102 	sbc.w	r1, r1, r2
 8012b92:	bd10      	pop	{r4, pc}

08012b94 <uxr_flash_output_streams>:
 8012b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b98:	7e03      	ldrb	r3, [r0, #24]
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	b1fb      	cbz	r3, 8012be0 <uxr_flash_output_streams+0x4c>
 8012ba0:	f04f 0900 	mov.w	r9, #0
 8012ba4:	f10d 0802 	add.w	r8, sp, #2
 8012ba8:	af03      	add	r7, sp, #12
 8012baa:	ae02      	add	r6, sp, #8
 8012bac:	4648      	mov	r0, r9
 8012bae:	2201      	movs	r2, #1
 8012bb0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	3508      	adds	r5, #8
 8012bb8:	f000 ff64 	bl	8013a84 <uxr_stream_id>
 8012bbc:	4684      	mov	ip, r0
 8012bbe:	4643      	mov	r3, r8
 8012bc0:	463a      	mov	r2, r7
 8012bc2:	4631      	mov	r1, r6
 8012bc4:	4628      	mov	r0, r5
 8012bc6:	f8cd c004 	str.w	ip, [sp, #4]
 8012bca:	f006 fe97 	bl	80198fc <uxr_prepare_best_effort_buffer_to_send>
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	d13d      	bne.n	8012c4e <uxr_flash_output_streams+0xba>
 8012bd2:	f109 0901 	add.w	r9, r9, #1
 8012bd6:	7e23      	ldrb	r3, [r4, #24]
 8012bd8:	fa5f f089 	uxtb.w	r0, r9
 8012bdc:	4283      	cmp	r3, r0
 8012bde:	d8e6      	bhi.n	8012bae <uxr_flash_output_streams+0x1a>
 8012be0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012be4:	b383      	cbz	r3, 8012c48 <uxr_flash_output_streams+0xb4>
 8012be6:	f04f 0900 	mov.w	r9, #0
 8012bea:	f10d 0802 	add.w	r8, sp, #2
 8012bee:	af03      	add	r7, sp, #12
 8012bf0:	ae02      	add	r6, sp, #8
 8012bf2:	4648      	mov	r0, r9
 8012bf4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	2102      	movs	r1, #2
 8012bfc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012c00:	f000 ff40 	bl	8013a84 <uxr_stream_id>
 8012c04:	9001      	str	r0, [sp, #4]
 8012c06:	3520      	adds	r5, #32
 8012c08:	e00c      	b.n	8012c24 <uxr_flash_output_streams+0x90>
 8012c0a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012c0e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012c12:	9b02      	ldr	r3, [sp, #8]
 8012c14:	f000 fea8 	bl	8013968 <uxr_stamp_session_header>
 8012c18:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012c1a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012c1e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8012c22:	47d0      	blx	sl
 8012c24:	4643      	mov	r3, r8
 8012c26:	463a      	mov	r2, r7
 8012c28:	4631      	mov	r1, r6
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	f007 f888 	bl	8019d40 <uxr_prepare_next_reliable_buffer_to_send>
 8012c30:	4603      	mov	r3, r0
 8012c32:	4620      	mov	r0, r4
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d1e8      	bne.n	8012c0a <uxr_flash_output_streams+0x76>
 8012c38:	f109 0901 	add.w	r9, r9, #1
 8012c3c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012c40:	fa5f f089 	uxtb.w	r0, r9
 8012c44:	4283      	cmp	r3, r0
 8012c46:	d8d5      	bhi.n	8012bf4 <uxr_flash_output_streams+0x60>
 8012c48:	b004      	add	sp, #16
 8012c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c4e:	9b02      	ldr	r3, [sp, #8]
 8012c50:	4620      	mov	r0, r4
 8012c52:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012c56:	f109 0901 	add.w	r9, r9, #1
 8012c5a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012c5e:	f000 fe83 	bl	8013968 <uxr_stamp_session_header>
 8012c62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012c64:	9a03      	ldr	r2, [sp, #12]
 8012c66:	685d      	ldr	r5, [r3, #4]
 8012c68:	6818      	ldr	r0, [r3, #0]
 8012c6a:	9902      	ldr	r1, [sp, #8]
 8012c6c:	47a8      	blx	r5
 8012c6e:	7e23      	ldrb	r3, [r4, #24]
 8012c70:	fa5f f089 	uxtb.w	r0, r9
 8012c74:	4283      	cmp	r3, r0
 8012c76:	d89a      	bhi.n	8012bae <uxr_flash_output_streams+0x1a>
 8012c78:	e7b2      	b.n	8012be0 <uxr_flash_output_streams+0x4c>
 8012c7a:	bf00      	nop

08012c7c <read_submessage_info>:
 8012c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c80:	460d      	mov	r5, r1
 8012c82:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012c86:	4606      	mov	r6, r0
 8012c88:	4669      	mov	r1, sp
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	f002 f81e 	bl	8014ccc <uxr_deserialize_BaseObjectReply>
 8012c90:	4604      	mov	r4, r0
 8012c92:	a902      	add	r1, sp, #8
 8012c94:	4628      	mov	r0, r5
 8012c96:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8012c9a:	f7fb fb43 	bl	800e324 <ucdr_deserialize_bool>
 8012c9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012ca2:	4004      	ands	r4, r0
 8012ca4:	b2e4      	uxtb	r4, r4
 8012ca6:	b95b      	cbnz	r3, 8012cc0 <read_submessage_info+0x44>
 8012ca8:	a987      	add	r1, sp, #540	@ 0x21c
 8012caa:	4628      	mov	r0, r5
 8012cac:	f7fb fb3a 	bl	800e324 <ucdr_deserialize_bool>
 8012cb0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8012cb4:	4680      	mov	r8, r0
 8012cb6:	b94b      	cbnz	r3, 8012ccc <read_submessage_info+0x50>
 8012cb8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc0:	a903      	add	r1, sp, #12
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	f001 feae 	bl	8014a24 <uxr_deserialize_ObjectVariant>
 8012cc8:	4004      	ands	r4, r0
 8012cca:	e7ed      	b.n	8012ca8 <read_submessage_info+0x2c>
 8012ccc:	a988      	add	r1, sp, #544	@ 0x220
 8012cce:	4628      	mov	r0, r5
 8012cd0:	f7fb fb56 	bl	800e380 <ucdr_deserialize_uint8_t>
 8012cd4:	ea14 0f08 	tst.w	r4, r8
 8012cd8:	d0ee      	beq.n	8012cb8 <read_submessage_info+0x3c>
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	d0ec      	beq.n	8012cb8 <read_submessage_info+0x3c>
 8012cde:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012ce2:	2b0d      	cmp	r3, #13
 8012ce4:	d1e8      	bne.n	8012cb8 <read_submessage_info+0x3c>
 8012ce6:	a98a      	add	r1, sp, #552	@ 0x228
 8012ce8:	4628      	mov	r0, r5
 8012cea:	f7fc f8ef 	bl	800eecc <ucdr_deserialize_int16_t>
 8012cee:	b138      	cbz	r0, 8012d00 <read_submessage_info+0x84>
 8012cf0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	dd06      	ble.n	8012d06 <read_submessage_info+0x8a>
 8012cf8:	2f00      	cmp	r7, #0
 8012cfa:	bf14      	ite	ne
 8012cfc:	2001      	movne	r0, #1
 8012cfe:	2002      	moveq	r0, #2
 8012d00:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8012d04:	e7d8      	b.n	8012cb8 <read_submessage_info+0x3c>
 8012d06:	2000      	movs	r0, #0
 8012d08:	e7fa      	b.n	8012d00 <read_submessage_info+0x84>
 8012d0a:	bf00      	nop

08012d0c <read_submessage_list>:
 8012d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d10:	4604      	mov	r4, r0
 8012d12:	b097      	sub	sp, #92	@ 0x5c
 8012d14:	460d      	mov	r5, r1
 8012d16:	4ec1      	ldr	r6, [pc, #772]	@ (801301c <read_submessage_list+0x310>)
 8012d18:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d1a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8012d1e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012d20:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8012d24:	4628      	mov	r0, r5
 8012d26:	f001 f805 	bl	8013d34 <uxr_read_submessage_header>
 8012d2a:	2800      	cmp	r0, #0
 8012d2c:	f000 8142 	beq.w	8012fb4 <read_submessage_list+0x2a8>
 8012d30:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012d34:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8012d38:	3b02      	subs	r3, #2
 8012d3a:	2b0d      	cmp	r3, #13
 8012d3c:	d8ed      	bhi.n	8012d1a <read_submessage_list+0xe>
 8012d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8012d44 <read_submessage_list+0x38>)
 8012d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d44:	08012fab 	.word	0x08012fab
 8012d48:	08012d1b 	.word	0x08012d1b
 8012d4c:	08012f9b 	.word	0x08012f9b
 8012d50:	08012f39 	.word	0x08012f39
 8012d54:	08012f2f 	.word	0x08012f2f
 8012d58:	08012d1b 	.word	0x08012d1b
 8012d5c:	08012d1b 	.word	0x08012d1b
 8012d60:	08012e85 	.word	0x08012e85
 8012d64:	08012e17 	.word	0x08012e17
 8012d68:	08012dd7 	.word	0x08012dd7
 8012d6c:	08012d1b 	.word	0x08012d1b
 8012d70:	08012d1b 	.word	0x08012d1b
 8012d74:	08012d1b 	.word	0x08012d1b
 8012d78:	08012d7d 	.word	0x08012d7d
 8012d7c:	a910      	add	r1, sp, #64	@ 0x40
 8012d7e:	4628      	mov	r0, r5
 8012d80:	f002 f9cc 	bl	801511c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012d84:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8012d88:	f1b8 0f00 	cmp.w	r8, #0
 8012d8c:	f000 811a 	beq.w	8012fc4 <read_submessage_list+0x2b8>
 8012d90:	f001 f818 	bl	8013dc4 <uxr_nanos>
 8012d94:	4602      	mov	r2, r0
 8012d96:	460b      	mov	r3, r1
 8012d98:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012da0:	9006      	str	r0, [sp, #24]
 8012da2:	468c      	mov	ip, r1
 8012da4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8012da6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012daa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012dac:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8012db0:	468c      	mov	ip, r1
 8012db2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012db4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012db8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8012dbc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8012dc0:	fbc7 0106 	smlal	r0, r1, r7, r6
 8012dc4:	e9cd 0100 	strd	r0, r1, [sp]
 8012dc8:	4620      	mov	r0, r4
 8012dca:	47c0      	blx	r8
 8012dcc:	f04f 0301 	mov.w	r3, #1
 8012dd0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012dd4:	e7a1      	b.n	8012d1a <read_submessage_list+0xe>
 8012dd6:	a910      	add	r1, sp, #64	@ 0x40
 8012dd8:	4628      	mov	r0, r5
 8012dda:	f002 f98b 	bl	80150f4 <uxr_deserialize_HEARTBEAT_Payload>
 8012dde:	2100      	movs	r1, #0
 8012de0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012de4:	f000 fe7c 	bl	8013ae0 <uxr_stream_id_from_raw>
 8012de8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8012dec:	900f      	str	r0, [sp, #60]	@ 0x3c
 8012dee:	f104 0008 	add.w	r0, r4, #8
 8012df2:	4641      	mov	r1, r8
 8012df4:	f000 ff62 	bl	8013cbc <uxr_get_input_reliable_stream>
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	d08e      	beq.n	8012d1a <read_submessage_list+0xe>
 8012dfc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8012e00:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8012e04:	f006 fce4 	bl	80197d0 <uxr_process_heartbeat>
 8012e08:	4642      	mov	r2, r8
 8012e0a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f7ff fdf6 	bl	8012a00 <write_submessage_acknack.isra.0>
 8012e14:	e781      	b.n	8012d1a <read_submessage_list+0xe>
 8012e16:	a910      	add	r1, sp, #64	@ 0x40
 8012e18:	4628      	mov	r0, r5
 8012e1a:	f002 f943 	bl	80150a4 <uxr_deserialize_ACKNACK_Payload>
 8012e1e:	2100      	movs	r1, #0
 8012e20:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012e24:	f000 fe5c 	bl	8013ae0 <uxr_stream_id_from_raw>
 8012e28:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8012e2c:	900d      	str	r0, [sp, #52]	@ 0x34
 8012e2e:	f104 0008 	add.w	r0, r4, #8
 8012e32:	f000 ff2d 	bl	8013c90 <uxr_get_output_reliable_stream>
 8012e36:	4680      	mov	r8, r0
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	f43f af6e 	beq.w	8012d1a <read_submessage_list+0xe>
 8012e3e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8012e42:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012e46:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8012e4a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8012e4e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012e52:	b289      	uxth	r1, r1
 8012e54:	f007 f81c 	bl	8019e90 <uxr_process_acknack>
 8012e58:	4640      	mov	r0, r8
 8012e5a:	f006 ffdd 	bl	8019e18 <uxr_begin_output_nack_buffer_it>
 8012e5e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8012e62:	e005      	b.n	8012e70 <read_submessage_list+0x164>
 8012e64:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012e66:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8012e6a:	e9d3 0900 	ldrd	r0, r9, [r3]
 8012e6e:	47c8      	blx	r9
 8012e70:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8012e74:	aa0f      	add	r2, sp, #60	@ 0x3c
 8012e76:	4651      	mov	r1, sl
 8012e78:	4640      	mov	r0, r8
 8012e7a:	f006 ffcf 	bl	8019e1c <uxr_next_reliable_nack_buffer_to_send>
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	d1f0      	bne.n	8012e64 <read_submessage_list+0x158>
 8012e82:	e74a      	b.n	8012d1a <read_submessage_list+0xe>
 8012e84:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012e88:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012e8c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8012e90:	4628      	mov	r0, r5
 8012e92:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8012e96:	4651      	mov	r1, sl
 8012e98:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8012e9c:	f1a8 0804 	sub.w	r8, r8, #4
 8012ea0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8012ea4:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8012ea8:	fa1f f888 	uxth.w	r8, r8
 8012eac:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012eb0:	f009 090e 	and.w	r9, r9, #14
 8012eb4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8012eb8:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8012ebc:	f001 fe54 	bl	8014b68 <uxr_deserialize_BaseObjectRequest>
 8012ec0:	4650      	mov	r0, sl
 8012ec2:	a90f      	add	r1, sp, #60	@ 0x3c
 8012ec4:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8012ec8:	f000 fdca 	bl	8013a60 <uxr_parse_base_object_request>
 8012ecc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012ece:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8012ed2:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8012ed6:	9110      	str	r1, [sp, #64]	@ 0x40
 8012ed8:	f1bb 0f00 	cmp.w	fp, #0
 8012edc:	d006      	beq.n	8012eec <read_submessage_list+0x1e0>
 8012ede:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012ee2:	4652      	mov	r2, sl
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	9300      	str	r3, [sp, #0]
 8012ee8:	2300      	movs	r3, #0
 8012eea:	47d8      	blx	fp
 8012eec:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012eee:	b182      	cbz	r2, 8012f12 <read_submessage_list+0x206>
 8012ef0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8012ef2:	f04f 0c00 	mov.w	ip, #0
 8012ef6:	3902      	subs	r1, #2
 8012ef8:	e003      	b.n	8012f02 <read_submessage_list+0x1f6>
 8012efa:	f10c 0c01 	add.w	ip, ip, #1
 8012efe:	4594      	cmp	ip, r2
 8012f00:	d007      	beq.n	8012f12 <read_submessage_list+0x206>
 8012f02:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8012f06:	4553      	cmp	r3, sl
 8012f08:	d1f7      	bne.n	8012efa <read_submessage_list+0x1ee>
 8012f0a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	f803 200c 	strb.w	r2, [r3, ip]
 8012f12:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8012f16:	464b      	mov	r3, r9
 8012f18:	4642      	mov	r2, r8
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	9102      	str	r1, [sp, #8]
 8012f1e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012f20:	9101      	str	r1, [sp, #4]
 8012f22:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012f24:	9100      	str	r1, [sp, #0]
 8012f26:	4629      	mov	r1, r5
 8012f28:	f7ff fc48 	bl	80127bc <read_submessage_format>
 8012f2c:	e6f5      	b.n	8012d1a <read_submessage_list+0xe>
 8012f2e:	4629      	mov	r1, r5
 8012f30:	4620      	mov	r0, r4
 8012f32:	f7ff fea3 	bl	8012c7c <read_submessage_info>
 8012f36:	e6f0      	b.n	8012d1a <read_submessage_list+0xe>
 8012f38:	2a00      	cmp	r2, #0
 8012f3a:	d03e      	beq.n	8012fba <read_submessage_list+0x2ae>
 8012f3c:	a910      	add	r1, sp, #64	@ 0x40
 8012f3e:	4628      	mov	r0, r5
 8012f40:	f002 f808 	bl	8014f54 <uxr_deserialize_STATUS_Payload>
 8012f44:	a90e      	add	r1, sp, #56	@ 0x38
 8012f46:	aa0d      	add	r2, sp, #52	@ 0x34
 8012f48:	a810      	add	r0, sp, #64	@ 0x40
 8012f4a:	f000 fd89 	bl	8013a60 <uxr_parse_base_object_request>
 8012f4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012f50:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8012f54:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8012f58:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8012f5c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012f5e:	f1ba 0f00 	cmp.w	sl, #0
 8012f62:	d006      	beq.n	8012f72 <read_submessage_list+0x266>
 8012f64:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012f68:	4642      	mov	r2, r8
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	9300      	str	r3, [sp, #0]
 8012f6e:	464b      	mov	r3, r9
 8012f70:	47d0      	blx	sl
 8012f72:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012f74:	2a00      	cmp	r2, #0
 8012f76:	f43f aed0 	beq.w	8012d1a <read_submessage_list+0xe>
 8012f7a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012f7c:	2100      	movs	r1, #0
 8012f7e:	3802      	subs	r0, #2
 8012f80:	e003      	b.n	8012f8a <read_submessage_list+0x27e>
 8012f82:	3101      	adds	r1, #1
 8012f84:	4291      	cmp	r1, r2
 8012f86:	f43f aec8 	beq.w	8012d1a <read_submessage_list+0xe>
 8012f8a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012f8e:	4543      	cmp	r3, r8
 8012f90:	d1f7      	bne.n	8012f82 <read_submessage_list+0x276>
 8012f92:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012f94:	f803 9001 	strb.w	r9, [r3, r1]
 8012f98:	e6bf      	b.n	8012d1a <read_submessage_list+0xe>
 8012f9a:	2a00      	cmp	r2, #0
 8012f9c:	f47f aebd 	bne.w	8012d1a <read_submessage_list+0xe>
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f000 fca0 	bl	80138e8 <uxr_read_create_session_status>
 8012fa8:	e6b7      	b.n	8012d1a <read_submessage_list+0xe>
 8012faa:	4629      	mov	r1, r5
 8012fac:	4620      	mov	r0, r4
 8012fae:	f7ff fcf1 	bl	8012994 <read_submessage_get_info>
 8012fb2:	e6b2      	b.n	8012d1a <read_submessage_list+0xe>
 8012fb4:	b017      	add	sp, #92	@ 0x5c
 8012fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fba:	4629      	mov	r1, r5
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	f000 fca1 	bl	8013904 <uxr_read_delete_session_status>
 8012fc2:	e6aa      	b.n	8012d1a <read_submessage_list+0xe>
 8012fc4:	f000 fefe 	bl	8013dc4 <uxr_nanos>
 8012fc8:	4642      	mov	r2, r8
 8012fca:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012fcc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012fce:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012fd2:	1818      	adds	r0, r3, r0
 8012fd4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8012fd6:	eb42 0101 	adc.w	r1, r2, r1
 8012fda:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012fdc:	4642      	mov	r2, r8
 8012fde:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012fe2:	469c      	mov	ip, r3
 8012fe4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8012fe8:	fbc3 7806 	smlal	r7, r8, r3, r6
 8012fec:	4643      	mov	r3, r8
 8012fee:	eb1c 0c07 	adds.w	ip, ip, r7
 8012ff2:	eb42 0203 	adc.w	r2, r2, r3
 8012ff6:	ebb0 030c 	subs.w	r3, r0, ip
 8012ffa:	eb61 0202 	sbc.w	r2, r1, r2
 8012ffe:	2a00      	cmp	r2, #0
 8013000:	db08      	blt.n	8013014 <read_submessage_list+0x308>
 8013002:	085b      	lsrs	r3, r3, #1
 8013004:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8013008:	1052      	asrs	r2, r2, #1
 801300a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801300e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8013012:	e6db      	b.n	8012dcc <read_submessage_list+0xc0>
 8013014:	3301      	adds	r3, #1
 8013016:	f142 0200 	adc.w	r2, r2, #0
 801301a:	e7f2      	b.n	8013002 <read_submessage_list+0x2f6>
 801301c:	3b9aca00 	.word	0x3b9aca00

08013020 <listen_message_reliably>:
 8013020:	1e0b      	subs	r3, r1, #0
 8013022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013026:	bfb8      	it	lt
 8013028:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801302c:	b09d      	sub	sp, #116	@ 0x74
 801302e:	4680      	mov	r8, r0
 8013030:	9305      	str	r3, [sp, #20]
 8013032:	f000 feab 	bl	8013d8c <uxr_millis>
 8013036:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801303a:	4681      	mov	r9, r0
 801303c:	2a00      	cmp	r2, #0
 801303e:	f000 809a 	beq.w	8013176 <listen_message_reliably+0x156>
 8013042:	2600      	movs	r6, #0
 8013044:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013048:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801304c:	460f      	mov	r7, r1
 801304e:	4630      	mov	r0, r6
 8013050:	9303      	str	r3, [sp, #12]
 8013052:	e00e      	b.n	8013072 <listen_message_reliably+0x52>
 8013054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013056:	3601      	adds	r6, #1
 8013058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801305a:	455a      	cmp	r2, fp
 801305c:	9903      	ldr	r1, [sp, #12]
 801305e:	b2f0      	uxtb	r0, r6
 8013060:	eb73 0101 	sbcs.w	r1, r3, r1
 8013064:	da01      	bge.n	801306a <listen_message_reliably+0x4a>
 8013066:	4693      	mov	fp, r2
 8013068:	9303      	str	r3, [sp, #12]
 801306a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801306e:	4283      	cmp	r3, r0
 8013070:	d95f      	bls.n	8013132 <listen_message_reliably+0x112>
 8013072:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013076:	2102      	movs	r1, #2
 8013078:	2201      	movs	r2, #1
 801307a:	00e4      	lsls	r4, r4, #3
 801307c:	f000 fd02 	bl	8013a84 <uxr_stream_id>
 8013080:	4601      	mov	r1, r0
 8013082:	f104 0520 	add.w	r5, r4, #32
 8013086:	463b      	mov	r3, r7
 8013088:	464a      	mov	r2, r9
 801308a:	9109      	str	r1, [sp, #36]	@ 0x24
 801308c:	4445      	add	r5, r8
 801308e:	4628      	mov	r0, r5
 8013090:	f006 fe96 	bl	8019dc0 <uxr_update_output_stream_heartbeat_timestamp>
 8013094:	eb08 0304 	add.w	r3, r8, r4
 8013098:	2800      	cmp	r0, #0
 801309a:	d0db      	beq.n	8013054 <listen_message_reliably+0x34>
 801309c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80130a0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80130a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80130a8:	4640      	mov	r0, r8
 80130aa:	3501      	adds	r5, #1
 80130ac:	4444      	add	r4, r8
 80130ae:	9304      	str	r3, [sp, #16]
 80130b0:	f000 fcae 	bl	8013a10 <uxr_session_header_offset>
 80130b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80130b8:	2300      	movs	r3, #0
 80130ba:	2211      	movs	r2, #17
 80130bc:	a90c      	add	r1, sp, #48	@ 0x30
 80130be:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80130c2:	9000      	str	r0, [sp, #0]
 80130c4:	4650      	mov	r0, sl
 80130c6:	3601      	adds	r6, #1
 80130c8:	f7fc fa74 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 80130cc:	2300      	movs	r3, #0
 80130ce:	2205      	movs	r2, #5
 80130d0:	210b      	movs	r1, #11
 80130d2:	4650      	mov	r0, sl
 80130d4:	f000 fe14 	bl	8013d00 <uxr_buffer_submessage_header>
 80130d8:	2101      	movs	r1, #1
 80130da:	8968      	ldrh	r0, [r5, #10]
 80130dc:	f006 ff34 	bl	8019f48 <uxr_seq_num_add>
 80130e0:	892b      	ldrh	r3, [r5, #8]
 80130e2:	4602      	mov	r2, r0
 80130e4:	a90a      	add	r1, sp, #40	@ 0x28
 80130e6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80130ea:	4650      	mov	r0, sl
 80130ec:	9b04      	ldr	r3, [sp, #16]
 80130ee:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80130f2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80130f6:	f001 ffe9 	bl	80150cc <uxr_serialize_HEARTBEAT_Payload>
 80130fa:	2200      	movs	r2, #0
 80130fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80130fe:	4640      	mov	r0, r8
 8013100:	4611      	mov	r1, r2
 8013102:	f000 fc31 	bl	8013968 <uxr_stamp_session_header>
 8013106:	4650      	mov	r0, sl
 8013108:	f7fc fa94 	bl	800f634 <ucdr_buffer_length>
 801310c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8013110:	4602      	mov	r2, r0
 8013112:	a90c      	add	r1, sp, #48	@ 0x30
 8013114:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013118:	47a8      	blx	r5
 801311a:	9903      	ldr	r1, [sp, #12]
 801311c:	b2f0      	uxtb	r0, r6
 801311e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8013122:	455a      	cmp	r2, fp
 8013124:	eb73 0101 	sbcs.w	r1, r3, r1
 8013128:	db9d      	blt.n	8013066 <listen_message_reliably+0x46>
 801312a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801312e:	4283      	cmp	r3, r0
 8013130:	d89f      	bhi.n	8013072 <listen_message_reliably+0x52>
 8013132:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013136:	9a03      	ldr	r2, [sp, #12]
 8013138:	429a      	cmp	r2, r3
 801313a:	bf08      	it	eq
 801313c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013140:	d019      	beq.n	8013176 <listen_message_reliably+0x156>
 8013142:	ebab 0309 	sub.w	r3, fp, r9
 8013146:	2b00      	cmp	r3, #0
 8013148:	9d05      	ldr	r5, [sp, #20]
 801314a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801314e:	aa08      	add	r2, sp, #32
 8013150:	bf08      	it	eq
 8013152:	2301      	moveq	r3, #1
 8013154:	a907      	add	r1, sp, #28
 8013156:	6884      	ldr	r4, [r0, #8]
 8013158:	429d      	cmp	r5, r3
 801315a:	6800      	ldr	r0, [r0, #0]
 801315c:	bfa8      	it	ge
 801315e:	461d      	movge	r5, r3
 8013160:	462b      	mov	r3, r5
 8013162:	47a0      	blx	r4
 8013164:	b948      	cbnz	r0, 801317a <listen_message_reliably+0x15a>
 8013166:	9b05      	ldr	r3, [sp, #20]
 8013168:	1b5b      	subs	r3, r3, r5
 801316a:	2b00      	cmp	r3, #0
 801316c:	9305      	str	r3, [sp, #20]
 801316e:	f73f af60 	bgt.w	8013032 <listen_message_reliably+0x12>
 8013172:	4604      	mov	r4, r0
 8013174:	e012      	b.n	801319c <listen_message_reliably+0x17c>
 8013176:	9b05      	ldr	r3, [sp, #20]
 8013178:	e7e5      	b.n	8013146 <listen_message_reliably+0x126>
 801317a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801317e:	4604      	mov	r4, r0
 8013180:	2500      	movs	r5, #0
 8013182:	a80c      	add	r0, sp, #48	@ 0x30
 8013184:	f7fc fa28 	bl	800f5d8 <ucdr_init_buffer>
 8013188:	f10d 031a 	add.w	r3, sp, #26
 801318c:	aa06      	add	r2, sp, #24
 801318e:	a90c      	add	r1, sp, #48	@ 0x30
 8013190:	4640      	mov	r0, r8
 8013192:	f88d 5018 	strb.w	r5, [sp, #24]
 8013196:	f000 fbfb 	bl	8013990 <uxr_read_session_header>
 801319a:	b918      	cbnz	r0, 80131a4 <listen_message_reliably+0x184>
 801319c:	4620      	mov	r0, r4
 801319e:	b01d      	add	sp, #116	@ 0x74
 80131a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a4:	4629      	mov	r1, r5
 80131a6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80131aa:	f000 fc99 	bl	8013ae0 <uxr_stream_id_from_raw>
 80131ae:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80131b2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80131b6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80131ba:	2e01      	cmp	r6, #1
 80131bc:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80131c0:	d04b      	beq.n	801325a <listen_message_reliably+0x23a>
 80131c2:	2e02      	cmp	r6, #2
 80131c4:	d00f      	beq.n	80131e6 <listen_message_reliably+0x1c6>
 80131c6:	2e00      	cmp	r6, #0
 80131c8:	d1e8      	bne.n	801319c <listen_message_reliably+0x17c>
 80131ca:	4631      	mov	r1, r6
 80131cc:	4630      	mov	r0, r6
 80131ce:	f000 fc87 	bl	8013ae0 <uxr_stream_id_from_raw>
 80131d2:	4602      	mov	r2, r0
 80131d4:	a90c      	add	r1, sp, #48	@ 0x30
 80131d6:	4640      	mov	r0, r8
 80131d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80131da:	f7ff fd97 	bl	8012d0c <read_submessage_list>
 80131de:	4620      	mov	r0, r4
 80131e0:	b01d      	add	sp, #116	@ 0x74
 80131e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e6:	4629      	mov	r1, r5
 80131e8:	f108 0008 	add.w	r0, r8, #8
 80131ec:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80131f0:	f000 fd64 	bl	8013cbc <uxr_get_input_reliable_stream>
 80131f4:	4607      	mov	r7, r0
 80131f6:	b338      	cbz	r0, 8013248 <listen_message_reliably+0x228>
 80131f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131fa:	a80c      	add	r0, sp, #48	@ 0x30
 80131fc:	9203      	str	r2, [sp, #12]
 80131fe:	f7fc fa1d 	bl	800f63c <ucdr_buffer_remaining>
 8013202:	4603      	mov	r3, r0
 8013204:	f10d 0019 	add.w	r0, sp, #25
 8013208:	9a03      	ldr	r2, [sp, #12]
 801320a:	4651      	mov	r1, sl
 801320c:	9000      	str	r0, [sp, #0]
 801320e:	4638      	mov	r0, r7
 8013210:	f006 f9e2 	bl	80195d8 <uxr_receive_reliable_message>
 8013214:	b1c0      	cbz	r0, 8013248 <listen_message_reliably+0x228>
 8013216:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801321a:	b393      	cbz	r3, 8013282 <listen_message_reliably+0x262>
 801321c:	ae14      	add	r6, sp, #80	@ 0x50
 801321e:	f04f 0a02 	mov.w	sl, #2
 8013222:	e00a      	b.n	801323a <listen_message_reliably+0x21a>
 8013224:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013228:	4631      	mov	r1, r6
 801322a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801322e:	4640      	mov	r0, r8
 8013230:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8013234:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013236:	f7ff fd69 	bl	8012d0c <read_submessage_list>
 801323a:	2204      	movs	r2, #4
 801323c:	4631      	mov	r1, r6
 801323e:	4638      	mov	r0, r7
 8013240:	f006 fa4c 	bl	80196dc <uxr_next_input_reliable_buffer_available>
 8013244:	2800      	cmp	r0, #0
 8013246:	d1ed      	bne.n	8013224 <listen_message_reliably+0x204>
 8013248:	4640      	mov	r0, r8
 801324a:	462a      	mov	r2, r5
 801324c:	4649      	mov	r1, r9
 801324e:	f7ff fbd7 	bl	8012a00 <write_submessage_acknack.isra.0>
 8013252:	4620      	mov	r0, r4
 8013254:	b01d      	add	sp, #116	@ 0x74
 8013256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801325a:	4629      	mov	r1, r5
 801325c:	f108 0008 	add.w	r0, r8, #8
 8013260:	f000 fd22 	bl	8013ca8 <uxr_get_input_best_effort_stream>
 8013264:	2800      	cmp	r0, #0
 8013266:	d099      	beq.n	801319c <listen_message_reliably+0x17c>
 8013268:	4651      	mov	r1, sl
 801326a:	f006 f92b 	bl	80194c4 <uxr_receive_best_effort_message>
 801326e:	2800      	cmp	r0, #0
 8013270:	d094      	beq.n	801319c <listen_message_reliably+0x17c>
 8013272:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013276:	a90c      	add	r1, sp, #48	@ 0x30
 8013278:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801327a:	4640      	mov	r0, r8
 801327c:	f7ff fd46 	bl	8012d0c <read_submessage_list>
 8013280:	e78c      	b.n	801319c <listen_message_reliably+0x17c>
 8013282:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013286:	a90c      	add	r1, sp, #48	@ 0x30
 8013288:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801328a:	4640      	mov	r0, r8
 801328c:	f7ff fd3e 	bl	8012d0c <read_submessage_list>
 8013290:	e7c4      	b.n	801321c <listen_message_reliably+0x1fc>
 8013292:	bf00      	nop

08013294 <uxr_run_session_timeout>:
 8013294:	b570      	push	{r4, r5, r6, lr}
 8013296:	4604      	mov	r4, r0
 8013298:	460d      	mov	r5, r1
 801329a:	f000 fd77 	bl	8013d8c <uxr_millis>
 801329e:	4606      	mov	r6, r0
 80132a0:	4620      	mov	r0, r4
 80132a2:	f7ff fc77 	bl	8012b94 <uxr_flash_output_streams>
 80132a6:	4629      	mov	r1, r5
 80132a8:	4620      	mov	r0, r4
 80132aa:	f7ff feb9 	bl	8013020 <listen_message_reliably>
 80132ae:	f000 fd6d 	bl	8013d8c <uxr_millis>
 80132b2:	1b83      	subs	r3, r0, r6
 80132b4:	1ae9      	subs	r1, r5, r3
 80132b6:	2900      	cmp	r1, #0
 80132b8:	dcf6      	bgt.n	80132a8 <uxr_run_session_timeout+0x14>
 80132ba:	f104 0008 	add.w	r0, r4, #8
 80132be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132c2:	f000 bd07 	b.w	8013cd4 <uxr_output_streams_confirmed>
 80132c6:	bf00      	nop

080132c8 <uxr_run_session_until_data>:
 80132c8:	b570      	push	{r4, r5, r6, lr}
 80132ca:	4604      	mov	r4, r0
 80132cc:	460d      	mov	r5, r1
 80132ce:	f000 fd5d 	bl	8013d8c <uxr_millis>
 80132d2:	4606      	mov	r6, r0
 80132d4:	4620      	mov	r0, r4
 80132d6:	f7ff fc5d 	bl	8012b94 <uxr_flash_output_streams>
 80132da:	2300      	movs	r3, #0
 80132dc:	4629      	mov	r1, r5
 80132de:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80132e2:	e005      	b.n	80132f0 <uxr_run_session_until_data+0x28>
 80132e4:	f000 fd52 	bl	8013d8c <uxr_millis>
 80132e8:	1b83      	subs	r3, r0, r6
 80132ea:	1ae9      	subs	r1, r5, r3
 80132ec:	2900      	cmp	r1, #0
 80132ee:	dd07      	ble.n	8013300 <uxr_run_session_until_data+0x38>
 80132f0:	4620      	mov	r0, r4
 80132f2:	f7ff fe95 	bl	8013020 <listen_message_reliably>
 80132f6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80132fa:	2800      	cmp	r0, #0
 80132fc:	d0f2      	beq.n	80132e4 <uxr_run_session_until_data+0x1c>
 80132fe:	bd70      	pop	{r4, r5, r6, pc}
 8013300:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013304:	bd70      	pop	{r4, r5, r6, pc}
 8013306:	bf00      	nop

08013308 <uxr_run_session_until_confirm_delivery>:
 8013308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801330c:	4606      	mov	r6, r0
 801330e:	460d      	mov	r5, r1
 8013310:	f000 fd3c 	bl	8013d8c <uxr_millis>
 8013314:	4607      	mov	r7, r0
 8013316:	4630      	mov	r0, r6
 8013318:	f106 0808 	add.w	r8, r6, #8
 801331c:	f7ff fc3a 	bl	8012b94 <uxr_flash_output_streams>
 8013320:	2d00      	cmp	r5, #0
 8013322:	db10      	blt.n	8013346 <uxr_run_session_until_confirm_delivery+0x3e>
 8013324:	462c      	mov	r4, r5
 8013326:	e006      	b.n	8013336 <uxr_run_session_until_confirm_delivery+0x2e>
 8013328:	f7ff fe7a 	bl	8013020 <listen_message_reliably>
 801332c:	f000 fd2e 	bl	8013d8c <uxr_millis>
 8013330:	1bc3      	subs	r3, r0, r7
 8013332:	1aec      	subs	r4, r5, r3
 8013334:	d407      	bmi.n	8013346 <uxr_run_session_until_confirm_delivery+0x3e>
 8013336:	4640      	mov	r0, r8
 8013338:	f000 fccc 	bl	8013cd4 <uxr_output_streams_confirmed>
 801333c:	4603      	mov	r3, r0
 801333e:	4621      	mov	r1, r4
 8013340:	4630      	mov	r0, r6
 8013342:	2b00      	cmp	r3, #0
 8013344:	d0f0      	beq.n	8013328 <uxr_run_session_until_confirm_delivery+0x20>
 8013346:	4640      	mov	r0, r8
 8013348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801334c:	f000 bcc2 	b.w	8013cd4 <uxr_output_streams_confirmed>

08013350 <uxr_run_session_until_all_status>:
 8013350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013354:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8013358:	4606      	mov	r6, r0
 801335a:	4688      	mov	r8, r1
 801335c:	4692      	mov	sl, r2
 801335e:	461f      	mov	r7, r3
 8013360:	f7ff fc18 	bl	8012b94 <uxr_flash_output_streams>
 8013364:	f1bb 0f00 	cmp.w	fp, #0
 8013368:	d004      	beq.n	8013374 <uxr_run_session_until_all_status+0x24>
 801336a:	465a      	mov	r2, fp
 801336c:	21ff      	movs	r1, #255	@ 0xff
 801336e:	4638      	mov	r0, r7
 8013370:	f008 f9e0 	bl	801b734 <memset>
 8013374:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8013378:	1e7d      	subs	r5, r7, #1
 801337a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801337e:	f000 fd05 	bl	8013d8c <uxr_millis>
 8013382:	4641      	mov	r1, r8
 8013384:	4681      	mov	r9, r0
 8013386:	4630      	mov	r0, r6
 8013388:	f7ff fe4a 	bl	8013020 <listen_message_reliably>
 801338c:	f000 fcfe 	bl	8013d8c <uxr_millis>
 8013390:	eba0 0009 	sub.w	r0, r0, r9
 8013394:	eba8 0100 	sub.w	r1, r8, r0
 8013398:	f1bb 0f00 	cmp.w	fp, #0
 801339c:	d029      	beq.n	80133f2 <uxr_run_session_until_all_status+0xa2>
 801339e:	46ae      	mov	lr, r5
 80133a0:	f04f 0c00 	mov.w	ip, #0
 80133a4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80133a8:	2cff      	cmp	r4, #255	@ 0xff
 80133aa:	d015      	beq.n	80133d8 <uxr_run_session_until_all_status+0x88>
 80133ac:	f10c 0c01 	add.w	ip, ip, #1
 80133b0:	45e3      	cmp	fp, ip
 80133b2:	d8f7      	bhi.n	80133a4 <uxr_run_session_until_all_status+0x54>
 80133b4:	2300      	movs	r3, #0
 80133b6:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80133b8:	e000      	b.n	80133bc <uxr_run_session_until_all_status+0x6c>
 80133ba:	b158      	cbz	r0, 80133d4 <uxr_run_session_until_all_status+0x84>
 80133bc:	462b      	mov	r3, r5
 80133be:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80133c2:	3302      	adds	r3, #2
 80133c4:	2801      	cmp	r0, #1
 80133c6:	eba3 0307 	sub.w	r3, r3, r7
 80133ca:	bf8c      	ite	hi
 80133cc:	2000      	movhi	r0, #0
 80133ce:	2001      	movls	r0, #1
 80133d0:	459b      	cmp	fp, r3
 80133d2:	d8f2      	bhi.n	80133ba <uxr_run_session_until_all_status+0x6a>
 80133d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133d8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80133dc:	f10c 0c01 	add.w	ip, ip, #1
 80133e0:	45dc      	cmp	ip, fp
 80133e2:	d201      	bcs.n	80133e8 <uxr_run_session_until_all_status+0x98>
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d0dd      	beq.n	80133a4 <uxr_run_session_until_all_status+0x54>
 80133e8:	2900      	cmp	r1, #0
 80133ea:	dde3      	ble.n	80133b4 <uxr_run_session_until_all_status+0x64>
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d1ca      	bne.n	8013386 <uxr_run_session_until_all_status+0x36>
 80133f0:	e7e0      	b.n	80133b4 <uxr_run_session_until_all_status+0x64>
 80133f2:	2001      	movs	r0, #1
 80133f4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80133f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133fc <wait_session_status>:
 80133fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013400:	4604      	mov	r4, r0
 8013402:	b09d      	sub	sp, #116	@ 0x74
 8013404:	20ff      	movs	r0, #255	@ 0xff
 8013406:	9303      	str	r3, [sp, #12]
 8013408:	7160      	strb	r0, [r4, #5]
 801340a:	2b00      	cmp	r3, #0
 801340c:	f000 80b6 	beq.w	801357c <wait_session_status+0x180>
 8013410:	4689      	mov	r9, r1
 8013412:	4692      	mov	sl, r2
 8013414:	f04f 0b00 	mov.w	fp, #0
 8013418:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801341a:	4652      	mov	r2, sl
 801341c:	4649      	mov	r1, r9
 801341e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013422:	47a8      	blx	r5
 8013424:	f000 fcb2 	bl	8013d8c <uxr_millis>
 8013428:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801342c:	4605      	mov	r5, r0
 801342e:	e009      	b.n	8013444 <wait_session_status+0x48>
 8013430:	f000 fcac 	bl	8013d8c <uxr_millis>
 8013434:	1b40      	subs	r0, r0, r5
 8013436:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801343a:	2b00      	cmp	r3, #0
 801343c:	dd40      	ble.n	80134c0 <wait_session_status+0xc4>
 801343e:	7960      	ldrb	r0, [r4, #5]
 8013440:	28ff      	cmp	r0, #255	@ 0xff
 8013442:	d145      	bne.n	80134d0 <wait_session_status+0xd4>
 8013444:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013446:	a908      	add	r1, sp, #32
 8013448:	6896      	ldr	r6, [r2, #8]
 801344a:	6810      	ldr	r0, [r2, #0]
 801344c:	aa09      	add	r2, sp, #36	@ 0x24
 801344e:	47b0      	blx	r6
 8013450:	2800      	cmp	r0, #0
 8013452:	d0ed      	beq.n	8013430 <wait_session_status+0x34>
 8013454:	a80c      	add	r0, sp, #48	@ 0x30
 8013456:	2600      	movs	r6, #0
 8013458:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801345c:	f7fc f8bc 	bl	800f5d8 <ucdr_init_buffer>
 8013460:	f10d 031e 	add.w	r3, sp, #30
 8013464:	aa07      	add	r2, sp, #28
 8013466:	a90c      	add	r1, sp, #48	@ 0x30
 8013468:	4620      	mov	r0, r4
 801346a:	f88d 601c 	strb.w	r6, [sp, #28]
 801346e:	f000 fa8f 	bl	8013990 <uxr_read_session_header>
 8013472:	2800      	cmp	r0, #0
 8013474:	d0dc      	beq.n	8013430 <wait_session_status+0x34>
 8013476:	4631      	mov	r1, r6
 8013478:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801347c:	f000 fb30 	bl	8013ae0 <uxr_stream_id_from_raw>
 8013480:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013484:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013488:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801348c:	2f01      	cmp	r7, #1
 801348e:	9302      	str	r3, [sp, #8]
 8013490:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8013494:	d05c      	beq.n	8013550 <wait_session_status+0x154>
 8013496:	2f02      	cmp	r7, #2
 8013498:	d020      	beq.n	80134dc <wait_session_status+0xe0>
 801349a:	2f00      	cmp	r7, #0
 801349c:	d1c8      	bne.n	8013430 <wait_session_status+0x34>
 801349e:	4639      	mov	r1, r7
 80134a0:	4638      	mov	r0, r7
 80134a2:	f000 fb1d 	bl	8013ae0 <uxr_stream_id_from_raw>
 80134a6:	a90c      	add	r1, sp, #48	@ 0x30
 80134a8:	4602      	mov	r2, r0
 80134aa:	900b      	str	r0, [sp, #44]	@ 0x2c
 80134ac:	4620      	mov	r0, r4
 80134ae:	f7ff fc2d 	bl	8012d0c <read_submessage_list>
 80134b2:	f000 fc6b 	bl	8013d8c <uxr_millis>
 80134b6:	1b40      	subs	r0, r0, r5
 80134b8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80134bc:	2b00      	cmp	r3, #0
 80134be:	dcbe      	bgt.n	801343e <wait_session_status+0x42>
 80134c0:	f10b 0b01 	add.w	fp, fp, #1
 80134c4:	9b03      	ldr	r3, [sp, #12]
 80134c6:	7960      	ldrb	r0, [r4, #5]
 80134c8:	455b      	cmp	r3, fp
 80134ca:	d001      	beq.n	80134d0 <wait_session_status+0xd4>
 80134cc:	28ff      	cmp	r0, #255	@ 0xff
 80134ce:	d0a3      	beq.n	8013418 <wait_session_status+0x1c>
 80134d0:	38ff      	subs	r0, #255	@ 0xff
 80134d2:	bf18      	it	ne
 80134d4:	2001      	movne	r0, #1
 80134d6:	b01d      	add	sp, #116	@ 0x74
 80134d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80134e0:	4631      	mov	r1, r6
 80134e2:	f104 0008 	add.w	r0, r4, #8
 80134e6:	9304      	str	r3, [sp, #16]
 80134e8:	f000 fbe8 	bl	8013cbc <uxr_get_input_reliable_stream>
 80134ec:	4680      	mov	r8, r0
 80134ee:	b348      	cbz	r0, 8013544 <wait_session_status+0x148>
 80134f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80134f2:	a80c      	add	r0, sp, #48	@ 0x30
 80134f4:	9205      	str	r2, [sp, #20]
 80134f6:	f7fc f8a1 	bl	800f63c <ucdr_buffer_remaining>
 80134fa:	4603      	mov	r3, r0
 80134fc:	f10d 001d 	add.w	r0, sp, #29
 8013500:	9a05      	ldr	r2, [sp, #20]
 8013502:	9000      	str	r0, [sp, #0]
 8013504:	4640      	mov	r0, r8
 8013506:	9902      	ldr	r1, [sp, #8]
 8013508:	f006 f866 	bl	80195d8 <uxr_receive_reliable_message>
 801350c:	b1d0      	cbz	r0, 8013544 <wait_session_status+0x148>
 801350e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d03a      	beq.n	801358c <wait_session_status+0x190>
 8013516:	9f04      	ldr	r7, [sp, #16]
 8013518:	e00a      	b.n	8013530 <wait_session_status+0x134>
 801351a:	f04f 0302 	mov.w	r3, #2
 801351e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8013522:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8013526:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801352a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801352c:	f7ff fbee 	bl	8012d0c <read_submessage_list>
 8013530:	a914      	add	r1, sp, #80	@ 0x50
 8013532:	2204      	movs	r2, #4
 8013534:	4640      	mov	r0, r8
 8013536:	f006 f8d1 	bl	80196dc <uxr_next_input_reliable_buffer_available>
 801353a:	4603      	mov	r3, r0
 801353c:	a914      	add	r1, sp, #80	@ 0x50
 801353e:	4620      	mov	r0, r4
 8013540:	2b00      	cmp	r3, #0
 8013542:	d1ea      	bne.n	801351a <wait_session_status+0x11e>
 8013544:	4632      	mov	r2, r6
 8013546:	9904      	ldr	r1, [sp, #16]
 8013548:	4620      	mov	r0, r4
 801354a:	f7ff fa59 	bl	8012a00 <write_submessage_acknack.isra.0>
 801354e:	e76f      	b.n	8013430 <wait_session_status+0x34>
 8013550:	4631      	mov	r1, r6
 8013552:	f104 0008 	add.w	r0, r4, #8
 8013556:	f000 fba7 	bl	8013ca8 <uxr_get_input_best_effort_stream>
 801355a:	2800      	cmp	r0, #0
 801355c:	f43f af68 	beq.w	8013430 <wait_session_status+0x34>
 8013560:	9902      	ldr	r1, [sp, #8]
 8013562:	f005 ffaf 	bl	80194c4 <uxr_receive_best_effort_message>
 8013566:	2800      	cmp	r0, #0
 8013568:	f43f af62 	beq.w	8013430 <wait_session_status+0x34>
 801356c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013570:	a90c      	add	r1, sp, #48	@ 0x30
 8013572:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013574:	4620      	mov	r0, r4
 8013576:	f7ff fbc9 	bl	8012d0c <read_submessage_list>
 801357a:	e759      	b.n	8013430 <wait_session_status+0x34>
 801357c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801357e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013582:	47a0      	blx	r4
 8013584:	2001      	movs	r0, #1
 8013586:	b01d      	add	sp, #116	@ 0x74
 8013588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801358c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013590:	a90c      	add	r1, sp, #48	@ 0x30
 8013592:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013594:	4620      	mov	r0, r4
 8013596:	f7ff fbb9 	bl	8012d0c <read_submessage_list>
 801359a:	e7bc      	b.n	8013516 <wait_session_status+0x11a>

0801359c <uxr_delete_session_retries>:
 801359c:	b530      	push	{r4, r5, lr}
 801359e:	b08f      	sub	sp, #60	@ 0x3c
 80135a0:	4604      	mov	r4, r0
 80135a2:	460d      	mov	r5, r1
 80135a4:	f000 fa34 	bl	8013a10 <uxr_session_header_offset>
 80135a8:	2300      	movs	r3, #0
 80135aa:	2210      	movs	r2, #16
 80135ac:	a902      	add	r1, sp, #8
 80135ae:	9000      	str	r0, [sp, #0]
 80135b0:	a806      	add	r0, sp, #24
 80135b2:	f7fb ffff 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 80135b6:	a906      	add	r1, sp, #24
 80135b8:	4620      	mov	r0, r4
 80135ba:	f000 f979 	bl	80138b0 <uxr_buffer_delete_session>
 80135be:	2200      	movs	r2, #0
 80135c0:	9b06      	ldr	r3, [sp, #24]
 80135c2:	4620      	mov	r0, r4
 80135c4:	4611      	mov	r1, r2
 80135c6:	f000 f9cf 	bl	8013968 <uxr_stamp_session_header>
 80135ca:	a806      	add	r0, sp, #24
 80135cc:	f7fc f832 	bl	800f634 <ucdr_buffer_length>
 80135d0:	462b      	mov	r3, r5
 80135d2:	4602      	mov	r2, r0
 80135d4:	a902      	add	r1, sp, #8
 80135d6:	4620      	mov	r0, r4
 80135d8:	f7ff ff10 	bl	80133fc <wait_session_status>
 80135dc:	b118      	cbz	r0, 80135e6 <uxr_delete_session_retries+0x4a>
 80135de:	7960      	ldrb	r0, [r4, #5]
 80135e0:	fab0 f080 	clz	r0, r0
 80135e4:	0940      	lsrs	r0, r0, #5
 80135e6:	b00f      	add	sp, #60	@ 0x3c
 80135e8:	bd30      	pop	{r4, r5, pc}
 80135ea:	bf00      	nop

080135ec <uxr_create_session>:
 80135ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f0:	f100 0b08 	add.w	fp, r0, #8
 80135f4:	4604      	mov	r4, r0
 80135f6:	b0ab      	sub	sp, #172	@ 0xac
 80135f8:	4658      	mov	r0, fp
 80135fa:	465e      	mov	r6, fp
 80135fc:	f000 faa6 	bl	8013b4c <uxr_reset_stream_storage>
 8013600:	4620      	mov	r0, r4
 8013602:	f000 fa05 	bl	8013a10 <uxr_session_header_offset>
 8013606:	2300      	movs	r3, #0
 8013608:	221c      	movs	r2, #28
 801360a:	a90b      	add	r1, sp, #44	@ 0x2c
 801360c:	9000      	str	r0, [sp, #0]
 801360e:	a812      	add	r0, sp, #72	@ 0x48
 8013610:	f7fb ffd0 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 8013614:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013616:	a912      	add	r1, sp, #72	@ 0x48
 8013618:	4620      	mov	r0, r4
 801361a:	8a1a      	ldrh	r2, [r3, #16]
 801361c:	3a04      	subs	r2, #4
 801361e:	b292      	uxth	r2, r2
 8013620:	f000 f91c 	bl	801385c <uxr_buffer_create_session>
 8013624:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013626:	4620      	mov	r0, r4
 8013628:	f000 f98a 	bl	8013940 <uxr_stamp_create_session_header>
 801362c:	a812      	add	r0, sp, #72	@ 0x48
 801362e:	f7fc f801 	bl	800f634 <ucdr_buffer_length>
 8013632:	23ff      	movs	r3, #255	@ 0xff
 8013634:	4681      	mov	r9, r0
 8013636:	7163      	strb	r3, [r4, #5]
 8013638:	230a      	movs	r3, #10
 801363a:	9303      	str	r3, [sp, #12]
 801363c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801363e:	464a      	mov	r2, r9
 8013640:	a90b      	add	r1, sp, #44	@ 0x2c
 8013642:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013646:	47a8      	blx	r5
 8013648:	f000 fba0 	bl	8013d8c <uxr_millis>
 801364c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013650:	4605      	mov	r5, r0
 8013652:	e009      	b.n	8013668 <uxr_create_session+0x7c>
 8013654:	f000 fb9a 	bl	8013d8c <uxr_millis>
 8013658:	1b40      	subs	r0, r0, r5
 801365a:	7962      	ldrb	r2, [r4, #5]
 801365c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013660:	2b00      	cmp	r3, #0
 8013662:	dd38      	ble.n	80136d6 <uxr_create_session+0xea>
 8013664:	2aff      	cmp	r2, #255	@ 0xff
 8013666:	d13c      	bne.n	80136e2 <uxr_create_session+0xf6>
 8013668:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801366a:	a907      	add	r1, sp, #28
 801366c:	6897      	ldr	r7, [r2, #8]
 801366e:	6810      	ldr	r0, [r2, #0]
 8013670:	aa08      	add	r2, sp, #32
 8013672:	47b8      	blx	r7
 8013674:	2800      	cmp	r0, #0
 8013676:	d0ed      	beq.n	8013654 <uxr_create_session+0x68>
 8013678:	a81a      	add	r0, sp, #104	@ 0x68
 801367a:	2700      	movs	r7, #0
 801367c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013680:	f7fb ffaa 	bl	800f5d8 <ucdr_init_buffer>
 8013684:	f10d 031a 	add.w	r3, sp, #26
 8013688:	aa06      	add	r2, sp, #24
 801368a:	a91a      	add	r1, sp, #104	@ 0x68
 801368c:	4620      	mov	r0, r4
 801368e:	f88d 7018 	strb.w	r7, [sp, #24]
 8013692:	f000 f97d 	bl	8013990 <uxr_read_session_header>
 8013696:	2800      	cmp	r0, #0
 8013698:	d0dc      	beq.n	8013654 <uxr_create_session+0x68>
 801369a:	4639      	mov	r1, r7
 801369c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80136a0:	f000 fa1e 	bl	8013ae0 <uxr_stream_id_from_raw>
 80136a4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80136a8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80136ac:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80136b0:	2f01      	cmp	r7, #1
 80136b2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80136b6:	d053      	beq.n	8013760 <uxr_create_session+0x174>
 80136b8:	2f02      	cmp	r7, #2
 80136ba:	d018      	beq.n	80136ee <uxr_create_session+0x102>
 80136bc:	2f00      	cmp	r7, #0
 80136be:	d1c9      	bne.n	8013654 <uxr_create_session+0x68>
 80136c0:	4639      	mov	r1, r7
 80136c2:	4638      	mov	r0, r7
 80136c4:	f000 fa0c 	bl	8013ae0 <uxr_stream_id_from_raw>
 80136c8:	a91a      	add	r1, sp, #104	@ 0x68
 80136ca:	4602      	mov	r2, r0
 80136cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80136ce:	4620      	mov	r0, r4
 80136d0:	f7ff fb1c 	bl	8012d0c <read_submessage_list>
 80136d4:	e7be      	b.n	8013654 <uxr_create_session+0x68>
 80136d6:	9b03      	ldr	r3, [sp, #12]
 80136d8:	3b01      	subs	r3, #1
 80136da:	9303      	str	r3, [sp, #12]
 80136dc:	d001      	beq.n	80136e2 <uxr_create_session+0xf6>
 80136de:	2aff      	cmp	r2, #255	@ 0xff
 80136e0:	d0ac      	beq.n	801363c <uxr_create_session+0x50>
 80136e2:	2a00      	cmp	r2, #0
 80136e4:	d051      	beq.n	801378a <uxr_create_session+0x19e>
 80136e6:	2000      	movs	r0, #0
 80136e8:	b02b      	add	sp, #172	@ 0xac
 80136ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ee:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80136f2:	4641      	mov	r1, r8
 80136f4:	4630      	mov	r0, r6
 80136f6:	9304      	str	r3, [sp, #16]
 80136f8:	f000 fae0 	bl	8013cbc <uxr_get_input_reliable_stream>
 80136fc:	4682      	mov	sl, r0
 80136fe:	b348      	cbz	r0, 8013754 <uxr_create_session+0x168>
 8013700:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013702:	a81a      	add	r0, sp, #104	@ 0x68
 8013704:	9205      	str	r2, [sp, #20]
 8013706:	f7fb ff99 	bl	800f63c <ucdr_buffer_remaining>
 801370a:	4603      	mov	r3, r0
 801370c:	f10d 0019 	add.w	r0, sp, #25
 8013710:	9a05      	ldr	r2, [sp, #20]
 8013712:	4659      	mov	r1, fp
 8013714:	9000      	str	r0, [sp, #0]
 8013716:	4650      	mov	r0, sl
 8013718:	f005 ff5e 	bl	80195d8 <uxr_receive_reliable_message>
 801371c:	b1d0      	cbz	r0, 8013754 <uxr_create_session+0x168>
 801371e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d038      	beq.n	8013798 <uxr_create_session+0x1ac>
 8013726:	9f04      	ldr	r7, [sp, #16]
 8013728:	e00a      	b.n	8013740 <uxr_create_session+0x154>
 801372a:	f04f 0302 	mov.w	r3, #2
 801372e:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8013732:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8013736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801373a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801373c:	f7ff fae6 	bl	8012d0c <read_submessage_list>
 8013740:	a922      	add	r1, sp, #136	@ 0x88
 8013742:	2204      	movs	r2, #4
 8013744:	4650      	mov	r0, sl
 8013746:	f005 ffc9 	bl	80196dc <uxr_next_input_reliable_buffer_available>
 801374a:	4603      	mov	r3, r0
 801374c:	a922      	add	r1, sp, #136	@ 0x88
 801374e:	4620      	mov	r0, r4
 8013750:	2b00      	cmp	r3, #0
 8013752:	d1ea      	bne.n	801372a <uxr_create_session+0x13e>
 8013754:	4642      	mov	r2, r8
 8013756:	9904      	ldr	r1, [sp, #16]
 8013758:	4620      	mov	r0, r4
 801375a:	f7ff f951 	bl	8012a00 <write_submessage_acknack.isra.0>
 801375e:	e779      	b.n	8013654 <uxr_create_session+0x68>
 8013760:	4641      	mov	r1, r8
 8013762:	4630      	mov	r0, r6
 8013764:	f000 faa0 	bl	8013ca8 <uxr_get_input_best_effort_stream>
 8013768:	2800      	cmp	r0, #0
 801376a:	f43f af73 	beq.w	8013654 <uxr_create_session+0x68>
 801376e:	4659      	mov	r1, fp
 8013770:	f005 fea8 	bl	80194c4 <uxr_receive_best_effort_message>
 8013774:	2800      	cmp	r0, #0
 8013776:	f43f af6d 	beq.w	8013654 <uxr_create_session+0x68>
 801377a:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801377e:	a91a      	add	r1, sp, #104	@ 0x68
 8013780:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013782:	4620      	mov	r0, r4
 8013784:	f7ff fac2 	bl	8012d0c <read_submessage_list>
 8013788:	e764      	b.n	8013654 <uxr_create_session+0x68>
 801378a:	4630      	mov	r0, r6
 801378c:	f000 f9de 	bl	8013b4c <uxr_reset_stream_storage>
 8013790:	2001      	movs	r0, #1
 8013792:	b02b      	add	sp, #172	@ 0xac
 8013794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013798:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801379c:	a91a      	add	r1, sp, #104	@ 0x68
 801379e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80137a0:	4620      	mov	r0, r4
 80137a2:	f7ff fab3 	bl	8012d0c <read_submessage_list>
 80137a6:	e7be      	b.n	8013726 <uxr_create_session+0x13a>

080137a8 <uxr_prepare_stream_to_write_submessage>:
 80137a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137ac:	b082      	sub	sp, #8
 80137ae:	4604      	mov	r4, r0
 80137b0:	4610      	mov	r0, r2
 80137b2:	4615      	mov	r5, r2
 80137b4:	461e      	mov	r6, r3
 80137b6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80137ba:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80137be:	f105 0904 	add.w	r9, r5, #4
 80137c2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80137c6:	9101      	str	r1, [sp, #4]
 80137c8:	f000 fada 	bl	8013d80 <uxr_submessage_padding>
 80137cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80137d0:	4481      	add	r9, r0
 80137d2:	2b01      	cmp	r3, #1
 80137d4:	d01d      	beq.n	8013812 <uxr_prepare_stream_to_write_submessage+0x6a>
 80137d6:	2b02      	cmp	r3, #2
 80137d8:	d116      	bne.n	8013808 <uxr_prepare_stream_to_write_submessage+0x60>
 80137da:	f104 0008 	add.w	r0, r4, #8
 80137de:	4651      	mov	r1, sl
 80137e0:	f000 fa56 	bl	8013c90 <uxr_get_output_reliable_stream>
 80137e4:	4604      	mov	r4, r0
 80137e6:	b158      	cbz	r0, 8013800 <uxr_prepare_stream_to_write_submessage+0x58>
 80137e8:	4649      	mov	r1, r9
 80137ea:	4632      	mov	r2, r6
 80137ec:	f006 f93a 	bl	8019a64 <uxr_prepare_reliable_buffer_to_write>
 80137f0:	4604      	mov	r4, r0
 80137f2:	b12c      	cbz	r4, 8013800 <uxr_prepare_stream_to_write_submessage+0x58>
 80137f4:	4643      	mov	r3, r8
 80137f6:	b2aa      	uxth	r2, r5
 80137f8:	4639      	mov	r1, r7
 80137fa:	4630      	mov	r0, r6
 80137fc:	f000 fa80 	bl	8013d00 <uxr_buffer_submessage_header>
 8013800:	4620      	mov	r0, r4
 8013802:	b002      	add	sp, #8
 8013804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013808:	2400      	movs	r4, #0
 801380a:	4620      	mov	r0, r4
 801380c:	b002      	add	sp, #8
 801380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013812:	f104 0008 	add.w	r0, r4, #8
 8013816:	4651      	mov	r1, sl
 8013818:	f000 fa32 	bl	8013c80 <uxr_get_output_best_effort_stream>
 801381c:	4604      	mov	r4, r0
 801381e:	2800      	cmp	r0, #0
 8013820:	d0ee      	beq.n	8013800 <uxr_prepare_stream_to_write_submessage+0x58>
 8013822:	4649      	mov	r1, r9
 8013824:	4632      	mov	r2, r6
 8013826:	f006 f849 	bl	80198bc <uxr_prepare_best_effort_buffer_to_write>
 801382a:	4604      	mov	r4, r0
 801382c:	e7e1      	b.n	80137f2 <uxr_prepare_stream_to_write_submessage+0x4a>
 801382e:	bf00      	nop

08013830 <uxr_init_session_info>:
 8013830:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8013834:	23ff      	movs	r3, #255	@ 0xff
 8013836:	7102      	strb	r2, [r0, #4]
 8013838:	f880 c001 	strb.w	ip, [r0, #1]
 801383c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013840:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8013844:	7001      	strb	r1, [r0, #0]
 8013846:	f880 c002 	strb.w	ip, [r0, #2]
 801384a:	7143      	strb	r3, [r0, #5]
 801384c:	70c2      	strb	r2, [r0, #3]
 801384e:	b500      	push	{lr}
 8013850:	f04f 0e09 	mov.w	lr, #9
 8013854:	f8a0 e006 	strh.w	lr, [r0, #6]
 8013858:	f85d fb04 	ldr.w	pc, [sp], #4

0801385c <uxr_buffer_create_session>:
 801385c:	b530      	push	{r4, r5, lr}
 801385e:	2300      	movs	r3, #0
 8013860:	b089      	sub	sp, #36	@ 0x24
 8013862:	4d12      	ldr	r5, [pc, #72]	@ (80138ac <uxr_buffer_create_session+0x50>)
 8013864:	460c      	mov	r4, r1
 8013866:	9307      	str	r3, [sp, #28]
 8013868:	4619      	mov	r1, r3
 801386a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801386e:	2201      	movs	r2, #1
 8013870:	9301      	str	r3, [sp, #4]
 8013872:	80c2      	strh	r2, [r0, #6]
 8013874:	f88d 2004 	strb.w	r2, [sp, #4]
 8013878:	682a      	ldr	r2, [r5, #0]
 801387a:	9303      	str	r3, [sp, #12]
 801387c:	9200      	str	r2, [sp, #0]
 801387e:	88aa      	ldrh	r2, [r5, #4]
 8013880:	9306      	str	r3, [sp, #24]
 8013882:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013886:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801388a:	9202      	str	r2, [sp, #8]
 801388c:	7802      	ldrb	r2, [r0, #0]
 801388e:	4620      	mov	r0, r4
 8013890:	f88d 200c 	strb.w	r2, [sp, #12]
 8013894:	2210      	movs	r2, #16
 8013896:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801389a:	f000 fa31 	bl	8013d00 <uxr_buffer_submessage_header>
 801389e:	4669      	mov	r1, sp
 80138a0:	4620      	mov	r0, r4
 80138a2:	f001 fa6f 	bl	8014d84 <uxr_serialize_CREATE_CLIENT_Payload>
 80138a6:	b009      	add	sp, #36	@ 0x24
 80138a8:	bd30      	pop	{r4, r5, pc}
 80138aa:	bf00      	nop
 80138ac:	0801c798 	.word	0x0801c798

080138b0 <uxr_buffer_delete_session>:
 80138b0:	4a0c      	ldr	r2, [pc, #48]	@ (80138e4 <uxr_buffer_delete_session+0x34>)
 80138b2:	2302      	movs	r3, #2
 80138b4:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80138b8:	b510      	push	{r4, lr}
 80138ba:	460c      	mov	r4, r1
 80138bc:	b082      	sub	sp, #8
 80138be:	8911      	ldrh	r1, [r2, #8]
 80138c0:	2204      	movs	r2, #4
 80138c2:	80c3      	strh	r3, [r0, #6]
 80138c4:	2300      	movs	r3, #0
 80138c6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80138ca:	4620      	mov	r0, r4
 80138cc:	2103      	movs	r1, #3
 80138ce:	f8ad c004 	strh.w	ip, [sp, #4]
 80138d2:	f000 fa15 	bl	8013d00 <uxr_buffer_submessage_header>
 80138d6:	a901      	add	r1, sp, #4
 80138d8:	4620      	mov	r0, r4
 80138da:	f001 fafb 	bl	8014ed4 <uxr_serialize_DELETE_Payload>
 80138de:	b002      	add	sp, #8
 80138e0:	bd10      	pop	{r4, pc}
 80138e2:	bf00      	nop
 80138e4:	0801c798 	.word	0x0801c798

080138e8 <uxr_read_create_session_status>:
 80138e8:	b510      	push	{r4, lr}
 80138ea:	460b      	mov	r3, r1
 80138ec:	b088      	sub	sp, #32
 80138ee:	4604      	mov	r4, r0
 80138f0:	a901      	add	r1, sp, #4
 80138f2:	4618      	mov	r0, r3
 80138f4:	f001 fafe 	bl	8014ef4 <uxr_deserialize_STATUS_AGENT_Payload>
 80138f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80138fc:	7163      	strb	r3, [r4, #5]
 80138fe:	b008      	add	sp, #32
 8013900:	bd10      	pop	{r4, pc}
 8013902:	bf00      	nop

08013904 <uxr_read_delete_session_status>:
 8013904:	b510      	push	{r4, lr}
 8013906:	b084      	sub	sp, #16
 8013908:	4604      	mov	r4, r0
 801390a:	4608      	mov	r0, r1
 801390c:	a902      	add	r1, sp, #8
 801390e:	f001 fb21 	bl	8014f54 <uxr_deserialize_STATUS_Payload>
 8013912:	88e3      	ldrh	r3, [r4, #6]
 8013914:	2b02      	cmp	r3, #2
 8013916:	d001      	beq.n	801391c <uxr_read_delete_session_status+0x18>
 8013918:	b004      	add	sp, #16
 801391a:	bd10      	pop	{r4, pc}
 801391c:	f10d 000a 	add.w	r0, sp, #10
 8013920:	f7fe fec4 	bl	80126ac <uxr_object_id_from_raw>
 8013924:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013928:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801392c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013930:	b29b      	uxth	r3, r3
 8013932:	2b02      	cmp	r3, #2
 8013934:	d1f0      	bne.n	8013918 <uxr_read_delete_session_status+0x14>
 8013936:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801393a:	7163      	strb	r3, [r4, #5]
 801393c:	e7ec      	b.n	8013918 <uxr_read_delete_session_status+0x14>
 801393e:	bf00      	nop

08013940 <uxr_stamp_create_session_header>:
 8013940:	b510      	push	{r4, lr}
 8013942:	2208      	movs	r2, #8
 8013944:	b08a      	sub	sp, #40	@ 0x28
 8013946:	4604      	mov	r4, r0
 8013948:	eb0d 0002 	add.w	r0, sp, r2
 801394c:	f7fb fe44 	bl	800f5d8 <ucdr_init_buffer>
 8013950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013954:	2300      	movs	r3, #0
 8013956:	a802      	add	r0, sp, #8
 8013958:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801395c:	9400      	str	r4, [sp, #0]
 801395e:	461a      	mov	r2, r3
 8013960:	f000 fbca 	bl	80140f8 <uxr_serialize_message_header>
 8013964:	b00a      	add	sp, #40	@ 0x28
 8013966:	bd10      	pop	{r4, pc}

08013968 <uxr_stamp_session_header>:
 8013968:	b530      	push	{r4, r5, lr}
 801396a:	b08d      	sub	sp, #52	@ 0x34
 801396c:	4604      	mov	r4, r0
 801396e:	460d      	mov	r5, r1
 8013970:	4619      	mov	r1, r3
 8013972:	a804      	add	r0, sp, #16
 8013974:	9203      	str	r2, [sp, #12]
 8013976:	2208      	movs	r2, #8
 8013978:	f7fb fe2e 	bl	800f5d8 <ucdr_init_buffer>
 801397c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013980:	9b03      	ldr	r3, [sp, #12]
 8013982:	462a      	mov	r2, r5
 8013984:	a804      	add	r0, sp, #16
 8013986:	9400      	str	r4, [sp, #0]
 8013988:	f000 fbb6 	bl	80140f8 <uxr_serialize_message_header>
 801398c:	b00d      	add	sp, #52	@ 0x34
 801398e:	bd30      	pop	{r4, r5, pc}

08013990 <uxr_read_session_header>:
 8013990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013994:	4607      	mov	r7, r0
 8013996:	b084      	sub	sp, #16
 8013998:	4608      	mov	r0, r1
 801399a:	460c      	mov	r4, r1
 801399c:	4615      	mov	r5, r2
 801399e:	461e      	mov	r6, r3
 80139a0:	f7fb fe4c 	bl	800f63c <ucdr_buffer_remaining>
 80139a4:	2808      	cmp	r0, #8
 80139a6:	d803      	bhi.n	80139b0 <uxr_read_session_header+0x20>
 80139a8:	2000      	movs	r0, #0
 80139aa:	b004      	add	sp, #16
 80139ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139b0:	f10d 080c 	add.w	r8, sp, #12
 80139b4:	4633      	mov	r3, r6
 80139b6:	462a      	mov	r2, r5
 80139b8:	4620      	mov	r0, r4
 80139ba:	f10d 010b 	add.w	r1, sp, #11
 80139be:	f8cd 8000 	str.w	r8, [sp]
 80139c2:	f000 fbb7 	bl	8014134 <uxr_deserialize_message_header>
 80139c6:	783a      	ldrb	r2, [r7, #0]
 80139c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80139cc:	4293      	cmp	r3, r2
 80139ce:	d1eb      	bne.n	80139a8 <uxr_read_session_header+0x18>
 80139d0:	061b      	lsls	r3, r3, #24
 80139d2:	d41b      	bmi.n	8013a0c <uxr_read_session_header+0x7c>
 80139d4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80139d8:	787b      	ldrb	r3, [r7, #1]
 80139da:	429a      	cmp	r2, r3
 80139dc:	d003      	beq.n	80139e6 <uxr_read_session_header+0x56>
 80139de:	2001      	movs	r0, #1
 80139e0:	f080 0001 	eor.w	r0, r0, #1
 80139e4:	e7e1      	b.n	80139aa <uxr_read_session_header+0x1a>
 80139e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80139ea:	1cb8      	adds	r0, r7, #2
 80139ec:	78bb      	ldrb	r3, [r7, #2]
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d1f5      	bne.n	80139de <uxr_read_session_header+0x4e>
 80139f2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80139f6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d1ef      	bne.n	80139de <uxr_read_session_header+0x4e>
 80139fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013a02:	7843      	ldrb	r3, [r0, #1]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d1ea      	bne.n	80139de <uxr_read_session_header+0x4e>
 8013a08:	2000      	movs	r0, #0
 8013a0a:	e7e9      	b.n	80139e0 <uxr_read_session_header+0x50>
 8013a0c:	2001      	movs	r0, #1
 8013a0e:	e7cc      	b.n	80139aa <uxr_read_session_header+0x1a>

08013a10 <uxr_session_header_offset>:
 8013a10:	f990 3000 	ldrsb.w	r3, [r0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	bfac      	ite	ge
 8013a18:	2008      	movge	r0, #8
 8013a1a:	2004      	movlt	r0, #4
 8013a1c:	4770      	bx	lr
 8013a1e:	bf00      	nop

08013a20 <uxr_init_base_object_request>:
 8013a20:	b510      	push	{r4, lr}
 8013a22:	b082      	sub	sp, #8
 8013a24:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8013a28:	9101      	str	r1, [sp, #4]
 8013a2a:	88c3      	ldrh	r3, [r0, #6]
 8013a2c:	f1a3 010a 	sub.w	r1, r3, #10
 8013a30:	b289      	uxth	r1, r1
 8013a32:	42a1      	cmp	r1, r4
 8013a34:	d80f      	bhi.n	8013a56 <uxr_init_base_object_request+0x36>
 8013a36:	3301      	adds	r3, #1
 8013a38:	b29c      	uxth	r4, r3
 8013a3a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	80c4      	strh	r4, [r0, #6]
 8013a42:	1c91      	adds	r1, r2, #2
 8013a44:	9801      	ldr	r0, [sp, #4]
 8013a46:	f882 c000 	strb.w	ip, [r2]
 8013a4a:	7053      	strb	r3, [r2, #1]
 8013a4c:	f7fe fe42 	bl	80126d4 <uxr_object_id_to_raw>
 8013a50:	4620      	mov	r0, r4
 8013a52:	b002      	add	sp, #8
 8013a54:	bd10      	pop	{r4, pc}
 8013a56:	230a      	movs	r3, #10
 8013a58:	f04f 0c00 	mov.w	ip, #0
 8013a5c:	461c      	mov	r4, r3
 8013a5e:	e7ef      	b.n	8013a40 <uxr_init_base_object_request+0x20>

08013a60 <uxr_parse_base_object_request>:
 8013a60:	b570      	push	{r4, r5, r6, lr}
 8013a62:	4604      	mov	r4, r0
 8013a64:	3002      	adds	r0, #2
 8013a66:	460d      	mov	r5, r1
 8013a68:	4616      	mov	r6, r2
 8013a6a:	f7fe fe1f 	bl	80126ac <uxr_object_id_from_raw>
 8013a6e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013a72:	8028      	strh	r0, [r5, #0]
 8013a74:	806b      	strh	r3, [r5, #2]
 8013a76:	7822      	ldrb	r2, [r4, #0]
 8013a78:	7863      	ldrb	r3, [r4, #1]
 8013a7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013a7e:	8033      	strh	r3, [r6, #0]
 8013a80:	bd70      	pop	{r4, r5, r6, pc}
 8013a82:	bf00      	nop

08013a84 <uxr_stream_id>:
 8013a84:	2901      	cmp	r1, #1
 8013a86:	4684      	mov	ip, r0
 8013a88:	b500      	push	{lr}
 8013a8a:	b083      	sub	sp, #12
 8013a8c:	d01f      	beq.n	8013ace <uxr_stream_id+0x4a>
 8013a8e:	2902      	cmp	r1, #2
 8013a90:	f04f 0e00 	mov.w	lr, #0
 8013a94:	d020      	beq.n	8013ad8 <uxr_stream_id+0x54>
 8013a96:	2300      	movs	r3, #0
 8013a98:	2000      	movs	r0, #0
 8013a9a:	f36e 0307 	bfi	r3, lr, #0, #8
 8013a9e:	f36c 230f 	bfi	r3, ip, #8, #8
 8013aa2:	f361 4317 	bfi	r3, r1, #16, #8
 8013aa6:	f362 631f 	bfi	r3, r2, #24, #8
 8013aaa:	fa5f fc83 	uxtb.w	ip, r3
 8013aae:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013ab2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013ab6:	0e1b      	lsrs	r3, r3, #24
 8013ab8:	f36c 0007 	bfi	r0, ip, #0, #8
 8013abc:	f361 200f 	bfi	r0, r1, #8, #8
 8013ac0:	f362 4017 	bfi	r0, r2, #16, #8
 8013ac4:	f363 601f 	bfi	r0, r3, #24, #8
 8013ac8:	b003      	add	sp, #12
 8013aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ace:	f100 0e01 	add.w	lr, r0, #1
 8013ad2:	fa5f fe8e 	uxtb.w	lr, lr
 8013ad6:	e7de      	b.n	8013a96 <uxr_stream_id+0x12>
 8013ad8:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8013adc:	e7db      	b.n	8013a96 <uxr_stream_id+0x12>
 8013ade:	bf00      	nop

08013ae0 <uxr_stream_id_from_raw>:
 8013ae0:	b082      	sub	sp, #8
 8013ae2:	b130      	cbz	r0, 8013af2 <uxr_stream_id_from_raw+0x12>
 8013ae4:	0603      	lsls	r3, r0, #24
 8013ae6:	d421      	bmi.n	8013b2c <uxr_stream_id_from_raw+0x4c>
 8013ae8:	1e42      	subs	r2, r0, #1
 8013aea:	f04f 0c01 	mov.w	ip, #1
 8013aee:	b2d2      	uxtb	r2, r2
 8013af0:	e001      	b.n	8013af6 <uxr_stream_id_from_raw+0x16>
 8013af2:	4684      	mov	ip, r0
 8013af4:	4602      	mov	r2, r0
 8013af6:	2300      	movs	r3, #0
 8013af8:	f360 0307 	bfi	r3, r0, #0, #8
 8013afc:	2000      	movs	r0, #0
 8013afe:	f362 230f 	bfi	r3, r2, #8, #8
 8013b02:	f36c 4317 	bfi	r3, ip, #16, #8
 8013b06:	f361 631f 	bfi	r3, r1, #24, #8
 8013b0a:	fa5f fc83 	uxtb.w	ip, r3
 8013b0e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013b12:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013b16:	0e1b      	lsrs	r3, r3, #24
 8013b18:	f36c 0007 	bfi	r0, ip, #0, #8
 8013b1c:	f361 200f 	bfi	r0, r1, #8, #8
 8013b20:	f362 4017 	bfi	r0, r2, #16, #8
 8013b24:	f363 601f 	bfi	r0, r3, #24, #8
 8013b28:	b002      	add	sp, #8
 8013b2a:	4770      	bx	lr
 8013b2c:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8013b30:	f04f 0c02 	mov.w	ip, #2
 8013b34:	e7df      	b.n	8013af6 <uxr_stream_id_from_raw+0x16>
 8013b36:	bf00      	nop

08013b38 <uxr_init_stream_storage>:
 8013b38:	2300      	movs	r3, #0
 8013b3a:	7403      	strb	r3, [r0, #16]
 8013b3c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8013b40:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013b44:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013b48:	4770      	bx	lr
 8013b4a:	bf00      	nop

08013b4c <uxr_reset_stream_storage>:
 8013b4c:	b570      	push	{r4, r5, r6, lr}
 8013b4e:	7c03      	ldrb	r3, [r0, #16]
 8013b50:	4604      	mov	r4, r0
 8013b52:	b14b      	cbz	r3, 8013b68 <uxr_reset_stream_storage+0x1c>
 8013b54:	4606      	mov	r6, r0
 8013b56:	2500      	movs	r5, #0
 8013b58:	4630      	mov	r0, r6
 8013b5a:	3501      	adds	r5, #1
 8013b5c:	f005 fea8 	bl	80198b0 <uxr_reset_output_best_effort_stream>
 8013b60:	7c23      	ldrb	r3, [r4, #16]
 8013b62:	3610      	adds	r6, #16
 8013b64:	42ab      	cmp	r3, r5
 8013b66:	d8f7      	bhi.n	8013b58 <uxr_reset_stream_storage+0xc>
 8013b68:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013b6c:	b15b      	cbz	r3, 8013b86 <uxr_reset_stream_storage+0x3a>
 8013b6e:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b72:	2500      	movs	r5, #0
 8013b74:	4630      	mov	r0, r6
 8013b76:	3501      	adds	r5, #1
 8013b78:	f005 fca0 	bl	80194bc <uxr_reset_input_best_effort_stream>
 8013b7c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013b80:	3602      	adds	r6, #2
 8013b82:	42ab      	cmp	r3, r5
 8013b84:	d8f6      	bhi.n	8013b74 <uxr_reset_stream_storage+0x28>
 8013b86:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013b8a:	b15b      	cbz	r3, 8013ba4 <uxr_reset_stream_storage+0x58>
 8013b8c:	f104 0618 	add.w	r6, r4, #24
 8013b90:	2500      	movs	r5, #0
 8013b92:	4630      	mov	r0, r6
 8013b94:	3501      	adds	r5, #1
 8013b96:	f005 ff37 	bl	8019a08 <uxr_reset_output_reliable_stream>
 8013b9a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013b9e:	3628      	adds	r6, #40	@ 0x28
 8013ba0:	42ab      	cmp	r3, r5
 8013ba2:	d8f6      	bhi.n	8013b92 <uxr_reset_stream_storage+0x46>
 8013ba4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013ba8:	b15b      	cbz	r3, 8013bc2 <uxr_reset_stream_storage+0x76>
 8013baa:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8013bae:	2500      	movs	r5, #0
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	3501      	adds	r5, #1
 8013bb4:	f005 fcee 	bl	8019594 <uxr_reset_input_reliable_stream>
 8013bb8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013bbc:	3618      	adds	r6, #24
 8013bbe:	42ab      	cmp	r3, r5
 8013bc0:	d8f6      	bhi.n	8013bb0 <uxr_reset_stream_storage+0x64>
 8013bc2:	bd70      	pop	{r4, r5, r6, pc}

08013bc4 <uxr_add_output_best_effort_buffer>:
 8013bc4:	b510      	push	{r4, lr}
 8013bc6:	7c04      	ldrb	r4, [r0, #16]
 8013bc8:	b082      	sub	sp, #8
 8013bca:	f104 0c01 	add.w	ip, r4, #1
 8013bce:	f880 c010 	strb.w	ip, [r0, #16]
 8013bd2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013bd6:	f005 fe61 	bl	801989c <uxr_init_output_best_effort_stream>
 8013bda:	2201      	movs	r2, #1
 8013bdc:	4620      	mov	r0, r4
 8013bde:	4611      	mov	r1, r2
 8013be0:	b002      	add	sp, #8
 8013be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013be6:	f7ff bf4d 	b.w	8013a84 <uxr_stream_id>
 8013bea:	bf00      	nop

08013bec <uxr_add_output_reliable_buffer>:
 8013bec:	b510      	push	{r4, lr}
 8013bee:	b084      	sub	sp, #16
 8013bf0:	4684      	mov	ip, r0
 8013bf2:	2028      	movs	r0, #40	@ 0x28
 8013bf4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8013bf8:	9400      	str	r4, [sp, #0]
 8013bfa:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013bfe:	fb00 c004 	mla	r0, r0, r4, ip
 8013c02:	f104 0e01 	add.w	lr, r4, #1
 8013c06:	3018      	adds	r0, #24
 8013c08:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013c0c:	f005 fec6 	bl	801999c <uxr_init_output_reliable_stream>
 8013c10:	2201      	movs	r2, #1
 8013c12:	2102      	movs	r1, #2
 8013c14:	4620      	mov	r0, r4
 8013c16:	b004      	add	sp, #16
 8013c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c1c:	f7ff bf32 	b.w	8013a84 <uxr_stream_id>

08013c20 <uxr_add_input_best_effort_buffer>:
 8013c20:	b510      	push	{r4, lr}
 8013c22:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013c26:	b082      	sub	sp, #8
 8013c28:	1c62      	adds	r2, r4, #1
 8013c2a:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8013c2e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8013c32:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013c36:	f005 fc3d 	bl	80194b4 <uxr_init_input_best_effort_stream>
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	2101      	movs	r1, #1
 8013c3e:	4620      	mov	r0, r4
 8013c40:	b002      	add	sp, #8
 8013c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c46:	f7ff bf1d 	b.w	8013a84 <uxr_stream_id>
 8013c4a:	bf00      	nop

08013c4c <uxr_add_input_reliable_buffer>:
 8013c4c:	b510      	push	{r4, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	4684      	mov	ip, r0
 8013c52:	2018      	movs	r0, #24
 8013c54:	9c06      	ldr	r4, [sp, #24]
 8013c56:	9400      	str	r4, [sp, #0]
 8013c58:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8013c5c:	fb00 c004 	mla	r0, r0, r4, ip
 8013c60:	f104 0e01 	add.w	lr, r4, #1
 8013c64:	3048      	adds	r0, #72	@ 0x48
 8013c66:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8013c6a:	f005 fc6d 	bl	8019548 <uxr_init_input_reliable_stream>
 8013c6e:	2200      	movs	r2, #0
 8013c70:	2102      	movs	r1, #2
 8013c72:	4620      	mov	r0, r4
 8013c74:	b004      	add	sp, #16
 8013c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c7a:	f7ff bf03 	b.w	8013a84 <uxr_stream_id>
 8013c7e:	bf00      	nop

08013c80 <uxr_get_output_best_effort_stream>:
 8013c80:	7c03      	ldrb	r3, [r0, #16]
 8013c82:	428b      	cmp	r3, r1
 8013c84:	bf8c      	ite	hi
 8013c86:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013c8a:	2000      	movls	r0, #0
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop

08013c90 <uxr_get_output_reliable_stream>:
 8013c90:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013c94:	428b      	cmp	r3, r1
 8013c96:	d904      	bls.n	8013ca2 <uxr_get_output_reliable_stream+0x12>
 8013c98:	2328      	movs	r3, #40	@ 0x28
 8013c9a:	fb03 0001 	mla	r0, r3, r1, r0
 8013c9e:	3018      	adds	r0, #24
 8013ca0:	4770      	bx	lr
 8013ca2:	2000      	movs	r0, #0
 8013ca4:	4770      	bx	lr
 8013ca6:	bf00      	nop

08013ca8 <uxr_get_input_best_effort_stream>:
 8013ca8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013cac:	428b      	cmp	r3, r1
 8013cae:	d903      	bls.n	8013cb8 <uxr_get_input_best_effort_stream+0x10>
 8013cb0:	3121      	adds	r1, #33	@ 0x21
 8013cb2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8013cb6:	4770      	bx	lr
 8013cb8:	2000      	movs	r0, #0
 8013cba:	4770      	bx	lr

08013cbc <uxr_get_input_reliable_stream>:
 8013cbc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8013cc0:	428b      	cmp	r3, r1
 8013cc2:	d904      	bls.n	8013cce <uxr_get_input_reliable_stream+0x12>
 8013cc4:	2318      	movs	r3, #24
 8013cc6:	fb03 0001 	mla	r0, r3, r1, r0
 8013cca:	3048      	adds	r0, #72	@ 0x48
 8013ccc:	4770      	bx	lr
 8013cce:	2000      	movs	r0, #0
 8013cd0:	4770      	bx	lr
 8013cd2:	bf00      	nop

08013cd4 <uxr_output_streams_confirmed>:
 8013cd4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013cd8:	b183      	cbz	r3, 8013cfc <uxr_output_streams_confirmed+0x28>
 8013cda:	b570      	push	{r4, r5, r6, lr}
 8013cdc:	4606      	mov	r6, r0
 8013cde:	f100 0518 	add.w	r5, r0, #24
 8013ce2:	2400      	movs	r4, #0
 8013ce4:	e000      	b.n	8013ce8 <uxr_output_streams_confirmed+0x14>
 8013ce6:	b140      	cbz	r0, 8013cfa <uxr_output_streams_confirmed+0x26>
 8013ce8:	4628      	mov	r0, r5
 8013cea:	3401      	adds	r4, #1
 8013cec:	f006 f900 	bl	8019ef0 <uxr_is_output_up_to_date>
 8013cf0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013cf4:	3528      	adds	r5, #40	@ 0x28
 8013cf6:	42a3      	cmp	r3, r4
 8013cf8:	d8f5      	bhi.n	8013ce6 <uxr_output_streams_confirmed+0x12>
 8013cfa:	bd70      	pop	{r4, r5, r6, pc}
 8013cfc:	2001      	movs	r0, #1
 8013cfe:	4770      	bx	lr

08013d00 <uxr_buffer_submessage_header>:
 8013d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d02:	460e      	mov	r6, r1
 8013d04:	2104      	movs	r1, #4
 8013d06:	4604      	mov	r4, r0
 8013d08:	4615      	mov	r5, r2
 8013d0a:	461f      	mov	r7, r3
 8013d0c:	f7fb fc80 	bl	800f610 <ucdr_align_to>
 8013d10:	2301      	movs	r3, #1
 8013d12:	4631      	mov	r1, r6
 8013d14:	4620      	mov	r0, r4
 8013d16:	ea47 0203 	orr.w	r2, r7, r3
 8013d1a:	7523      	strb	r3, [r4, #20]
 8013d1c:	462b      	mov	r3, r5
 8013d1e:	f000 fa29 	bl	8014174 <uxr_serialize_submessage_header>
 8013d22:	4620      	mov	r0, r4
 8013d24:	f7fb fc8a 	bl	800f63c <ucdr_buffer_remaining>
 8013d28:	42a8      	cmp	r0, r5
 8013d2a:	bf34      	ite	cc
 8013d2c:	2000      	movcc	r0, #0
 8013d2e:	2001      	movcs	r0, #1
 8013d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d32:	bf00      	nop

08013d34 <uxr_read_submessage_header>:
 8013d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d38:	4604      	mov	r4, r0
 8013d3a:	460d      	mov	r5, r1
 8013d3c:	2104      	movs	r1, #4
 8013d3e:	4616      	mov	r6, r2
 8013d40:	4698      	mov	r8, r3
 8013d42:	f7fb fc65 	bl	800f610 <ucdr_align_to>
 8013d46:	4620      	mov	r0, r4
 8013d48:	f7fb fc78 	bl	800f63c <ucdr_buffer_remaining>
 8013d4c:	2803      	cmp	r0, #3
 8013d4e:	bf8c      	ite	hi
 8013d50:	2701      	movhi	r7, #1
 8013d52:	2700      	movls	r7, #0
 8013d54:	d802      	bhi.n	8013d5c <uxr_read_submessage_header+0x28>
 8013d56:	4638      	mov	r0, r7
 8013d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d5c:	4633      	mov	r3, r6
 8013d5e:	4642      	mov	r2, r8
 8013d60:	4620      	mov	r0, r4
 8013d62:	4629      	mov	r1, r5
 8013d64:	f000 fa1a 	bl	801419c <uxr_deserialize_submessage_header>
 8013d68:	f898 3000 	ldrb.w	r3, [r8]
 8013d6c:	4638      	mov	r0, r7
 8013d6e:	f003 0201 	and.w	r2, r3, #1
 8013d72:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013d76:	f888 3000 	strb.w	r3, [r8]
 8013d7a:	7522      	strb	r2, [r4, #20]
 8013d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d80 <uxr_submessage_padding>:
 8013d80:	f010 0003 	ands.w	r0, r0, #3
 8013d84:	bf18      	it	ne
 8013d86:	f1c0 0004 	rsbne	r0, r0, #4
 8013d8a:	4770      	bx	lr

08013d8c <uxr_millis>:
 8013d8c:	b510      	push	{r4, lr}
 8013d8e:	b084      	sub	sp, #16
 8013d90:	2001      	movs	r0, #1
 8013d92:	4669      	mov	r1, sp
 8013d94:	f7ed fb10 	bl	80013b8 <clock_gettime>
 8013d98:	4908      	ldr	r1, [pc, #32]	@ (8013dbc <uxr_millis+0x30>)
 8013d9a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8013d9e:	fba0 0301 	umull	r0, r3, r0, r1
 8013da2:	1900      	adds	r0, r0, r4
 8013da4:	fb01 3102 	mla	r1, r1, r2, r3
 8013da8:	4a05      	ldr	r2, [pc, #20]	@ (8013dc0 <uxr_millis+0x34>)
 8013daa:	f04f 0300 	mov.w	r3, #0
 8013dae:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013db2:	f7ec faad 	bl	8000310 <__aeabi_ldivmod>
 8013db6:	b004      	add	sp, #16
 8013db8:	bd10      	pop	{r4, pc}
 8013dba:	bf00      	nop
 8013dbc:	3b9aca00 	.word	0x3b9aca00
 8013dc0:	000f4240 	.word	0x000f4240

08013dc4 <uxr_nanos>:
 8013dc4:	b510      	push	{r4, lr}
 8013dc6:	b084      	sub	sp, #16
 8013dc8:	2001      	movs	r0, #1
 8013dca:	4669      	mov	r1, sp
 8013dcc:	f7ed faf4 	bl	80013b8 <clock_gettime>
 8013dd0:	4a06      	ldr	r2, [pc, #24]	@ (8013dec <uxr_nanos+0x28>)
 8013dd2:	9800      	ldr	r0, [sp, #0]
 8013dd4:	9902      	ldr	r1, [sp, #8]
 8013dd6:	fba0 0302 	umull	r0, r3, r0, r2
 8013dda:	9c01      	ldr	r4, [sp, #4]
 8013ddc:	1840      	adds	r0, r0, r1
 8013dde:	fb02 3304 	mla	r3, r2, r4, r3
 8013de2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013de6:	b004      	add	sp, #16
 8013de8:	bd10      	pop	{r4, pc}
 8013dea:	bf00      	nop
 8013dec:	3b9aca00 	.word	0x3b9aca00

08013df0 <on_full_output_buffer_fragmented>:
 8013df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df4:	460c      	mov	r4, r1
 8013df6:	b08a      	sub	sp, #40	@ 0x28
 8013df8:	4606      	mov	r6, r0
 8013dfa:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8013dfe:	f104 0008 	add.w	r0, r4, #8
 8013e02:	f7ff ff45 	bl	8013c90 <uxr_get_output_reliable_stream>
 8013e06:	4605      	mov	r5, r0
 8013e08:	f006 f87c 	bl	8019f04 <get_available_free_slots>
 8013e0c:	b968      	cbnz	r0, 8013e2a <on_full_output_buffer_fragmented+0x3a>
 8013e0e:	4620      	mov	r0, r4
 8013e10:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013e14:	4798      	blx	r3
 8013e16:	b918      	cbnz	r0, 8013e20 <on_full_output_buffer_fragmented+0x30>
 8013e18:	2001      	movs	r0, #1
 8013e1a:	b00a      	add	sp, #40	@ 0x28
 8013e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e20:	4628      	mov	r0, r5
 8013e22:	f006 f86f 	bl	8019f04 <get_available_free_slots>
 8013e26:	2800      	cmp	r0, #0
 8013e28:	d0f6      	beq.n	8013e18 <on_full_output_buffer_fragmented+0x28>
 8013e2a:	8929      	ldrh	r1, [r5, #8]
 8013e2c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8013e30:	89eb      	ldrh	r3, [r5, #14]
 8013e32:	7b28      	ldrb	r0, [r5, #12]
 8013e34:	686f      	ldr	r7, [r5, #4]
 8013e36:	1a12      	subs	r2, r2, r0
 8013e38:	fbb3 f0f1 	udiv	r0, r3, r1
 8013e3c:	fbb7 f7f1 	udiv	r7, r7, r1
 8013e40:	fb01 3110 	mls	r1, r1, r0, r3
 8013e44:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013e48:	b289      	uxth	r1, r1
 8013e4a:	fb07 f101 	mul.w	r1, r7, r1
 8013e4e:	3f04      	subs	r7, #4
 8013e50:	443a      	add	r2, r7
 8013e52:	3104      	adds	r1, #4
 8013e54:	fa1f f882 	uxth.w	r8, r2
 8013e58:	463a      	mov	r2, r7
 8013e5a:	eba3 0308 	sub.w	r3, r3, r8
 8013e5e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	4419      	add	r1, r3
 8013e66:	2300      	movs	r3, #0
 8013e68:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8013e6c:	9000      	str	r0, [sp, #0]
 8013e6e:	a802      	add	r0, sp, #8
 8013e70:	f7fb fba0 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 8013e74:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013e78:	f102 0308 	add.w	r3, r2, #8
 8013e7c:	42bb      	cmp	r3, r7
 8013e7e:	d927      	bls.n	8013ed0 <on_full_output_buffer_fragmented+0xe0>
 8013e80:	4642      	mov	r2, r8
 8013e82:	2300      	movs	r3, #0
 8013e84:	210d      	movs	r1, #13
 8013e86:	a802      	add	r0, sp, #8
 8013e88:	f7ff ff3a 	bl	8013d00 <uxr_buffer_submessage_header>
 8013e8c:	8929      	ldrh	r1, [r5, #8]
 8013e8e:	89eb      	ldrh	r3, [r5, #14]
 8013e90:	686a      	ldr	r2, [r5, #4]
 8013e92:	fbb3 f0f1 	udiv	r0, r3, r1
 8013e96:	fbb2 f2f1 	udiv	r2, r2, r1
 8013e9a:	fb01 3310 	mls	r3, r1, r0, r3
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	fb02 f303 	mul.w	r3, r2, r3
 8013ea4:	682a      	ldr	r2, [r5, #0]
 8013ea6:	50d7      	str	r7, [r2, r3]
 8013ea8:	2101      	movs	r1, #1
 8013eaa:	89e8      	ldrh	r0, [r5, #14]
 8013eac:	f006 f84c 	bl	8019f48 <uxr_seq_num_add>
 8013eb0:	9904      	ldr	r1, [sp, #16]
 8013eb2:	9a03      	ldr	r2, [sp, #12]
 8013eb4:	81e8      	strh	r0, [r5, #14]
 8013eb6:	4630      	mov	r0, r6
 8013eb8:	1a52      	subs	r2, r2, r1
 8013eba:	f7fb fb8d 	bl	800f5d8 <ucdr_init_buffer>
 8013ebe:	4630      	mov	r0, r6
 8013ec0:	4622      	mov	r2, r4
 8013ec2:	490f      	ldr	r1, [pc, #60]	@ (8013f00 <on_full_output_buffer_fragmented+0x110>)
 8013ec4:	f7fb fb5c 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 8013ec8:	2000      	movs	r0, #0
 8013eca:	b00a      	add	sp, #40	@ 0x28
 8013ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ed0:	b292      	uxth	r2, r2
 8013ed2:	2302      	movs	r3, #2
 8013ed4:	210d      	movs	r1, #13
 8013ed6:	a802      	add	r0, sp, #8
 8013ed8:	f7ff ff12 	bl	8013d00 <uxr_buffer_submessage_header>
 8013edc:	8928      	ldrh	r0, [r5, #8]
 8013ede:	89eb      	ldrh	r3, [r5, #14]
 8013ee0:	6869      	ldr	r1, [r5, #4]
 8013ee2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013ee6:	fbb3 f7f0 	udiv	r7, r3, r0
 8013eea:	fbb1 f1f0 	udiv	r1, r1, r0
 8013eee:	fb00 3317 	mls	r3, r0, r7, r3
 8013ef2:	3208      	adds	r2, #8
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	fb01 f303 	mul.w	r3, r1, r3
 8013efa:	6829      	ldr	r1, [r5, #0]
 8013efc:	50ca      	str	r2, [r1, r3]
 8013efe:	e7d3      	b.n	8013ea8 <on_full_output_buffer_fragmented+0xb8>
 8013f00:	08013df1 	.word	0x08013df1

08013f04 <uxr_prepare_output_stream>:
 8013f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f06:	b087      	sub	sp, #28
 8013f08:	2707      	movs	r7, #7
 8013f0a:	2500      	movs	r5, #0
 8013f0c:	461c      	mov	r4, r3
 8013f0e:	4606      	mov	r6, r0
 8013f10:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013f14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013f16:	e9cd 7500 	strd	r7, r5, [sp]
 8013f1a:	3204      	adds	r2, #4
 8013f1c:	f7ff fc44 	bl	80137a8 <uxr_prepare_stream_to_write_submessage>
 8013f20:	f080 0201 	eor.w	r2, r0, #1
 8013f24:	b2d2      	uxtb	r2, r2
 8013f26:	75a2      	strb	r2, [r4, #22]
 8013f28:	b112      	cbz	r2, 8013f30 <uxr_prepare_output_stream+0x2c>
 8013f2a:	4628      	mov	r0, r5
 8013f2c:	b007      	add	sp, #28
 8013f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f30:	aa05      	add	r2, sp, #20
 8013f32:	9902      	ldr	r1, [sp, #8]
 8013f34:	4630      	mov	r0, r6
 8013f36:	f7ff fd73 	bl	8013a20 <uxr_init_base_object_request>
 8013f3a:	a905      	add	r1, sp, #20
 8013f3c:	4605      	mov	r5, r0
 8013f3e:	4620      	mov	r0, r4
 8013f40:	f001 f888 	bl	8015054 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013f44:	69a6      	ldr	r6, [r4, #24]
 8013f46:	69e7      	ldr	r7, [r4, #28]
 8013f48:	4620      	mov	r0, r4
 8013f4a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013f4e:	1a52      	subs	r2, r2, r1
 8013f50:	f7fb fb42 	bl	800f5d8 <ucdr_init_buffer>
 8013f54:	4620      	mov	r0, r4
 8013f56:	463a      	mov	r2, r7
 8013f58:	4631      	mov	r1, r6
 8013f5a:	f7fb fb11 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 8013f5e:	4628      	mov	r0, r5
 8013f60:	b007      	add	sp, #28
 8013f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f64 <uxr_prepare_output_stream_fragmented>:
 8013f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f68:	b091      	sub	sp, #68	@ 0x44
 8013f6a:	4605      	mov	r5, r0
 8013f6c:	3008      	adds	r0, #8
 8013f6e:	461e      	mov	r6, r3
 8013f70:	9105      	str	r1, [sp, #20]
 8013f72:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013f76:	9204      	str	r2, [sp, #16]
 8013f78:	f7ff fe8a 	bl	8013c90 <uxr_get_output_reliable_stream>
 8013f7c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	f000 8093 	beq.w	80140ac <uxr_prepare_output_stream_fragmented+0x148>
 8013f86:	4604      	mov	r4, r0
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	f000 808f 	beq.w	80140ac <uxr_prepare_output_stream_fragmented+0x148>
 8013f8e:	f005 ffb9 	bl	8019f04 <get_available_free_slots>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	f000 8085 	beq.w	80140a2 <uxr_prepare_output_stream_fragmented+0x13e>
 8013f98:	8923      	ldrh	r3, [r4, #8]
 8013f9a:	89e7      	ldrh	r7, [r4, #14]
 8013f9c:	6862      	ldr	r2, [r4, #4]
 8013f9e:	fbb7 f9f3 	udiv	r9, r7, r3
 8013fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8013fa6:	fb03 7919 	mls	r9, r3, r9, r7
 8013faa:	6823      	ldr	r3, [r4, #0]
 8013fac:	f1a2 0b04 	sub.w	fp, r2, #4
 8013fb0:	9203      	str	r2, [sp, #12]
 8013fb2:	fa1f f989 	uxth.w	r9, r9
 8013fb6:	fb02 f909 	mul.w	r9, r2, r9
 8013fba:	f109 0904 	add.w	r9, r9, #4
 8013fbe:	4499      	add	r9, r3
 8013fc0:	7b23      	ldrb	r3, [r4, #12]
 8013fc2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013fc6:	4543      	cmp	r3, r8
 8013fc8:	d37c      	bcc.n	80140c4 <uxr_prepare_output_stream_fragmented+0x160>
 8013fca:	f1ab 0a04 	sub.w	sl, fp, #4
 8013fce:	465a      	mov	r2, fp
 8013fd0:	4649      	mov	r1, r9
 8013fd2:	a808      	add	r0, sp, #32
 8013fd4:	ebaa 0a03 	sub.w	sl, sl, r3
 8013fd8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013fda:	f8cd 8000 	str.w	r8, [sp]
 8013fde:	3308      	adds	r3, #8
 8013fe0:	fa1f fa8a 	uxth.w	sl, sl
 8013fe4:	9302      	str	r3, [sp, #8]
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	f7fb fae4 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 8013fec:	9b02      	ldr	r3, [sp, #8]
 8013fee:	4652      	mov	r2, sl
 8013ff0:	210d      	movs	r1, #13
 8013ff2:	455b      	cmp	r3, fp
 8013ff4:	bf34      	ite	cc
 8013ff6:	2302      	movcc	r3, #2
 8013ff8:	2300      	movcs	r3, #0
 8013ffa:	a808      	add	r0, sp, #32
 8013ffc:	f7ff fe80 	bl	8013d00 <uxr_buffer_submessage_header>
 8014000:	8921      	ldrh	r1, [r4, #8]
 8014002:	6863      	ldr	r3, [r4, #4]
 8014004:	4638      	mov	r0, r7
 8014006:	fbb7 f2f1 	udiv	r2, r7, r1
 801400a:	fbb3 f3f1 	udiv	r3, r3, r1
 801400e:	fb01 7212 	mls	r2, r1, r2, r7
 8014012:	2101      	movs	r1, #1
 8014014:	b292      	uxth	r2, r2
 8014016:	fb02 f303 	mul.w	r3, r2, r3
 801401a:	6822      	ldr	r2, [r4, #0]
 801401c:	f842 b003 	str.w	fp, [r2, r3]
 8014020:	f005 ff92 	bl	8019f48 <uxr_seq_num_add>
 8014024:	9b03      	ldr	r3, [sp, #12]
 8014026:	f108 0104 	add.w	r1, r8, #4
 801402a:	4607      	mov	r7, r0
 801402c:	f1a3 0208 	sub.w	r2, r3, #8
 8014030:	4630      	mov	r0, r6
 8014032:	4449      	add	r1, r9
 8014034:	eba2 0208 	sub.w	r2, r2, r8
 8014038:	f7fb face 	bl	800f5d8 <ucdr_init_buffer>
 801403c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801403e:	2107      	movs	r1, #7
 8014040:	81e7      	strh	r7, [r4, #14]
 8014042:	1d1a      	adds	r2, r3, #4
 8014044:	2300      	movs	r3, #0
 8014046:	4630      	mov	r0, r6
 8014048:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801404c:	bf28      	it	cs
 801404e:	461a      	movcs	r2, r3
 8014050:	b292      	uxth	r2, r2
 8014052:	f7ff fe55 	bl	8013d00 <uxr_buffer_submessage_header>
 8014056:	aa07      	add	r2, sp, #28
 8014058:	9904      	ldr	r1, [sp, #16]
 801405a:	4628      	mov	r0, r5
 801405c:	f7ff fce0 	bl	8013a20 <uxr_init_base_object_request>
 8014060:	4604      	mov	r4, r0
 8014062:	b320      	cbz	r0, 80140ae <uxr_prepare_output_stream_fragmented+0x14a>
 8014064:	a907      	add	r1, sp, #28
 8014066:	4630      	mov	r0, r6
 8014068:	f000 fff4 	bl	8015054 <uxr_serialize_WRITE_DATA_Payload_Data>
 801406c:	4630      	mov	r0, r6
 801406e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014072:	1a52      	subs	r2, r2, r1
 8014074:	f7fb fab0 	bl	800f5d8 <ucdr_init_buffer>
 8014078:	9b05      	ldr	r3, [sp, #20]
 801407a:	9a02      	ldr	r2, [sp, #8]
 801407c:	4630      	mov	r0, r6
 801407e:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8014082:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014084:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8014088:	462a      	mov	r2, r5
 801408a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801408e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014090:	4918      	ldr	r1, [pc, #96]	@ (80140f4 <uxr_prepare_output_stream_fragmented+0x190>)
 8014092:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8014096:	f7fb fa73 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 801409a:	4620      	mov	r0, r4
 801409c:	b011      	add	sp, #68	@ 0x44
 801409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80140a4:	4628      	mov	r0, r5
 80140a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80140a8:	4798      	blx	r3
 80140aa:	b920      	cbnz	r0, 80140b6 <uxr_prepare_output_stream_fragmented+0x152>
 80140ac:	2400      	movs	r4, #0
 80140ae:	4620      	mov	r0, r4
 80140b0:	b011      	add	sp, #68	@ 0x44
 80140b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140b6:	4620      	mov	r0, r4
 80140b8:	f005 ff24 	bl	8019f04 <get_available_free_slots>
 80140bc:	2800      	cmp	r0, #0
 80140be:	f47f af6b 	bne.w	8013f98 <uxr_prepare_output_stream_fragmented+0x34>
 80140c2:	e7f3      	b.n	80140ac <uxr_prepare_output_stream_fragmented+0x148>
 80140c4:	4638      	mov	r0, r7
 80140c6:	2101      	movs	r1, #1
 80140c8:	f005 ff3e 	bl	8019f48 <uxr_seq_num_add>
 80140cc:	8922      	ldrh	r2, [r4, #8]
 80140ce:	6863      	ldr	r3, [r4, #4]
 80140d0:	4607      	mov	r7, r0
 80140d2:	fbb3 f9f2 	udiv	r9, r3, r2
 80140d6:	fbb0 f3f2 	udiv	r3, r0, r2
 80140da:	fb02 0313 	mls	r3, r2, r3, r0
 80140de:	b29b      	uxth	r3, r3
 80140e0:	fb03 f909 	mul.w	r9, r3, r9
 80140e4:	6823      	ldr	r3, [r4, #0]
 80140e6:	f109 0904 	add.w	r9, r9, #4
 80140ea:	4499      	add	r9, r3
 80140ec:	7b23      	ldrb	r3, [r4, #12]
 80140ee:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80140f2:	e76a      	b.n	8013fca <uxr_prepare_output_stream_fragmented+0x66>
 80140f4:	08013df1 	.word	0x08013df1

080140f8 <uxr_serialize_message_header>:
 80140f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140fa:	4616      	mov	r6, r2
 80140fc:	b083      	sub	sp, #12
 80140fe:	4604      	mov	r4, r0
 8014100:	460d      	mov	r5, r1
 8014102:	9301      	str	r3, [sp, #4]
 8014104:	9f08      	ldr	r7, [sp, #32]
 8014106:	f7fa f925 	bl	800e354 <ucdr_serialize_uint8_t>
 801410a:	4631      	mov	r1, r6
 801410c:	4620      	mov	r0, r4
 801410e:	f7fa f921 	bl	800e354 <ucdr_serialize_uint8_t>
 8014112:	9a01      	ldr	r2, [sp, #4]
 8014114:	2101      	movs	r1, #1
 8014116:	4620      	mov	r0, r4
 8014118:	f7fa f9c8 	bl	800e4ac <ucdr_serialize_endian_uint16_t>
 801411c:	062b      	lsls	r3, r5, #24
 801411e:	d501      	bpl.n	8014124 <uxr_serialize_message_header+0x2c>
 8014120:	b003      	add	sp, #12
 8014122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014124:	2204      	movs	r2, #4
 8014126:	4639      	mov	r1, r7
 8014128:	4620      	mov	r0, r4
 801412a:	b003      	add	sp, #12
 801412c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014130:	f004 bfc6 	b.w	80190c0 <ucdr_serialize_array_uint8_t>

08014134 <uxr_deserialize_message_header>:
 8014134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014136:	4616      	mov	r6, r2
 8014138:	b083      	sub	sp, #12
 801413a:	4604      	mov	r4, r0
 801413c:	460d      	mov	r5, r1
 801413e:	9301      	str	r3, [sp, #4]
 8014140:	9f08      	ldr	r7, [sp, #32]
 8014142:	f7fa f91d 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014146:	4631      	mov	r1, r6
 8014148:	4620      	mov	r0, r4
 801414a:	f7fa f919 	bl	800e380 <ucdr_deserialize_uint8_t>
 801414e:	9a01      	ldr	r2, [sp, #4]
 8014150:	2101      	movs	r1, #1
 8014152:	4620      	mov	r0, r4
 8014154:	f7fa fa9e 	bl	800e694 <ucdr_deserialize_endian_uint16_t>
 8014158:	f995 3000 	ldrsb.w	r3, [r5]
 801415c:	2b00      	cmp	r3, #0
 801415e:	da01      	bge.n	8014164 <uxr_deserialize_message_header+0x30>
 8014160:	b003      	add	sp, #12
 8014162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014164:	2204      	movs	r2, #4
 8014166:	4639      	mov	r1, r7
 8014168:	4620      	mov	r0, r4
 801416a:	b003      	add	sp, #12
 801416c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014170:	f005 b80a 	b.w	8019188 <ucdr_deserialize_array_uint8_t>

08014174 <uxr_serialize_submessage_header>:
 8014174:	b530      	push	{r4, r5, lr}
 8014176:	4615      	mov	r5, r2
 8014178:	b083      	sub	sp, #12
 801417a:	4604      	mov	r4, r0
 801417c:	9301      	str	r3, [sp, #4]
 801417e:	f7fa f8e9 	bl	800e354 <ucdr_serialize_uint8_t>
 8014182:	4629      	mov	r1, r5
 8014184:	4620      	mov	r0, r4
 8014186:	f7fa f8e5 	bl	800e354 <ucdr_serialize_uint8_t>
 801418a:	9a01      	ldr	r2, [sp, #4]
 801418c:	2101      	movs	r1, #1
 801418e:	4620      	mov	r0, r4
 8014190:	b003      	add	sp, #12
 8014192:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014196:	f7fa b989 	b.w	800e4ac <ucdr_serialize_endian_uint16_t>
 801419a:	bf00      	nop

0801419c <uxr_deserialize_submessage_header>:
 801419c:	b530      	push	{r4, r5, lr}
 801419e:	4615      	mov	r5, r2
 80141a0:	b083      	sub	sp, #12
 80141a2:	4604      	mov	r4, r0
 80141a4:	9301      	str	r3, [sp, #4]
 80141a6:	f7fa f8eb 	bl	800e380 <ucdr_deserialize_uint8_t>
 80141aa:	4629      	mov	r1, r5
 80141ac:	4620      	mov	r0, r4
 80141ae:	f7fa f8e7 	bl	800e380 <ucdr_deserialize_uint8_t>
 80141b2:	9a01      	ldr	r2, [sp, #4]
 80141b4:	2101      	movs	r1, #1
 80141b6:	4620      	mov	r0, r4
 80141b8:	b003      	add	sp, #12
 80141ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141be:	f7fa ba69 	b.w	800e694 <ucdr_deserialize_endian_uint16_t>
 80141c2:	bf00      	nop

080141c4 <uxr_serialize_CLIENT_Representation>:
 80141c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141c8:	2204      	movs	r2, #4
 80141ca:	460e      	mov	r6, r1
 80141cc:	4605      	mov	r5, r0
 80141ce:	f004 ff77 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 80141d2:	4607      	mov	r7, r0
 80141d4:	2202      	movs	r2, #2
 80141d6:	1d31      	adds	r1, r6, #4
 80141d8:	4628      	mov	r0, r5
 80141da:	f004 ff71 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 80141de:	4038      	ands	r0, r7
 80141e0:	2202      	movs	r2, #2
 80141e2:	1db1      	adds	r1, r6, #6
 80141e4:	b2c7      	uxtb	r7, r0
 80141e6:	4628      	mov	r0, r5
 80141e8:	f004 ff6a 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 80141ec:	2204      	movs	r2, #4
 80141ee:	4007      	ands	r7, r0
 80141f0:	f106 0108 	add.w	r1, r6, #8
 80141f4:	4628      	mov	r0, r5
 80141f6:	f004 ff63 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 80141fa:	4007      	ands	r7, r0
 80141fc:	7b31      	ldrb	r1, [r6, #12]
 80141fe:	4628      	mov	r0, r5
 8014200:	f7fa f8a8 	bl	800e354 <ucdr_serialize_uint8_t>
 8014204:	7b71      	ldrb	r1, [r6, #13]
 8014206:	4007      	ands	r7, r0
 8014208:	4628      	mov	r0, r5
 801420a:	f7fa f875 	bl	800e2f8 <ucdr_serialize_bool>
 801420e:	7b73      	ldrb	r3, [r6, #13]
 8014210:	ea07 0800 	and.w	r8, r7, r0
 8014214:	b93b      	cbnz	r3, 8014226 <uxr_serialize_CLIENT_Representation+0x62>
 8014216:	8bb1      	ldrh	r1, [r6, #28]
 8014218:	4628      	mov	r0, r5
 801421a:	f7fa f8c7 	bl	800e3ac <ucdr_serialize_uint16_t>
 801421e:	ea08 0000 	and.w	r0, r8, r0
 8014222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014226:	6931      	ldr	r1, [r6, #16]
 8014228:	4628      	mov	r0, r5
 801422a:	f7fa faa9 	bl	800e780 <ucdr_serialize_uint32_t>
 801422e:	6933      	ldr	r3, [r6, #16]
 8014230:	b1e3      	cbz	r3, 801426c <uxr_serialize_CLIENT_Representation+0xa8>
 8014232:	b1c0      	cbz	r0, 8014266 <uxr_serialize_CLIENT_Representation+0xa2>
 8014234:	4637      	mov	r7, r6
 8014236:	f04f 0900 	mov.w	r9, #0
 801423a:	e000      	b.n	801423e <uxr_serialize_CLIENT_Representation+0x7a>
 801423c:	b19c      	cbz	r4, 8014266 <uxr_serialize_CLIENT_Representation+0xa2>
 801423e:	6979      	ldr	r1, [r7, #20]
 8014240:	4628      	mov	r0, r5
 8014242:	f005 f861 	bl	8019308 <ucdr_serialize_string>
 8014246:	69b9      	ldr	r1, [r7, #24]
 8014248:	4604      	mov	r4, r0
 801424a:	4628      	mov	r0, r5
 801424c:	f005 f85c 	bl	8019308 <ucdr_serialize_string>
 8014250:	f109 0901 	add.w	r9, r9, #1
 8014254:	6933      	ldr	r3, [r6, #16]
 8014256:	4004      	ands	r4, r0
 8014258:	3708      	adds	r7, #8
 801425a:	4599      	cmp	r9, r3
 801425c:	b2e4      	uxtb	r4, r4
 801425e:	d3ed      	bcc.n	801423c <uxr_serialize_CLIENT_Representation+0x78>
 8014260:	ea08 0804 	and.w	r8, r8, r4
 8014264:	e7d7      	b.n	8014216 <uxr_serialize_CLIENT_Representation+0x52>
 8014266:	f04f 0800 	mov.w	r8, #0
 801426a:	e7d4      	b.n	8014216 <uxr_serialize_CLIENT_Representation+0x52>
 801426c:	ea08 0800 	and.w	r8, r8, r0
 8014270:	e7d1      	b.n	8014216 <uxr_serialize_CLIENT_Representation+0x52>
 8014272:	bf00      	nop

08014274 <uxr_deserialize_CLIENT_Representation>:
 8014274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014278:	2204      	movs	r2, #4
 801427a:	460c      	mov	r4, r1
 801427c:	4605      	mov	r5, r0
 801427e:	f004 ff83 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014282:	4607      	mov	r7, r0
 8014284:	2202      	movs	r2, #2
 8014286:	1d21      	adds	r1, r4, #4
 8014288:	4628      	mov	r0, r5
 801428a:	f004 ff7d 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 801428e:	4038      	ands	r0, r7
 8014290:	2202      	movs	r2, #2
 8014292:	1da1      	adds	r1, r4, #6
 8014294:	b2c6      	uxtb	r6, r0
 8014296:	4628      	mov	r0, r5
 8014298:	f004 ff76 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 801429c:	2204      	movs	r2, #4
 801429e:	4006      	ands	r6, r0
 80142a0:	f104 0108 	add.w	r1, r4, #8
 80142a4:	4628      	mov	r0, r5
 80142a6:	f004 ff6f 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 80142aa:	4006      	ands	r6, r0
 80142ac:	f104 010c 	add.w	r1, r4, #12
 80142b0:	4628      	mov	r0, r5
 80142b2:	f7fa f865 	bl	800e380 <ucdr_deserialize_uint8_t>
 80142b6:	f104 010d 	add.w	r1, r4, #13
 80142ba:	ea06 0700 	and.w	r7, r6, r0
 80142be:	4628      	mov	r0, r5
 80142c0:	f7fa f830 	bl	800e324 <ucdr_deserialize_bool>
 80142c4:	7b63      	ldrb	r3, [r4, #13]
 80142c6:	4007      	ands	r7, r0
 80142c8:	b93b      	cbnz	r3, 80142da <uxr_deserialize_CLIENT_Representation+0x66>
 80142ca:	f104 011c 	add.w	r1, r4, #28
 80142ce:	4628      	mov	r0, r5
 80142d0:	f7fa f96c 	bl	800e5ac <ucdr_deserialize_uint16_t>
 80142d4:	4038      	ands	r0, r7
 80142d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142da:	f104 0110 	add.w	r1, r4, #16
 80142de:	4628      	mov	r0, r5
 80142e0:	f7fa fb7e 	bl	800e9e0 <ucdr_deserialize_uint32_t>
 80142e4:	6923      	ldr	r3, [r4, #16]
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	d903      	bls.n	80142f2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80142ea:	2301      	movs	r3, #1
 80142ec:	2700      	movs	r7, #0
 80142ee:	75ab      	strb	r3, [r5, #22]
 80142f0:	e7eb      	b.n	80142ca <uxr_deserialize_CLIENT_Representation+0x56>
 80142f2:	b30b      	cbz	r3, 8014338 <uxr_deserialize_CLIENT_Representation+0xc4>
 80142f4:	b1f0      	cbz	r0, 8014334 <uxr_deserialize_CLIENT_Representation+0xc0>
 80142f6:	46a0      	mov	r8, r4
 80142f8:	f04f 0900 	mov.w	r9, #0
 80142fc:	e000      	b.n	8014300 <uxr_deserialize_CLIENT_Representation+0x8c>
 80142fe:	b1ce      	cbz	r6, 8014334 <uxr_deserialize_CLIENT_Representation+0xc0>
 8014300:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014304:	f108 0808 	add.w	r8, r8, #8
 8014308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801430c:	4628      	mov	r0, r5
 801430e:	f005 f80b 	bl	8019328 <ucdr_deserialize_string>
 8014312:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014316:	4606      	mov	r6, r0
 8014318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801431c:	4628      	mov	r0, r5
 801431e:	f109 0901 	add.w	r9, r9, #1
 8014322:	f005 f801 	bl	8019328 <ucdr_deserialize_string>
 8014326:	6923      	ldr	r3, [r4, #16]
 8014328:	4006      	ands	r6, r0
 801432a:	4599      	cmp	r9, r3
 801432c:	b2f6      	uxtb	r6, r6
 801432e:	d3e6      	bcc.n	80142fe <uxr_deserialize_CLIENT_Representation+0x8a>
 8014330:	4037      	ands	r7, r6
 8014332:	e7ca      	b.n	80142ca <uxr_deserialize_CLIENT_Representation+0x56>
 8014334:	2700      	movs	r7, #0
 8014336:	e7c8      	b.n	80142ca <uxr_deserialize_CLIENT_Representation+0x56>
 8014338:	4007      	ands	r7, r0
 801433a:	e7c6      	b.n	80142ca <uxr_deserialize_CLIENT_Representation+0x56>

0801433c <uxr_serialize_AGENT_Representation>:
 801433c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014340:	2204      	movs	r2, #4
 8014342:	460f      	mov	r7, r1
 8014344:	4605      	mov	r5, r0
 8014346:	f004 febb 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 801434a:	4604      	mov	r4, r0
 801434c:	2202      	movs	r2, #2
 801434e:	1d39      	adds	r1, r7, #4
 8014350:	4628      	mov	r0, r5
 8014352:	f004 feb5 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014356:	4020      	ands	r0, r4
 8014358:	2202      	movs	r2, #2
 801435a:	1db9      	adds	r1, r7, #6
 801435c:	b2c4      	uxtb	r4, r0
 801435e:	4628      	mov	r0, r5
 8014360:	f004 feae 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014364:	7a39      	ldrb	r1, [r7, #8]
 8014366:	4004      	ands	r4, r0
 8014368:	4628      	mov	r0, r5
 801436a:	f7f9 ffc5 	bl	800e2f8 <ucdr_serialize_bool>
 801436e:	7a3b      	ldrb	r3, [r7, #8]
 8014370:	ea00 0804 	and.w	r8, r0, r4
 8014374:	b913      	cbnz	r3, 801437c <uxr_serialize_AGENT_Representation+0x40>
 8014376:	4640      	mov	r0, r8
 8014378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801437c:	68f9      	ldr	r1, [r7, #12]
 801437e:	4628      	mov	r0, r5
 8014380:	f7fa f9fe 	bl	800e780 <ucdr_serialize_uint32_t>
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	b303      	cbz	r3, 80143ca <uxr_serialize_AGENT_Representation+0x8e>
 8014388:	b1d0      	cbz	r0, 80143c0 <uxr_serialize_AGENT_Representation+0x84>
 801438a:	463e      	mov	r6, r7
 801438c:	f04f 0900 	mov.w	r9, #0
 8014390:	e000      	b.n	8014394 <uxr_serialize_AGENT_Representation+0x58>
 8014392:	b1ac      	cbz	r4, 80143c0 <uxr_serialize_AGENT_Representation+0x84>
 8014394:	6931      	ldr	r1, [r6, #16]
 8014396:	4628      	mov	r0, r5
 8014398:	f004 ffb6 	bl	8019308 <ucdr_serialize_string>
 801439c:	6971      	ldr	r1, [r6, #20]
 801439e:	4604      	mov	r4, r0
 80143a0:	4628      	mov	r0, r5
 80143a2:	f004 ffb1 	bl	8019308 <ucdr_serialize_string>
 80143a6:	f109 0901 	add.w	r9, r9, #1
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	4004      	ands	r4, r0
 80143ae:	3608      	adds	r6, #8
 80143b0:	4599      	cmp	r9, r3
 80143b2:	b2e4      	uxtb	r4, r4
 80143b4:	d3ed      	bcc.n	8014392 <uxr_serialize_AGENT_Representation+0x56>
 80143b6:	ea08 0804 	and.w	r8, r8, r4
 80143ba:	4640      	mov	r0, r8
 80143bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143c0:	f04f 0800 	mov.w	r8, #0
 80143c4:	4640      	mov	r0, r8
 80143c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143ca:	ea08 0800 	and.w	r8, r8, r0
 80143ce:	e7d2      	b.n	8014376 <uxr_serialize_AGENT_Representation+0x3a>

080143d0 <uxr_serialize_DATAWRITER_Representation>:
 80143d0:	b570      	push	{r4, r5, r6, lr}
 80143d2:	460d      	mov	r5, r1
 80143d4:	7809      	ldrb	r1, [r1, #0]
 80143d6:	4606      	mov	r6, r0
 80143d8:	f7f9 ffbc 	bl	800e354 <ucdr_serialize_uint8_t>
 80143dc:	4604      	mov	r4, r0
 80143de:	b130      	cbz	r0, 80143ee <uxr_serialize_DATAWRITER_Representation+0x1e>
 80143e0:	782b      	ldrb	r3, [r5, #0]
 80143e2:	2b02      	cmp	r3, #2
 80143e4:	d00c      	beq.n	8014400 <uxr_serialize_DATAWRITER_Representation+0x30>
 80143e6:	2b03      	cmp	r3, #3
 80143e8:	d010      	beq.n	801440c <uxr_serialize_DATAWRITER_Representation+0x3c>
 80143ea:	2b01      	cmp	r3, #1
 80143ec:	d008      	beq.n	8014400 <uxr_serialize_DATAWRITER_Representation+0x30>
 80143ee:	2202      	movs	r2, #2
 80143f0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80143f4:	4630      	mov	r0, r6
 80143f6:	f004 fe63 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 80143fa:	4020      	ands	r0, r4
 80143fc:	b2c0      	uxtb	r0, r0
 80143fe:	bd70      	pop	{r4, r5, r6, pc}
 8014400:	6869      	ldr	r1, [r5, #4]
 8014402:	4630      	mov	r0, r6
 8014404:	f004 ff80 	bl	8019308 <ucdr_serialize_string>
 8014408:	4604      	mov	r4, r0
 801440a:	e7f0      	b.n	80143ee <uxr_serialize_DATAWRITER_Representation+0x1e>
 801440c:	4629      	mov	r1, r5
 801440e:	4630      	mov	r0, r6
 8014410:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8014414:	3104      	adds	r1, #4
 8014416:	f004 ff4b 	bl	80192b0 <ucdr_serialize_sequence_uint8_t>
 801441a:	4604      	mov	r4, r0
 801441c:	e7e7      	b.n	80143ee <uxr_serialize_DATAWRITER_Representation+0x1e>
 801441e:	bf00      	nop

08014420 <uxr_serialize_ObjectVariant.part.0>:
 8014420:	b570      	push	{r4, r5, r6, lr}
 8014422:	780b      	ldrb	r3, [r1, #0]
 8014424:	460c      	mov	r4, r1
 8014426:	4605      	mov	r5, r0
 8014428:	3b01      	subs	r3, #1
 801442a:	2b0d      	cmp	r3, #13
 801442c:	d854      	bhi.n	80144d8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801442e:	e8df f003 	tbb	[pc, r3]
 8014432:	0730      	.short	0x0730
 8014434:	07071b1b 	.word	0x07071b1b
 8014438:	0c530707 	.word	0x0c530707
 801443c:	494e0c0c 	.word	0x494e0c0c
 8014440:	3104      	adds	r1, #4
 8014442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014446:	f7ff bfc3 	b.w	80143d0 <uxr_serialize_DATAWRITER_Representation>
 801444a:	7909      	ldrb	r1, [r1, #4]
 801444c:	f7f9 ff82 	bl	800e354 <ucdr_serialize_uint8_t>
 8014450:	b1e8      	cbz	r0, 801448e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8014452:	7923      	ldrb	r3, [r4, #4]
 8014454:	2b01      	cmp	r3, #1
 8014456:	d001      	beq.n	801445c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8014458:	2b02      	cmp	r3, #2
 801445a:	d13d      	bne.n	80144d8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801445c:	68a1      	ldr	r1, [r4, #8]
 801445e:	4628      	mov	r0, r5
 8014460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014464:	f004 bf50 	b.w	8019308 <ucdr_serialize_string>
 8014468:	7909      	ldrb	r1, [r1, #4]
 801446a:	f7f9 ff73 	bl	800e354 <ucdr_serialize_uint8_t>
 801446e:	4606      	mov	r6, r0
 8014470:	b120      	cbz	r0, 801447c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014472:	7923      	ldrb	r3, [r4, #4]
 8014474:	2b02      	cmp	r3, #2
 8014476:	d039      	beq.n	80144ec <uxr_serialize_ObjectVariant.part.0+0xcc>
 8014478:	2b03      	cmp	r3, #3
 801447a:	d02f      	beq.n	80144dc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801447c:	2202      	movs	r2, #2
 801447e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8014482:	4628      	mov	r0, r5
 8014484:	f004 fe1c 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014488:	4030      	ands	r0, r6
 801448a:	b2c0      	uxtb	r0, r0
 801448c:	bd70      	pop	{r4, r5, r6, pc}
 801448e:	2000      	movs	r0, #0
 8014490:	bd70      	pop	{r4, r5, r6, pc}
 8014492:	7909      	ldrb	r1, [r1, #4]
 8014494:	f7f9 ff5e 	bl	800e354 <ucdr_serialize_uint8_t>
 8014498:	4606      	mov	r6, r0
 801449a:	b158      	cbz	r0, 80144b4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801449c:	7923      	ldrb	r3, [r4, #4]
 801449e:	2b02      	cmp	r3, #2
 80144a0:	d003      	beq.n	80144aa <uxr_serialize_ObjectVariant.part.0+0x8a>
 80144a2:	2b03      	cmp	r3, #3
 80144a4:	d028      	beq.n	80144f8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80144a6:	2b01      	cmp	r3, #1
 80144a8:	d104      	bne.n	80144b4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80144aa:	68a1      	ldr	r1, [r4, #8]
 80144ac:	4628      	mov	r0, r5
 80144ae:	f004 ff2b 	bl	8019308 <ucdr_serialize_string>
 80144b2:	4606      	mov	r6, r0
 80144b4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80144b8:	4628      	mov	r0, r5
 80144ba:	f7fa fc87 	bl	800edcc <ucdr_serialize_int16_t>
 80144be:	4030      	ands	r0, r6
 80144c0:	b2c0      	uxtb	r0, r0
 80144c2:	bd70      	pop	{r4, r5, r6, pc}
 80144c4:	3104      	adds	r1, #4
 80144c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144ca:	f7ff be7b 	b.w	80141c4 <uxr_serialize_CLIENT_Representation>
 80144ce:	3104      	adds	r1, #4
 80144d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144d4:	f7ff bf32 	b.w	801433c <uxr_serialize_AGENT_Representation>
 80144d8:	2001      	movs	r0, #1
 80144da:	bd70      	pop	{r4, r5, r6, pc}
 80144dc:	68a2      	ldr	r2, [r4, #8]
 80144de:	f104 010c 	add.w	r1, r4, #12
 80144e2:	4628      	mov	r0, r5
 80144e4:	f004 fee4 	bl	80192b0 <ucdr_serialize_sequence_uint8_t>
 80144e8:	4606      	mov	r6, r0
 80144ea:	e7c7      	b.n	801447c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80144ec:	68a1      	ldr	r1, [r4, #8]
 80144ee:	4628      	mov	r0, r5
 80144f0:	f004 ff0a 	bl	8019308 <ucdr_serialize_string>
 80144f4:	4606      	mov	r6, r0
 80144f6:	e7c1      	b.n	801447c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80144f8:	68a2      	ldr	r2, [r4, #8]
 80144fa:	f104 010c 	add.w	r1, r4, #12
 80144fe:	4628      	mov	r0, r5
 8014500:	f004 fed6 	bl	80192b0 <ucdr_serialize_sequence_uint8_t>
 8014504:	4606      	mov	r6, r0
 8014506:	e7d5      	b.n	80144b4 <uxr_serialize_ObjectVariant.part.0+0x94>

08014508 <uxr_deserialize_DATAWRITER_Representation>:
 8014508:	b570      	push	{r4, r5, r6, lr}
 801450a:	4606      	mov	r6, r0
 801450c:	460d      	mov	r5, r1
 801450e:	f7f9 ff37 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014512:	4604      	mov	r4, r0
 8014514:	b130      	cbz	r0, 8014524 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014516:	782b      	ldrb	r3, [r5, #0]
 8014518:	2b02      	cmp	r3, #2
 801451a:	d00c      	beq.n	8014536 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801451c:	2b03      	cmp	r3, #3
 801451e:	d012      	beq.n	8014546 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014520:	2b01      	cmp	r3, #1
 8014522:	d008      	beq.n	8014536 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014524:	2202      	movs	r2, #2
 8014526:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801452a:	4630      	mov	r0, r6
 801452c:	f004 fe2c 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014530:	4020      	ands	r0, r4
 8014532:	b2c0      	uxtb	r0, r0
 8014534:	bd70      	pop	{r4, r5, r6, pc}
 8014536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801453a:	6869      	ldr	r1, [r5, #4]
 801453c:	4630      	mov	r0, r6
 801453e:	f004 fef3 	bl	8019328 <ucdr_deserialize_string>
 8014542:	4604      	mov	r4, r0
 8014544:	e7ee      	b.n	8014524 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014546:	1d2b      	adds	r3, r5, #4
 8014548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801454c:	f105 0108 	add.w	r1, r5, #8
 8014550:	4630      	mov	r0, r6
 8014552:	f004 febf 	bl	80192d4 <ucdr_deserialize_sequence_uint8_t>
 8014556:	4604      	mov	r4, r0
 8014558:	e7e4      	b.n	8014524 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801455a:	bf00      	nop

0801455c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801455c:	b570      	push	{r4, r5, r6, lr}
 801455e:	460d      	mov	r5, r1
 8014560:	7809      	ldrb	r1, [r1, #0]
 8014562:	4606      	mov	r6, r0
 8014564:	f7f9 fec8 	bl	800e2f8 <ucdr_serialize_bool>
 8014568:	782b      	ldrb	r3, [r5, #0]
 801456a:	4604      	mov	r4, r0
 801456c:	b94b      	cbnz	r3, 8014582 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801456e:	7a29      	ldrb	r1, [r5, #8]
 8014570:	4630      	mov	r0, r6
 8014572:	f7f9 fec1 	bl	800e2f8 <ucdr_serialize_bool>
 8014576:	7a2b      	ldrb	r3, [r5, #8]
 8014578:	4004      	ands	r4, r0
 801457a:	b2e4      	uxtb	r4, r4
 801457c:	b943      	cbnz	r3, 8014590 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801457e:	4620      	mov	r0, r4
 8014580:	bd70      	pop	{r4, r5, r6, pc}
 8014582:	6869      	ldr	r1, [r5, #4]
 8014584:	4630      	mov	r0, r6
 8014586:	f004 febf 	bl	8019308 <ucdr_serialize_string>
 801458a:	4004      	ands	r4, r0
 801458c:	b2e4      	uxtb	r4, r4
 801458e:	e7ee      	b.n	801456e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014590:	68e9      	ldr	r1, [r5, #12]
 8014592:	4630      	mov	r0, r6
 8014594:	f004 feb8 	bl	8019308 <ucdr_serialize_string>
 8014598:	4004      	ands	r4, r0
 801459a:	4620      	mov	r0, r4
 801459c:	bd70      	pop	{r4, r5, r6, pc}
 801459e:	bf00      	nop

080145a0 <uxr_serialize_OBJK_Topic_Binary>:
 80145a0:	b570      	push	{r4, r5, r6, lr}
 80145a2:	460d      	mov	r5, r1
 80145a4:	4606      	mov	r6, r0
 80145a6:	6809      	ldr	r1, [r1, #0]
 80145a8:	f004 feae 	bl	8019308 <ucdr_serialize_string>
 80145ac:	4604      	mov	r4, r0
 80145ae:	7929      	ldrb	r1, [r5, #4]
 80145b0:	4630      	mov	r0, r6
 80145b2:	f7f9 fea1 	bl	800e2f8 <ucdr_serialize_bool>
 80145b6:	792b      	ldrb	r3, [r5, #4]
 80145b8:	4004      	ands	r4, r0
 80145ba:	b2e4      	uxtb	r4, r4
 80145bc:	b943      	cbnz	r3, 80145d0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80145be:	7b29      	ldrb	r1, [r5, #12]
 80145c0:	4630      	mov	r0, r6
 80145c2:	f7f9 fe99 	bl	800e2f8 <ucdr_serialize_bool>
 80145c6:	7b2b      	ldrb	r3, [r5, #12]
 80145c8:	4004      	ands	r4, r0
 80145ca:	b93b      	cbnz	r3, 80145dc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80145cc:	4620      	mov	r0, r4
 80145ce:	bd70      	pop	{r4, r5, r6, pc}
 80145d0:	68a9      	ldr	r1, [r5, #8]
 80145d2:	4630      	mov	r0, r6
 80145d4:	f004 fe98 	bl	8019308 <ucdr_serialize_string>
 80145d8:	4004      	ands	r4, r0
 80145da:	e7f0      	b.n	80145be <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80145dc:	6929      	ldr	r1, [r5, #16]
 80145de:	4630      	mov	r0, r6
 80145e0:	f004 fe92 	bl	8019308 <ucdr_serialize_string>
 80145e4:	4004      	ands	r4, r0
 80145e6:	b2e4      	uxtb	r4, r4
 80145e8:	4620      	mov	r0, r4
 80145ea:	bd70      	pop	{r4, r5, r6, pc}

080145ec <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80145ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f0:	460c      	mov	r4, r1
 80145f2:	7809      	ldrb	r1, [r1, #0]
 80145f4:	4606      	mov	r6, r0
 80145f6:	f7f9 fe7f 	bl	800e2f8 <ucdr_serialize_bool>
 80145fa:	7823      	ldrb	r3, [r4, #0]
 80145fc:	4605      	mov	r5, r0
 80145fe:	b96b      	cbnz	r3, 801461c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014600:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014604:	4630      	mov	r0, r6
 8014606:	f7f9 fe77 	bl	800e2f8 <ucdr_serialize_bool>
 801460a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801460e:	4005      	ands	r5, r0
 8014610:	b2ed      	uxtb	r5, r5
 8014612:	2b00      	cmp	r3, #0
 8014614:	d169      	bne.n	80146ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8014616:	4628      	mov	r0, r5
 8014618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801461c:	6861      	ldr	r1, [r4, #4]
 801461e:	4630      	mov	r0, r6
 8014620:	f7fa f8ae 	bl	800e780 <ucdr_serialize_uint32_t>
 8014624:	6863      	ldr	r3, [r4, #4]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d06b      	beq.n	8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801462a:	2800      	cmp	r0, #0
 801462c:	d067      	beq.n	80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801462e:	68a1      	ldr	r1, [r4, #8]
 8014630:	4630      	mov	r0, r6
 8014632:	f004 fe69 	bl	8019308 <ucdr_serialize_string>
 8014636:	6863      	ldr	r3, [r4, #4]
 8014638:	2b01      	cmp	r3, #1
 801463a:	d953      	bls.n	80146e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801463c:	2800      	cmp	r0, #0
 801463e:	d05e      	beq.n	80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014640:	68e1      	ldr	r1, [r4, #12]
 8014642:	4630      	mov	r0, r6
 8014644:	f004 fe60 	bl	8019308 <ucdr_serialize_string>
 8014648:	6863      	ldr	r3, [r4, #4]
 801464a:	2b02      	cmp	r3, #2
 801464c:	d94a      	bls.n	80146e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801464e:	2800      	cmp	r0, #0
 8014650:	d055      	beq.n	80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014652:	6921      	ldr	r1, [r4, #16]
 8014654:	4630      	mov	r0, r6
 8014656:	f004 fe57 	bl	8019308 <ucdr_serialize_string>
 801465a:	6863      	ldr	r3, [r4, #4]
 801465c:	2b03      	cmp	r3, #3
 801465e:	d941      	bls.n	80146e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014660:	2800      	cmp	r0, #0
 8014662:	d04c      	beq.n	80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014664:	6961      	ldr	r1, [r4, #20]
 8014666:	4630      	mov	r0, r6
 8014668:	f004 fe4e 	bl	8019308 <ucdr_serialize_string>
 801466c:	6863      	ldr	r3, [r4, #4]
 801466e:	2b04      	cmp	r3, #4
 8014670:	d938      	bls.n	80146e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014672:	2800      	cmp	r0, #0
 8014674:	d043      	beq.n	80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014676:	69a1      	ldr	r1, [r4, #24]
 8014678:	4630      	mov	r0, r6
 801467a:	f004 fe45 	bl	8019308 <ucdr_serialize_string>
 801467e:	6863      	ldr	r3, [r4, #4]
 8014680:	2b05      	cmp	r3, #5
 8014682:	d92f      	bls.n	80146e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014684:	2800      	cmp	r0, #0
 8014686:	d03a      	beq.n	80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014688:	69e1      	ldr	r1, [r4, #28]
 801468a:	4630      	mov	r0, r6
 801468c:	f004 fe3c 	bl	8019308 <ucdr_serialize_string>
 8014690:	6863      	ldr	r3, [r4, #4]
 8014692:	2b06      	cmp	r3, #6
 8014694:	d926      	bls.n	80146e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014696:	b390      	cbz	r0, 80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014698:	6a21      	ldr	r1, [r4, #32]
 801469a:	4630      	mov	r0, r6
 801469c:	f004 fe34 	bl	8019308 <ucdr_serialize_string>
 80146a0:	6863      	ldr	r3, [r4, #4]
 80146a2:	2b07      	cmp	r3, #7
 80146a4:	d91e      	bls.n	80146e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80146a6:	b350      	cbz	r0, 80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80146a8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80146aa:	4630      	mov	r0, r6
 80146ac:	f004 fe2c 	bl	8019308 <ucdr_serialize_string>
 80146b0:	6863      	ldr	r3, [r4, #4]
 80146b2:	2b08      	cmp	r3, #8
 80146b4:	d916      	bls.n	80146e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80146b6:	b310      	cbz	r0, 80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80146b8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80146ba:	4630      	mov	r0, r6
 80146bc:	f004 fe24 	bl	8019308 <ucdr_serialize_string>
 80146c0:	6863      	ldr	r3, [r4, #4]
 80146c2:	2b09      	cmp	r3, #9
 80146c4:	d90e      	bls.n	80146e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80146c6:	b1d0      	cbz	r0, 80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80146c8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80146cc:	2709      	movs	r7, #9
 80146ce:	e000      	b.n	80146d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80146d0:	b1a8      	cbz	r0, 80146fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80146d2:	f858 1b04 	ldr.w	r1, [r8], #4
 80146d6:	4630      	mov	r0, r6
 80146d8:	f004 fe16 	bl	8019308 <ucdr_serialize_string>
 80146dc:	3701      	adds	r7, #1
 80146de:	6862      	ldr	r2, [r4, #4]
 80146e0:	4297      	cmp	r7, r2
 80146e2:	d3f5      	bcc.n	80146d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80146e4:	4005      	ands	r5, r0
 80146e6:	b2ed      	uxtb	r5, r5
 80146e8:	e78a      	b.n	8014600 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80146ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80146ec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80146f0:	4630      	mov	r0, r6
 80146f2:	f004 fddd 	bl	80192b0 <ucdr_serialize_sequence_uint8_t>
 80146f6:	4005      	ands	r5, r0
 80146f8:	4628      	mov	r0, r5
 80146fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146fe:	2500      	movs	r5, #0
 8014700:	e77e      	b.n	8014600 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014702:	4028      	ands	r0, r5
 8014704:	b2c5      	uxtb	r5, r0
 8014706:	e77b      	b.n	8014600 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014708 <uxr_serialize_OBJK_Publisher_Binary>:
 8014708:	b570      	push	{r4, r5, r6, lr}
 801470a:	460d      	mov	r5, r1
 801470c:	7809      	ldrb	r1, [r1, #0]
 801470e:	4606      	mov	r6, r0
 8014710:	f7f9 fdf2 	bl	800e2f8 <ucdr_serialize_bool>
 8014714:	782b      	ldrb	r3, [r5, #0]
 8014716:	4604      	mov	r4, r0
 8014718:	b94b      	cbnz	r3, 801472e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801471a:	7a29      	ldrb	r1, [r5, #8]
 801471c:	4630      	mov	r0, r6
 801471e:	f7f9 fdeb 	bl	800e2f8 <ucdr_serialize_bool>
 8014722:	7a2b      	ldrb	r3, [r5, #8]
 8014724:	4004      	ands	r4, r0
 8014726:	b2e4      	uxtb	r4, r4
 8014728:	b943      	cbnz	r3, 801473c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801472a:	4620      	mov	r0, r4
 801472c:	bd70      	pop	{r4, r5, r6, pc}
 801472e:	6869      	ldr	r1, [r5, #4]
 8014730:	4630      	mov	r0, r6
 8014732:	f004 fde9 	bl	8019308 <ucdr_serialize_string>
 8014736:	4004      	ands	r4, r0
 8014738:	b2e4      	uxtb	r4, r4
 801473a:	e7ee      	b.n	801471a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801473c:	f105 010c 	add.w	r1, r5, #12
 8014740:	4630      	mov	r0, r6
 8014742:	f7ff ff53 	bl	80145ec <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8014746:	4004      	ands	r4, r0
 8014748:	4620      	mov	r0, r4
 801474a:	bd70      	pop	{r4, r5, r6, pc}

0801474c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014750:	460c      	mov	r4, r1
 8014752:	7809      	ldrb	r1, [r1, #0]
 8014754:	4606      	mov	r6, r0
 8014756:	f7f9 fdcf 	bl	800e2f8 <ucdr_serialize_bool>
 801475a:	7823      	ldrb	r3, [r4, #0]
 801475c:	4605      	mov	r5, r0
 801475e:	b96b      	cbnz	r3, 801477c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014760:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014764:	4630      	mov	r0, r6
 8014766:	f7f9 fdc7 	bl	800e2f8 <ucdr_serialize_bool>
 801476a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801476e:	4005      	ands	r5, r0
 8014770:	b2ed      	uxtb	r5, r5
 8014772:	2b00      	cmp	r3, #0
 8014774:	d169      	bne.n	801484a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8014776:	4628      	mov	r0, r5
 8014778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801477c:	6861      	ldr	r1, [r4, #4]
 801477e:	4630      	mov	r0, r6
 8014780:	f7f9 fffe 	bl	800e780 <ucdr_serialize_uint32_t>
 8014784:	6863      	ldr	r3, [r4, #4]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d06b      	beq.n	8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801478a:	2800      	cmp	r0, #0
 801478c:	d067      	beq.n	801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801478e:	68a1      	ldr	r1, [r4, #8]
 8014790:	4630      	mov	r0, r6
 8014792:	f004 fdb9 	bl	8019308 <ucdr_serialize_string>
 8014796:	6863      	ldr	r3, [r4, #4]
 8014798:	2b01      	cmp	r3, #1
 801479a:	d953      	bls.n	8014844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801479c:	2800      	cmp	r0, #0
 801479e:	d05e      	beq.n	801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147a0:	68e1      	ldr	r1, [r4, #12]
 80147a2:	4630      	mov	r0, r6
 80147a4:	f004 fdb0 	bl	8019308 <ucdr_serialize_string>
 80147a8:	6863      	ldr	r3, [r4, #4]
 80147aa:	2b02      	cmp	r3, #2
 80147ac:	d94a      	bls.n	8014844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147ae:	2800      	cmp	r0, #0
 80147b0:	d055      	beq.n	801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147b2:	6921      	ldr	r1, [r4, #16]
 80147b4:	4630      	mov	r0, r6
 80147b6:	f004 fda7 	bl	8019308 <ucdr_serialize_string>
 80147ba:	6863      	ldr	r3, [r4, #4]
 80147bc:	2b03      	cmp	r3, #3
 80147be:	d941      	bls.n	8014844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	d04c      	beq.n	801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147c4:	6961      	ldr	r1, [r4, #20]
 80147c6:	4630      	mov	r0, r6
 80147c8:	f004 fd9e 	bl	8019308 <ucdr_serialize_string>
 80147cc:	6863      	ldr	r3, [r4, #4]
 80147ce:	2b04      	cmp	r3, #4
 80147d0:	d938      	bls.n	8014844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147d2:	2800      	cmp	r0, #0
 80147d4:	d043      	beq.n	801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147d6:	69a1      	ldr	r1, [r4, #24]
 80147d8:	4630      	mov	r0, r6
 80147da:	f004 fd95 	bl	8019308 <ucdr_serialize_string>
 80147de:	6863      	ldr	r3, [r4, #4]
 80147e0:	2b05      	cmp	r3, #5
 80147e2:	d92f      	bls.n	8014844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147e4:	2800      	cmp	r0, #0
 80147e6:	d03a      	beq.n	801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147e8:	69e1      	ldr	r1, [r4, #28]
 80147ea:	4630      	mov	r0, r6
 80147ec:	f004 fd8c 	bl	8019308 <ucdr_serialize_string>
 80147f0:	6863      	ldr	r3, [r4, #4]
 80147f2:	2b06      	cmp	r3, #6
 80147f4:	d926      	bls.n	8014844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147f6:	b390      	cbz	r0, 801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147f8:	6a21      	ldr	r1, [r4, #32]
 80147fa:	4630      	mov	r0, r6
 80147fc:	f004 fd84 	bl	8019308 <ucdr_serialize_string>
 8014800:	6863      	ldr	r3, [r4, #4]
 8014802:	2b07      	cmp	r3, #7
 8014804:	d91e      	bls.n	8014844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014806:	b350      	cbz	r0, 801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014808:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801480a:	4630      	mov	r0, r6
 801480c:	f004 fd7c 	bl	8019308 <ucdr_serialize_string>
 8014810:	6863      	ldr	r3, [r4, #4]
 8014812:	2b08      	cmp	r3, #8
 8014814:	d916      	bls.n	8014844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014816:	b310      	cbz	r0, 801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014818:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801481a:	4630      	mov	r0, r6
 801481c:	f004 fd74 	bl	8019308 <ucdr_serialize_string>
 8014820:	6863      	ldr	r3, [r4, #4]
 8014822:	2b09      	cmp	r3, #9
 8014824:	d90e      	bls.n	8014844 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014826:	b1d0      	cbz	r0, 801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014828:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801482c:	2709      	movs	r7, #9
 801482e:	e000      	b.n	8014832 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8014830:	b1a8      	cbz	r0, 801485e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014832:	f858 1b04 	ldr.w	r1, [r8], #4
 8014836:	4630      	mov	r0, r6
 8014838:	f004 fd66 	bl	8019308 <ucdr_serialize_string>
 801483c:	3701      	adds	r7, #1
 801483e:	6862      	ldr	r2, [r4, #4]
 8014840:	4297      	cmp	r7, r2
 8014842:	d3f5      	bcc.n	8014830 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8014844:	4005      	ands	r5, r0
 8014846:	b2ed      	uxtb	r5, r5
 8014848:	e78a      	b.n	8014760 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801484a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801484c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014850:	4630      	mov	r0, r6
 8014852:	f004 fd2d 	bl	80192b0 <ucdr_serialize_sequence_uint8_t>
 8014856:	4005      	ands	r5, r0
 8014858:	4628      	mov	r0, r5
 801485a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801485e:	2500      	movs	r5, #0
 8014860:	e77e      	b.n	8014760 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014862:	4028      	ands	r0, r5
 8014864:	b2c5      	uxtb	r5, r0
 8014866:	e77b      	b.n	8014760 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08014868 <uxr_serialize_OBJK_Subscriber_Binary>:
 8014868:	b570      	push	{r4, r5, r6, lr}
 801486a:	460d      	mov	r5, r1
 801486c:	7809      	ldrb	r1, [r1, #0]
 801486e:	4606      	mov	r6, r0
 8014870:	f7f9 fd42 	bl	800e2f8 <ucdr_serialize_bool>
 8014874:	782b      	ldrb	r3, [r5, #0]
 8014876:	4604      	mov	r4, r0
 8014878:	b94b      	cbnz	r3, 801488e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801487a:	7a29      	ldrb	r1, [r5, #8]
 801487c:	4630      	mov	r0, r6
 801487e:	f7f9 fd3b 	bl	800e2f8 <ucdr_serialize_bool>
 8014882:	7a2b      	ldrb	r3, [r5, #8]
 8014884:	4004      	ands	r4, r0
 8014886:	b2e4      	uxtb	r4, r4
 8014888:	b943      	cbnz	r3, 801489c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801488a:	4620      	mov	r0, r4
 801488c:	bd70      	pop	{r4, r5, r6, pc}
 801488e:	6869      	ldr	r1, [r5, #4]
 8014890:	4630      	mov	r0, r6
 8014892:	f004 fd39 	bl	8019308 <ucdr_serialize_string>
 8014896:	4004      	ands	r4, r0
 8014898:	b2e4      	uxtb	r4, r4
 801489a:	e7ee      	b.n	801487a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801489c:	f105 010c 	add.w	r1, r5, #12
 80148a0:	4630      	mov	r0, r6
 80148a2:	f7ff ff53 	bl	801474c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80148a6:	4004      	ands	r4, r0
 80148a8:	4620      	mov	r0, r4
 80148aa:	bd70      	pop	{r4, r5, r6, pc}

080148ac <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80148ac:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80148b0:	4688      	mov	r8, r1
 80148b2:	4681      	mov	r9, r0
 80148b4:	8809      	ldrh	r1, [r1, #0]
 80148b6:	f7f9 fd79 	bl	800e3ac <ucdr_serialize_uint16_t>
 80148ba:	4606      	mov	r6, r0
 80148bc:	f898 1002 	ldrb.w	r1, [r8, #2]
 80148c0:	4648      	mov	r0, r9
 80148c2:	f7f9 fd19 	bl	800e2f8 <ucdr_serialize_bool>
 80148c6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80148ca:	4006      	ands	r6, r0
 80148cc:	b2f5      	uxtb	r5, r6
 80148ce:	b9eb      	cbnz	r3, 801490c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80148d0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80148d4:	4648      	mov	r0, r9
 80148d6:	f7f9 fd0f 	bl	800e2f8 <ucdr_serialize_bool>
 80148da:	f898 3006 	ldrb.w	r3, [r8, #6]
 80148de:	4005      	ands	r5, r0
 80148e0:	bb7b      	cbnz	r3, 8014942 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80148e2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80148e6:	4648      	mov	r0, r9
 80148e8:	f7f9 fd06 	bl	800e2f8 <ucdr_serialize_bool>
 80148ec:	f898 300c 	ldrb.w	r3, [r8, #12]
 80148f0:	4005      	ands	r5, r0
 80148f2:	b9f3      	cbnz	r3, 8014932 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80148f4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80148f8:	4648      	mov	r0, r9
 80148fa:	f7f9 fcfd 	bl	800e2f8 <ucdr_serialize_bool>
 80148fe:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014902:	4005      	ands	r5, r0
 8014904:	b94b      	cbnz	r3, 801491a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8014906:	4628      	mov	r0, r5
 8014908:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801490c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014910:	4648      	mov	r0, r9
 8014912:	f7f9 fd4b 	bl	800e3ac <ucdr_serialize_uint16_t>
 8014916:	4005      	ands	r5, r0
 8014918:	e7da      	b.n	80148d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801491a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801491e:	f108 011c 	add.w	r1, r8, #28
 8014922:	4648      	mov	r0, r9
 8014924:	f004 fcc4 	bl	80192b0 <ucdr_serialize_sequence_uint8_t>
 8014928:	4028      	ands	r0, r5
 801492a:	b2c5      	uxtb	r5, r0
 801492c:	4628      	mov	r0, r5
 801492e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014932:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014936:	4648      	mov	r0, r9
 8014938:	f7f9 ff22 	bl	800e780 <ucdr_serialize_uint32_t>
 801493c:	4028      	ands	r0, r5
 801493e:	b2c5      	uxtb	r5, r0
 8014940:	e7d8      	b.n	80148f4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014942:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014946:	4648      	mov	r0, r9
 8014948:	f7f9 ff1a 	bl	800e780 <ucdr_serialize_uint32_t>
 801494c:	4028      	ands	r0, r5
 801494e:	b2c5      	uxtb	r5, r0
 8014950:	e7c7      	b.n	80148e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014952:	bf00      	nop

08014954 <uxr_serialize_OBJK_DataReader_Binary>:
 8014954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014956:	2202      	movs	r2, #2
 8014958:	460c      	mov	r4, r1
 801495a:	4606      	mov	r6, r0
 801495c:	f004 fbb0 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014960:	4605      	mov	r5, r0
 8014962:	78a1      	ldrb	r1, [r4, #2]
 8014964:	4630      	mov	r0, r6
 8014966:	f7f9 fcc7 	bl	800e2f8 <ucdr_serialize_bool>
 801496a:	78a3      	ldrb	r3, [r4, #2]
 801496c:	4005      	ands	r5, r0
 801496e:	b2ed      	uxtb	r5, r5
 8014970:	b90b      	cbnz	r3, 8014976 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014972:	4628      	mov	r0, r5
 8014974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014976:	f104 0108 	add.w	r1, r4, #8
 801497a:	4630      	mov	r0, r6
 801497c:	f7ff ff96 	bl	80148ac <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014980:	4607      	mov	r7, r0
 8014982:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014986:	4630      	mov	r0, r6
 8014988:	f7f9 fcb6 	bl	800e2f8 <ucdr_serialize_bool>
 801498c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014990:	4038      	ands	r0, r7
 8014992:	b2c7      	uxtb	r7, r0
 8014994:	b95b      	cbnz	r3, 80149ae <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8014996:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801499a:	4630      	mov	r0, r6
 801499c:	f7f9 fcac 	bl	800e2f8 <ucdr_serialize_bool>
 80149a0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80149a4:	4007      	ands	r7, r0
 80149a6:	b94b      	cbnz	r3, 80149bc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80149a8:	403d      	ands	r5, r7
 80149aa:	4628      	mov	r0, r5
 80149ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149ae:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80149b2:	4630      	mov	r0, r6
 80149b4:	f7fa f93a 	bl	800ec2c <ucdr_serialize_uint64_t>
 80149b8:	4007      	ands	r7, r0
 80149ba:	e7ec      	b.n	8014996 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80149bc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80149be:	4630      	mov	r0, r6
 80149c0:	f004 fca2 	bl	8019308 <ucdr_serialize_string>
 80149c4:	4007      	ands	r7, r0
 80149c6:	b2ff      	uxtb	r7, r7
 80149c8:	e7ee      	b.n	80149a8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80149ca:	bf00      	nop

080149cc <uxr_serialize_OBJK_DataWriter_Binary>:
 80149cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ce:	2202      	movs	r2, #2
 80149d0:	460d      	mov	r5, r1
 80149d2:	4606      	mov	r6, r0
 80149d4:	f004 fb74 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 80149d8:	4604      	mov	r4, r0
 80149da:	78a9      	ldrb	r1, [r5, #2]
 80149dc:	4630      	mov	r0, r6
 80149de:	f7f9 fc8b 	bl	800e2f8 <ucdr_serialize_bool>
 80149e2:	78ab      	ldrb	r3, [r5, #2]
 80149e4:	4004      	ands	r4, r0
 80149e6:	b2e4      	uxtb	r4, r4
 80149e8:	b90b      	cbnz	r3, 80149ee <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80149ea:	4620      	mov	r0, r4
 80149ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149ee:	f105 0108 	add.w	r1, r5, #8
 80149f2:	4630      	mov	r0, r6
 80149f4:	f7ff ff5a 	bl	80148ac <uxr_serialize_OBJK_Endpoint_QosBinary>
 80149f8:	4607      	mov	r7, r0
 80149fa:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80149fe:	4630      	mov	r0, r6
 8014a00:	f7f9 fc7a 	bl	800e2f8 <ucdr_serialize_bool>
 8014a04:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014a08:	4038      	ands	r0, r7
 8014a0a:	b2c7      	uxtb	r7, r0
 8014a0c:	b913      	cbnz	r3, 8014a14 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014a0e:	403c      	ands	r4, r7
 8014a10:	4620      	mov	r0, r4
 8014a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a14:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8014a18:	4630      	mov	r0, r6
 8014a1a:	f7fa f907 	bl	800ec2c <ucdr_serialize_uint64_t>
 8014a1e:	4007      	ands	r7, r0
 8014a20:	e7f5      	b.n	8014a0e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014a22:	bf00      	nop

08014a24 <uxr_deserialize_ObjectVariant>:
 8014a24:	b570      	push	{r4, r5, r6, lr}
 8014a26:	4605      	mov	r5, r0
 8014a28:	460e      	mov	r6, r1
 8014a2a:	f7f9 fca9 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014a2e:	b168      	cbz	r0, 8014a4c <uxr_deserialize_ObjectVariant+0x28>
 8014a30:	7833      	ldrb	r3, [r6, #0]
 8014a32:	4604      	mov	r4, r0
 8014a34:	3b01      	subs	r3, #1
 8014a36:	2b0d      	cmp	r3, #13
 8014a38:	d809      	bhi.n	8014a4e <uxr_deserialize_ObjectVariant+0x2a>
 8014a3a:	e8df f003 	tbb	[pc, r3]
 8014a3e:	0a41      	.short	0x0a41
 8014a40:	0a0a2323 	.word	0x0a0a2323
 8014a44:	10080a0a 	.word	0x10080a0a
 8014a48:	565c1010 	.word	0x565c1010
 8014a4c:	2400      	movs	r4, #0
 8014a4e:	4620      	mov	r0, r4
 8014a50:	bd70      	pop	{r4, r5, r6, pc}
 8014a52:	1d31      	adds	r1, r6, #4
 8014a54:	4628      	mov	r0, r5
 8014a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a5a:	f7ff bd55 	b.w	8014508 <uxr_deserialize_DATAWRITER_Representation>
 8014a5e:	1d31      	adds	r1, r6, #4
 8014a60:	4628      	mov	r0, r5
 8014a62:	f7f9 fc8d 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014a66:	2800      	cmp	r0, #0
 8014a68:	d0f0      	beq.n	8014a4c <uxr_deserialize_ObjectVariant+0x28>
 8014a6a:	7933      	ldrb	r3, [r6, #4]
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d001      	beq.n	8014a74 <uxr_deserialize_ObjectVariant+0x50>
 8014a70:	2b02      	cmp	r3, #2
 8014a72:	d1ec      	bne.n	8014a4e <uxr_deserialize_ObjectVariant+0x2a>
 8014a74:	68b1      	ldr	r1, [r6, #8]
 8014a76:	4628      	mov	r0, r5
 8014a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a80:	f004 bc52 	b.w	8019328 <ucdr_deserialize_string>
 8014a84:	1d31      	adds	r1, r6, #4
 8014a86:	4628      	mov	r0, r5
 8014a88:	f7f9 fc7a 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014a8c:	4604      	mov	r4, r0
 8014a8e:	b170      	cbz	r0, 8014aae <uxr_deserialize_ObjectVariant+0x8a>
 8014a90:	7933      	ldrb	r3, [r6, #4]
 8014a92:	2b02      	cmp	r3, #2
 8014a94:	d04c      	beq.n	8014b30 <uxr_deserialize_ObjectVariant+0x10c>
 8014a96:	2b03      	cmp	r3, #3
 8014a98:	d109      	bne.n	8014aae <uxr_deserialize_ObjectVariant+0x8a>
 8014a9a:	f106 0308 	add.w	r3, r6, #8
 8014a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014aa2:	f106 010c 	add.w	r1, r6, #12
 8014aa6:	4628      	mov	r0, r5
 8014aa8:	f004 fc14 	bl	80192d4 <ucdr_deserialize_sequence_uint8_t>
 8014aac:	4604      	mov	r4, r0
 8014aae:	2202      	movs	r2, #2
 8014ab0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014ab4:	4628      	mov	r0, r5
 8014ab6:	f004 fb67 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014aba:	4020      	ands	r0, r4
 8014abc:	b2c4      	uxtb	r4, r0
 8014abe:	e7c6      	b.n	8014a4e <uxr_deserialize_ObjectVariant+0x2a>
 8014ac0:	1d31      	adds	r1, r6, #4
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f7f9 fc5c 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014ac8:	4604      	mov	r4, r0
 8014aca:	b130      	cbz	r0, 8014ada <uxr_deserialize_ObjectVariant+0xb6>
 8014acc:	7933      	ldrb	r3, [r6, #4]
 8014ace:	2b02      	cmp	r3, #2
 8014ad0:	d036      	beq.n	8014b40 <uxr_deserialize_ObjectVariant+0x11c>
 8014ad2:	2b03      	cmp	r3, #3
 8014ad4:	d03c      	beq.n	8014b50 <uxr_deserialize_ObjectVariant+0x12c>
 8014ad6:	2b01      	cmp	r3, #1
 8014ad8:	d032      	beq.n	8014b40 <uxr_deserialize_ObjectVariant+0x11c>
 8014ada:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014ade:	4628      	mov	r0, r5
 8014ae0:	f7fa f9f4 	bl	800eecc <ucdr_deserialize_int16_t>
 8014ae4:	4020      	ands	r0, r4
 8014ae6:	b2c4      	uxtb	r4, r0
 8014ae8:	e7b1      	b.n	8014a4e <uxr_deserialize_ObjectVariant+0x2a>
 8014aea:	1d31      	adds	r1, r6, #4
 8014aec:	4628      	mov	r0, r5
 8014aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014af2:	f7ff bbbf 	b.w	8014274 <uxr_deserialize_CLIENT_Representation>
 8014af6:	2204      	movs	r2, #4
 8014af8:	4628      	mov	r0, r5
 8014afa:	18b1      	adds	r1, r6, r2
 8014afc:	f004 fb44 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014b00:	4604      	mov	r4, r0
 8014b02:	2202      	movs	r2, #2
 8014b04:	f106 0108 	add.w	r1, r6, #8
 8014b08:	4628      	mov	r0, r5
 8014b0a:	f004 fb3d 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014b0e:	4004      	ands	r4, r0
 8014b10:	2202      	movs	r2, #2
 8014b12:	f106 010a 	add.w	r1, r6, #10
 8014b16:	4628      	mov	r0, r5
 8014b18:	b2e4      	uxtb	r4, r4
 8014b1a:	f004 fb35 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	f106 010c 	add.w	r1, r6, #12
 8014b24:	4628      	mov	r0, r5
 8014b26:	401c      	ands	r4, r3
 8014b28:	f7f9 fbfc 	bl	800e324 <ucdr_deserialize_bool>
 8014b2c:	4004      	ands	r4, r0
 8014b2e:	e78e      	b.n	8014a4e <uxr_deserialize_ObjectVariant+0x2a>
 8014b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b34:	68b1      	ldr	r1, [r6, #8]
 8014b36:	4628      	mov	r0, r5
 8014b38:	f004 fbf6 	bl	8019328 <ucdr_deserialize_string>
 8014b3c:	4604      	mov	r4, r0
 8014b3e:	e7b6      	b.n	8014aae <uxr_deserialize_ObjectVariant+0x8a>
 8014b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b44:	68b1      	ldr	r1, [r6, #8]
 8014b46:	4628      	mov	r0, r5
 8014b48:	f004 fbee 	bl	8019328 <ucdr_deserialize_string>
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	e7c4      	b.n	8014ada <uxr_deserialize_ObjectVariant+0xb6>
 8014b50:	f106 0308 	add.w	r3, r6, #8
 8014b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b58:	f106 010c 	add.w	r1, r6, #12
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	f004 fbb9 	bl	80192d4 <ucdr_deserialize_sequence_uint8_t>
 8014b62:	4604      	mov	r4, r0
 8014b64:	e7b9      	b.n	8014ada <uxr_deserialize_ObjectVariant+0xb6>
 8014b66:	bf00      	nop

08014b68 <uxr_deserialize_BaseObjectRequest>:
 8014b68:	b570      	push	{r4, r5, r6, lr}
 8014b6a:	2202      	movs	r2, #2
 8014b6c:	4605      	mov	r5, r0
 8014b6e:	460e      	mov	r6, r1
 8014b70:	f004 fb0a 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014b74:	2202      	movs	r2, #2
 8014b76:	4604      	mov	r4, r0
 8014b78:	4628      	mov	r0, r5
 8014b7a:	18b1      	adds	r1, r6, r2
 8014b7c:	f004 fb04 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014b80:	4020      	ands	r0, r4
 8014b82:	b2c0      	uxtb	r0, r0
 8014b84:	bd70      	pop	{r4, r5, r6, pc}
 8014b86:	bf00      	nop

08014b88 <uxr_serialize_ActivityInfoVariant>:
 8014b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b8c:	460e      	mov	r6, r1
 8014b8e:	7809      	ldrb	r1, [r1, #0]
 8014b90:	4680      	mov	r8, r0
 8014b92:	f7f9 fbdf 	bl	800e354 <ucdr_serialize_uint8_t>
 8014b96:	4607      	mov	r7, r0
 8014b98:	b138      	cbz	r0, 8014baa <uxr_serialize_ActivityInfoVariant+0x22>
 8014b9a:	7833      	ldrb	r3, [r6, #0]
 8014b9c:	2b06      	cmp	r3, #6
 8014b9e:	f000 8081 	beq.w	8014ca4 <uxr_serialize_ActivityInfoVariant+0x11c>
 8014ba2:	2b0d      	cmp	r3, #13
 8014ba4:	d014      	beq.n	8014bd0 <uxr_serialize_ActivityInfoVariant+0x48>
 8014ba6:	2b05      	cmp	r3, #5
 8014ba8:	d002      	beq.n	8014bb0 <uxr_serialize_ActivityInfoVariant+0x28>
 8014baa:	4638      	mov	r0, r7
 8014bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bb0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014bb4:	4640      	mov	r0, r8
 8014bb6:	f7fa f909 	bl	800edcc <ucdr_serialize_int16_t>
 8014bba:	4607      	mov	r7, r0
 8014bbc:	4640      	mov	r0, r8
 8014bbe:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8014bc2:	f7fa f833 	bl	800ec2c <ucdr_serialize_uint64_t>
 8014bc6:	4038      	ands	r0, r7
 8014bc8:	b2c7      	uxtb	r7, r0
 8014bca:	4638      	mov	r0, r7
 8014bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bd0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014bd4:	4640      	mov	r0, r8
 8014bd6:	f7fa f8f9 	bl	800edcc <ucdr_serialize_int16_t>
 8014bda:	68f1      	ldr	r1, [r6, #12]
 8014bdc:	4607      	mov	r7, r0
 8014bde:	4640      	mov	r0, r8
 8014be0:	f7f9 fdce 	bl	800e780 <ucdr_serialize_uint32_t>
 8014be4:	68f3      	ldr	r3, [r6, #12]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d0ed      	beq.n	8014bc6 <uxr_serialize_ActivityInfoVariant+0x3e>
 8014bea:	b318      	cbz	r0, 8014c34 <uxr_serialize_ActivityInfoVariant+0xac>
 8014bec:	f106 090c 	add.w	r9, r6, #12
 8014bf0:	2400      	movs	r4, #0
 8014bf2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8014bf6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8014bfa:	7c29      	ldrb	r1, [r5, #16]
 8014bfc:	4640      	mov	r0, r8
 8014bfe:	f7f9 fba9 	bl	800e354 <ucdr_serialize_uint8_t>
 8014c02:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8014c06:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	d051      	beq.n	8014cb2 <uxr_serialize_ActivityInfoVariant+0x12a>
 8014c0e:	7c2b      	ldrb	r3, [r5, #16]
 8014c10:	00c9      	lsls	r1, r1, #3
 8014c12:	2b03      	cmp	r3, #3
 8014c14:	d854      	bhi.n	8014cc0 <uxr_serialize_ActivityInfoVariant+0x138>
 8014c16:	e8df f003 	tbb	[pc, r3]
 8014c1a:	2133      	.short	0x2133
 8014c1c:	020f      	.short	0x020f
 8014c1e:	4449      	add	r1, r9
 8014c20:	4640      	mov	r0, r8
 8014c22:	6889      	ldr	r1, [r1, #8]
 8014c24:	f004 fb70 	bl	8019308 <ucdr_serialize_string>
 8014c28:	3401      	adds	r4, #1
 8014c2a:	68f2      	ldr	r2, [r6, #12]
 8014c2c:	4294      	cmp	r4, r2
 8014c2e:	d244      	bcs.n	8014cba <uxr_serialize_ActivityInfoVariant+0x132>
 8014c30:	2800      	cmp	r0, #0
 8014c32:	d1de      	bne.n	8014bf2 <uxr_serialize_ActivityInfoVariant+0x6a>
 8014c34:	2700      	movs	r7, #0
 8014c36:	e7b8      	b.n	8014baa <uxr_serialize_ActivityInfoVariant+0x22>
 8014c38:	3108      	adds	r1, #8
 8014c3a:	44a2      	add	sl, r4
 8014c3c:	2210      	movs	r2, #16
 8014c3e:	4640      	mov	r0, r8
 8014c40:	4449      	add	r1, r9
 8014c42:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014c46:	f004 fa3b 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014c4a:	4605      	mov	r5, r0
 8014c4c:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8014c50:	4640      	mov	r0, r8
 8014c52:	f7f9 fd95 	bl	800e780 <ucdr_serialize_uint32_t>
 8014c56:	4028      	ands	r0, r5
 8014c58:	b2c0      	uxtb	r0, r0
 8014c5a:	e7e5      	b.n	8014c28 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014c5c:	3108      	adds	r1, #8
 8014c5e:	44a2      	add	sl, r4
 8014c60:	2204      	movs	r2, #4
 8014c62:	4640      	mov	r0, r8
 8014c64:	4449      	add	r1, r9
 8014c66:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014c6a:	f004 fa29 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014c6e:	4605      	mov	r5, r0
 8014c70:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8014c74:	4640      	mov	r0, r8
 8014c76:	f7f9 fb99 	bl	800e3ac <ucdr_serialize_uint16_t>
 8014c7a:	4028      	ands	r0, r5
 8014c7c:	b2c0      	uxtb	r0, r0
 8014c7e:	e7d3      	b.n	8014c28 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014c80:	3108      	adds	r1, #8
 8014c82:	44a2      	add	sl, r4
 8014c84:	2202      	movs	r2, #2
 8014c86:	4640      	mov	r0, r8
 8014c88:	4449      	add	r1, r9
 8014c8a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014c8e:	f004 fa17 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014c92:	4605      	mov	r5, r0
 8014c94:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8014c98:	4640      	mov	r0, r8
 8014c9a:	f7f9 fb5b 	bl	800e354 <ucdr_serialize_uint8_t>
 8014c9e:	4028      	ands	r0, r5
 8014ca0:	b2c0      	uxtb	r0, r0
 8014ca2:	e7c1      	b.n	8014c28 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014ca4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014ca8:	4640      	mov	r0, r8
 8014caa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cae:	f7fa b88d 	b.w	800edcc <ucdr_serialize_int16_t>
 8014cb2:	3401      	adds	r4, #1
 8014cb4:	68f2      	ldr	r2, [r6, #12]
 8014cb6:	42a2      	cmp	r2, r4
 8014cb8:	d8bc      	bhi.n	8014c34 <uxr_serialize_ActivityInfoVariant+0xac>
 8014cba:	4007      	ands	r7, r0
 8014cbc:	b2ff      	uxtb	r7, r7
 8014cbe:	e774      	b.n	8014baa <uxr_serialize_ActivityInfoVariant+0x22>
 8014cc0:	3401      	adds	r4, #1
 8014cc2:	68f3      	ldr	r3, [r6, #12]
 8014cc4:	3518      	adds	r5, #24
 8014cc6:	429c      	cmp	r4, r3
 8014cc8:	d397      	bcc.n	8014bfa <uxr_serialize_ActivityInfoVariant+0x72>
 8014cca:	e76e      	b.n	8014baa <uxr_serialize_ActivityInfoVariant+0x22>

08014ccc <uxr_deserialize_BaseObjectReply>:
 8014ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd0:	2202      	movs	r2, #2
 8014cd2:	4606      	mov	r6, r0
 8014cd4:	460f      	mov	r7, r1
 8014cd6:	f004 fa57 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014cda:	2202      	movs	r2, #2
 8014cdc:	4605      	mov	r5, r0
 8014cde:	4630      	mov	r0, r6
 8014ce0:	18b9      	adds	r1, r7, r2
 8014ce2:	f004 fa51 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014ce6:	4680      	mov	r8, r0
 8014ce8:	1d39      	adds	r1, r7, #4
 8014cea:	4630      	mov	r0, r6
 8014cec:	f7f9 fb48 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014cf0:	ea05 0508 	and.w	r5, r5, r8
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	1d79      	adds	r1, r7, #5
 8014cf8:	4630      	mov	r0, r6
 8014cfa:	402c      	ands	r4, r5
 8014cfc:	f7f9 fb40 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014d00:	4020      	ands	r0, r4
 8014d02:	b2c0      	uxtb	r0, r0
 8014d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d08 <uxr_serialize_ReadSpecification>:
 8014d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d0a:	460e      	mov	r6, r1
 8014d0c:	4607      	mov	r7, r0
 8014d0e:	7809      	ldrb	r1, [r1, #0]
 8014d10:	f7f9 fb20 	bl	800e354 <ucdr_serialize_uint8_t>
 8014d14:	4604      	mov	r4, r0
 8014d16:	7871      	ldrb	r1, [r6, #1]
 8014d18:	4638      	mov	r0, r7
 8014d1a:	f7f9 fb1b 	bl	800e354 <ucdr_serialize_uint8_t>
 8014d1e:	4004      	ands	r4, r0
 8014d20:	78b1      	ldrb	r1, [r6, #2]
 8014d22:	4638      	mov	r0, r7
 8014d24:	f7f9 fae8 	bl	800e2f8 <ucdr_serialize_bool>
 8014d28:	78b3      	ldrb	r3, [r6, #2]
 8014d2a:	b2e4      	uxtb	r4, r4
 8014d2c:	4004      	ands	r4, r0
 8014d2e:	b943      	cbnz	r3, 8014d42 <uxr_serialize_ReadSpecification+0x3a>
 8014d30:	7a31      	ldrb	r1, [r6, #8]
 8014d32:	4638      	mov	r0, r7
 8014d34:	f7f9 fae0 	bl	800e2f8 <ucdr_serialize_bool>
 8014d38:	7a33      	ldrb	r3, [r6, #8]
 8014d3a:	4004      	ands	r4, r0
 8014d3c:	b93b      	cbnz	r3, 8014d4e <uxr_serialize_ReadSpecification+0x46>
 8014d3e:	4620      	mov	r0, r4
 8014d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d42:	6871      	ldr	r1, [r6, #4]
 8014d44:	4638      	mov	r0, r7
 8014d46:	f004 fadf 	bl	8019308 <ucdr_serialize_string>
 8014d4a:	4004      	ands	r4, r0
 8014d4c:	e7f0      	b.n	8014d30 <uxr_serialize_ReadSpecification+0x28>
 8014d4e:	8971      	ldrh	r1, [r6, #10]
 8014d50:	4638      	mov	r0, r7
 8014d52:	f7f9 fb2b 	bl	800e3ac <ucdr_serialize_uint16_t>
 8014d56:	4605      	mov	r5, r0
 8014d58:	89b1      	ldrh	r1, [r6, #12]
 8014d5a:	4638      	mov	r0, r7
 8014d5c:	f7f9 fb26 	bl	800e3ac <ucdr_serialize_uint16_t>
 8014d60:	4005      	ands	r5, r0
 8014d62:	89f1      	ldrh	r1, [r6, #14]
 8014d64:	4638      	mov	r0, r7
 8014d66:	b2ed      	uxtb	r5, r5
 8014d68:	f7f9 fb20 	bl	800e3ac <ucdr_serialize_uint16_t>
 8014d6c:	8a31      	ldrh	r1, [r6, #16]
 8014d6e:	4025      	ands	r5, r4
 8014d70:	4604      	mov	r4, r0
 8014d72:	4638      	mov	r0, r7
 8014d74:	4025      	ands	r5, r4
 8014d76:	f7f9 fb19 	bl	800e3ac <ucdr_serialize_uint16_t>
 8014d7a:	ea00 0405 	and.w	r4, r0, r5
 8014d7e:	4620      	mov	r0, r4
 8014d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d82:	bf00      	nop

08014d84 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014d84:	f7ff ba1e 	b.w	80141c4 <uxr_serialize_CLIENT_Representation>

08014d88 <uxr_serialize_CREATE_Payload>:
 8014d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d8a:	2202      	movs	r2, #2
 8014d8c:	4607      	mov	r7, r0
 8014d8e:	460e      	mov	r6, r1
 8014d90:	f004 f996 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014d94:	2202      	movs	r2, #2
 8014d96:	4605      	mov	r5, r0
 8014d98:	4638      	mov	r0, r7
 8014d9a:	18b1      	adds	r1, r6, r2
 8014d9c:	f004 f990 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014da0:	7931      	ldrb	r1, [r6, #4]
 8014da2:	4604      	mov	r4, r0
 8014da4:	4638      	mov	r0, r7
 8014da6:	f7f9 fad5 	bl	800e354 <ucdr_serialize_uint8_t>
 8014daa:	b170      	cbz	r0, 8014dca <uxr_serialize_CREATE_Payload+0x42>
 8014dac:	7933      	ldrb	r3, [r6, #4]
 8014dae:	402c      	ands	r4, r5
 8014db0:	3b01      	subs	r3, #1
 8014db2:	b2e4      	uxtb	r4, r4
 8014db4:	2b0d      	cmp	r3, #13
 8014db6:	d809      	bhi.n	8014dcc <uxr_serialize_CREATE_Payload+0x44>
 8014db8:	e8df f003 	tbb	[pc, r3]
 8014dbc:	23230a4c 	.word	0x23230a4c
 8014dc0:	0a0a0a0a 	.word	0x0a0a0a0a
 8014dc4:	12121208 	.word	0x12121208
 8014dc8:	3e45      	.short	0x3e45
 8014dca:	2400      	movs	r4, #0
 8014dcc:	4620      	mov	r0, r4
 8014dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dd0:	f106 0108 	add.w	r1, r6, #8
 8014dd4:	4638      	mov	r0, r7
 8014dd6:	f7ff fafb 	bl	80143d0 <uxr_serialize_DATAWRITER_Representation>
 8014dda:	4004      	ands	r4, r0
 8014ddc:	4620      	mov	r0, r4
 8014dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014de0:	7a31      	ldrb	r1, [r6, #8]
 8014de2:	4638      	mov	r0, r7
 8014de4:	f7f9 fab6 	bl	800e354 <ucdr_serialize_uint8_t>
 8014de8:	2800      	cmp	r0, #0
 8014dea:	d0ee      	beq.n	8014dca <uxr_serialize_CREATE_Payload+0x42>
 8014dec:	7a33      	ldrb	r3, [r6, #8]
 8014dee:	2b01      	cmp	r3, #1
 8014df0:	d001      	beq.n	8014df6 <uxr_serialize_CREATE_Payload+0x6e>
 8014df2:	2b02      	cmp	r3, #2
 8014df4:	d1ea      	bne.n	8014dcc <uxr_serialize_CREATE_Payload+0x44>
 8014df6:	68f1      	ldr	r1, [r6, #12]
 8014df8:	4638      	mov	r0, r7
 8014dfa:	f004 fa85 	bl	8019308 <ucdr_serialize_string>
 8014dfe:	4004      	ands	r4, r0
 8014e00:	e7e4      	b.n	8014dcc <uxr_serialize_CREATE_Payload+0x44>
 8014e02:	7a31      	ldrb	r1, [r6, #8]
 8014e04:	4638      	mov	r0, r7
 8014e06:	f7f9 faa5 	bl	800e354 <ucdr_serialize_uint8_t>
 8014e0a:	4605      	mov	r5, r0
 8014e0c:	b158      	cbz	r0, 8014e26 <uxr_serialize_CREATE_Payload+0x9e>
 8014e0e:	7a33      	ldrb	r3, [r6, #8]
 8014e10:	2b02      	cmp	r3, #2
 8014e12:	d034      	beq.n	8014e7e <uxr_serialize_CREATE_Payload+0xf6>
 8014e14:	2b03      	cmp	r3, #3
 8014e16:	d106      	bne.n	8014e26 <uxr_serialize_CREATE_Payload+0x9e>
 8014e18:	68f2      	ldr	r2, [r6, #12]
 8014e1a:	f106 0110 	add.w	r1, r6, #16
 8014e1e:	4638      	mov	r0, r7
 8014e20:	f004 fa46 	bl	80192b0 <ucdr_serialize_sequence_uint8_t>
 8014e24:	4605      	mov	r5, r0
 8014e26:	2202      	movs	r2, #2
 8014e28:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014e2c:	4638      	mov	r0, r7
 8014e2e:	f004 f947 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014e32:	4028      	ands	r0, r5
 8014e34:	4004      	ands	r4, r0
 8014e36:	e7c9      	b.n	8014dcc <uxr_serialize_CREATE_Payload+0x44>
 8014e38:	f106 0108 	add.w	r1, r6, #8
 8014e3c:	4638      	mov	r0, r7
 8014e3e:	f7ff f9c1 	bl	80141c4 <uxr_serialize_CLIENT_Representation>
 8014e42:	4004      	ands	r4, r0
 8014e44:	e7c2      	b.n	8014dcc <uxr_serialize_CREATE_Payload+0x44>
 8014e46:	f106 0108 	add.w	r1, r6, #8
 8014e4a:	4638      	mov	r0, r7
 8014e4c:	f7ff fa76 	bl	801433c <uxr_serialize_AGENT_Representation>
 8014e50:	4004      	ands	r4, r0
 8014e52:	e7bb      	b.n	8014dcc <uxr_serialize_CREATE_Payload+0x44>
 8014e54:	7a31      	ldrb	r1, [r6, #8]
 8014e56:	4638      	mov	r0, r7
 8014e58:	f7f9 fa7c 	bl	800e354 <ucdr_serialize_uint8_t>
 8014e5c:	4605      	mov	r5, r0
 8014e5e:	b130      	cbz	r0, 8014e6e <uxr_serialize_CREATE_Payload+0xe6>
 8014e60:	7a33      	ldrb	r3, [r6, #8]
 8014e62:	2b02      	cmp	r3, #2
 8014e64:	d011      	beq.n	8014e8a <uxr_serialize_CREATE_Payload+0x102>
 8014e66:	2b03      	cmp	r3, #3
 8014e68:	d015      	beq.n	8014e96 <uxr_serialize_CREATE_Payload+0x10e>
 8014e6a:	2b01      	cmp	r3, #1
 8014e6c:	d00d      	beq.n	8014e8a <uxr_serialize_CREATE_Payload+0x102>
 8014e6e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8014e72:	4638      	mov	r0, r7
 8014e74:	f7f9 ffaa 	bl	800edcc <ucdr_serialize_int16_t>
 8014e78:	4028      	ands	r0, r5
 8014e7a:	4004      	ands	r4, r0
 8014e7c:	e7a6      	b.n	8014dcc <uxr_serialize_CREATE_Payload+0x44>
 8014e7e:	68f1      	ldr	r1, [r6, #12]
 8014e80:	4638      	mov	r0, r7
 8014e82:	f004 fa41 	bl	8019308 <ucdr_serialize_string>
 8014e86:	4605      	mov	r5, r0
 8014e88:	e7cd      	b.n	8014e26 <uxr_serialize_CREATE_Payload+0x9e>
 8014e8a:	68f1      	ldr	r1, [r6, #12]
 8014e8c:	4638      	mov	r0, r7
 8014e8e:	f004 fa3b 	bl	8019308 <ucdr_serialize_string>
 8014e92:	4605      	mov	r5, r0
 8014e94:	e7eb      	b.n	8014e6e <uxr_serialize_CREATE_Payload+0xe6>
 8014e96:	68f2      	ldr	r2, [r6, #12]
 8014e98:	f106 0110 	add.w	r1, r6, #16
 8014e9c:	4638      	mov	r0, r7
 8014e9e:	f004 fa07 	bl	80192b0 <ucdr_serialize_sequence_uint8_t>
 8014ea2:	4605      	mov	r5, r0
 8014ea4:	e7e3      	b.n	8014e6e <uxr_serialize_CREATE_Payload+0xe6>
 8014ea6:	bf00      	nop

08014ea8 <uxr_deserialize_GET_INFO_Payload>:
 8014ea8:	b570      	push	{r4, r5, r6, lr}
 8014eaa:	2202      	movs	r2, #2
 8014eac:	4605      	mov	r5, r0
 8014eae:	460e      	mov	r6, r1
 8014eb0:	f004 f96a 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014eb4:	2202      	movs	r2, #2
 8014eb6:	4604      	mov	r4, r0
 8014eb8:	4628      	mov	r0, r5
 8014eba:	18b1      	adds	r1, r6, r2
 8014ebc:	f004 f964 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	1d31      	adds	r1, r6, #4
 8014ec4:	4628      	mov	r0, r5
 8014ec6:	401c      	ands	r4, r3
 8014ec8:	f7f9 fd8a 	bl	800e9e0 <ucdr_deserialize_uint32_t>
 8014ecc:	b2e4      	uxtb	r4, r4
 8014ece:	4020      	ands	r0, r4
 8014ed0:	bd70      	pop	{r4, r5, r6, pc}
 8014ed2:	bf00      	nop

08014ed4 <uxr_serialize_DELETE_Payload>:
 8014ed4:	b570      	push	{r4, r5, r6, lr}
 8014ed6:	2202      	movs	r2, #2
 8014ed8:	4605      	mov	r5, r0
 8014eda:	460e      	mov	r6, r1
 8014edc:	f004 f8f0 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014ee0:	2202      	movs	r2, #2
 8014ee2:	4604      	mov	r4, r0
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	18b1      	adds	r1, r6, r2
 8014ee8:	f004 f8ea 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014eec:	4020      	ands	r0, r4
 8014eee:	b2c0      	uxtb	r0, r0
 8014ef0:	bd70      	pop	{r4, r5, r6, pc}
 8014ef2:	bf00      	nop

08014ef4 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ef8:	460e      	mov	r6, r1
 8014efa:	4605      	mov	r5, r0
 8014efc:	f7f9 fa40 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014f00:	4604      	mov	r4, r0
 8014f02:	1c71      	adds	r1, r6, #1
 8014f04:	4628      	mov	r0, r5
 8014f06:	f7f9 fa3b 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014f0a:	2204      	movs	r2, #4
 8014f0c:	4681      	mov	r9, r0
 8014f0e:	4628      	mov	r0, r5
 8014f10:	18b1      	adds	r1, r6, r2
 8014f12:	f004 f939 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014f16:	f106 0108 	add.w	r1, r6, #8
 8014f1a:	4680      	mov	r8, r0
 8014f1c:	2202      	movs	r2, #2
 8014f1e:	4628      	mov	r0, r5
 8014f20:	f004 f932 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014f24:	ea04 0309 	and.w	r3, r4, r9
 8014f28:	4607      	mov	r7, r0
 8014f2a:	2202      	movs	r2, #2
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	f106 010a 	add.w	r1, r6, #10
 8014f32:	4628      	mov	r0, r5
 8014f34:	ea03 0408 	and.w	r4, r3, r8
 8014f38:	f004 f926 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	4628      	mov	r0, r5
 8014f40:	403c      	ands	r4, r7
 8014f42:	f106 010c 	add.w	r1, r6, #12
 8014f46:	461d      	mov	r5, r3
 8014f48:	f7f9 f9ec 	bl	800e324 <ucdr_deserialize_bool>
 8014f4c:	4025      	ands	r5, r4
 8014f4e:	4028      	ands	r0, r5
 8014f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014f54 <uxr_deserialize_STATUS_Payload>:
 8014f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f58:	2202      	movs	r2, #2
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	460f      	mov	r7, r1
 8014f5e:	f004 f913 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014f62:	2202      	movs	r2, #2
 8014f64:	4605      	mov	r5, r0
 8014f66:	4630      	mov	r0, r6
 8014f68:	18b9      	adds	r1, r7, r2
 8014f6a:	f004 f90d 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 8014f6e:	4680      	mov	r8, r0
 8014f70:	1d39      	adds	r1, r7, #4
 8014f72:	4630      	mov	r0, r6
 8014f74:	f7f9 fa04 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014f78:	ea05 0508 	and.w	r5, r5, r8
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	1d79      	adds	r1, r7, #5
 8014f80:	4630      	mov	r0, r6
 8014f82:	402c      	ands	r4, r5
 8014f84:	f7f9 f9fc 	bl	800e380 <ucdr_deserialize_uint8_t>
 8014f88:	4020      	ands	r0, r4
 8014f8a:	b2c0      	uxtb	r0, r0
 8014f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f90 <uxr_serialize_INFO_Payload>:
 8014f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f94:	2202      	movs	r2, #2
 8014f96:	460c      	mov	r4, r1
 8014f98:	4605      	mov	r5, r0
 8014f9a:	f004 f891 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014f9e:	2202      	movs	r2, #2
 8014fa0:	4680      	mov	r8, r0
 8014fa2:	4628      	mov	r0, r5
 8014fa4:	18a1      	adds	r1, r4, r2
 8014fa6:	f004 f88b 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8014faa:	4607      	mov	r7, r0
 8014fac:	7921      	ldrb	r1, [r4, #4]
 8014fae:	4628      	mov	r0, r5
 8014fb0:	f7f9 f9d0 	bl	800e354 <ucdr_serialize_uint8_t>
 8014fb4:	ea08 0807 	and.w	r8, r8, r7
 8014fb8:	4606      	mov	r6, r0
 8014fba:	7961      	ldrb	r1, [r4, #5]
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	ea06 0608 	and.w	r6, r6, r8
 8014fc2:	f7f9 f9c7 	bl	800e354 <ucdr_serialize_uint8_t>
 8014fc6:	7a21      	ldrb	r1, [r4, #8]
 8014fc8:	4030      	ands	r0, r6
 8014fca:	b2c7      	uxtb	r7, r0
 8014fcc:	4628      	mov	r0, r5
 8014fce:	f7f9 f993 	bl	800e2f8 <ucdr_serialize_bool>
 8014fd2:	7a23      	ldrb	r3, [r4, #8]
 8014fd4:	4606      	mov	r6, r0
 8014fd6:	b96b      	cbnz	r3, 8014ff4 <uxr_serialize_INFO_Payload+0x64>
 8014fd8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014fdc:	4628      	mov	r0, r5
 8014fde:	f7f9 f98b 	bl	800e2f8 <ucdr_serialize_bool>
 8014fe2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8014fe6:	4030      	ands	r0, r6
 8014fe8:	b2c6      	uxtb	r6, r0
 8014fea:	b983      	cbnz	r3, 801500e <uxr_serialize_INFO_Payload+0x7e>
 8014fec:	ea06 0007 	and.w	r0, r6, r7
 8014ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ff4:	7b21      	ldrb	r1, [r4, #12]
 8014ff6:	4628      	mov	r0, r5
 8014ff8:	f7f9 f9ac 	bl	800e354 <ucdr_serialize_uint8_t>
 8014ffc:	b188      	cbz	r0, 8015022 <uxr_serialize_INFO_Payload+0x92>
 8014ffe:	f104 010c 	add.w	r1, r4, #12
 8015002:	4628      	mov	r0, r5
 8015004:	f7ff fa0c 	bl	8014420 <uxr_serialize_ObjectVariant.part.0>
 8015008:	4030      	ands	r0, r6
 801500a:	b2c6      	uxtb	r6, r0
 801500c:	e7e4      	b.n	8014fd8 <uxr_serialize_INFO_Payload+0x48>
 801500e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8015012:	4628      	mov	r0, r5
 8015014:	f7ff fdb8 	bl	8014b88 <uxr_serialize_ActivityInfoVariant>
 8015018:	4006      	ands	r6, r0
 801501a:	ea06 0007 	and.w	r0, r6, r7
 801501e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015022:	4606      	mov	r6, r0
 8015024:	e7d8      	b.n	8014fd8 <uxr_serialize_INFO_Payload+0x48>
 8015026:	bf00      	nop

08015028 <uxr_serialize_READ_DATA_Payload>:
 8015028:	b570      	push	{r4, r5, r6, lr}
 801502a:	2202      	movs	r2, #2
 801502c:	4605      	mov	r5, r0
 801502e:	460e      	mov	r6, r1
 8015030:	f004 f846 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8015034:	2202      	movs	r2, #2
 8015036:	4604      	mov	r4, r0
 8015038:	4628      	mov	r0, r5
 801503a:	18b1      	adds	r1, r6, r2
 801503c:	f004 f840 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8015040:	4603      	mov	r3, r0
 8015042:	1d31      	adds	r1, r6, #4
 8015044:	4628      	mov	r0, r5
 8015046:	401c      	ands	r4, r3
 8015048:	f7ff fe5e 	bl	8014d08 <uxr_serialize_ReadSpecification>
 801504c:	b2e4      	uxtb	r4, r4
 801504e:	4020      	ands	r0, r4
 8015050:	bd70      	pop	{r4, r5, r6, pc}
 8015052:	bf00      	nop

08015054 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015054:	b570      	push	{r4, r5, r6, lr}
 8015056:	2202      	movs	r2, #2
 8015058:	4605      	mov	r5, r0
 801505a:	460e      	mov	r6, r1
 801505c:	f004 f830 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8015060:	2202      	movs	r2, #2
 8015062:	4604      	mov	r4, r0
 8015064:	4628      	mov	r0, r5
 8015066:	18b1      	adds	r1, r6, r2
 8015068:	f004 f82a 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 801506c:	4020      	ands	r0, r4
 801506e:	b2c0      	uxtb	r0, r0
 8015070:	bd70      	pop	{r4, r5, r6, pc}
 8015072:	bf00      	nop

08015074 <uxr_serialize_ACKNACK_Payload>:
 8015074:	b570      	push	{r4, r5, r6, lr}
 8015076:	460c      	mov	r4, r1
 8015078:	4605      	mov	r5, r0
 801507a:	460e      	mov	r6, r1
 801507c:	f834 1b02 	ldrh.w	r1, [r4], #2
 8015080:	f7f9 f994 	bl	800e3ac <ucdr_serialize_uint16_t>
 8015084:	2202      	movs	r2, #2
 8015086:	4621      	mov	r1, r4
 8015088:	4604      	mov	r4, r0
 801508a:	4628      	mov	r0, r5
 801508c:	f004 f818 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8015090:	4603      	mov	r3, r0
 8015092:	7931      	ldrb	r1, [r6, #4]
 8015094:	4628      	mov	r0, r5
 8015096:	401c      	ands	r4, r3
 8015098:	f7f9 f95c 	bl	800e354 <ucdr_serialize_uint8_t>
 801509c:	b2e4      	uxtb	r4, r4
 801509e:	4020      	ands	r0, r4
 80150a0:	bd70      	pop	{r4, r5, r6, pc}
 80150a2:	bf00      	nop

080150a4 <uxr_deserialize_ACKNACK_Payload>:
 80150a4:	b570      	push	{r4, r5, r6, lr}
 80150a6:	460e      	mov	r6, r1
 80150a8:	4605      	mov	r5, r0
 80150aa:	f7f9 fa7f 	bl	800e5ac <ucdr_deserialize_uint16_t>
 80150ae:	2202      	movs	r2, #2
 80150b0:	4604      	mov	r4, r0
 80150b2:	4628      	mov	r0, r5
 80150b4:	18b1      	adds	r1, r6, r2
 80150b6:	f004 f867 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 80150ba:	4603      	mov	r3, r0
 80150bc:	1d31      	adds	r1, r6, #4
 80150be:	4628      	mov	r0, r5
 80150c0:	401c      	ands	r4, r3
 80150c2:	f7f9 f95d 	bl	800e380 <ucdr_deserialize_uint8_t>
 80150c6:	b2e4      	uxtb	r4, r4
 80150c8:	4020      	ands	r0, r4
 80150ca:	bd70      	pop	{r4, r5, r6, pc}

080150cc <uxr_serialize_HEARTBEAT_Payload>:
 80150cc:	b570      	push	{r4, r5, r6, lr}
 80150ce:	460d      	mov	r5, r1
 80150d0:	4606      	mov	r6, r0
 80150d2:	8809      	ldrh	r1, [r1, #0]
 80150d4:	f7f9 f96a 	bl	800e3ac <ucdr_serialize_uint16_t>
 80150d8:	8869      	ldrh	r1, [r5, #2]
 80150da:	4604      	mov	r4, r0
 80150dc:	4630      	mov	r0, r6
 80150de:	f7f9 f965 	bl	800e3ac <ucdr_serialize_uint16_t>
 80150e2:	4603      	mov	r3, r0
 80150e4:	7929      	ldrb	r1, [r5, #4]
 80150e6:	4630      	mov	r0, r6
 80150e8:	401c      	ands	r4, r3
 80150ea:	f7f9 f933 	bl	800e354 <ucdr_serialize_uint8_t>
 80150ee:	b2e4      	uxtb	r4, r4
 80150f0:	4020      	ands	r0, r4
 80150f2:	bd70      	pop	{r4, r5, r6, pc}

080150f4 <uxr_deserialize_HEARTBEAT_Payload>:
 80150f4:	b570      	push	{r4, r5, r6, lr}
 80150f6:	460e      	mov	r6, r1
 80150f8:	4605      	mov	r5, r0
 80150fa:	f7f9 fa57 	bl	800e5ac <ucdr_deserialize_uint16_t>
 80150fe:	4604      	mov	r4, r0
 8015100:	1cb1      	adds	r1, r6, #2
 8015102:	4628      	mov	r0, r5
 8015104:	f7f9 fa52 	bl	800e5ac <ucdr_deserialize_uint16_t>
 8015108:	4603      	mov	r3, r0
 801510a:	1d31      	adds	r1, r6, #4
 801510c:	4628      	mov	r0, r5
 801510e:	401c      	ands	r4, r3
 8015110:	f7f9 f936 	bl	800e380 <ucdr_deserialize_uint8_t>
 8015114:	b2e4      	uxtb	r4, r4
 8015116:	4020      	ands	r0, r4
 8015118:	bd70      	pop	{r4, r5, r6, pc}
 801511a:	bf00      	nop

0801511c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801511c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015120:	460e      	mov	r6, r1
 8015122:	4605      	mov	r5, r0
 8015124:	f7f9 ffde 	bl	800f0e4 <ucdr_deserialize_int32_t>
 8015128:	4607      	mov	r7, r0
 801512a:	1d31      	adds	r1, r6, #4
 801512c:	4628      	mov	r0, r5
 801512e:	f7f9 fc57 	bl	800e9e0 <ucdr_deserialize_uint32_t>
 8015132:	4680      	mov	r8, r0
 8015134:	f106 0108 	add.w	r1, r6, #8
 8015138:	4628      	mov	r0, r5
 801513a:	f7f9 ffd3 	bl	800f0e4 <ucdr_deserialize_int32_t>
 801513e:	ea07 0708 	and.w	r7, r7, r8
 8015142:	4604      	mov	r4, r0
 8015144:	f106 010c 	add.w	r1, r6, #12
 8015148:	4628      	mov	r0, r5
 801514a:	403c      	ands	r4, r7
 801514c:	f7f9 fc48 	bl	800e9e0 <ucdr_deserialize_uint32_t>
 8015150:	f106 0110 	add.w	r1, r6, #16
 8015154:	4004      	ands	r4, r0
 8015156:	4628      	mov	r0, r5
 8015158:	f7f9 ffc4 	bl	800f0e4 <ucdr_deserialize_int32_t>
 801515c:	4603      	mov	r3, r0
 801515e:	b2e4      	uxtb	r4, r4
 8015160:	4628      	mov	r0, r5
 8015162:	461d      	mov	r5, r3
 8015164:	f106 0114 	add.w	r1, r6, #20
 8015168:	f7f9 fc3a 	bl	800e9e0 <ucdr_deserialize_uint32_t>
 801516c:	402c      	ands	r4, r5
 801516e:	4020      	ands	r0, r4
 8015170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015174 <uxr_serialize_SampleIdentity>:
 8015174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015178:	4604      	mov	r4, r0
 801517a:	460d      	mov	r5, r1
 801517c:	220c      	movs	r2, #12
 801517e:	f003 ff9f 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8015182:	2203      	movs	r2, #3
 8015184:	f105 010c 	add.w	r1, r5, #12
 8015188:	4607      	mov	r7, r0
 801518a:	4620      	mov	r0, r4
 801518c:	f003 ff98 	bl	80190c0 <ucdr_serialize_array_uint8_t>
 8015190:	7be9      	ldrb	r1, [r5, #15]
 8015192:	4680      	mov	r8, r0
 8015194:	4620      	mov	r0, r4
 8015196:	f7f9 f8dd 	bl	800e354 <ucdr_serialize_uint8_t>
 801519a:	6929      	ldr	r1, [r5, #16]
 801519c:	4606      	mov	r6, r0
 801519e:	4620      	mov	r0, r4
 80151a0:	f7f9 ff08 	bl	800efb4 <ucdr_serialize_int32_t>
 80151a4:	ea07 0708 	and.w	r7, r7, r8
 80151a8:	4603      	mov	r3, r0
 80151aa:	4620      	mov	r0, r4
 80151ac:	403e      	ands	r6, r7
 80151ae:	6969      	ldr	r1, [r5, #20]
 80151b0:	461c      	mov	r4, r3
 80151b2:	f7f9 fae5 	bl	800e780 <ucdr_serialize_uint32_t>
 80151b6:	4034      	ands	r4, r6
 80151b8:	4020      	ands	r0, r4
 80151ba:	b2c0      	uxtb	r0, r0
 80151bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080151c0 <uxr_deserialize_SampleIdentity>:
 80151c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151c4:	4604      	mov	r4, r0
 80151c6:	460d      	mov	r5, r1
 80151c8:	220c      	movs	r2, #12
 80151ca:	f003 ffdd 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 80151ce:	2203      	movs	r2, #3
 80151d0:	f105 010c 	add.w	r1, r5, #12
 80151d4:	4607      	mov	r7, r0
 80151d6:	4620      	mov	r0, r4
 80151d8:	f003 ffd6 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 80151dc:	f105 010f 	add.w	r1, r5, #15
 80151e0:	4680      	mov	r8, r0
 80151e2:	4620      	mov	r0, r4
 80151e4:	f7f9 f8cc 	bl	800e380 <ucdr_deserialize_uint8_t>
 80151e8:	f105 0110 	add.w	r1, r5, #16
 80151ec:	4606      	mov	r6, r0
 80151ee:	4620      	mov	r0, r4
 80151f0:	f7f9 ff78 	bl	800f0e4 <ucdr_deserialize_int32_t>
 80151f4:	ea07 0708 	and.w	r7, r7, r8
 80151f8:	4603      	mov	r3, r0
 80151fa:	4620      	mov	r0, r4
 80151fc:	403e      	ands	r6, r7
 80151fe:	f105 0114 	add.w	r1, r5, #20
 8015202:	461c      	mov	r4, r3
 8015204:	f7f9 fbec 	bl	800e9e0 <ucdr_deserialize_uint32_t>
 8015208:	4034      	ands	r4, r6
 801520a:	4020      	ands	r0, r4
 801520c:	b2c0      	uxtb	r0, r0
 801520e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015212:	bf00      	nop

08015214 <rcl_client_get_rmw_handle>:
 8015214:	b118      	cbz	r0, 801521e <rcl_client_get_rmw_handle+0xa>
 8015216:	6800      	ldr	r0, [r0, #0]
 8015218:	b108      	cbz	r0, 801521e <rcl_client_get_rmw_handle+0xa>
 801521a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801521e:	4770      	bx	lr

08015220 <rcl_send_request>:
 8015220:	b570      	push	{r4, r5, r6, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	b1f8      	cbz	r0, 8015266 <rcl_send_request+0x46>
 8015226:	4604      	mov	r4, r0
 8015228:	6800      	ldr	r0, [r0, #0]
 801522a:	b1e0      	cbz	r0, 8015266 <rcl_send_request+0x46>
 801522c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015230:	b1cb      	cbz	r3, 8015266 <rcl_send_request+0x46>
 8015232:	460e      	mov	r6, r1
 8015234:	b1e1      	cbz	r1, 8015270 <rcl_send_request+0x50>
 8015236:	4615      	mov	r5, r2
 8015238:	b1d2      	cbz	r2, 8015270 <rcl_send_request+0x50>
 801523a:	2105      	movs	r1, #5
 801523c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015240:	f002 fcde 	bl	8017c00 <__atomic_load_8>
 8015244:	4602      	mov	r2, r0
 8015246:	460b      	mov	r3, r1
 8015248:	4631      	mov	r1, r6
 801524a:	e9c5 2300 	strd	r2, r3, [r5]
 801524e:	6823      	ldr	r3, [r4, #0]
 8015250:	462a      	mov	r2, r5
 8015252:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015256:	f003 fb7b 	bl	8018950 <rmw_send_request>
 801525a:	4606      	mov	r6, r0
 801525c:	b160      	cbz	r0, 8015278 <rcl_send_request+0x58>
 801525e:	2601      	movs	r6, #1
 8015260:	4630      	mov	r0, r6
 8015262:	b002      	add	sp, #8
 8015264:	bd70      	pop	{r4, r5, r6, pc}
 8015266:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801526a:	4630      	mov	r0, r6
 801526c:	b002      	add	sp, #8
 801526e:	bd70      	pop	{r4, r5, r6, pc}
 8015270:	260b      	movs	r6, #11
 8015272:	4630      	mov	r0, r6
 8015274:	b002      	add	sp, #8
 8015276:	bd70      	pop	{r4, r5, r6, pc}
 8015278:	6820      	ldr	r0, [r4, #0]
 801527a:	2105      	movs	r1, #5
 801527c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015280:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015284:	9100      	str	r1, [sp, #0]
 8015286:	f002 fd27 	bl	8017cd8 <__atomic_exchange_8>
 801528a:	4630      	mov	r0, r6
 801528c:	b002      	add	sp, #8
 801528e:	bd70      	pop	{r4, r5, r6, pc}

08015290 <rcl_take_response>:
 8015290:	b570      	push	{r4, r5, r6, lr}
 8015292:	468e      	mov	lr, r1
 8015294:	b08c      	sub	sp, #48	@ 0x30
 8015296:	460c      	mov	r4, r1
 8015298:	4616      	mov	r6, r2
 801529a:	f10d 0c18 	add.w	ip, sp, #24
 801529e:	4605      	mov	r5, r0
 80152a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80152ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80152b0:	b35d      	cbz	r5, 801530a <rcl_take_response+0x7a>
 80152b2:	682b      	ldr	r3, [r5, #0]
 80152b4:	b34b      	cbz	r3, 801530a <rcl_take_response+0x7a>
 80152b6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80152ba:	b330      	cbz	r0, 801530a <rcl_take_response+0x7a>
 80152bc:	b346      	cbz	r6, 8015310 <rcl_take_response+0x80>
 80152be:	2300      	movs	r3, #0
 80152c0:	4632      	mov	r2, r6
 80152c2:	a902      	add	r1, sp, #8
 80152c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80152c8:	f10d 0307 	add.w	r3, sp, #7
 80152cc:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015318 <rcl_take_response+0x88>
 80152d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80152d8:	f003 fc42 	bl	8018b60 <rmw_take_response>
 80152dc:	4605      	mov	r5, r0
 80152de:	b9c8      	cbnz	r0, 8015314 <rcl_take_response+0x84>
 80152e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80152e4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80152e8:	2a00      	cmp	r2, #0
 80152ea:	bf08      	it	eq
 80152ec:	461d      	moveq	r5, r3
 80152ee:	f10d 0e18 	add.w	lr, sp, #24
 80152f2:	46a4      	mov	ip, r4
 80152f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015300:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015304:	4628      	mov	r0, r5
 8015306:	b00c      	add	sp, #48	@ 0x30
 8015308:	bd70      	pop	{r4, r5, r6, pc}
 801530a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801530e:	e7ee      	b.n	80152ee <rcl_take_response+0x5e>
 8015310:	250b      	movs	r5, #11
 8015312:	e7ec      	b.n	80152ee <rcl_take_response+0x5e>
 8015314:	2501      	movs	r5, #1
 8015316:	e7ea      	b.n	80152ee <rcl_take_response+0x5e>
	...

08015320 <rcl_client_is_valid>:
 8015320:	b130      	cbz	r0, 8015330 <rcl_client_is_valid+0x10>
 8015322:	6800      	ldr	r0, [r0, #0]
 8015324:	b120      	cbz	r0, 8015330 <rcl_client_is_valid+0x10>
 8015326:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801532a:	3800      	subs	r0, #0
 801532c:	bf18      	it	ne
 801532e:	2001      	movne	r0, #1
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop

08015334 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015334:	280b      	cmp	r0, #11
 8015336:	dc0d      	bgt.n	8015354 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015338:	2800      	cmp	r0, #0
 801533a:	db09      	blt.n	8015350 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801533c:	280b      	cmp	r0, #11
 801533e:	d807      	bhi.n	8015350 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015340:	e8df f000 	tbb	[pc, r0]
 8015344:	07060607 	.word	0x07060607
 8015348:	06060606 	.word	0x06060606
 801534c:	07070606 	.word	0x07070606
 8015350:	2001      	movs	r0, #1
 8015352:	4770      	bx	lr
 8015354:	28cb      	cmp	r0, #203	@ 0xcb
 8015356:	bf18      	it	ne
 8015358:	2001      	movne	r0, #1
 801535a:	4770      	bx	lr

0801535c <rcl_get_zero_initialized_context>:
 801535c:	4a03      	ldr	r2, [pc, #12]	@ (801536c <rcl_get_zero_initialized_context+0x10>)
 801535e:	4603      	mov	r3, r0
 8015360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015364:	e883 0003 	stmia.w	r3, {r0, r1}
 8015368:	4618      	mov	r0, r3
 801536a:	4770      	bx	lr
 801536c:	0801d02c 	.word	0x0801d02c

08015370 <rcl_context_is_valid>:
 8015370:	b118      	cbz	r0, 801537a <rcl_context_is_valid+0xa>
 8015372:	6840      	ldr	r0, [r0, #4]
 8015374:	3800      	subs	r0, #0
 8015376:	bf18      	it	ne
 8015378:	2001      	movne	r0, #1
 801537a:	4770      	bx	lr

0801537c <__cleanup_context>:
 801537c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015380:	4606      	mov	r6, r0
 8015382:	2300      	movs	r3, #0
 8015384:	6800      	ldr	r0, [r0, #0]
 8015386:	6073      	str	r3, [r6, #4]
 8015388:	2800      	cmp	r0, #0
 801538a:	d049      	beq.n	8015420 <__cleanup_context+0xa4>
 801538c:	6947      	ldr	r7, [r0, #20]
 801538e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015392:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015396:	b137      	cbz	r7, 80153a6 <__cleanup_context+0x2a>
 8015398:	3014      	adds	r0, #20
 801539a:	f000 fa6b 	bl	8015874 <rcl_init_options_fini>
 801539e:	4607      	mov	r7, r0
 80153a0:	2800      	cmp	r0, #0
 80153a2:	d144      	bne.n	801542e <__cleanup_context+0xb2>
 80153a4:	6830      	ldr	r0, [r6, #0]
 80153a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80153a8:	b143      	cbz	r3, 80153bc <__cleanup_context+0x40>
 80153aa:	3028      	adds	r0, #40	@ 0x28
 80153ac:	f003 fa2c 	bl	8018808 <rmw_context_fini>
 80153b0:	b118      	cbz	r0, 80153ba <__cleanup_context+0x3e>
 80153b2:	2f00      	cmp	r7, #0
 80153b4:	d03e      	beq.n	8015434 <__cleanup_context+0xb8>
 80153b6:	f7fb fbf3 	bl	8010ba0 <rcutils_reset_error>
 80153ba:	6830      	ldr	r0, [r6, #0]
 80153bc:	6a03      	ldr	r3, [r0, #32]
 80153be:	b1db      	cbz	r3, 80153f8 <__cleanup_context+0x7c>
 80153c0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80153c4:	2a01      	cmp	r2, #1
 80153c6:	f17c 0100 	sbcs.w	r1, ip, #0
 80153ca:	db11      	blt.n	80153f0 <__cleanup_context+0x74>
 80153cc:	2400      	movs	r4, #0
 80153ce:	4625      	mov	r5, r4
 80153d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80153d4:	4649      	mov	r1, r9
 80153d6:	b1b8      	cbz	r0, 8015408 <__cleanup_context+0x8c>
 80153d8:	47c0      	blx	r8
 80153da:	6833      	ldr	r3, [r6, #0]
 80153dc:	3401      	adds	r4, #1
 80153de:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80153e2:	f145 0500 	adc.w	r5, r5, #0
 80153e6:	6a1b      	ldr	r3, [r3, #32]
 80153e8:	4294      	cmp	r4, r2
 80153ea:	eb75 010c 	sbcs.w	r1, r5, ip
 80153ee:	dbef      	blt.n	80153d0 <__cleanup_context+0x54>
 80153f0:	4618      	mov	r0, r3
 80153f2:	4649      	mov	r1, r9
 80153f4:	47c0      	blx	r8
 80153f6:	6830      	ldr	r0, [r6, #0]
 80153f8:	4649      	mov	r1, r9
 80153fa:	47c0      	blx	r8
 80153fc:	2300      	movs	r3, #0
 80153fe:	4638      	mov	r0, r7
 8015400:	e9c6 3300 	strd	r3, r3, [r6]
 8015404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015408:	3401      	adds	r4, #1
 801540a:	f145 0500 	adc.w	r5, r5, #0
 801540e:	4294      	cmp	r4, r2
 8015410:	eb75 010c 	sbcs.w	r1, r5, ip
 8015414:	dbdc      	blt.n	80153d0 <__cleanup_context+0x54>
 8015416:	4618      	mov	r0, r3
 8015418:	4649      	mov	r1, r9
 801541a:	47c0      	blx	r8
 801541c:	6830      	ldr	r0, [r6, #0]
 801541e:	e7eb      	b.n	80153f8 <__cleanup_context+0x7c>
 8015420:	4607      	mov	r7, r0
 8015422:	2300      	movs	r3, #0
 8015424:	4638      	mov	r0, r7
 8015426:	e9c6 3300 	strd	r3, r3, [r6]
 801542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801542e:	f7fb fbb7 	bl	8010ba0 <rcutils_reset_error>
 8015432:	e7b7      	b.n	80153a4 <__cleanup_context+0x28>
 8015434:	f7ff ff7e 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8015438:	4607      	mov	r7, r0
 801543a:	e7bc      	b.n	80153b6 <__cleanup_context+0x3a>

0801543c <rcl_get_zero_initialized_guard_condition>:
 801543c:	4a03      	ldr	r2, [pc, #12]	@ (801544c <rcl_get_zero_initialized_guard_condition+0x10>)
 801543e:	4603      	mov	r3, r0
 8015440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015444:	e883 0003 	stmia.w	r3, {r0, r1}
 8015448:	4618      	mov	r0, r3
 801544a:	4770      	bx	lr
 801544c:	0801d034 	.word	0x0801d034

08015450 <rcl_guard_condition_init_from_rmw>:
 8015450:	b082      	sub	sp, #8
 8015452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015456:	b086      	sub	sp, #24
 8015458:	4604      	mov	r4, r0
 801545a:	460e      	mov	r6, r1
 801545c:	4615      	mov	r5, r2
 801545e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015462:	f10d 0e04 	add.w	lr, sp, #4
 8015466:	f84c 3f04 	str.w	r3, [ip, #4]!
 801546a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801546e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015472:	f8dc 3000 	ldr.w	r3, [ip]
 8015476:	a801      	add	r0, sp, #4
 8015478:	f8ce 3000 	str.w	r3, [lr]
 801547c:	f7fb fb52 	bl	8010b24 <rcutils_allocator_is_valid>
 8015480:	f080 0301 	eor.w	r3, r0, #1
 8015484:	b2db      	uxtb	r3, r3
 8015486:	bb3b      	cbnz	r3, 80154d8 <rcl_guard_condition_init_from_rmw+0x88>
 8015488:	b334      	cbz	r4, 80154d8 <rcl_guard_condition_init_from_rmw+0x88>
 801548a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801548e:	f1b8 0f00 	cmp.w	r8, #0
 8015492:	d11a      	bne.n	80154ca <rcl_guard_condition_init_from_rmw+0x7a>
 8015494:	b305      	cbz	r5, 80154d8 <rcl_guard_condition_init_from_rmw+0x88>
 8015496:	4628      	mov	r0, r5
 8015498:	f7ff ff6a 	bl	8015370 <rcl_context_is_valid>
 801549c:	b1f0      	cbz	r0, 80154dc <rcl_guard_condition_init_from_rmw+0x8c>
 801549e:	9b01      	ldr	r3, [sp, #4]
 80154a0:	201c      	movs	r0, #28
 80154a2:	9905      	ldr	r1, [sp, #20]
 80154a4:	4798      	blx	r3
 80154a6:	4607      	mov	r7, r0
 80154a8:	6060      	str	r0, [r4, #4]
 80154aa:	b320      	cbz	r0, 80154f6 <rcl_guard_condition_init_from_rmw+0xa6>
 80154ac:	b1c6      	cbz	r6, 80154e0 <rcl_guard_condition_init_from_rmw+0x90>
 80154ae:	6006      	str	r6, [r0, #0]
 80154b0:	f880 8004 	strb.w	r8, [r0, #4]
 80154b4:	ac01      	add	r4, sp, #4
 80154b6:	f107 0c08 	add.w	ip, r7, #8
 80154ba:	2500      	movs	r5, #0
 80154bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154c2:	6823      	ldr	r3, [r4, #0]
 80154c4:	f8cc 3000 	str.w	r3, [ip]
 80154c8:	e000      	b.n	80154cc <rcl_guard_condition_init_from_rmw+0x7c>
 80154ca:	2564      	movs	r5, #100	@ 0x64
 80154cc:	4628      	mov	r0, r5
 80154ce:	b006      	add	sp, #24
 80154d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154d4:	b002      	add	sp, #8
 80154d6:	4770      	bx	lr
 80154d8:	250b      	movs	r5, #11
 80154da:	e7f7      	b.n	80154cc <rcl_guard_condition_init_from_rmw+0x7c>
 80154dc:	2565      	movs	r5, #101	@ 0x65
 80154de:	e7f5      	b.n	80154cc <rcl_guard_condition_init_from_rmw+0x7c>
 80154e0:	6828      	ldr	r0, [r5, #0]
 80154e2:	3028      	adds	r0, #40	@ 0x28
 80154e4:	f002 ff32 	bl	801834c <rmw_create_guard_condition>
 80154e8:	6038      	str	r0, [r7, #0]
 80154ea:	6867      	ldr	r7, [r4, #4]
 80154ec:	683e      	ldr	r6, [r7, #0]
 80154ee:	b126      	cbz	r6, 80154fa <rcl_guard_condition_init_from_rmw+0xaa>
 80154f0:	2301      	movs	r3, #1
 80154f2:	713b      	strb	r3, [r7, #4]
 80154f4:	e7de      	b.n	80154b4 <rcl_guard_condition_init_from_rmw+0x64>
 80154f6:	250a      	movs	r5, #10
 80154f8:	e7e8      	b.n	80154cc <rcl_guard_condition_init_from_rmw+0x7c>
 80154fa:	9b02      	ldr	r3, [sp, #8]
 80154fc:	4638      	mov	r0, r7
 80154fe:	9905      	ldr	r1, [sp, #20]
 8015500:	2501      	movs	r5, #1
 8015502:	4798      	blx	r3
 8015504:	6066      	str	r6, [r4, #4]
 8015506:	e7e1      	b.n	80154cc <rcl_guard_condition_init_from_rmw+0x7c>

08015508 <rcl_guard_condition_fini>:
 8015508:	b570      	push	{r4, r5, r6, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	b1f0      	cbz	r0, 801554c <rcl_guard_condition_fini+0x44>
 801550e:	6843      	ldr	r3, [r0, #4]
 8015510:	4604      	mov	r4, r0
 8015512:	b163      	cbz	r3, 801552e <rcl_guard_condition_fini+0x26>
 8015514:	6818      	ldr	r0, [r3, #0]
 8015516:	68de      	ldr	r6, [r3, #12]
 8015518:	6999      	ldr	r1, [r3, #24]
 801551a:	b160      	cbz	r0, 8015536 <rcl_guard_condition_fini+0x2e>
 801551c:	791d      	ldrb	r5, [r3, #4]
 801551e:	b965      	cbnz	r5, 801553a <rcl_guard_condition_fini+0x32>
 8015520:	4618      	mov	r0, r3
 8015522:	47b0      	blx	r6
 8015524:	2300      	movs	r3, #0
 8015526:	4628      	mov	r0, r5
 8015528:	6063      	str	r3, [r4, #4]
 801552a:	b002      	add	sp, #8
 801552c:	bd70      	pop	{r4, r5, r6, pc}
 801552e:	461d      	mov	r5, r3
 8015530:	4628      	mov	r0, r5
 8015532:	b002      	add	sp, #8
 8015534:	bd70      	pop	{r4, r5, r6, pc}
 8015536:	4605      	mov	r5, r0
 8015538:	e7f2      	b.n	8015520 <rcl_guard_condition_fini+0x18>
 801553a:	9101      	str	r1, [sp, #4]
 801553c:	f002 ff1c 	bl	8018378 <rmw_destroy_guard_condition>
 8015540:	1e05      	subs	r5, r0, #0
 8015542:	6863      	ldr	r3, [r4, #4]
 8015544:	9901      	ldr	r1, [sp, #4]
 8015546:	bf18      	it	ne
 8015548:	2501      	movne	r5, #1
 801554a:	e7e9      	b.n	8015520 <rcl_guard_condition_fini+0x18>
 801554c:	250b      	movs	r5, #11
 801554e:	4628      	mov	r0, r5
 8015550:	b002      	add	sp, #8
 8015552:	bd70      	pop	{r4, r5, r6, pc}

08015554 <rcl_guard_condition_get_default_options>:
 8015554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015556:	b087      	sub	sp, #28
 8015558:	4606      	mov	r6, r0
 801555a:	4c0b      	ldr	r4, [pc, #44]	@ (8015588 <rcl_guard_condition_get_default_options+0x34>)
 801555c:	4668      	mov	r0, sp
 801555e:	f7fb fad3 	bl	8010b08 <rcutils_get_default_allocator>
 8015562:	46ee      	mov	lr, sp
 8015564:	46a4      	mov	ip, r4
 8015566:	4625      	mov	r5, r4
 8015568:	4634      	mov	r4, r6
 801556a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801556e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015574:	f8de 7000 	ldr.w	r7, [lr]
 8015578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801557a:	4630      	mov	r0, r6
 801557c:	f8cc 7000 	str.w	r7, [ip]
 8015580:	6027      	str	r7, [r4, #0]
 8015582:	b007      	add	sp, #28
 8015584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015586:	bf00      	nop
 8015588:	20012784 	.word	0x20012784

0801558c <rcl_guard_condition_get_rmw_handle>:
 801558c:	b110      	cbz	r0, 8015594 <rcl_guard_condition_get_rmw_handle+0x8>
 801558e:	6840      	ldr	r0, [r0, #4]
 8015590:	b100      	cbz	r0, 8015594 <rcl_guard_condition_get_rmw_handle+0x8>
 8015592:	6800      	ldr	r0, [r0, #0]
 8015594:	4770      	bx	lr
 8015596:	bf00      	nop

08015598 <rcl_init>:
 8015598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801559c:	1e05      	subs	r5, r0, #0
 801559e:	b09e      	sub	sp, #120	@ 0x78
 80155a0:	460e      	mov	r6, r1
 80155a2:	4690      	mov	r8, r2
 80155a4:	461f      	mov	r7, r3
 80155a6:	f340 809f 	ble.w	80156e8 <rcl_init+0x150>
 80155aa:	2900      	cmp	r1, #0
 80155ac:	f000 809f 	beq.w	80156ee <rcl_init+0x156>
 80155b0:	f1a1 0e04 	sub.w	lr, r1, #4
 80155b4:	f04f 0c00 	mov.w	ip, #0
 80155b8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80155bc:	f10c 0c01 	add.w	ip, ip, #1
 80155c0:	2c00      	cmp	r4, #0
 80155c2:	f000 8094 	beq.w	80156ee <rcl_init+0x156>
 80155c6:	4565      	cmp	r5, ip
 80155c8:	d1f6      	bne.n	80155b8 <rcl_init+0x20>
 80155ca:	f1b8 0f00 	cmp.w	r8, #0
 80155ce:	f000 808e 	beq.w	80156ee <rcl_init+0x156>
 80155d2:	f8d8 4000 	ldr.w	r4, [r8]
 80155d6:	2c00      	cmp	r4, #0
 80155d8:	f000 8089 	beq.w	80156ee <rcl_init+0x156>
 80155dc:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80155e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80155e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155e6:	6823      	ldr	r3, [r4, #0]
 80155e8:	a819      	add	r0, sp, #100	@ 0x64
 80155ea:	f8cc 3000 	str.w	r3, [ip]
 80155ee:	f7fb fa99 	bl	8010b24 <rcutils_allocator_is_valid>
 80155f2:	f080 0001 	eor.w	r0, r0, #1
 80155f6:	b2c0      	uxtb	r0, r0
 80155f8:	2800      	cmp	r0, #0
 80155fa:	d178      	bne.n	80156ee <rcl_init+0x156>
 80155fc:	2f00      	cmp	r7, #0
 80155fe:	d076      	beq.n	80156ee <rcl_init+0x156>
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d178      	bne.n	80156f8 <rcl_init+0x160>
 8015606:	2178      	movs	r1, #120	@ 0x78
 8015608:	2001      	movs	r0, #1
 801560a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801560e:	4798      	blx	r3
 8015610:	4604      	mov	r4, r0
 8015612:	6038      	str	r0, [r7, #0]
 8015614:	2800      	cmp	r0, #0
 8015616:	f000 80b6 	beq.w	8015786 <rcl_init+0x1ee>
 801561a:	a802      	add	r0, sp, #8
 801561c:	f002 fcd4 	bl	8017fc8 <rmw_get_zero_initialized_context>
 8015620:	a902      	add	r1, sp, #8
 8015622:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015626:	2250      	movs	r2, #80	@ 0x50
 8015628:	f006 f94d 	bl	801b8c6 <memcpy>
 801562c:	ac19      	add	r4, sp, #100	@ 0x64
 801562e:	f8d7 e000 	ldr.w	lr, [r7]
 8015632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015634:	46f4      	mov	ip, lr
 8015636:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801563a:	6823      	ldr	r3, [r4, #0]
 801563c:	f10e 0114 	add.w	r1, lr, #20
 8015640:	4640      	mov	r0, r8
 8015642:	f8cc 3000 	str.w	r3, [ip]
 8015646:	f000 f93f 	bl	80158c8 <rcl_init_options_copy>
 801564a:	4604      	mov	r4, r0
 801564c:	2800      	cmp	r0, #0
 801564e:	d144      	bne.n	80156da <rcl_init+0x142>
 8015650:	f8d7 9000 	ldr.w	r9, [r7]
 8015654:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015658:	f8c9 0020 	str.w	r0, [r9, #32]
 801565c:	f8c9 5018 	str.w	r5, [r9, #24]
 8015660:	f8c9 801c 	str.w	r8, [r9, #28]
 8015664:	2d00      	cmp	r5, #0
 8015666:	d04e      	beq.n	8015706 <rcl_init+0x16e>
 8015668:	2e00      	cmp	r6, #0
 801566a:	d04c      	beq.n	8015706 <rcl_init+0x16e>
 801566c:	2104      	movs	r1, #4
 801566e:	4628      	mov	r0, r5
 8015670:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015674:	4798      	blx	r3
 8015676:	f8c9 0020 	str.w	r0, [r9, #32]
 801567a:	f8d7 9000 	ldr.w	r9, [r7]
 801567e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015682:	46ca      	mov	sl, r9
 8015684:	b343      	cbz	r3, 80156d8 <rcl_init+0x140>
 8015686:	2d01      	cmp	r5, #1
 8015688:	f178 0300 	sbcs.w	r3, r8, #0
 801568c:	db3b      	blt.n	8015706 <rcl_init+0x16e>
 801568e:	2400      	movs	r4, #0
 8015690:	3e04      	subs	r6, #4
 8015692:	46a1      	mov	r9, r4
 8015694:	e00b      	b.n	80156ae <rcl_init+0x116>
 8015696:	6831      	ldr	r1, [r6, #0]
 8015698:	f006 f915 	bl	801b8c6 <memcpy>
 801569c:	3401      	adds	r4, #1
 801569e:	f149 0900 	adc.w	r9, r9, #0
 80156a2:	45c8      	cmp	r8, r9
 80156a4:	bf08      	it	eq
 80156a6:	42a5      	cmpeq	r5, r4
 80156a8:	d02b      	beq.n	8015702 <rcl_init+0x16a>
 80156aa:	f8d7 a000 	ldr.w	sl, [r7]
 80156ae:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80156b2:	f7ea fdcf 	bl	8000254 <strlen>
 80156b6:	1c42      	adds	r2, r0, #1
 80156b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80156ba:	4610      	mov	r0, r2
 80156bc:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80156be:	f8da a020 	ldr.w	sl, [sl, #32]
 80156c2:	9201      	str	r2, [sp, #4]
 80156c4:	4798      	blx	r3
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80156cc:	6a1b      	ldr	r3, [r3, #32]
 80156ce:	9a01      	ldr	r2, [sp, #4]
 80156d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80156d4:	2800      	cmp	r0, #0
 80156d6:	d1de      	bne.n	8015696 <rcl_init+0xfe>
 80156d8:	240a      	movs	r4, #10
 80156da:	4638      	mov	r0, r7
 80156dc:	f7ff fe4e 	bl	801537c <__cleanup_context>
 80156e0:	4620      	mov	r0, r4
 80156e2:	b01e      	add	sp, #120	@ 0x78
 80156e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156e8:	2900      	cmp	r1, #0
 80156ea:	f43f af6e 	beq.w	80155ca <rcl_init+0x32>
 80156ee:	240b      	movs	r4, #11
 80156f0:	4620      	mov	r0, r4
 80156f2:	b01e      	add	sp, #120	@ 0x78
 80156f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156f8:	2464      	movs	r4, #100	@ 0x64
 80156fa:	4620      	mov	r0, r4
 80156fc:	b01e      	add	sp, #120	@ 0x78
 80156fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015702:	f8d7 9000 	ldr.w	r9, [r7]
 8015706:	4926      	ldr	r1, [pc, #152]	@ (80157a0 <rcl_init+0x208>)
 8015708:	680b      	ldr	r3, [r1, #0]
 801570a:	3301      	adds	r3, #1
 801570c:	d036      	beq.n	801577c <rcl_init+0x1e4>
 801570e:	461a      	mov	r2, r3
 8015710:	2400      	movs	r4, #0
 8015712:	600b      	str	r3, [r1, #0]
 8015714:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015718:	607b      	str	r3, [r7, #4]
 801571a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801571c:	3301      	adds	r3, #1
 801571e:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8015722:	d034      	beq.n	801578e <rcl_init+0x1f6>
 8015724:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015728:	b93b      	cbnz	r3, 801573a <rcl_init+0x1a2>
 801572a:	3030      	adds	r0, #48	@ 0x30
 801572c:	f000 f93a 	bl	80159a4 <rcl_get_localhost_only>
 8015730:	4604      	mov	r4, r0
 8015732:	2800      	cmp	r0, #0
 8015734:	d1d1      	bne.n	80156da <rcl_init+0x142>
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	6958      	ldr	r0, [r3, #20]
 801573a:	aa18      	add	r2, sp, #96	@ 0x60
 801573c:	a917      	add	r1, sp, #92	@ 0x5c
 801573e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8015740:	f000 fee8 	bl	8016514 <rcl_validate_enclave_name>
 8015744:	4604      	mov	r4, r0
 8015746:	2800      	cmp	r0, #0
 8015748:	d1c7      	bne.n	80156da <rcl_init+0x142>
 801574a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801574c:	b9eb      	cbnz	r3, 801578a <rcl_init+0x1f2>
 801574e:	6839      	ldr	r1, [r7, #0]
 8015750:	694b      	ldr	r3, [r1, #20]
 8015752:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015756:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8015758:	f000 fac8 	bl	8015cec <rcl_get_security_options_from_environment>
 801575c:	4604      	mov	r4, r0
 801575e:	2800      	cmp	r0, #0
 8015760:	d1bb      	bne.n	80156da <rcl_init+0x142>
 8015762:	6839      	ldr	r1, [r7, #0]
 8015764:	6948      	ldr	r0, [r1, #20]
 8015766:	3128      	adds	r1, #40	@ 0x28
 8015768:	3018      	adds	r0, #24
 801576a:	f002 ff17 	bl	801859c <rmw_init>
 801576e:	4604      	mov	r4, r0
 8015770:	2800      	cmp	r0, #0
 8015772:	d0bd      	beq.n	80156f0 <rcl_init+0x158>
 8015774:	f7ff fdde 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8015778:	4604      	mov	r4, r0
 801577a:	e7ae      	b.n	80156da <rcl_init+0x142>
 801577c:	2201      	movs	r2, #1
 801577e:	461c      	mov	r4, r3
 8015780:	600a      	str	r2, [r1, #0]
 8015782:	4613      	mov	r3, r2
 8015784:	e7c6      	b.n	8015714 <rcl_init+0x17c>
 8015786:	240a      	movs	r4, #10
 8015788:	e7b2      	b.n	80156f0 <rcl_init+0x158>
 801578a:	2401      	movs	r4, #1
 801578c:	e7a5      	b.n	80156da <rcl_init+0x142>
 801578e:	3024      	adds	r0, #36	@ 0x24
 8015790:	f005 f876 	bl	801a880 <rcl_get_default_domain_id>
 8015794:	4604      	mov	r4, r0
 8015796:	2800      	cmp	r0, #0
 8015798:	d19f      	bne.n	80156da <rcl_init+0x142>
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	6958      	ldr	r0, [r3, #20]
 801579e:	e7c1      	b.n	8015724 <rcl_init+0x18c>
 80157a0:	20012798 	.word	0x20012798

080157a4 <rcl_get_zero_initialized_init_options>:
 80157a4:	2000      	movs	r0, #0
 80157a6:	4770      	bx	lr

080157a8 <rcl_init_options_init>:
 80157a8:	b084      	sub	sp, #16
 80157aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ac:	b097      	sub	sp, #92	@ 0x5c
 80157ae:	ae1d      	add	r6, sp, #116	@ 0x74
 80157b0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80157b4:	2800      	cmp	r0, #0
 80157b6:	d058      	beq.n	801586a <rcl_init_options_init+0xc2>
 80157b8:	6803      	ldr	r3, [r0, #0]
 80157ba:	4605      	mov	r5, r0
 80157bc:	b133      	cbz	r3, 80157cc <rcl_init_options_init+0x24>
 80157be:	2464      	movs	r4, #100	@ 0x64
 80157c0:	4620      	mov	r0, r4
 80157c2:	b017      	add	sp, #92	@ 0x5c
 80157c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80157c8:	b004      	add	sp, #16
 80157ca:	4770      	bx	lr
 80157cc:	4630      	mov	r0, r6
 80157ce:	f7fb f9a9 	bl	8010b24 <rcutils_allocator_is_valid>
 80157d2:	2800      	cmp	r0, #0
 80157d4:	d049      	beq.n	801586a <rcl_init_options_init+0xc2>
 80157d6:	46b4      	mov	ip, r6
 80157d8:	ac11      	add	r4, sp, #68	@ 0x44
 80157da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157e0:	f8dc 3000 	ldr.w	r3, [ip]
 80157e4:	2050      	movs	r0, #80	@ 0x50
 80157e6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80157e8:	6023      	str	r3, [r4, #0]
 80157ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80157ec:	4798      	blx	r3
 80157ee:	4604      	mov	r4, r0
 80157f0:	6028      	str	r0, [r5, #0]
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d03b      	beq.n	801586e <rcl_init_options_init+0xc6>
 80157f6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80157fa:	4686      	mov	lr, r0
 80157fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015800:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015804:	f8dc 3000 	ldr.w	r3, [ip]
 8015808:	a802      	add	r0, sp, #8
 801580a:	f8ce 3000 	str.w	r3, [lr]
 801580e:	f002 fbef 	bl	8017ff0 <rmw_get_zero_initialized_init_options>
 8015812:	f10d 0e08 	add.w	lr, sp, #8
 8015816:	f104 0c18 	add.w	ip, r4, #24
 801581a:	682f      	ldr	r7, [r5, #0]
 801581c:	ac20      	add	r4, sp, #128	@ 0x80
 801581e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015822:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015826:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801582a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801582e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015832:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015836:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801583a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801583e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015842:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015846:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801584a:	f107 0018 	add.w	r0, r7, #24
 801584e:	f002 fda7 	bl	80183a0 <rmw_init_options_init>
 8015852:	4604      	mov	r4, r0
 8015854:	2800      	cmp	r0, #0
 8015856:	d0b3      	beq.n	80157c0 <rcl_init_options_init+0x18>
 8015858:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801585a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801585c:	6828      	ldr	r0, [r5, #0]
 801585e:	4798      	blx	r3
 8015860:	4620      	mov	r0, r4
 8015862:	f7ff fd67 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8015866:	4604      	mov	r4, r0
 8015868:	e7aa      	b.n	80157c0 <rcl_init_options_init+0x18>
 801586a:	240b      	movs	r4, #11
 801586c:	e7a8      	b.n	80157c0 <rcl_init_options_init+0x18>
 801586e:	240a      	movs	r4, #10
 8015870:	e7a6      	b.n	80157c0 <rcl_init_options_init+0x18>
 8015872:	bf00      	nop

08015874 <rcl_init_options_fini>:
 8015874:	b530      	push	{r4, r5, lr}
 8015876:	b087      	sub	sp, #28
 8015878:	b1f0      	cbz	r0, 80158b8 <rcl_init_options_fini+0x44>
 801587a:	6803      	ldr	r3, [r0, #0]
 801587c:	4604      	mov	r4, r0
 801587e:	b1db      	cbz	r3, 80158b8 <rcl_init_options_fini+0x44>
 8015880:	469c      	mov	ip, r3
 8015882:	f10d 0e04 	add.w	lr, sp, #4
 8015886:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801588a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801588e:	f8dc 3000 	ldr.w	r3, [ip]
 8015892:	a801      	add	r0, sp, #4
 8015894:	f8ce 3000 	str.w	r3, [lr]
 8015898:	f7fb f944 	bl	8010b24 <rcutils_allocator_is_valid>
 801589c:	b160      	cbz	r0, 80158b8 <rcl_init_options_fini+0x44>
 801589e:	6820      	ldr	r0, [r4, #0]
 80158a0:	3018      	adds	r0, #24
 80158a2:	f002 fe37 	bl	8018514 <rmw_init_options_fini>
 80158a6:	4605      	mov	r5, r0
 80158a8:	b950      	cbnz	r0, 80158c0 <rcl_init_options_fini+0x4c>
 80158aa:	6820      	ldr	r0, [r4, #0]
 80158ac:	9b02      	ldr	r3, [sp, #8]
 80158ae:	9905      	ldr	r1, [sp, #20]
 80158b0:	4798      	blx	r3
 80158b2:	4628      	mov	r0, r5
 80158b4:	b007      	add	sp, #28
 80158b6:	bd30      	pop	{r4, r5, pc}
 80158b8:	250b      	movs	r5, #11
 80158ba:	4628      	mov	r0, r5
 80158bc:	b007      	add	sp, #28
 80158be:	bd30      	pop	{r4, r5, pc}
 80158c0:	f7ff fd38 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 80158c4:	4605      	mov	r5, r0
 80158c6:	e7f8      	b.n	80158ba <rcl_init_options_fini+0x46>

080158c8 <rcl_init_options_copy>:
 80158c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158cc:	b094      	sub	sp, #80	@ 0x50
 80158ce:	2800      	cmp	r0, #0
 80158d0:	d05b      	beq.n	801598a <rcl_init_options_copy+0xc2>
 80158d2:	4604      	mov	r4, r0
 80158d4:	6800      	ldr	r0, [r0, #0]
 80158d6:	2800      	cmp	r0, #0
 80158d8:	d057      	beq.n	801598a <rcl_init_options_copy+0xc2>
 80158da:	460e      	mov	r6, r1
 80158dc:	f7fb f922 	bl	8010b24 <rcutils_allocator_is_valid>
 80158e0:	2e00      	cmp	r6, #0
 80158e2:	d052      	beq.n	801598a <rcl_init_options_copy+0xc2>
 80158e4:	f080 0001 	eor.w	r0, r0, #1
 80158e8:	b2c0      	uxtb	r0, r0
 80158ea:	2800      	cmp	r0, #0
 80158ec:	d14d      	bne.n	801598a <rcl_init_options_copy+0xc2>
 80158ee:	6833      	ldr	r3, [r6, #0]
 80158f0:	b123      	cbz	r3, 80158fc <rcl_init_options_copy+0x34>
 80158f2:	2464      	movs	r4, #100	@ 0x64
 80158f4:	4620      	mov	r0, r4
 80158f6:	b014      	add	sp, #80	@ 0x50
 80158f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158fc:	6827      	ldr	r7, [r4, #0]
 80158fe:	ad0f      	add	r5, sp, #60	@ 0x3c
 8015900:	46bc      	mov	ip, r7
 8015902:	f8d7 8000 	ldr.w	r8, [r7]
 8015906:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801590a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801590c:	f8dc 3000 	ldr.w	r3, [ip]
 8015910:	2050      	movs	r0, #80	@ 0x50
 8015912:	4619      	mov	r1, r3
 8015914:	602b      	str	r3, [r5, #0]
 8015916:	47c0      	blx	r8
 8015918:	4605      	mov	r5, r0
 801591a:	6030      	str	r0, [r6, #0]
 801591c:	b3d0      	cbz	r0, 8015994 <rcl_init_options_copy+0xcc>
 801591e:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8015922:	4686      	mov	lr, r0
 8015924:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015928:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801592c:	f8dc 3000 	ldr.w	r3, [ip]
 8015930:	4668      	mov	r0, sp
 8015932:	f8ce 3000 	str.w	r3, [lr]
 8015936:	f002 fb5b 	bl	8017ff0 <rmw_get_zero_initialized_init_options>
 801593a:	46ee      	mov	lr, sp
 801593c:	f105 0c18 	add.w	ip, r5, #24
 8015940:	6824      	ldr	r4, [r4, #0]
 8015942:	6835      	ldr	r5, [r6, #0]
 8015944:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015948:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801594c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015950:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015954:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015958:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801595c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015960:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015964:	f104 0018 	add.w	r0, r4, #24
 8015968:	f105 0118 	add.w	r1, r5, #24
 801596c:	f002 fd80 	bl	8018470 <rmw_init_options_copy>
 8015970:	4604      	mov	r4, r0
 8015972:	2800      	cmp	r0, #0
 8015974:	d0be      	beq.n	80158f4 <rcl_init_options_copy+0x2c>
 8015976:	f7fb f8fb 	bl	8010b70 <rcutils_get_error_string>
 801597a:	f7fb f911 	bl	8010ba0 <rcutils_reset_error>
 801597e:	4630      	mov	r0, r6
 8015980:	f7ff ff78 	bl	8015874 <rcl_init_options_fini>
 8015984:	b140      	cbz	r0, 8015998 <rcl_init_options_copy+0xd0>
 8015986:	4604      	mov	r4, r0
 8015988:	e7b4      	b.n	80158f4 <rcl_init_options_copy+0x2c>
 801598a:	240b      	movs	r4, #11
 801598c:	4620      	mov	r0, r4
 801598e:	b014      	add	sp, #80	@ 0x50
 8015990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015994:	240a      	movs	r4, #10
 8015996:	e7ad      	b.n	80158f4 <rcl_init_options_copy+0x2c>
 8015998:	4620      	mov	r0, r4
 801599a:	b014      	add	sp, #80	@ 0x50
 801599c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159a0:	f7ff bcc8 	b.w	8015334 <rcl_convert_rmw_ret_to_rcl_ret>

080159a4 <rcl_get_localhost_only>:
 80159a4:	b510      	push	{r4, lr}
 80159a6:	2300      	movs	r3, #0
 80159a8:	b082      	sub	sp, #8
 80159aa:	9301      	str	r3, [sp, #4]
 80159ac:	b1b8      	cbz	r0, 80159de <rcl_get_localhost_only+0x3a>
 80159ae:	4604      	mov	r4, r0
 80159b0:	a901      	add	r1, sp, #4
 80159b2:	480c      	ldr	r0, [pc, #48]	@ (80159e4 <rcl_get_localhost_only+0x40>)
 80159b4:	f7fb f8c4 	bl	8010b40 <rcutils_get_env>
 80159b8:	b110      	cbz	r0, 80159c0 <rcl_get_localhost_only+0x1c>
 80159ba:	2001      	movs	r0, #1
 80159bc:	b002      	add	sp, #8
 80159be:	bd10      	pop	{r4, pc}
 80159c0:	9b01      	ldr	r3, [sp, #4]
 80159c2:	b113      	cbz	r3, 80159ca <rcl_get_localhost_only+0x26>
 80159c4:	781a      	ldrb	r2, [r3, #0]
 80159c6:	2a31      	cmp	r2, #49	@ 0x31
 80159c8:	d004      	beq.n	80159d4 <rcl_get_localhost_only+0x30>
 80159ca:	2302      	movs	r3, #2
 80159cc:	2000      	movs	r0, #0
 80159ce:	7023      	strb	r3, [r4, #0]
 80159d0:	b002      	add	sp, #8
 80159d2:	bd10      	pop	{r4, pc}
 80159d4:	785b      	ldrb	r3, [r3, #1]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d1f7      	bne.n	80159ca <rcl_get_localhost_only+0x26>
 80159da:	2301      	movs	r3, #1
 80159dc:	e7f6      	b.n	80159cc <rcl_get_localhost_only+0x28>
 80159de:	200b      	movs	r0, #11
 80159e0:	b002      	add	sp, #8
 80159e2:	bd10      	pop	{r4, pc}
 80159e4:	0801d03c 	.word	0x0801d03c

080159e8 <rcl_node_resolve_name>:
 80159e8:	b082      	sub	sp, #8
 80159ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ee:	b091      	sub	sp, #68	@ 0x44
 80159f0:	ac1a      	add	r4, sp, #104	@ 0x68
 80159f2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80159f6:	e884 000c 	stmia.w	r4, {r2, r3}
 80159fa:	2800      	cmp	r0, #0
 80159fc:	d03d      	beq.n	8015a7a <rcl_node_resolve_name+0x92>
 80159fe:	460c      	mov	r4, r1
 8015a00:	4605      	mov	r5, r0
 8015a02:	f7f9 ffc9 	bl	800f998 <rcl_node_get_options>
 8015a06:	2800      	cmp	r0, #0
 8015a08:	d03a      	beq.n	8015a80 <rcl_node_resolve_name+0x98>
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	f7f9 ffb4 	bl	800f978 <rcl_node_get_name>
 8015a10:	4606      	mov	r6, r0
 8015a12:	4628      	mov	r0, r5
 8015a14:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015a16:	f7f9 ffb7 	bl	800f988 <rcl_node_get_namespace>
 8015a1a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015a1e:	4607      	mov	r7, r0
 8015a20:	46ac      	mov	ip, r5
 8015a22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a2a:	f8de 3000 	ldr.w	r3, [lr]
 8015a2e:	f8cc 3000 	str.w	r3, [ip]
 8015a32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015a34:	b30b      	cbz	r3, 8015a7a <rcl_node_resolve_name+0x92>
 8015a36:	4689      	mov	r9, r1
 8015a38:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8015a3c:	f002 f994 	bl	8017d68 <rcutils_get_zero_initialized_string_map>
 8015a40:	ab10      	add	r3, sp, #64	@ 0x40
 8015a42:	9008      	str	r0, [sp, #32]
 8015a44:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015a48:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015a4c:	2100      	movs	r1, #0
 8015a4e:	a808      	add	r0, sp, #32
 8015a50:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015a54:	f002 f9fe 	bl	8017e54 <rcutils_string_map_init>
 8015a58:	4683      	mov	fp, r0
 8015a5a:	b1a0      	cbz	r0, 8015a86 <rcl_node_resolve_name+0x9e>
 8015a5c:	f7fb f888 	bl	8010b70 <rcutils_get_error_string>
 8015a60:	f7fb f89e 	bl	8010ba0 <rcutils_reset_error>
 8015a64:	f1bb 0f0a 	cmp.w	fp, #10
 8015a68:	bf18      	it	ne
 8015a6a:	f04f 0b01 	movne.w	fp, #1
 8015a6e:	4658      	mov	r0, fp
 8015a70:	b011      	add	sp, #68	@ 0x44
 8015a72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a76:	b002      	add	sp, #8
 8015a78:	4770      	bx	lr
 8015a7a:	f04f 0b0b 	mov.w	fp, #11
 8015a7e:	e7f6      	b.n	8015a6e <rcl_node_resolve_name+0x86>
 8015a80:	f04f 0b01 	mov.w	fp, #1
 8015a84:	e7f3      	b.n	8015a6e <rcl_node_resolve_name+0x86>
 8015a86:	9009      	str	r0, [sp, #36]	@ 0x24
 8015a88:	9007      	str	r0, [sp, #28]
 8015a8a:	a808      	add	r0, sp, #32
 8015a8c:	f005 f88c 	bl	801aba8 <rcl_get_default_topic_name_substitutions>
 8015a90:	4683      	mov	fp, r0
 8015a92:	b180      	cbz	r0, 8015ab6 <rcl_node_resolve_name+0xce>
 8015a94:	280a      	cmp	r0, #10
 8015a96:	a808      	add	r0, sp, #32
 8015a98:	bf18      	it	ne
 8015a9a:	f04f 0b01 	movne.w	fp, #1
 8015a9e:	f002 fa19 	bl	8017ed4 <rcutils_string_map_fini>
 8015aa2:	4604      	mov	r4, r0
 8015aa4:	2800      	cmp	r0, #0
 8015aa6:	d15b      	bne.n	8015b60 <rcl_node_resolve_name+0x178>
 8015aa8:	4651      	mov	r1, sl
 8015aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015aac:	47c8      	blx	r9
 8015aae:	4651      	mov	r1, sl
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	47c8      	blx	r9
 8015ab4:	e7db      	b.n	8015a6e <rcl_node_resolve_name+0x86>
 8015ab6:	ab09      	add	r3, sp, #36	@ 0x24
 8015ab8:	46ec      	mov	ip, sp
 8015aba:	9305      	str	r3, [sp, #20]
 8015abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015abe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ac2:	682b      	ldr	r3, [r5, #0]
 8015ac4:	463a      	mov	r2, r7
 8015ac6:	4631      	mov	r1, r6
 8015ac8:	4620      	mov	r0, r4
 8015aca:	f8cc 3000 	str.w	r3, [ip]
 8015ace:	ab08      	add	r3, sp, #32
 8015ad0:	f004 ff0a 	bl	801a8e8 <rcl_expand_topic_name>
 8015ad4:	4683      	mov	fp, r0
 8015ad6:	b9d8      	cbnz	r0, 8015b10 <rcl_node_resolve_name+0x128>
 8015ad8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015ada:	4602      	mov	r2, r0
 8015adc:	9009      	str	r0, [sp, #36]	@ 0x24
 8015ade:	a90a      	add	r1, sp, #40	@ 0x28
 8015ae0:	4620      	mov	r0, r4
 8015ae2:	f002 fb49 	bl	8018178 <rmw_validate_full_topic_name>
 8015ae6:	bb50      	cbnz	r0, 8015b3e <rcl_node_resolve_name+0x156>
 8015ae8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015aea:	2d00      	cmp	r5, #0
 8015aec:	d140      	bne.n	8015b70 <rcl_node_resolve_name+0x188>
 8015aee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015af0:	a808      	add	r0, sp, #32
 8015af2:	601c      	str	r4, [r3, #0]
 8015af4:	f002 f9ee 	bl	8017ed4 <rcutils_string_map_fini>
 8015af8:	4683      	mov	fp, r0
 8015afa:	2800      	cmp	r0, #0
 8015afc:	d043      	beq.n	8015b86 <rcl_node_resolve_name+0x19e>
 8015afe:	f7fb f837 	bl	8010b70 <rcutils_get_error_string>
 8015b02:	46a8      	mov	r8, r5
 8015b04:	f04f 0b01 	mov.w	fp, #1
 8015b08:	462c      	mov	r4, r5
 8015b0a:	f7fb f849 	bl	8010ba0 <rcutils_reset_error>
 8015b0e:	e00a      	b.n	8015b26 <rcl_node_resolve_name+0x13e>
 8015b10:	2867      	cmp	r0, #103	@ 0x67
 8015b12:	bf14      	ite	ne
 8015b14:	f04f 0800 	movne.w	r8, #0
 8015b18:	f008 0801 	andeq.w	r8, r8, #1
 8015b1c:	9c07      	ldr	r4, [sp, #28]
 8015b1e:	a808      	add	r0, sp, #32
 8015b20:	f002 f9d8 	bl	8017ed4 <rcutils_string_map_fini>
 8015b24:	bb50      	cbnz	r0, 8015b7c <rcl_node_resolve_name+0x194>
 8015b26:	4651      	mov	r1, sl
 8015b28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b2a:	47c8      	blx	r9
 8015b2c:	4651      	mov	r1, sl
 8015b2e:	4620      	mov	r0, r4
 8015b30:	47c8      	blx	r9
 8015b32:	f1b8 0f00 	cmp.w	r8, #0
 8015b36:	bf18      	it	ne
 8015b38:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8015b3c:	e797      	b.n	8015a6e <rcl_node_resolve_name+0x86>
 8015b3e:	f7fb f817 	bl	8010b70 <rcutils_get_error_string>
 8015b42:	f7fb f82d 	bl	8010ba0 <rcutils_reset_error>
 8015b46:	a808      	add	r0, sp, #32
 8015b48:	f002 f9c4 	bl	8017ed4 <rcutils_string_map_fini>
 8015b4c:	b998      	cbnz	r0, 8015b76 <rcl_node_resolve_name+0x18e>
 8015b4e:	4651      	mov	r1, sl
 8015b50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b52:	47c8      	blx	r9
 8015b54:	4651      	mov	r1, sl
 8015b56:	4620      	mov	r0, r4
 8015b58:	f04f 0b01 	mov.w	fp, #1
 8015b5c:	47c8      	blx	r9
 8015b5e:	e786      	b.n	8015a6e <rcl_node_resolve_name+0x86>
 8015b60:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015b64:	f7fb f804 	bl	8010b70 <rcutils_get_error_string>
 8015b68:	f7fb f81a 	bl	8010ba0 <rcutils_reset_error>
 8015b6c:	4644      	mov	r4, r8
 8015b6e:	e7da      	b.n	8015b26 <rcl_node_resolve_name+0x13e>
 8015b70:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8015b74:	e7d3      	b.n	8015b1e <rcl_node_resolve_name+0x136>
 8015b76:	46d8      	mov	r8, fp
 8015b78:	f04f 0b01 	mov.w	fp, #1
 8015b7c:	f7fa fff8 	bl	8010b70 <rcutils_get_error_string>
 8015b80:	f7fb f80e 	bl	8010ba0 <rcutils_reset_error>
 8015b84:	e7cf      	b.n	8015b26 <rcl_node_resolve_name+0x13e>
 8015b86:	4651      	mov	r1, sl
 8015b88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b8a:	47c8      	blx	r9
 8015b8c:	4651      	mov	r1, sl
 8015b8e:	4658      	mov	r0, fp
 8015b90:	47c8      	blx	r9
 8015b92:	e76c      	b.n	8015a6e <rcl_node_resolve_name+0x86>

08015b94 <exact_match_lookup>:
 8015b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b96:	f102 0708 	add.w	r7, r2, #8
 8015b9a:	460b      	mov	r3, r1
 8015b9c:	b085      	sub	sp, #20
 8015b9e:	4614      	mov	r4, r2
 8015ba0:	4606      	mov	r6, r0
 8015ba2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015ba6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015baa:	4618      	mov	r0, r3
 8015bac:	4919      	ldr	r1, [pc, #100]	@ (8015c14 <exact_match_lookup+0x80>)
 8015bae:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015bb2:	f002 f8cb 	bl	8017d4c <rcutils_join_path>
 8015bb6:	7833      	ldrb	r3, [r6, #0]
 8015bb8:	4605      	mov	r5, r0
 8015bba:	2b2f      	cmp	r3, #47	@ 0x2f
 8015bbc:	d023      	beq.n	8015c06 <exact_match_lookup+0x72>
 8015bbe:	f104 030c 	add.w	r3, r4, #12
 8015bc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015bc6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015bca:	1c70      	adds	r0, r6, #1
 8015bcc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015bd0:	f002 f8c2 	bl	8017d58 <rcutils_to_native_path>
 8015bd4:	4606      	mov	r6, r0
 8015bd6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015bda:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015bde:	4631      	mov	r1, r6
 8015be0:	4628      	mov	r0, r5
 8015be2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015be6:	f002 f8b1 	bl	8017d4c <rcutils_join_path>
 8015bea:	4603      	mov	r3, r0
 8015bec:	4630      	mov	r0, r6
 8015bee:	6862      	ldr	r2, [r4, #4]
 8015bf0:	461e      	mov	r6, r3
 8015bf2:	6921      	ldr	r1, [r4, #16]
 8015bf4:	4790      	blx	r2
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	4635      	mov	r5, r6
 8015bfa:	6863      	ldr	r3, [r4, #4]
 8015bfc:	6921      	ldr	r1, [r4, #16]
 8015bfe:	4798      	blx	r3
 8015c00:	4628      	mov	r0, r5
 8015c02:	b005      	add	sp, #20
 8015c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c06:	7873      	ldrb	r3, [r6, #1]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d1d8      	bne.n	8015bbe <exact_match_lookup+0x2a>
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	b005      	add	sp, #20
 8015c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c12:	bf00      	nop
 8015c14:	0801d08c 	.word	0x0801d08c

08015c18 <rcl_get_secure_root>:
 8015c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c1c:	b085      	sub	sp, #20
 8015c1e:	b168      	cbz	r0, 8015c3c <rcl_get_secure_root+0x24>
 8015c20:	4607      	mov	r7, r0
 8015c22:	4608      	mov	r0, r1
 8015c24:	460c      	mov	r4, r1
 8015c26:	f7fa ff7d 	bl	8010b24 <rcutils_allocator_is_valid>
 8015c2a:	b138      	cbz	r0, 8015c3c <rcl_get_secure_root+0x24>
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	482d      	ldr	r0, [pc, #180]	@ (8015ce4 <rcl_get_secure_root+0xcc>)
 8015c30:	a903      	add	r1, sp, #12
 8015c32:	9303      	str	r3, [sp, #12]
 8015c34:	f7fa ff84 	bl	8010b40 <rcutils_get_env>
 8015c38:	4605      	mov	r5, r0
 8015c3a:	b120      	cbz	r0, 8015c46 <rcl_get_secure_root+0x2e>
 8015c3c:	2500      	movs	r5, #0
 8015c3e:	4628      	mov	r0, r5
 8015c40:	b005      	add	sp, #20
 8015c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c46:	9b03      	ldr	r3, [sp, #12]
 8015c48:	781a      	ldrb	r2, [r3, #0]
 8015c4a:	2a00      	cmp	r2, #0
 8015c4c:	d0f6      	beq.n	8015c3c <rcl_get_secure_root+0x24>
 8015c4e:	f104 090c 	add.w	r9, r4, #12
 8015c52:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015c56:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015c60:	f7fb f8f4 	bl	8010e4c <rcutils_strdup>
 8015c64:	4680      	mov	r8, r0
 8015c66:	2800      	cmp	r0, #0
 8015c68:	d0e8      	beq.n	8015c3c <rcl_get_secure_root+0x24>
 8015c6a:	a903      	add	r1, sp, #12
 8015c6c:	481e      	ldr	r0, [pc, #120]	@ (8015ce8 <rcl_get_secure_root+0xd0>)
 8015c6e:	9503      	str	r5, [sp, #12]
 8015c70:	f7fa ff66 	bl	8010b40 <rcutils_get_env>
 8015c74:	b160      	cbz	r0, 8015c90 <rcl_get_secure_root+0x78>
 8015c76:	2600      	movs	r6, #0
 8015c78:	4630      	mov	r0, r6
 8015c7a:	6863      	ldr	r3, [r4, #4]
 8015c7c:	6921      	ldr	r1, [r4, #16]
 8015c7e:	4798      	blx	r3
 8015c80:	4640      	mov	r0, r8
 8015c82:	6863      	ldr	r3, [r4, #4]
 8015c84:	6921      	ldr	r1, [r4, #16]
 8015c86:	4798      	blx	r3
 8015c88:	4628      	mov	r0, r5
 8015c8a:	b005      	add	sp, #20
 8015c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c90:	9b03      	ldr	r3, [sp, #12]
 8015c92:	781e      	ldrb	r6, [r3, #0]
 8015c94:	b1f6      	cbz	r6, 8015cd4 <rcl_get_secure_root+0xbc>
 8015c96:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015c9a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015ca4:	f7fb f8d2 	bl	8010e4c <rcutils_strdup>
 8015ca8:	4606      	mov	r6, r0
 8015caa:	2800      	cmp	r0, #0
 8015cac:	d0e3      	beq.n	8015c76 <rcl_get_secure_root+0x5e>
 8015cae:	4622      	mov	r2, r4
 8015cb0:	4641      	mov	r1, r8
 8015cb2:	f7ff ff6f 	bl	8015b94 <exact_match_lookup>
 8015cb6:	4605      	mov	r5, r0
 8015cb8:	2d00      	cmp	r5, #0
 8015cba:	d0dd      	beq.n	8015c78 <rcl_get_secure_root+0x60>
 8015cbc:	4628      	mov	r0, r5
 8015cbe:	f002 f843 	bl	8017d48 <rcutils_is_directory>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	d1d7      	bne.n	8015c78 <rcl_get_secure_root+0x60>
 8015cc8:	4628      	mov	r0, r5
 8015cca:	6921      	ldr	r1, [r4, #16]
 8015ccc:	461d      	mov	r5, r3
 8015cce:	6863      	ldr	r3, [r4, #4]
 8015cd0:	4798      	blx	r3
 8015cd2:	e7d1      	b.n	8015c78 <rcl_get_secure_root+0x60>
 8015cd4:	4622      	mov	r2, r4
 8015cd6:	4638      	mov	r0, r7
 8015cd8:	4641      	mov	r1, r8
 8015cda:	f7ff ff5b 	bl	8015b94 <exact_match_lookup>
 8015cde:	4605      	mov	r5, r0
 8015ce0:	e7ea      	b.n	8015cb8 <rcl_get_secure_root+0xa0>
 8015ce2:	bf00      	nop
 8015ce4:	0801d098 	.word	0x0801d098
 8015ce8:	0801d0b0 	.word	0x0801d0b0

08015cec <rcl_get_security_options_from_environment>:
 8015cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf0:	b082      	sub	sp, #8
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	4606      	mov	r6, r0
 8015cf6:	460f      	mov	r7, r1
 8015cf8:	4821      	ldr	r0, [pc, #132]	@ (8015d80 <rcl_get_security_options_from_environment+0x94>)
 8015cfa:	a901      	add	r1, sp, #4
 8015cfc:	4690      	mov	r8, r2
 8015cfe:	9301      	str	r3, [sp, #4]
 8015d00:	f7fa ff1e 	bl	8010b40 <rcutils_get_env>
 8015d04:	b120      	cbz	r0, 8015d10 <rcl_get_security_options_from_environment+0x24>
 8015d06:	2501      	movs	r5, #1
 8015d08:	4628      	mov	r0, r5
 8015d0a:	b002      	add	sp, #8
 8015d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d10:	4604      	mov	r4, r0
 8015d12:	491c      	ldr	r1, [pc, #112]	@ (8015d84 <rcl_get_security_options_from_environment+0x98>)
 8015d14:	9801      	ldr	r0, [sp, #4]
 8015d16:	f7ea fa93 	bl	8000240 <strcmp>
 8015d1a:	4605      	mov	r5, r0
 8015d1c:	b9f0      	cbnz	r0, 8015d5c <rcl_get_security_options_from_environment+0x70>
 8015d1e:	9001      	str	r0, [sp, #4]
 8015d20:	f1b8 0f00 	cmp.w	r8, #0
 8015d24:	d021      	beq.n	8015d6a <rcl_get_security_options_from_environment+0x7e>
 8015d26:	a901      	add	r1, sp, #4
 8015d28:	4817      	ldr	r0, [pc, #92]	@ (8015d88 <rcl_get_security_options_from_environment+0x9c>)
 8015d2a:	f7fa ff09 	bl	8010b40 <rcutils_get_env>
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	d1e9      	bne.n	8015d06 <rcl_get_security_options_from_environment+0x1a>
 8015d32:	4916      	ldr	r1, [pc, #88]	@ (8015d8c <rcl_get_security_options_from_environment+0xa0>)
 8015d34:	9801      	ldr	r0, [sp, #4]
 8015d36:	f7ea fa83 	bl	8000240 <strcmp>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	4639      	mov	r1, r7
 8015d3e:	4630      	mov	r0, r6
 8015d40:	fab3 f383 	clz	r3, r3
 8015d44:	095b      	lsrs	r3, r3, #5
 8015d46:	f888 3000 	strb.w	r3, [r8]
 8015d4a:	f7ff ff65 	bl	8015c18 <rcl_get_secure_root>
 8015d4e:	b170      	cbz	r0, 8015d6e <rcl_get_security_options_from_environment+0x82>
 8015d50:	f8c8 0004 	str.w	r0, [r8, #4]
 8015d54:	4628      	mov	r0, r5
 8015d56:	b002      	add	sp, #8
 8015d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d5c:	4625      	mov	r5, r4
 8015d5e:	f888 4000 	strb.w	r4, [r8]
 8015d62:	4628      	mov	r0, r5
 8015d64:	b002      	add	sp, #8
 8015d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d6a:	250b      	movs	r5, #11
 8015d6c:	e7cc      	b.n	8015d08 <rcl_get_security_options_from_environment+0x1c>
 8015d6e:	f898 5000 	ldrb.w	r5, [r8]
 8015d72:	f1a5 0501 	sub.w	r5, r5, #1
 8015d76:	fab5 f585 	clz	r5, r5
 8015d7a:	096d      	lsrs	r5, r5, #5
 8015d7c:	e7c4      	b.n	8015d08 <rcl_get_security_options_from_environment+0x1c>
 8015d7e:	bf00      	nop
 8015d80:	0801d050 	.word	0x0801d050
 8015d84:	0801d064 	.word	0x0801d064
 8015d88:	0801d06c 	.word	0x0801d06c
 8015d8c:	0801d084 	.word	0x0801d084

08015d90 <rcl_service_get_rmw_handle>:
 8015d90:	b118      	cbz	r0, 8015d9a <rcl_service_get_rmw_handle+0xa>
 8015d92:	6800      	ldr	r0, [r0, #0]
 8015d94:	b108      	cbz	r0, 8015d9a <rcl_service_get_rmw_handle+0xa>
 8015d96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015d9a:	4770      	bx	lr

08015d9c <rcl_take_request>:
 8015d9c:	b570      	push	{r4, r5, r6, lr}
 8015d9e:	468e      	mov	lr, r1
 8015da0:	b08c      	sub	sp, #48	@ 0x30
 8015da2:	460c      	mov	r4, r1
 8015da4:	4616      	mov	r6, r2
 8015da6:	f10d 0c18 	add.w	ip, sp, #24
 8015daa:	4605      	mov	r5, r0
 8015dac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015db0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015db4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015db8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015dbc:	b30d      	cbz	r5, 8015e02 <rcl_take_request+0x66>
 8015dbe:	682b      	ldr	r3, [r5, #0]
 8015dc0:	b1fb      	cbz	r3, 8015e02 <rcl_take_request+0x66>
 8015dc2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015dc6:	b1e0      	cbz	r0, 8015e02 <rcl_take_request+0x66>
 8015dc8:	b336      	cbz	r6, 8015e18 <rcl_take_request+0x7c>
 8015dca:	2300      	movs	r3, #0
 8015dcc:	4632      	mov	r2, r6
 8015dce:	a902      	add	r1, sp, #8
 8015dd0:	f88d 3007 	strb.w	r3, [sp, #7]
 8015dd4:	f10d 0307 	add.w	r3, sp, #7
 8015dd8:	f002 fe08 	bl	80189ec <rmw_take_request>
 8015ddc:	4605      	mov	r5, r0
 8015dde:	b198      	cbz	r0, 8015e08 <rcl_take_request+0x6c>
 8015de0:	280a      	cmp	r0, #10
 8015de2:	bf18      	it	ne
 8015de4:	2501      	movne	r5, #1
 8015de6:	f10d 0e18 	add.w	lr, sp, #24
 8015dea:	46a4      	mov	ip, r4
 8015dec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015df0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015df4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015df8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015dfc:	4628      	mov	r0, r5
 8015dfe:	b00c      	add	sp, #48	@ 0x30
 8015e00:	bd70      	pop	{r4, r5, r6, pc}
 8015e02:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8015e06:	e7ee      	b.n	8015de6 <rcl_take_request+0x4a>
 8015e08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015e0c:	f240 2359 	movw	r3, #601	@ 0x259
 8015e10:	2a00      	cmp	r2, #0
 8015e12:	bf08      	it	eq
 8015e14:	461d      	moveq	r5, r3
 8015e16:	e7e6      	b.n	8015de6 <rcl_take_request+0x4a>
 8015e18:	250b      	movs	r5, #11
 8015e1a:	e7e4      	b.n	8015de6 <rcl_take_request+0x4a>

08015e1c <rcl_send_response>:
 8015e1c:	b170      	cbz	r0, 8015e3c <rcl_send_response+0x20>
 8015e1e:	6800      	ldr	r0, [r0, #0]
 8015e20:	b160      	cbz	r0, 8015e3c <rcl_send_response+0x20>
 8015e22:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015e26:	b148      	cbz	r0, 8015e3c <rcl_send_response+0x20>
 8015e28:	b169      	cbz	r1, 8015e46 <rcl_send_response+0x2a>
 8015e2a:	b510      	push	{r4, lr}
 8015e2c:	b14a      	cbz	r2, 8015e42 <rcl_send_response+0x26>
 8015e2e:	f002 fe3b 	bl	8018aa8 <rmw_send_response>
 8015e32:	b110      	cbz	r0, 8015e3a <rcl_send_response+0x1e>
 8015e34:	2802      	cmp	r0, #2
 8015e36:	bf18      	it	ne
 8015e38:	2001      	movne	r0, #1
 8015e3a:	bd10      	pop	{r4, pc}
 8015e3c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015e40:	4770      	bx	lr
 8015e42:	200b      	movs	r0, #11
 8015e44:	bd10      	pop	{r4, pc}
 8015e46:	200b      	movs	r0, #11
 8015e48:	4770      	bx	lr
 8015e4a:	bf00      	nop

08015e4c <rcl_service_is_valid>:
 8015e4c:	b130      	cbz	r0, 8015e5c <rcl_service_is_valid+0x10>
 8015e4e:	6800      	ldr	r0, [r0, #0]
 8015e50:	b120      	cbz	r0, 8015e5c <rcl_service_is_valid+0x10>
 8015e52:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015e56:	3800      	subs	r0, #0
 8015e58:	bf18      	it	ne
 8015e5a:	2001      	movne	r0, #1
 8015e5c:	4770      	bx	lr
 8015e5e:	bf00      	nop

08015e60 <rcl_get_zero_initialized_subscription>:
 8015e60:	4b01      	ldr	r3, [pc, #4]	@ (8015e68 <rcl_get_zero_initialized_subscription+0x8>)
 8015e62:	6818      	ldr	r0, [r3, #0]
 8015e64:	4770      	bx	lr
 8015e66:	bf00      	nop
 8015e68:	0801d0d0 	.word	0x0801d0d0

08015e6c <rcl_subscription_init>:
 8015e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e70:	b088      	sub	sp, #32
 8015e72:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8015e74:	b1ff      	cbz	r7, 8015eb6 <rcl_subscription_init+0x4a>
 8015e76:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 8015e7a:	4605      	mov	r5, r0
 8015e7c:	460e      	mov	r6, r1
 8015e7e:	4691      	mov	r9, r2
 8015e80:	4650      	mov	r0, sl
 8015e82:	4698      	mov	r8, r3
 8015e84:	f7fa fe4e 	bl	8010b24 <rcutils_allocator_is_valid>
 8015e88:	f080 0401 	eor.w	r4, r0, #1
 8015e8c:	b2e4      	uxtb	r4, r4
 8015e8e:	b994      	cbnz	r4, 8015eb6 <rcl_subscription_init+0x4a>
 8015e90:	b18d      	cbz	r5, 8015eb6 <rcl_subscription_init+0x4a>
 8015e92:	4630      	mov	r0, r6
 8015e94:	f7f9 fd66 	bl	800f964 <rcl_node_is_valid>
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	d055      	beq.n	8015f48 <rcl_subscription_init+0xdc>
 8015e9c:	f1b9 0f00 	cmp.w	r9, #0
 8015ea0:	d009      	beq.n	8015eb6 <rcl_subscription_init+0x4a>
 8015ea2:	f1b8 0f00 	cmp.w	r8, #0
 8015ea6:	d006      	beq.n	8015eb6 <rcl_subscription_init+0x4a>
 8015ea8:	682b      	ldr	r3, [r5, #0]
 8015eaa:	b14b      	cbz	r3, 8015ec0 <rcl_subscription_init+0x54>
 8015eac:	2464      	movs	r4, #100	@ 0x64
 8015eae:	4620      	mov	r0, r4
 8015eb0:	b008      	add	sp, #32
 8015eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eb6:	240b      	movs	r4, #11
 8015eb8:	4620      	mov	r0, r4
 8015eba:	b008      	add	sp, #32
 8015ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ec0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8015ec4:	aa07      	add	r2, sp, #28
 8015ec6:	9307      	str	r3, [sp, #28]
 8015ec8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8015ecc:	9205      	str	r2, [sp, #20]
 8015ece:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015ed2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015ed6:	4641      	mov	r1, r8
 8015ed8:	4630      	mov	r0, r6
 8015eda:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8015ede:	f7ff fd83 	bl	80159e8 <rcl_node_resolve_name>
 8015ee2:	2800      	cmp	r0, #0
 8015ee4:	d15f      	bne.n	8015fa6 <rcl_subscription_init+0x13a>
 8015ee6:	21c8      	movs	r1, #200	@ 0xc8
 8015ee8:	2001      	movs	r0, #1
 8015eea:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 8015eee:	4798      	blx	r3
 8015ef0:	6028      	str	r0, [r5, #0]
 8015ef2:	2800      	cmp	r0, #0
 8015ef4:	d05f      	beq.n	8015fb6 <rcl_subscription_init+0x14a>
 8015ef6:	4630      	mov	r0, r6
 8015ef8:	f7f9 fd56 	bl	800f9a8 <rcl_node_get_rmw_handle>
 8015efc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015f00:	4649      	mov	r1, r9
 8015f02:	9a07      	ldr	r2, [sp, #28]
 8015f04:	9300      	str	r3, [sp, #0]
 8015f06:	463b      	mov	r3, r7
 8015f08:	682c      	ldr	r4, [r5, #0]
 8015f0a:	f7fb fc1f 	bl	801174c <rmw_create_subscription>
 8015f0e:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8015f12:	682c      	ldr	r4, [r5, #0]
 8015f14:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8015f18:	b348      	cbz	r0, 8015f6e <rcl_subscription_init+0x102>
 8015f1a:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 8015f1e:	f7fb fd0b 	bl	8011938 <rmw_subscription_get_actual_qos>
 8015f22:	4604      	mov	r4, r0
 8015f24:	b9a8      	cbnz	r0, 8015f52 <rcl_subscription_init+0xe6>
 8015f26:	6828      	ldr	r0, [r5, #0]
 8015f28:	2270      	movs	r2, #112	@ 0x70
 8015f2a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8015f2e:	4639      	mov	r1, r7
 8015f30:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8015f34:	f005 fcc7 	bl	801b8c6 <memcpy>
 8015f38:	9807      	ldr	r0, [sp, #28]
 8015f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015f3c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015f3e:	4798      	blx	r3
 8015f40:	4620      	mov	r0, r4
 8015f42:	b008      	add	sp, #32
 8015f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f48:	24c8      	movs	r4, #200	@ 0xc8
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	b008      	add	sp, #32
 8015f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f52:	682c      	ldr	r4, [r5, #0]
 8015f54:	b36c      	cbz	r4, 8015fb2 <rcl_subscription_init+0x146>
 8015f56:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8015f5a:	b14b      	cbz	r3, 8015f70 <rcl_subscription_init+0x104>
 8015f5c:	4630      	mov	r0, r6
 8015f5e:	f7f9 fd23 	bl	800f9a8 <rcl_node_get_rmw_handle>
 8015f62:	682b      	ldr	r3, [r5, #0]
 8015f64:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8015f68:	f7fb fcfa 	bl	8011960 <rmw_destroy_subscription>
 8015f6c:	682c      	ldr	r4, [r5, #0]
 8015f6e:	b194      	cbz	r4, 8015f96 <rcl_subscription_init+0x12a>
 8015f70:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 8015f74:	4630      	mov	r0, r6
 8015f76:	f7fa fdd5 	bl	8010b24 <rcutils_allocator_is_valid>
 8015f7a:	b158      	cbz	r0, 8015f94 <rcl_subscription_init+0x128>
 8015f7c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8015f7e:	b148      	cbz	r0, 8015f94 <rcl_subscription_init+0x128>
 8015f80:	4631      	mov	r1, r6
 8015f82:	f002 f849 	bl	8018018 <rmw_subscription_content_filter_options_fini>
 8015f86:	4606      	mov	r6, r0
 8015f88:	b9c8      	cbnz	r0, 8015fbe <rcl_subscription_init+0x152>
 8015f8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8015f8c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8015f8e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8015f90:	4798      	blx	r3
 8015f92:	66e6      	str	r6, [r4, #108]	@ 0x6c
 8015f94:	682c      	ldr	r4, [r5, #0]
 8015f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015f98:	4620      	mov	r0, r4
 8015f9a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015f9c:	2401      	movs	r4, #1
 8015f9e:	4798      	blx	r3
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	602b      	str	r3, [r5, #0]
 8015fa4:	e7c8      	b.n	8015f38 <rcl_subscription_init+0xcc>
 8015fa6:	2867      	cmp	r0, #103	@ 0x67
 8015fa8:	d007      	beq.n	8015fba <rcl_subscription_init+0x14e>
 8015faa:	2869      	cmp	r0, #105	@ 0x69
 8015fac:	d005      	beq.n	8015fba <rcl_subscription_init+0x14e>
 8015fae:	280a      	cmp	r0, #10
 8015fb0:	d001      	beq.n	8015fb6 <rcl_subscription_init+0x14a>
 8015fb2:	2401      	movs	r4, #1
 8015fb4:	e7c0      	b.n	8015f38 <rcl_subscription_init+0xcc>
 8015fb6:	240a      	movs	r4, #10
 8015fb8:	e7be      	b.n	8015f38 <rcl_subscription_init+0xcc>
 8015fba:	2467      	movs	r4, #103	@ 0x67
 8015fbc:	e7bc      	b.n	8015f38 <rcl_subscription_init+0xcc>
 8015fbe:	f7ff f9b9 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8015fc2:	682c      	ldr	r4, [r5, #0]
 8015fc4:	e7e7      	b.n	8015f96 <rcl_subscription_init+0x12a>
 8015fc6:	bf00      	nop

08015fc8 <rcl_subscription_get_default_options>:
 8015fc8:	b570      	push	{r4, r5, r6, lr}
 8015fca:	4d14      	ldr	r5, [pc, #80]	@ (801601c <rcl_subscription_get_default_options+0x54>)
 8015fcc:	b08a      	sub	sp, #40	@ 0x28
 8015fce:	4604      	mov	r4, r0
 8015fd0:	2250      	movs	r2, #80	@ 0x50
 8015fd2:	4913      	ldr	r1, [pc, #76]	@ (8016020 <rcl_subscription_get_default_options+0x58>)
 8015fd4:	4628      	mov	r0, r5
 8015fd6:	f005 fc76 	bl	801b8c6 <memcpy>
 8015fda:	a804      	add	r0, sp, #16
 8015fdc:	f7fa fd94 	bl	8010b08 <rcutils_get_default_allocator>
 8015fe0:	f10d 0c10 	add.w	ip, sp, #16
 8015fe4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8015fe8:	466e      	mov	r6, sp
 8015fea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015fee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8015ff6:	4630      	mov	r0, r6
 8015ff8:	f8ce 3000 	str.w	r3, [lr]
 8015ffc:	f002 f826 	bl	801804c <rmw_get_default_subscription_options>
 8016000:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8016004:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016008:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801600c:	2270      	movs	r2, #112	@ 0x70
 801600e:	4629      	mov	r1, r5
 8016010:	4620      	mov	r0, r4
 8016012:	f005 fc58 	bl	801b8c6 <memcpy>
 8016016:	4620      	mov	r0, r4
 8016018:	b00a      	add	sp, #40	@ 0x28
 801601a:	bd70      	pop	{r4, r5, r6, pc}
 801601c:	200127a0 	.word	0x200127a0
 8016020:	0801d0d8 	.word	0x0801d0d8

08016024 <rcl_take>:
 8016024:	2800      	cmp	r0, #0
 8016026:	d049      	beq.n	80160bc <rcl_take+0x98>
 8016028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801602c:	4615      	mov	r5, r2
 801602e:	6802      	ldr	r2, [r0, #0]
 8016030:	b0a4      	sub	sp, #144	@ 0x90
 8016032:	4604      	mov	r4, r0
 8016034:	2a00      	cmp	r2, #0
 8016036:	d039      	beq.n	80160ac <rcl_take+0x88>
 8016038:	461f      	mov	r7, r3
 801603a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801603e:	b3ab      	cbz	r3, 80160ac <rcl_take+0x88>
 8016040:	460e      	mov	r6, r1
 8016042:	2900      	cmp	r1, #0
 8016044:	d038      	beq.n	80160b8 <rcl_take+0x94>
 8016046:	2d00      	cmp	r5, #0
 8016048:	d03c      	beq.n	80160c4 <rcl_take+0xa0>
 801604a:	a802      	add	r0, sp, #8
 801604c:	f04f 0800 	mov.w	r8, #0
 8016050:	f002 f88a 	bl	8018168 <rmw_get_zero_initialized_message_info>
 8016054:	f10d 0c08 	add.w	ip, sp, #8
 8016058:	46ae      	mov	lr, r5
 801605a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801605e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016062:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016066:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801606a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801606e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016072:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8016076:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801607a:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801607e:	462b      	mov	r3, r5
 8016080:	6820      	ldr	r0, [r4, #0]
 8016082:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8016086:	4631      	mov	r1, r6
 8016088:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801608c:	9700      	str	r7, [sp, #0]
 801608e:	f002 fdaf 	bl	8018bf0 <rmw_take_with_info>
 8016092:	4603      	mov	r3, r0
 8016094:	b9c0      	cbnz	r0, 80160c8 <rcl_take+0xa4>
 8016096:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801609a:	f240 1291 	movw	r2, #401	@ 0x191
 801609e:	2900      	cmp	r1, #0
 80160a0:	bf08      	it	eq
 80160a2:	4613      	moveq	r3, r2
 80160a4:	4618      	mov	r0, r3
 80160a6:	b024      	add	sp, #144	@ 0x90
 80160a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80160b0:	4618      	mov	r0, r3
 80160b2:	b024      	add	sp, #144	@ 0x90
 80160b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160b8:	230b      	movs	r3, #11
 80160ba:	e7f3      	b.n	80160a4 <rcl_take+0x80>
 80160bc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80160c0:	4618      	mov	r0, r3
 80160c2:	4770      	bx	lr
 80160c4:	ad14      	add	r5, sp, #80	@ 0x50
 80160c6:	e7c0      	b.n	801604a <rcl_take+0x26>
 80160c8:	f7ff f934 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 80160cc:	4603      	mov	r3, r0
 80160ce:	e7e9      	b.n	80160a4 <rcl_take+0x80>

080160d0 <rcl_subscription_get_rmw_handle>:
 80160d0:	b118      	cbz	r0, 80160da <rcl_subscription_get_rmw_handle+0xa>
 80160d2:	6800      	ldr	r0, [r0, #0]
 80160d4:	b108      	cbz	r0, 80160da <rcl_subscription_get_rmw_handle+0xa>
 80160d6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80160da:	4770      	bx	lr

080160dc <rcl_subscription_is_valid>:
 80160dc:	b130      	cbz	r0, 80160ec <rcl_subscription_is_valid+0x10>
 80160de:	6800      	ldr	r0, [r0, #0]
 80160e0:	b120      	cbz	r0, 80160ec <rcl_subscription_is_valid+0x10>
 80160e2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80160e6:	3800      	subs	r0, #0
 80160e8:	bf18      	it	ne
 80160ea:	2001      	movne	r0, #1
 80160ec:	4770      	bx	lr
 80160ee:	bf00      	nop

080160f0 <rcl_get_system_time>:
 80160f0:	4608      	mov	r0, r1
 80160f2:	f7fa bee9 	b.w	8010ec8 <rcutils_system_time_now>
 80160f6:	bf00      	nop

080160f8 <rcl_get_steady_time>:
 80160f8:	4608      	mov	r0, r1
 80160fa:	f7fa bf0b 	b.w	8010f14 <rcutils_steady_time_now>
 80160fe:	bf00      	nop

08016100 <rcl_get_ros_time>:
 8016100:	7a03      	ldrb	r3, [r0, #8]
 8016102:	b510      	push	{r4, lr}
 8016104:	460c      	mov	r4, r1
 8016106:	b143      	cbz	r3, 801611a <rcl_get_ros_time+0x1a>
 8016108:	2105      	movs	r1, #5
 801610a:	f001 fd79 	bl	8017c00 <__atomic_load_8>
 801610e:	4602      	mov	r2, r0
 8016110:	460b      	mov	r3, r1
 8016112:	2000      	movs	r0, #0
 8016114:	e9c4 2300 	strd	r2, r3, [r4]
 8016118:	bd10      	pop	{r4, pc}
 801611a:	4608      	mov	r0, r1
 801611c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016120:	f7fa bed2 	b.w	8010ec8 <rcutils_system_time_now>

08016124 <rcl_clock_init>:
 8016124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016126:	4605      	mov	r5, r0
 8016128:	4610      	mov	r0, r2
 801612a:	4614      	mov	r4, r2
 801612c:	460e      	mov	r6, r1
 801612e:	f7fa fcf9 	bl	8010b24 <rcutils_allocator_is_valid>
 8016132:	b128      	cbz	r0, 8016140 <rcl_clock_init+0x1c>
 8016134:	2d03      	cmp	r5, #3
 8016136:	d803      	bhi.n	8016140 <rcl_clock_init+0x1c>
 8016138:	e8df f005 	tbb	[pc, r5]
 801613c:	0659301f 	.word	0x0659301f
 8016140:	f04f 0c0b 	mov.w	ip, #11
 8016144:	4660      	mov	r0, ip
 8016146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016148:	2c00      	cmp	r4, #0
 801614a:	d0f9      	beq.n	8016140 <rcl_clock_init+0x1c>
 801614c:	fab6 f386 	clz	r3, r6
 8016150:	095b      	lsrs	r3, r3, #5
 8016152:	2e00      	cmp	r6, #0
 8016154:	d0f4      	beq.n	8016140 <rcl_clock_init+0x1c>
 8016156:	6133      	str	r3, [r6, #16]
 8016158:	469c      	mov	ip, r3
 801615a:	f106 0514 	add.w	r5, r6, #20
 801615e:	4f32      	ldr	r7, [pc, #200]	@ (8016228 <rcl_clock_init+0x104>)
 8016160:	f04f 0e03 	mov.w	lr, #3
 8016164:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801616a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801616c:	6823      	ldr	r3, [r4, #0]
 801616e:	4660      	mov	r0, ip
 8016170:	602b      	str	r3, [r5, #0]
 8016172:	60f7      	str	r7, [r6, #12]
 8016174:	f886 e000 	strb.w	lr, [r6]
 8016178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801617a:	2e00      	cmp	r6, #0
 801617c:	d0e0      	beq.n	8016140 <rcl_clock_init+0x1c>
 801617e:	2300      	movs	r3, #0
 8016180:	f106 0514 	add.w	r5, r6, #20
 8016184:	7033      	strb	r3, [r6, #0]
 8016186:	469c      	mov	ip, r3
 8016188:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801618c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8016190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016194:	6823      	ldr	r3, [r4, #0]
 8016196:	4660      	mov	r0, ip
 8016198:	602b      	str	r3, [r5, #0]
 801619a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801619c:	2c00      	cmp	r4, #0
 801619e:	d0cf      	beq.n	8016140 <rcl_clock_init+0x1c>
 80161a0:	fab6 f586 	clz	r5, r6
 80161a4:	096d      	lsrs	r5, r5, #5
 80161a6:	2e00      	cmp	r6, #0
 80161a8:	d0ca      	beq.n	8016140 <rcl_clock_init+0x1c>
 80161aa:	46a6      	mov	lr, r4
 80161ac:	7035      	strb	r5, [r6, #0]
 80161ae:	f106 0c14 	add.w	ip, r6, #20
 80161b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80161b6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80161ba:	e9c6 5503 	strd	r5, r5, [r6, #12]
 80161be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161c2:	f8de 3000 	ldr.w	r3, [lr]
 80161c6:	2010      	movs	r0, #16
 80161c8:	f8cc 3000 	str.w	r3, [ip]
 80161cc:	6823      	ldr	r3, [r4, #0]
 80161ce:	6921      	ldr	r1, [r4, #16]
 80161d0:	4798      	blx	r3
 80161d2:	6130      	str	r0, [r6, #16]
 80161d4:	b320      	cbz	r0, 8016220 <rcl_clock_init+0xfc>
 80161d6:	2200      	movs	r2, #0
 80161d8:	2300      	movs	r3, #0
 80161da:	46ac      	mov	ip, r5
 80161dc:	7205      	strb	r5, [r0, #8]
 80161de:	e9c0 2300 	strd	r2, r3, [r0]
 80161e2:	4a12      	ldr	r2, [pc, #72]	@ (801622c <rcl_clock_init+0x108>)
 80161e4:	2301      	movs	r3, #1
 80161e6:	4660      	mov	r0, ip
 80161e8:	60f2      	str	r2, [r6, #12]
 80161ea:	7033      	strb	r3, [r6, #0]
 80161ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161ee:	2c00      	cmp	r4, #0
 80161f0:	d0a6      	beq.n	8016140 <rcl_clock_init+0x1c>
 80161f2:	fab6 f386 	clz	r3, r6
 80161f6:	095b      	lsrs	r3, r3, #5
 80161f8:	2e00      	cmp	r6, #0
 80161fa:	d0a1      	beq.n	8016140 <rcl_clock_init+0x1c>
 80161fc:	6133      	str	r3, [r6, #16]
 80161fe:	469c      	mov	ip, r3
 8016200:	f106 0514 	add.w	r5, r6, #20
 8016204:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8016230 <rcl_clock_init+0x10c>
 8016208:	2702      	movs	r7, #2
 801620a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801620e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016212:	6823      	ldr	r3, [r4, #0]
 8016214:	4660      	mov	r0, ip
 8016216:	602b      	str	r3, [r5, #0]
 8016218:	f8c6 e00c 	str.w	lr, [r6, #12]
 801621c:	7037      	strb	r7, [r6, #0]
 801621e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016220:	f04f 0c0a 	mov.w	ip, #10
 8016224:	e78e      	b.n	8016144 <rcl_clock_init+0x20>
 8016226:	bf00      	nop
 8016228:	080160f9 	.word	0x080160f9
 801622c:	08016101 	.word	0x08016101
 8016230:	080160f1 	.word	0x080160f1

08016234 <rcl_clock_get_now>:
 8016234:	b140      	cbz	r0, 8016248 <rcl_clock_get_now+0x14>
 8016236:	b139      	cbz	r1, 8016248 <rcl_clock_get_now+0x14>
 8016238:	7803      	ldrb	r3, [r0, #0]
 801623a:	b11b      	cbz	r3, 8016244 <rcl_clock_get_now+0x10>
 801623c:	68c3      	ldr	r3, [r0, #12]
 801623e:	b10b      	cbz	r3, 8016244 <rcl_clock_get_now+0x10>
 8016240:	6900      	ldr	r0, [r0, #16]
 8016242:	4718      	bx	r3
 8016244:	2001      	movs	r0, #1
 8016246:	4770      	bx	lr
 8016248:	200b      	movs	r0, #11
 801624a:	4770      	bx	lr

0801624c <rcl_timer_call>:
 801624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016250:	b087      	sub	sp, #28
 8016252:	2800      	cmp	r0, #0
 8016254:	d06c      	beq.n	8016330 <rcl_timer_call+0xe4>
 8016256:	6803      	ldr	r3, [r0, #0]
 8016258:	4604      	mov	r4, r0
 801625a:	2b00      	cmp	r3, #0
 801625c:	d062      	beq.n	8016324 <rcl_timer_call+0xd8>
 801625e:	f3bf 8f5b 	dmb	ish
 8016262:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016266:	f3bf 8f5b 	dmb	ish
 801626a:	2b00      	cmp	r3, #0
 801626c:	d14f      	bne.n	801630e <rcl_timer_call+0xc2>
 801626e:	6803      	ldr	r3, [r0, #0]
 8016270:	a904      	add	r1, sp, #16
 8016272:	6818      	ldr	r0, [r3, #0]
 8016274:	f7ff ffde 	bl	8016234 <rcl_clock_get_now>
 8016278:	4605      	mov	r5, r0
 801627a:	2800      	cmp	r0, #0
 801627c:	d149      	bne.n	8016312 <rcl_timer_call+0xc6>
 801627e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016282:	2b00      	cmp	r3, #0
 8016284:	db49      	blt.n	801631a <rcl_timer_call+0xce>
 8016286:	2605      	movs	r6, #5
 8016288:	6820      	ldr	r0, [r4, #0]
 801628a:	9600      	str	r6, [sp, #0]
 801628c:	3020      	adds	r0, #32
 801628e:	f001 fd23 	bl	8017cd8 <__atomic_exchange_8>
 8016292:	6823      	ldr	r3, [r4, #0]
 8016294:	4680      	mov	r8, r0
 8016296:	f3bf 8f5b 	dmb	ish
 801629a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801629e:	f3bf 8f5b 	dmb	ish
 80162a2:	6820      	ldr	r0, [r4, #0]
 80162a4:	4689      	mov	r9, r1
 80162a6:	4631      	mov	r1, r6
 80162a8:	3028      	adds	r0, #40	@ 0x28
 80162aa:	f001 fca9 	bl	8017c00 <__atomic_load_8>
 80162ae:	460f      	mov	r7, r1
 80162b0:	4631      	mov	r1, r6
 80162b2:	4606      	mov	r6, r0
 80162b4:	6820      	ldr	r0, [r4, #0]
 80162b6:	3018      	adds	r0, #24
 80162b8:	f001 fca2 	bl	8017c00 <__atomic_load_8>
 80162bc:	4602      	mov	r2, r0
 80162be:	9804      	ldr	r0, [sp, #16]
 80162c0:	460b      	mov	r3, r1
 80162c2:	18b6      	adds	r6, r6, r2
 80162c4:	f8dd c014 	ldr.w	ip, [sp, #20]
 80162c8:	4692      	mov	sl, r2
 80162ca:	eb47 0701 	adc.w	r7, r7, r1
 80162ce:	4286      	cmp	r6, r0
 80162d0:	eb77 010c 	sbcs.w	r1, r7, ip
 80162d4:	da04      	bge.n	80162e0 <rcl_timer_call+0x94>
 80162d6:	ea53 0102 	orrs.w	r1, r3, r2
 80162da:	d12e      	bne.n	801633a <rcl_timer_call+0xee>
 80162dc:	4606      	mov	r6, r0
 80162de:	4667      	mov	r7, ip
 80162e0:	6820      	ldr	r0, [r4, #0]
 80162e2:	2105      	movs	r1, #5
 80162e4:	4632      	mov	r2, r6
 80162e6:	463b      	mov	r3, r7
 80162e8:	3028      	adds	r0, #40	@ 0x28
 80162ea:	9100      	str	r1, [sp, #0]
 80162ec:	f001 fcbe 	bl	8017c6c <__atomic_store_8>
 80162f0:	f1bb 0f00 	cmp.w	fp, #0
 80162f4:	d00d      	beq.n	8016312 <rcl_timer_call+0xc6>
 80162f6:	9a04      	ldr	r2, [sp, #16]
 80162f8:	4620      	mov	r0, r4
 80162fa:	9b05      	ldr	r3, [sp, #20]
 80162fc:	ebb2 0208 	subs.w	r2, r2, r8
 8016300:	eb63 0309 	sbc.w	r3, r3, r9
 8016304:	47d8      	blx	fp
 8016306:	4628      	mov	r0, r5
 8016308:	b007      	add	sp, #28
 801630a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801630e:	f240 3521 	movw	r5, #801	@ 0x321
 8016312:	4628      	mov	r0, r5
 8016314:	b007      	add	sp, #28
 8016316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801631a:	2501      	movs	r5, #1
 801631c:	4628      	mov	r0, r5
 801631e:	b007      	add	sp, #28
 8016320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016324:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8016328:	4628      	mov	r0, r5
 801632a:	b007      	add	sp, #28
 801632c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016330:	250b      	movs	r5, #11
 8016332:	4628      	mov	r0, r5
 8016334:	b007      	add	sp, #28
 8016336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801633a:	1b80      	subs	r0, r0, r6
 801633c:	eb6c 0107 	sbc.w	r1, ip, r7
 8016340:	3801      	subs	r0, #1
 8016342:	f161 0100 	sbc.w	r1, r1, #0
 8016346:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801634a:	f7e9 ffe1 	bl	8000310 <__aeabi_ldivmod>
 801634e:	9b02      	ldr	r3, [sp, #8]
 8016350:	3001      	adds	r0, #1
 8016352:	f141 0100 	adc.w	r1, r1, #0
 8016356:	fb00 f303 	mul.w	r3, r0, r3
 801635a:	fb01 330a 	mla	r3, r1, sl, r3
 801635e:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016362:	1986      	adds	r6, r0, r6
 8016364:	4453      	add	r3, sl
 8016366:	eb43 0707 	adc.w	r7, r3, r7
 801636a:	e7b9      	b.n	80162e0 <rcl_timer_call+0x94>

0801636c <rcl_timer_is_ready>:
 801636c:	b570      	push	{r4, r5, r6, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	b380      	cbz	r0, 80163d4 <rcl_timer_is_ready+0x68>
 8016372:	6803      	ldr	r3, [r0, #0]
 8016374:	4604      	mov	r4, r0
 8016376:	b38b      	cbz	r3, 80163dc <rcl_timer_is_ready+0x70>
 8016378:	460d      	mov	r5, r1
 801637a:	b359      	cbz	r1, 80163d4 <rcl_timer_is_ready+0x68>
 801637c:	f3bf 8f5b 	dmb	ish
 8016380:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016384:	f3bf 8f5b 	dmb	ish
 8016388:	b953      	cbnz	r3, 80163a0 <rcl_timer_is_ready+0x34>
 801638a:	6803      	ldr	r3, [r0, #0]
 801638c:	4669      	mov	r1, sp
 801638e:	6818      	ldr	r0, [r3, #0]
 8016390:	f7ff ff50 	bl	8016234 <rcl_clock_get_now>
 8016394:	4606      	mov	r6, r0
 8016396:	b148      	cbz	r0, 80163ac <rcl_timer_is_ready+0x40>
 8016398:	f240 3321 	movw	r3, #801	@ 0x321
 801639c:	4298      	cmp	r0, r3
 801639e:	d102      	bne.n	80163a6 <rcl_timer_is_ready+0x3a>
 80163a0:	2300      	movs	r3, #0
 80163a2:	461e      	mov	r6, r3
 80163a4:	702b      	strb	r3, [r5, #0]
 80163a6:	4630      	mov	r0, r6
 80163a8:	b002      	add	sp, #8
 80163aa:	bd70      	pop	{r4, r5, r6, pc}
 80163ac:	6820      	ldr	r0, [r4, #0]
 80163ae:	2105      	movs	r1, #5
 80163b0:	3028      	adds	r0, #40	@ 0x28
 80163b2:	f001 fc25 	bl	8017c00 <__atomic_load_8>
 80163b6:	9b00      	ldr	r3, [sp, #0]
 80163b8:	1ac0      	subs	r0, r0, r3
 80163ba:	9b01      	ldr	r3, [sp, #4]
 80163bc:	eb61 0103 	sbc.w	r1, r1, r3
 80163c0:	2801      	cmp	r0, #1
 80163c2:	4630      	mov	r0, r6
 80163c4:	f171 0300 	sbcs.w	r3, r1, #0
 80163c8:	bfb4      	ite	lt
 80163ca:	2301      	movlt	r3, #1
 80163cc:	2300      	movge	r3, #0
 80163ce:	702b      	strb	r3, [r5, #0]
 80163d0:	b002      	add	sp, #8
 80163d2:	bd70      	pop	{r4, r5, r6, pc}
 80163d4:	260b      	movs	r6, #11
 80163d6:	4630      	mov	r0, r6
 80163d8:	b002      	add	sp, #8
 80163da:	bd70      	pop	{r4, r5, r6, pc}
 80163dc:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80163e0:	e7e1      	b.n	80163a6 <rcl_timer_is_ready+0x3a>
 80163e2:	bf00      	nop

080163e4 <rcl_timer_get_time_until_next_call>:
 80163e4:	b570      	push	{r4, r5, r6, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	b330      	cbz	r0, 8016438 <rcl_timer_get_time_until_next_call+0x54>
 80163ea:	6803      	ldr	r3, [r0, #0]
 80163ec:	4604      	mov	r4, r0
 80163ee:	b33b      	cbz	r3, 8016440 <rcl_timer_get_time_until_next_call+0x5c>
 80163f0:	460d      	mov	r5, r1
 80163f2:	b309      	cbz	r1, 8016438 <rcl_timer_get_time_until_next_call+0x54>
 80163f4:	f3bf 8f5b 	dmb	ish
 80163f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80163fc:	f3bf 8f5b 	dmb	ish
 8016400:	b9ab      	cbnz	r3, 801642e <rcl_timer_get_time_until_next_call+0x4a>
 8016402:	6803      	ldr	r3, [r0, #0]
 8016404:	4669      	mov	r1, sp
 8016406:	6818      	ldr	r0, [r3, #0]
 8016408:	f7ff ff14 	bl	8016234 <rcl_clock_get_now>
 801640c:	4606      	mov	r6, r0
 801640e:	b958      	cbnz	r0, 8016428 <rcl_timer_get_time_until_next_call+0x44>
 8016410:	6820      	ldr	r0, [r4, #0]
 8016412:	2105      	movs	r1, #5
 8016414:	3028      	adds	r0, #40	@ 0x28
 8016416:	f001 fbf3 	bl	8017c00 <__atomic_load_8>
 801641a:	9b00      	ldr	r3, [sp, #0]
 801641c:	1ac0      	subs	r0, r0, r3
 801641e:	9b01      	ldr	r3, [sp, #4]
 8016420:	eb61 0103 	sbc.w	r1, r1, r3
 8016424:	6028      	str	r0, [r5, #0]
 8016426:	6069      	str	r1, [r5, #4]
 8016428:	4630      	mov	r0, r6
 801642a:	b002      	add	sp, #8
 801642c:	bd70      	pop	{r4, r5, r6, pc}
 801642e:	f240 3621 	movw	r6, #801	@ 0x321
 8016432:	4630      	mov	r0, r6
 8016434:	b002      	add	sp, #8
 8016436:	bd70      	pop	{r4, r5, r6, pc}
 8016438:	260b      	movs	r6, #11
 801643a:	4630      	mov	r0, r6
 801643c:	b002      	add	sp, #8
 801643e:	bd70      	pop	{r4, r5, r6, pc}
 8016440:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016444:	e7f0      	b.n	8016428 <rcl_timer_get_time_until_next_call+0x44>
 8016446:	bf00      	nop

08016448 <rcl_timer_get_guard_condition>:
 8016448:	b130      	cbz	r0, 8016458 <rcl_timer_get_guard_condition+0x10>
 801644a:	6800      	ldr	r0, [r0, #0]
 801644c:	b120      	cbz	r0, 8016458 <rcl_timer_get_guard_condition+0x10>
 801644e:	68c3      	ldr	r3, [r0, #12]
 8016450:	b10b      	cbz	r3, 8016456 <rcl_timer_get_guard_condition+0xe>
 8016452:	3008      	adds	r0, #8
 8016454:	4770      	bx	lr
 8016456:	4618      	mov	r0, r3
 8016458:	4770      	bx	lr
 801645a:	bf00      	nop

0801645c <rcl_validate_enclave_name_with_size>:
 801645c:	2800      	cmp	r0, #0
 801645e:	d049      	beq.n	80164f4 <rcl_validate_enclave_name_with_size+0x98>
 8016460:	b570      	push	{r4, r5, r6, lr}
 8016462:	4615      	mov	r5, r2
 8016464:	b0c2      	sub	sp, #264	@ 0x108
 8016466:	b19a      	cbz	r2, 8016490 <rcl_validate_enclave_name_with_size+0x34>
 8016468:	461e      	mov	r6, r3
 801646a:	466a      	mov	r2, sp
 801646c:	ab01      	add	r3, sp, #4
 801646e:	460c      	mov	r4, r1
 8016470:	f7fa fd7a 	bl	8010f68 <rmw_validate_namespace_with_size>
 8016474:	4684      	mov	ip, r0
 8016476:	b9b8      	cbnz	r0, 80164a8 <rcl_validate_enclave_name_with_size+0x4c>
 8016478:	9900      	ldr	r1, [sp, #0]
 801647a:	b171      	cbz	r1, 801649a <rcl_validate_enclave_name_with_size+0x3e>
 801647c:	2907      	cmp	r1, #7
 801647e:	d019      	beq.n	80164b4 <rcl_validate_enclave_name_with_size+0x58>
 8016480:	1e4b      	subs	r3, r1, #1
 8016482:	2b05      	cmp	r3, #5
 8016484:	d83a      	bhi.n	80164fc <rcl_validate_enclave_name_with_size+0xa0>
 8016486:	e8df f003 	tbb	[pc, r3]
 801648a:	2926      	.short	0x2926
 801648c:	1d322f2c 	.word	0x1d322f2c
 8016490:	f04f 0c0b 	mov.w	ip, #11
 8016494:	4660      	mov	r0, ip
 8016496:	b042      	add	sp, #264	@ 0x108
 8016498:	bd70      	pop	{r4, r5, r6, pc}
 801649a:	2907      	cmp	r1, #7
 801649c:	d00a      	beq.n	80164b4 <rcl_validate_enclave_name_with_size+0x58>
 801649e:	2300      	movs	r3, #0
 80164a0:	4660      	mov	r0, ip
 80164a2:	602b      	str	r3, [r5, #0]
 80164a4:	b042      	add	sp, #264	@ 0x108
 80164a6:	bd70      	pop	{r4, r5, r6, pc}
 80164a8:	f7fe ff44 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 80164ac:	4684      	mov	ip, r0
 80164ae:	4660      	mov	r0, ip
 80164b0:	b042      	add	sp, #264	@ 0x108
 80164b2:	bd70      	pop	{r4, r5, r6, pc}
 80164b4:	2cff      	cmp	r4, #255	@ 0xff
 80164b6:	d9f2      	bls.n	801649e <rcl_validate_enclave_name_with_size+0x42>
 80164b8:	6029      	str	r1, [r5, #0]
 80164ba:	2e00      	cmp	r6, #0
 80164bc:	d0ea      	beq.n	8016494 <rcl_validate_enclave_name_with_size+0x38>
 80164be:	23fe      	movs	r3, #254	@ 0xfe
 80164c0:	6033      	str	r3, [r6, #0]
 80164c2:	e7e7      	b.n	8016494 <rcl_validate_enclave_name_with_size+0x38>
 80164c4:	2306      	movs	r3, #6
 80164c6:	602b      	str	r3, [r5, #0]
 80164c8:	2e00      	cmp	r6, #0
 80164ca:	d0e3      	beq.n	8016494 <rcl_validate_enclave_name_with_size+0x38>
 80164cc:	9b01      	ldr	r3, [sp, #4]
 80164ce:	4660      	mov	r0, ip
 80164d0:	6033      	str	r3, [r6, #0]
 80164d2:	b042      	add	sp, #264	@ 0x108
 80164d4:	bd70      	pop	{r4, r5, r6, pc}
 80164d6:	2301      	movs	r3, #1
 80164d8:	602b      	str	r3, [r5, #0]
 80164da:	e7f5      	b.n	80164c8 <rcl_validate_enclave_name_with_size+0x6c>
 80164dc:	2302      	movs	r3, #2
 80164de:	602b      	str	r3, [r5, #0]
 80164e0:	e7f2      	b.n	80164c8 <rcl_validate_enclave_name_with_size+0x6c>
 80164e2:	2303      	movs	r3, #3
 80164e4:	602b      	str	r3, [r5, #0]
 80164e6:	e7ef      	b.n	80164c8 <rcl_validate_enclave_name_with_size+0x6c>
 80164e8:	2304      	movs	r3, #4
 80164ea:	602b      	str	r3, [r5, #0]
 80164ec:	e7ec      	b.n	80164c8 <rcl_validate_enclave_name_with_size+0x6c>
 80164ee:	2305      	movs	r3, #5
 80164f0:	602b      	str	r3, [r5, #0]
 80164f2:	e7e9      	b.n	80164c8 <rcl_validate_enclave_name_with_size+0x6c>
 80164f4:	f04f 0c0b 	mov.w	ip, #11
 80164f8:	4660      	mov	r0, ip
 80164fa:	4770      	bx	lr
 80164fc:	460b      	mov	r3, r1
 80164fe:	4a04      	ldr	r2, [pc, #16]	@ (8016510 <rcl_validate_enclave_name_with_size+0xb4>)
 8016500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016504:	a802      	add	r0, sp, #8
 8016506:	f7fa fc53 	bl	8010db0 <rcutils_snprintf>
 801650a:	f04f 0c01 	mov.w	ip, #1
 801650e:	e7c1      	b.n	8016494 <rcl_validate_enclave_name_with_size+0x38>
 8016510:	0801d128 	.word	0x0801d128

08016514 <rcl_validate_enclave_name>:
 8016514:	b168      	cbz	r0, 8016532 <rcl_validate_enclave_name+0x1e>
 8016516:	b570      	push	{r4, r5, r6, lr}
 8016518:	460d      	mov	r5, r1
 801651a:	4616      	mov	r6, r2
 801651c:	4604      	mov	r4, r0
 801651e:	f7e9 fe99 	bl	8000254 <strlen>
 8016522:	4633      	mov	r3, r6
 8016524:	4601      	mov	r1, r0
 8016526:	462a      	mov	r2, r5
 8016528:	4620      	mov	r0, r4
 801652a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801652e:	f7ff bf95 	b.w	801645c <rcl_validate_enclave_name_with_size>
 8016532:	200b      	movs	r0, #11
 8016534:	4770      	bx	lr
 8016536:	bf00      	nop

08016538 <rcl_get_zero_initialized_wait_set>:
 8016538:	b510      	push	{r4, lr}
 801653a:	4c08      	ldr	r4, [pc, #32]	@ (801655c <rcl_get_zero_initialized_wait_set+0x24>)
 801653c:	4686      	mov	lr, r0
 801653e:	4684      	mov	ip, r0
 8016540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016542:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016548:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801654c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801654e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016552:	6823      	ldr	r3, [r4, #0]
 8016554:	4670      	mov	r0, lr
 8016556:	f8cc 3000 	str.w	r3, [ip]
 801655a:	bd10      	pop	{r4, pc}
 801655c:	0801d188 	.word	0x0801d188

08016560 <rcl_wait_set_is_valid>:
 8016560:	b118      	cbz	r0, 801656a <rcl_wait_set_is_valid+0xa>
 8016562:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016564:	3800      	subs	r0, #0
 8016566:	bf18      	it	ne
 8016568:	2001      	movne	r0, #1
 801656a:	4770      	bx	lr

0801656c <rcl_wait_set_fini>:
 801656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016570:	b082      	sub	sp, #8
 8016572:	2800      	cmp	r0, #0
 8016574:	f000 8095 	beq.w	80166a2 <rcl_wait_set_fini+0x136>
 8016578:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801657a:	4604      	mov	r4, r0
 801657c:	2e00      	cmp	r6, #0
 801657e:	f000 808c 	beq.w	801669a <rcl_wait_set_fini+0x12e>
 8016582:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8016584:	f002 fd0e 	bl	8018fa4 <rmw_destroy_wait_set>
 8016588:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801658a:	1e06      	subs	r6, r0, #0
 801658c:	bf18      	it	ne
 801658e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8016592:	2d00      	cmp	r5, #0
 8016594:	f000 8081 	beq.w	801669a <rcl_wait_set_fini+0x12e>
 8016598:	2700      	movs	r7, #0
 801659a:	6820      	ldr	r0, [r4, #0]
 801659c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80165a0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80165a2:	6067      	str	r7, [r4, #4]
 80165a4:	602f      	str	r7, [r5, #0]
 80165a6:	b120      	cbz	r0, 80165b2 <rcl_wait_set_fini+0x46>
 80165a8:	9101      	str	r1, [sp, #4]
 80165aa:	47c0      	blx	r8
 80165ac:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80165ae:	9901      	ldr	r1, [sp, #4]
 80165b0:	6027      	str	r7, [r4, #0]
 80165b2:	68a8      	ldr	r0, [r5, #8]
 80165b4:	b120      	cbz	r0, 80165c0 <rcl_wait_set_fini+0x54>
 80165b6:	47c0      	blx	r8
 80165b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80165ba:	2300      	movs	r3, #0
 80165bc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80165c0:	f04f 0800 	mov.w	r8, #0
 80165c4:	68a0      	ldr	r0, [r4, #8]
 80165c6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80165c8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80165ca:	f8c4 800c 	str.w	r8, [r4, #12]
 80165ce:	f8c5 800c 	str.w	r8, [r5, #12]
 80165d2:	b128      	cbz	r0, 80165e0 <rcl_wait_set_fini+0x74>
 80165d4:	47b8      	blx	r7
 80165d6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80165d8:	f8c4 8008 	str.w	r8, [r4, #8]
 80165dc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80165de:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80165e0:	f04f 0800 	mov.w	r8, #0
 80165e4:	6968      	ldr	r0, [r5, #20]
 80165e6:	f8c5 8010 	str.w	r8, [r5, #16]
 80165ea:	b128      	cbz	r0, 80165f8 <rcl_wait_set_fini+0x8c>
 80165ec:	47b8      	blx	r7
 80165ee:	f8c5 8014 	str.w	r8, [r5, #20]
 80165f2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80165f4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80165f6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80165f8:	f04f 0800 	mov.w	r8, #0
 80165fc:	6920      	ldr	r0, [r4, #16]
 80165fe:	f8c4 8014 	str.w	r8, [r4, #20]
 8016602:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8016606:	b128      	cbz	r0, 8016614 <rcl_wait_set_fini+0xa8>
 8016608:	47b8      	blx	r7
 801660a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801660c:	f8c4 8010 	str.w	r8, [r4, #16]
 8016610:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016612:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016614:	f04f 0800 	mov.w	r8, #0
 8016618:	69a0      	ldr	r0, [r4, #24]
 801661a:	f8c4 801c 	str.w	r8, [r4, #28]
 801661e:	f8c5 8018 	str.w	r8, [r5, #24]
 8016622:	b128      	cbz	r0, 8016630 <rcl_wait_set_fini+0xc4>
 8016624:	9101      	str	r1, [sp, #4]
 8016626:	47b8      	blx	r7
 8016628:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801662a:	9901      	ldr	r1, [sp, #4]
 801662c:	f8c4 8018 	str.w	r8, [r4, #24]
 8016630:	6a28      	ldr	r0, [r5, #32]
 8016632:	b120      	cbz	r0, 801663e <rcl_wait_set_fini+0xd2>
 8016634:	47b8      	blx	r7
 8016636:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016638:	2300      	movs	r3, #0
 801663a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801663e:	2700      	movs	r7, #0
 8016640:	6a20      	ldr	r0, [r4, #32]
 8016642:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016646:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016648:	6267      	str	r7, [r4, #36]	@ 0x24
 801664a:	626f      	str	r7, [r5, #36]	@ 0x24
 801664c:	b120      	cbz	r0, 8016658 <rcl_wait_set_fini+0xec>
 801664e:	9101      	str	r1, [sp, #4]
 8016650:	47c0      	blx	r8
 8016652:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016654:	9901      	ldr	r1, [sp, #4]
 8016656:	6227      	str	r7, [r4, #32]
 8016658:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801665a:	b120      	cbz	r0, 8016666 <rcl_wait_set_fini+0xfa>
 801665c:	47c0      	blx	r8
 801665e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016660:	2300      	movs	r3, #0
 8016662:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016666:	2700      	movs	r7, #0
 8016668:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801666a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801666e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016670:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8016672:	632f      	str	r7, [r5, #48]	@ 0x30
 8016674:	b120      	cbz	r0, 8016680 <rcl_wait_set_fini+0x114>
 8016676:	9101      	str	r1, [sp, #4]
 8016678:	47c0      	blx	r8
 801667a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801667c:	9901      	ldr	r1, [sp, #4]
 801667e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8016680:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8016682:	b120      	cbz	r0, 801668e <rcl_wait_set_fini+0x122>
 8016684:	47c0      	blx	r8
 8016686:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016688:	2300      	movs	r3, #0
 801668a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801668e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016690:	4628      	mov	r0, r5
 8016692:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016694:	4798      	blx	r3
 8016696:	2300      	movs	r3, #0
 8016698:	6323      	str	r3, [r4, #48]	@ 0x30
 801669a:	4630      	mov	r0, r6
 801669c:	b002      	add	sp, #8
 801669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a2:	260b      	movs	r6, #11
 80166a4:	4630      	mov	r0, r6
 80166a6:	b002      	add	sp, #8
 80166a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080166ac <rcl_wait_set_add_subscription>:
 80166ac:	b318      	cbz	r0, 80166f6 <rcl_wait_set_add_subscription+0x4a>
 80166ae:	b538      	push	{r3, r4, r5, lr}
 80166b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80166b2:	4604      	mov	r4, r0
 80166b4:	b30b      	cbz	r3, 80166fa <rcl_wait_set_add_subscription+0x4e>
 80166b6:	b319      	cbz	r1, 8016700 <rcl_wait_set_add_subscription+0x54>
 80166b8:	681d      	ldr	r5, [r3, #0]
 80166ba:	6840      	ldr	r0, [r0, #4]
 80166bc:	4285      	cmp	r5, r0
 80166be:	d217      	bcs.n	80166f0 <rcl_wait_set_add_subscription+0x44>
 80166c0:	1c68      	adds	r0, r5, #1
 80166c2:	6018      	str	r0, [r3, #0]
 80166c4:	6823      	ldr	r3, [r4, #0]
 80166c6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80166ca:	b102      	cbz	r2, 80166ce <rcl_wait_set_add_subscription+0x22>
 80166cc:	6015      	str	r5, [r2, #0]
 80166ce:	4608      	mov	r0, r1
 80166d0:	f7ff fcfe 	bl	80160d0 <rcl_subscription_get_rmw_handle>
 80166d4:	b150      	cbz	r0, 80166ec <rcl_wait_set_add_subscription+0x40>
 80166d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80166d8:	6842      	ldr	r2, [r0, #4]
 80166da:	2000      	movs	r0, #0
 80166dc:	689b      	ldr	r3, [r3, #8]
 80166de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80166e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80166e4:	6853      	ldr	r3, [r2, #4]
 80166e6:	3301      	adds	r3, #1
 80166e8:	6053      	str	r3, [r2, #4]
 80166ea:	bd38      	pop	{r3, r4, r5, pc}
 80166ec:	2001      	movs	r0, #1
 80166ee:	bd38      	pop	{r3, r4, r5, pc}
 80166f0:	f240 3086 	movw	r0, #902	@ 0x386
 80166f4:	bd38      	pop	{r3, r4, r5, pc}
 80166f6:	200b      	movs	r0, #11
 80166f8:	4770      	bx	lr
 80166fa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80166fe:	bd38      	pop	{r3, r4, r5, pc}
 8016700:	200b      	movs	r0, #11
 8016702:	bd38      	pop	{r3, r4, r5, pc}

08016704 <rcl_wait_set_clear>:
 8016704:	2800      	cmp	r0, #0
 8016706:	d074      	beq.n	80167f2 <rcl_wait_set_clear+0xee>
 8016708:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801670a:	b510      	push	{r4, lr}
 801670c:	4604      	mov	r4, r0
 801670e:	2b00      	cmp	r3, #0
 8016710:	d071      	beq.n	80167f6 <rcl_wait_set_clear+0xf2>
 8016712:	6800      	ldr	r0, [r0, #0]
 8016714:	b138      	cbz	r0, 8016726 <rcl_wait_set_clear+0x22>
 8016716:	6862      	ldr	r2, [r4, #4]
 8016718:	2100      	movs	r1, #0
 801671a:	0092      	lsls	r2, r2, #2
 801671c:	f005 f80a 	bl	801b734 <memset>
 8016720:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016722:	2200      	movs	r2, #0
 8016724:	601a      	str	r2, [r3, #0]
 8016726:	68a0      	ldr	r0, [r4, #8]
 8016728:	b138      	cbz	r0, 801673a <rcl_wait_set_clear+0x36>
 801672a:	68e2      	ldr	r2, [r4, #12]
 801672c:	2100      	movs	r1, #0
 801672e:	0092      	lsls	r2, r2, #2
 8016730:	f005 f800 	bl	801b734 <memset>
 8016734:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016736:	2200      	movs	r2, #0
 8016738:	60da      	str	r2, [r3, #12]
 801673a:	69a0      	ldr	r0, [r4, #24]
 801673c:	b138      	cbz	r0, 801674e <rcl_wait_set_clear+0x4a>
 801673e:	69e2      	ldr	r2, [r4, #28]
 8016740:	2100      	movs	r1, #0
 8016742:	0092      	lsls	r2, r2, #2
 8016744:	f004 fff6 	bl	801b734 <memset>
 8016748:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801674a:	2200      	movs	r2, #0
 801674c:	619a      	str	r2, [r3, #24]
 801674e:	6a20      	ldr	r0, [r4, #32]
 8016750:	b138      	cbz	r0, 8016762 <rcl_wait_set_clear+0x5e>
 8016752:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016754:	2100      	movs	r1, #0
 8016756:	0092      	lsls	r2, r2, #2
 8016758:	f004 ffec 	bl	801b734 <memset>
 801675c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801675e:	2200      	movs	r2, #0
 8016760:	625a      	str	r2, [r3, #36]	@ 0x24
 8016762:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016764:	b138      	cbz	r0, 8016776 <rcl_wait_set_clear+0x72>
 8016766:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016768:	2100      	movs	r1, #0
 801676a:	0092      	lsls	r2, r2, #2
 801676c:	f004 ffe2 	bl	801b734 <memset>
 8016770:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016772:	2200      	movs	r2, #0
 8016774:	631a      	str	r2, [r3, #48]	@ 0x30
 8016776:	6920      	ldr	r0, [r4, #16]
 8016778:	b138      	cbz	r0, 801678a <rcl_wait_set_clear+0x86>
 801677a:	6962      	ldr	r2, [r4, #20]
 801677c:	2100      	movs	r1, #0
 801677e:	0092      	lsls	r2, r2, #2
 8016780:	f004 ffd8 	bl	801b734 <memset>
 8016784:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016786:	2200      	movs	r2, #0
 8016788:	641a      	str	r2, [r3, #64]	@ 0x40
 801678a:	6898      	ldr	r0, [r3, #8]
 801678c:	b138      	cbz	r0, 801679e <rcl_wait_set_clear+0x9a>
 801678e:	685a      	ldr	r2, [r3, #4]
 8016790:	2100      	movs	r1, #0
 8016792:	0092      	lsls	r2, r2, #2
 8016794:	f004 ffce 	bl	801b734 <memset>
 8016798:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801679a:	2200      	movs	r2, #0
 801679c:	605a      	str	r2, [r3, #4]
 801679e:	6958      	ldr	r0, [r3, #20]
 80167a0:	b138      	cbz	r0, 80167b2 <rcl_wait_set_clear+0xae>
 80167a2:	691a      	ldr	r2, [r3, #16]
 80167a4:	2100      	movs	r1, #0
 80167a6:	0092      	lsls	r2, r2, #2
 80167a8:	f004 ffc4 	bl	801b734 <memset>
 80167ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80167ae:	2200      	movs	r2, #0
 80167b0:	611a      	str	r2, [r3, #16]
 80167b2:	6a18      	ldr	r0, [r3, #32]
 80167b4:	b138      	cbz	r0, 80167c6 <rcl_wait_set_clear+0xc2>
 80167b6:	69da      	ldr	r2, [r3, #28]
 80167b8:	2100      	movs	r1, #0
 80167ba:	0092      	lsls	r2, r2, #2
 80167bc:	f004 ffba 	bl	801b734 <memset>
 80167c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80167c2:	2200      	movs	r2, #0
 80167c4:	61da      	str	r2, [r3, #28]
 80167c6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80167c8:	b138      	cbz	r0, 80167da <rcl_wait_set_clear+0xd6>
 80167ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80167cc:	2100      	movs	r1, #0
 80167ce:	0092      	lsls	r2, r2, #2
 80167d0:	f004 ffb0 	bl	801b734 <memset>
 80167d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80167d6:	2200      	movs	r2, #0
 80167d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80167da:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80167dc:	b140      	cbz	r0, 80167f0 <rcl_wait_set_clear+0xec>
 80167de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80167e0:	2100      	movs	r1, #0
 80167e2:	0092      	lsls	r2, r2, #2
 80167e4:	f004 ffa6 	bl	801b734 <memset>
 80167e8:	2300      	movs	r3, #0
 80167ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80167ec:	4618      	mov	r0, r3
 80167ee:	6353      	str	r3, [r2, #52]	@ 0x34
 80167f0:	bd10      	pop	{r4, pc}
 80167f2:	200b      	movs	r0, #11
 80167f4:	4770      	bx	lr
 80167f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80167fa:	bd10      	pop	{r4, pc}

080167fc <rcl_wait_set_resize>:
 80167fc:	2800      	cmp	r0, #0
 80167fe:	f000 8180 	beq.w	8016b02 <rcl_wait_set_resize+0x306>
 8016802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016806:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8016808:	b083      	sub	sp, #12
 801680a:	4605      	mov	r5, r0
 801680c:	2c00      	cmp	r4, #0
 801680e:	f000 817a 	beq.w	8016b06 <rcl_wait_set_resize+0x30a>
 8016812:	f04f 0900 	mov.w	r9, #0
 8016816:	461f      	mov	r7, r3
 8016818:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801681c:	4688      	mov	r8, r1
 801681e:	4616      	mov	r6, r2
 8016820:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8016824:	f8c0 9004 	str.w	r9, [r0, #4]
 8016828:	f8c4 9000 	str.w	r9, [r4]
 801682c:	2900      	cmp	r1, #0
 801682e:	f000 80bf 	beq.w	80169b0 <rcl_wait_set_resize+0x1b4>
 8016832:	008c      	lsls	r4, r1, #2
 8016834:	4652      	mov	r2, sl
 8016836:	6800      	ldr	r0, [r0, #0]
 8016838:	4621      	mov	r1, r4
 801683a:	9301      	str	r3, [sp, #4]
 801683c:	4798      	blx	r3
 801683e:	9b01      	ldr	r3, [sp, #4]
 8016840:	6028      	str	r0, [r5, #0]
 8016842:	2800      	cmp	r0, #0
 8016844:	f000 80f6 	beq.w	8016a34 <rcl_wait_set_resize+0x238>
 8016848:	4622      	mov	r2, r4
 801684a:	4649      	mov	r1, r9
 801684c:	9301      	str	r3, [sp, #4]
 801684e:	f004 ff71 	bl	801b734 <memset>
 8016852:	f8c5 8004 	str.w	r8, [r5, #4]
 8016856:	4652      	mov	r2, sl
 8016858:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801685c:	4621      	mov	r1, r4
 801685e:	9b01      	ldr	r3, [sp, #4]
 8016860:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016864:	f8c8 9004 	str.w	r9, [r8, #4]
 8016868:	4798      	blx	r3
 801686a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801686c:	f8c8 0008 	str.w	r0, [r8, #8]
 8016870:	689b      	ldr	r3, [r3, #8]
 8016872:	2b00      	cmp	r3, #0
 8016874:	f000 814a 	beq.w	8016b0c <rcl_wait_set_resize+0x310>
 8016878:	4622      	mov	r2, r4
 801687a:	4649      	mov	r1, r9
 801687c:	4618      	mov	r0, r3
 801687e:	f004 ff59 	bl	801b734 <memset>
 8016882:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016884:	f04f 0800 	mov.w	r8, #0
 8016888:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801688c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8016890:	f8c5 800c 	str.w	r8, [r5, #12]
 8016894:	f8c4 800c 	str.w	r8, [r4, #12]
 8016898:	2e00      	cmp	r6, #0
 801689a:	f040 809b 	bne.w	80169d4 <rcl_wait_set_resize+0x1d8>
 801689e:	68a8      	ldr	r0, [r5, #8]
 80168a0:	b128      	cbz	r0, 80168ae <rcl_wait_set_resize+0xb2>
 80168a2:	4649      	mov	r1, r9
 80168a4:	4790      	blx	r2
 80168a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80168a8:	60ae      	str	r6, [r5, #8]
 80168aa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80168ae:	f04f 0800 	mov.w	r8, #0
 80168b2:	19f6      	adds	r6, r6, r7
 80168b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80168b8:	f040 80a2 	bne.w	8016a00 <rcl_wait_set_resize+0x204>
 80168bc:	6960      	ldr	r0, [r4, #20]
 80168be:	b130      	cbz	r0, 80168ce <rcl_wait_set_resize+0xd2>
 80168c0:	4649      	mov	r1, r9
 80168c2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80168c4:	4798      	blx	r3
 80168c6:	6166      	str	r6, [r4, #20]
 80168c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80168ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80168ce:	2600      	movs	r6, #0
 80168d0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80168d4:	616e      	str	r6, [r5, #20]
 80168d6:	6426      	str	r6, [r4, #64]	@ 0x40
 80168d8:	2f00      	cmp	r7, #0
 80168da:	f040 80af 	bne.w	8016a3c <rcl_wait_set_resize+0x240>
 80168de:	6928      	ldr	r0, [r5, #16]
 80168e0:	b138      	cbz	r0, 80168f2 <rcl_wait_set_resize+0xf6>
 80168e2:	4649      	mov	r1, r9
 80168e4:	47d0      	blx	sl
 80168e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80168e8:	612f      	str	r7, [r5, #16]
 80168ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80168ee:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80168f2:	2600      	movs	r6, #0
 80168f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80168f6:	61ee      	str	r6, [r5, #28]
 80168f8:	61a6      	str	r6, [r4, #24]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	f040 8093 	bne.w	8016a26 <rcl_wait_set_resize+0x22a>
 8016900:	69a8      	ldr	r0, [r5, #24]
 8016902:	b120      	cbz	r0, 801690e <rcl_wait_set_resize+0x112>
 8016904:	4649      	mov	r1, r9
 8016906:	47d0      	blx	sl
 8016908:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801690a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801690c:	61ab      	str	r3, [r5, #24]
 801690e:	6a20      	ldr	r0, [r4, #32]
 8016910:	b128      	cbz	r0, 801691e <rcl_wait_set_resize+0x122>
 8016912:	4649      	mov	r1, r9
 8016914:	47d0      	blx	sl
 8016916:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016918:	2300      	movs	r3, #0
 801691a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801691e:	2600      	movs	r6, #0
 8016920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016922:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016924:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016928:	626e      	str	r6, [r5, #36]	@ 0x24
 801692a:	6266      	str	r6, [r4, #36]	@ 0x24
 801692c:	2b00      	cmp	r3, #0
 801692e:	f000 8098 	beq.w	8016a62 <rcl_wait_set_resize+0x266>
 8016932:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016936:	463a      	mov	r2, r7
 8016938:	6a28      	ldr	r0, [r5, #32]
 801693a:	4651      	mov	r1, sl
 801693c:	47c8      	blx	r9
 801693e:	6228      	str	r0, [r5, #32]
 8016940:	2800      	cmp	r0, #0
 8016942:	d077      	beq.n	8016a34 <rcl_wait_set_resize+0x238>
 8016944:	4652      	mov	r2, sl
 8016946:	4631      	mov	r1, r6
 8016948:	f004 fef4 	bl	801b734 <memset>
 801694c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801694e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016950:	463a      	mov	r2, r7
 8016952:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016954:	4651      	mov	r1, sl
 8016956:	626b      	str	r3, [r5, #36]	@ 0x24
 8016958:	62a6      	str	r6, [r4, #40]	@ 0x28
 801695a:	47c8      	blx	r9
 801695c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801695e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016960:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8016962:	2c00      	cmp	r4, #0
 8016964:	f000 80f2 	beq.w	8016b4c <rcl_wait_set_resize+0x350>
 8016968:	4620      	mov	r0, r4
 801696a:	4652      	mov	r2, sl
 801696c:	4631      	mov	r1, r6
 801696e:	f004 fee1 	bl	801b734 <memset>
 8016972:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016974:	2600      	movs	r6, #0
 8016976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016978:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801697a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801697e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016980:	6326      	str	r6, [r4, #48]	@ 0x30
 8016982:	2b00      	cmp	r3, #0
 8016984:	f040 8097 	bne.w	8016ab6 <rcl_wait_set_resize+0x2ba>
 8016988:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801698a:	b120      	cbz	r0, 8016996 <rcl_wait_set_resize+0x19a>
 801698c:	4639      	mov	r1, r7
 801698e:	47c0      	blx	r8
 8016990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016992:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016994:	62ab      	str	r3, [r5, #40]	@ 0x28
 8016996:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016998:	2800      	cmp	r0, #0
 801699a:	d04c      	beq.n	8016a36 <rcl_wait_set_resize+0x23a>
 801699c:	4639      	mov	r1, r7
 801699e:	47c0      	blx	r8
 80169a0:	2300      	movs	r3, #0
 80169a2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80169a4:	4618      	mov	r0, r3
 80169a6:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 80169aa:	b003      	add	sp, #12
 80169ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169b0:	6800      	ldr	r0, [r0, #0]
 80169b2:	b120      	cbz	r0, 80169be <rcl_wait_set_resize+0x1c2>
 80169b4:	4651      	mov	r1, sl
 80169b6:	47d8      	blx	fp
 80169b8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80169ba:	f8c5 8000 	str.w	r8, [r5]
 80169be:	68a0      	ldr	r0, [r4, #8]
 80169c0:	2800      	cmp	r0, #0
 80169c2:	f43f af5f 	beq.w	8016884 <rcl_wait_set_resize+0x88>
 80169c6:	4651      	mov	r1, sl
 80169c8:	47d8      	blx	fp
 80169ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80169cc:	2300      	movs	r3, #0
 80169ce:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80169d2:	e757      	b.n	8016884 <rcl_wait_set_resize+0x88>
 80169d4:	00b4      	lsls	r4, r6, #2
 80169d6:	464a      	mov	r2, r9
 80169d8:	68a8      	ldr	r0, [r5, #8]
 80169da:	4621      	mov	r1, r4
 80169dc:	4798      	blx	r3
 80169de:	60a8      	str	r0, [r5, #8]
 80169e0:	b340      	cbz	r0, 8016a34 <rcl_wait_set_resize+0x238>
 80169e2:	4622      	mov	r2, r4
 80169e4:	4641      	mov	r1, r8
 80169e6:	f004 fea5 	bl	801b734 <memset>
 80169ea:	f04f 0800 	mov.w	r8, #0
 80169ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80169f0:	60ee      	str	r6, [r5, #12]
 80169f2:	19f6      	adds	r6, r6, r7
 80169f4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80169f8:	f8c4 8010 	str.w	r8, [r4, #16]
 80169fc:	f43f af5e 	beq.w	80168bc <rcl_wait_set_resize+0xc0>
 8016a00:	00b6      	lsls	r6, r6, #2
 8016a02:	464a      	mov	r2, r9
 8016a04:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016a06:	6960      	ldr	r0, [r4, #20]
 8016a08:	4631      	mov	r1, r6
 8016a0a:	4798      	blx	r3
 8016a0c:	4681      	mov	r9, r0
 8016a0e:	6160      	str	r0, [r4, #20]
 8016a10:	2800      	cmp	r0, #0
 8016a12:	f000 8084 	beq.w	8016b1e <rcl_wait_set_resize+0x322>
 8016a16:	4632      	mov	r2, r6
 8016a18:	4641      	mov	r1, r8
 8016a1a:	f004 fe8b 	bl	801b734 <memset>
 8016a1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016a20:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016a24:	e753      	b.n	80168ce <rcl_wait_set_resize+0xd2>
 8016a26:	009c      	lsls	r4, r3, #2
 8016a28:	464a      	mov	r2, r9
 8016a2a:	69a8      	ldr	r0, [r5, #24]
 8016a2c:	4621      	mov	r1, r4
 8016a2e:	47c0      	blx	r8
 8016a30:	61a8      	str	r0, [r5, #24]
 8016a32:	bb40      	cbnz	r0, 8016a86 <rcl_wait_set_resize+0x28a>
 8016a34:	200a      	movs	r0, #10
 8016a36:	b003      	add	sp, #12
 8016a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a3c:	00bc      	lsls	r4, r7, #2
 8016a3e:	464a      	mov	r2, r9
 8016a40:	6928      	ldr	r0, [r5, #16]
 8016a42:	4621      	mov	r1, r4
 8016a44:	47c0      	blx	r8
 8016a46:	6128      	str	r0, [r5, #16]
 8016a48:	2800      	cmp	r0, #0
 8016a4a:	d0f3      	beq.n	8016a34 <rcl_wait_set_resize+0x238>
 8016a4c:	4622      	mov	r2, r4
 8016a4e:	4631      	mov	r1, r6
 8016a50:	f004 fe70 	bl	801b734 <memset>
 8016a54:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016a56:	616f      	str	r7, [r5, #20]
 8016a58:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016a5c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016a60:	e747      	b.n	80168f2 <rcl_wait_set_resize+0xf6>
 8016a62:	6a28      	ldr	r0, [r5, #32]
 8016a64:	b120      	cbz	r0, 8016a70 <rcl_wait_set_resize+0x274>
 8016a66:	4639      	mov	r1, r7
 8016a68:	47c0      	blx	r8
 8016a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016a6c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016a6e:	622b      	str	r3, [r5, #32]
 8016a70:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016a72:	2800      	cmp	r0, #0
 8016a74:	f43f af7e 	beq.w	8016974 <rcl_wait_set_resize+0x178>
 8016a78:	4639      	mov	r1, r7
 8016a7a:	47c0      	blx	r8
 8016a7c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016a7e:	2300      	movs	r3, #0
 8016a80:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8016a84:	e776      	b.n	8016974 <rcl_wait_set_resize+0x178>
 8016a86:	4622      	mov	r2, r4
 8016a88:	4631      	mov	r1, r6
 8016a8a:	f004 fe53 	bl	801b734 <memset>
 8016a8e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8016a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a92:	464a      	mov	r2, r9
 8016a94:	6a38      	ldr	r0, [r7, #32]
 8016a96:	4621      	mov	r1, r4
 8016a98:	61eb      	str	r3, [r5, #28]
 8016a9a:	61fe      	str	r6, [r7, #28]
 8016a9c:	47c0      	blx	r8
 8016a9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016aa0:	6238      	str	r0, [r7, #32]
 8016aa2:	6a1f      	ldr	r7, [r3, #32]
 8016aa4:	2f00      	cmp	r7, #0
 8016aa6:	d04a      	beq.n	8016b3e <rcl_wait_set_resize+0x342>
 8016aa8:	4622      	mov	r2, r4
 8016aaa:	4631      	mov	r1, r6
 8016aac:	4638      	mov	r0, r7
 8016aae:	f004 fe41 	bl	801b734 <memset>
 8016ab2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016ab4:	e733      	b.n	801691e <rcl_wait_set_resize+0x122>
 8016ab6:	009c      	lsls	r4, r3, #2
 8016ab8:	463a      	mov	r2, r7
 8016aba:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016abc:	4621      	mov	r1, r4
 8016abe:	47c8      	blx	r9
 8016ac0:	62a8      	str	r0, [r5, #40]	@ 0x28
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	d0b6      	beq.n	8016a34 <rcl_wait_set_resize+0x238>
 8016ac6:	4622      	mov	r2, r4
 8016ac8:	4631      	mov	r1, r6
 8016aca:	f004 fe33 	bl	801b734 <memset>
 8016ace:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8016ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ad4:	463a      	mov	r2, r7
 8016ad6:	4621      	mov	r1, r4
 8016ad8:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8016adc:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8016ade:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8016ae2:	47c8      	blx	r9
 8016ae4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016ae6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8016aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d034      	beq.n	8016b5a <rcl_wait_set_resize+0x35e>
 8016af0:	4622      	mov	r2, r4
 8016af2:	4631      	mov	r1, r6
 8016af4:	4618      	mov	r0, r3
 8016af6:	f004 fe1d 	bl	801b734 <memset>
 8016afa:	4630      	mov	r0, r6
 8016afc:	b003      	add	sp, #12
 8016afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b02:	200b      	movs	r0, #11
 8016b04:	4770      	bx	lr
 8016b06:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016b0a:	e794      	b.n	8016a36 <rcl_wait_set_resize+0x23a>
 8016b0c:	6828      	ldr	r0, [r5, #0]
 8016b0e:	4651      	mov	r1, sl
 8016b10:	9301      	str	r3, [sp, #4]
 8016b12:	47d8      	blx	fp
 8016b14:	9b01      	ldr	r3, [sp, #4]
 8016b16:	200a      	movs	r0, #10
 8016b18:	e9c5 3300 	strd	r3, r3, [r5]
 8016b1c:	e78b      	b.n	8016a36 <rcl_wait_set_resize+0x23a>
 8016b1e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016b20:	68a8      	ldr	r0, [r5, #8]
 8016b22:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016b26:	4798      	blx	r3
 8016b28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016b2a:	6928      	ldr	r0, [r5, #16]
 8016b2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016b2e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016b30:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8016b34:	4790      	blx	r2
 8016b36:	200a      	movs	r0, #10
 8016b38:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8016b3c:	e77b      	b.n	8016a36 <rcl_wait_set_resize+0x23a>
 8016b3e:	69a8      	ldr	r0, [r5, #24]
 8016b40:	4649      	mov	r1, r9
 8016b42:	47d0      	blx	sl
 8016b44:	200a      	movs	r0, #10
 8016b46:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8016b4a:	e774      	b.n	8016a36 <rcl_wait_set_resize+0x23a>
 8016b4c:	6a28      	ldr	r0, [r5, #32]
 8016b4e:	4639      	mov	r1, r7
 8016b50:	47c0      	blx	r8
 8016b52:	200a      	movs	r0, #10
 8016b54:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8016b58:	e76d      	b.n	8016a36 <rcl_wait_set_resize+0x23a>
 8016b5a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016b5c:	4639      	mov	r1, r7
 8016b5e:	9301      	str	r3, [sp, #4]
 8016b60:	47c0      	blx	r8
 8016b62:	9b01      	ldr	r3, [sp, #4]
 8016b64:	200a      	movs	r0, #10
 8016b66:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016b6a:	e764      	b.n	8016a36 <rcl_wait_set_resize+0x23a>

08016b6c <rcl_wait_set_init>:
 8016b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b70:	b085      	sub	sp, #20
 8016b72:	4605      	mov	r5, r0
 8016b74:	460e      	mov	r6, r1
 8016b76:	4617      	mov	r7, r2
 8016b78:	a812      	add	r0, sp, #72	@ 0x48
 8016b7a:	4698      	mov	r8, r3
 8016b7c:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8016b80:	f7f9 ffd0 	bl	8010b24 <rcutils_allocator_is_valid>
 8016b84:	2d00      	cmp	r5, #0
 8016b86:	d072      	beq.n	8016c6e <rcl_wait_set_init+0x102>
 8016b88:	f080 0001 	eor.w	r0, r0, #1
 8016b8c:	b2c0      	uxtb	r0, r0
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d16d      	bne.n	8016c6e <rcl_wait_set_init+0x102>
 8016b92:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8016b96:	f1ba 0f00 	cmp.w	sl, #0
 8016b9a:	d004      	beq.n	8016ba6 <rcl_wait_set_init+0x3a>
 8016b9c:	2464      	movs	r4, #100	@ 0x64
 8016b9e:	4620      	mov	r0, r4
 8016ba0:	b005      	add	sp, #20
 8016ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ba6:	f1b9 0f00 	cmp.w	r9, #0
 8016baa:	d060      	beq.n	8016c6e <rcl_wait_set_init+0x102>
 8016bac:	4648      	mov	r0, r9
 8016bae:	f7fe fbdf 	bl	8015370 <rcl_context_is_valid>
 8016bb2:	2800      	cmp	r0, #0
 8016bb4:	d068      	beq.n	8016c88 <rcl_wait_set_init+0x11c>
 8016bb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016bb8:	205c      	movs	r0, #92	@ 0x5c
 8016bba:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8016bbc:	4798      	blx	r3
 8016bbe:	6328      	str	r0, [r5, #48]	@ 0x30
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d063      	beq.n	8016c8c <rcl_wait_set_init+0x120>
 8016bc4:	225c      	movs	r2, #92	@ 0x5c
 8016bc6:	4651      	mov	r1, sl
 8016bc8:	f004 fdb4 	bl	801b734 <memset>
 8016bcc:	ac12      	add	r4, sp, #72	@ 0x48
 8016bce:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8016bd2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8016bd6:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8016bda:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 8016bde:	eb03 0e02 	add.w	lr, r3, r2
 8016be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016be4:	f8d9 9000 	ldr.w	r9, [r9]
 8016be8:	449e      	add	lr, r3
 8016bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016bec:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8016bf0:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8016bf4:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8016bf8:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 8016bfc:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8016c00:	44be      	add	lr, r7
 8016c02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c06:	6823      	ldr	r3, [r4, #0]
 8016c08:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8016c0c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8016c10:	f8cc 3000 	str.w	r3, [ip]
 8016c14:	f002 f9bc 	bl	8018f90 <rmw_create_wait_set>
 8016c18:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016c1a:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 8016c1e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016c20:	b350      	cbz	r0, 8016c78 <rcl_wait_set_init+0x10c>
 8016c22:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8016c24:	4643      	mov	r3, r8
 8016c26:	463a      	mov	r2, r7
 8016c28:	4631      	mov	r1, r6
 8016c2a:	9402      	str	r4, [sp, #8]
 8016c2c:	4628      	mov	r0, r5
 8016c2e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8016c30:	9401      	str	r4, [sp, #4]
 8016c32:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8016c34:	9400      	str	r4, [sp, #0]
 8016c36:	f7ff fde1 	bl	80167fc <rcl_wait_set_resize>
 8016c3a:	4604      	mov	r4, r0
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	d0ae      	beq.n	8016b9e <rcl_wait_set_init+0x32>
 8016c40:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016c42:	bb2b      	cbnz	r3, 8016c90 <rcl_wait_set_init+0x124>
 8016c44:	2600      	movs	r6, #0
 8016c46:	4628      	mov	r0, r5
 8016c48:	4633      	mov	r3, r6
 8016c4a:	4632      	mov	r2, r6
 8016c4c:	4631      	mov	r1, r6
 8016c4e:	9600      	str	r6, [sp, #0]
 8016c50:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016c54:	f7ff fdd2 	bl	80167fc <rcl_wait_set_resize>
 8016c58:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	d09f      	beq.n	8016b9e <rcl_wait_set_init+0x32>
 8016c5e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8016c60:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016c62:	4798      	blx	r3
 8016c64:	4620      	mov	r0, r4
 8016c66:	632e      	str	r6, [r5, #48]	@ 0x30
 8016c68:	b005      	add	sp, #20
 8016c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c6e:	240b      	movs	r4, #11
 8016c70:	4620      	mov	r0, r4
 8016c72:	b005      	add	sp, #20
 8016c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c78:	2401      	movs	r4, #1
 8016c7a:	f002 f993 	bl	8018fa4 <rmw_destroy_wait_set>
 8016c7e:	2800      	cmp	r0, #0
 8016c80:	bf18      	it	ne
 8016c82:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8016c86:	e7dd      	b.n	8016c44 <rcl_wait_set_init+0xd8>
 8016c88:	2465      	movs	r4, #101	@ 0x65
 8016c8a:	e788      	b.n	8016b9e <rcl_wait_set_init+0x32>
 8016c8c:	240a      	movs	r4, #10
 8016c8e:	e786      	b.n	8016b9e <rcl_wait_set_init+0x32>
 8016c90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016c92:	e7f2      	b.n	8016c7a <rcl_wait_set_init+0x10e>

08016c94 <rcl_wait_set_add_guard_condition>:
 8016c94:	b318      	cbz	r0, 8016cde <rcl_wait_set_add_guard_condition+0x4a>
 8016c96:	b538      	push	{r3, r4, r5, lr}
 8016c98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	b30b      	cbz	r3, 8016ce2 <rcl_wait_set_add_guard_condition+0x4e>
 8016c9e:	b319      	cbz	r1, 8016ce8 <rcl_wait_set_add_guard_condition+0x54>
 8016ca0:	68dd      	ldr	r5, [r3, #12]
 8016ca2:	68c0      	ldr	r0, [r0, #12]
 8016ca4:	4285      	cmp	r5, r0
 8016ca6:	d217      	bcs.n	8016cd8 <rcl_wait_set_add_guard_condition+0x44>
 8016ca8:	1c68      	adds	r0, r5, #1
 8016caa:	60d8      	str	r0, [r3, #12]
 8016cac:	68a3      	ldr	r3, [r4, #8]
 8016cae:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016cb2:	b102      	cbz	r2, 8016cb6 <rcl_wait_set_add_guard_condition+0x22>
 8016cb4:	6015      	str	r5, [r2, #0]
 8016cb6:	4608      	mov	r0, r1
 8016cb8:	f7fe fc68 	bl	801558c <rcl_guard_condition_get_rmw_handle>
 8016cbc:	b150      	cbz	r0, 8016cd4 <rcl_wait_set_add_guard_condition+0x40>
 8016cbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cc0:	6842      	ldr	r2, [r0, #4]
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	695b      	ldr	r3, [r3, #20]
 8016cc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016cca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016ccc:	6913      	ldr	r3, [r2, #16]
 8016cce:	3301      	adds	r3, #1
 8016cd0:	6113      	str	r3, [r2, #16]
 8016cd2:	bd38      	pop	{r3, r4, r5, pc}
 8016cd4:	2001      	movs	r0, #1
 8016cd6:	bd38      	pop	{r3, r4, r5, pc}
 8016cd8:	f240 3086 	movw	r0, #902	@ 0x386
 8016cdc:	bd38      	pop	{r3, r4, r5, pc}
 8016cde:	200b      	movs	r0, #11
 8016ce0:	4770      	bx	lr
 8016ce2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016ce6:	bd38      	pop	{r3, r4, r5, pc}
 8016ce8:	200b      	movs	r0, #11
 8016cea:	bd38      	pop	{r3, r4, r5, pc}

08016cec <rcl_wait_set_add_timer>:
 8016cec:	b328      	cbz	r0, 8016d3a <rcl_wait_set_add_timer+0x4e>
 8016cee:	b538      	push	{r3, r4, r5, lr}
 8016cf0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	b31b      	cbz	r3, 8016d3e <rcl_wait_set_add_timer+0x52>
 8016cf6:	b329      	cbz	r1, 8016d44 <rcl_wait_set_add_timer+0x58>
 8016cf8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8016cfa:	6965      	ldr	r5, [r4, #20]
 8016cfc:	42a8      	cmp	r0, r5
 8016cfe:	d219      	bcs.n	8016d34 <rcl_wait_set_add_timer+0x48>
 8016d00:	1c45      	adds	r5, r0, #1
 8016d02:	641d      	str	r5, [r3, #64]	@ 0x40
 8016d04:	6923      	ldr	r3, [r4, #16]
 8016d06:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8016d0a:	b102      	cbz	r2, 8016d0e <rcl_wait_set_add_timer+0x22>
 8016d0c:	6010      	str	r0, [r2, #0]
 8016d0e:	4608      	mov	r0, r1
 8016d10:	f7ff fb9a 	bl	8016448 <rcl_timer_get_guard_condition>
 8016d14:	b168      	cbz	r0, 8016d32 <rcl_wait_set_add_timer+0x46>
 8016d16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016d18:	68e3      	ldr	r3, [r4, #12]
 8016d1a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8016d1c:	3b01      	subs	r3, #1
 8016d1e:	441d      	add	r5, r3
 8016d20:	f7fe fc34 	bl	801558c <rcl_guard_condition_get_rmw_handle>
 8016d24:	b180      	cbz	r0, 8016d48 <rcl_wait_set_add_timer+0x5c>
 8016d26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d28:	6842      	ldr	r2, [r0, #4]
 8016d2a:	2000      	movs	r0, #0
 8016d2c:	695b      	ldr	r3, [r3, #20]
 8016d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016d32:	bd38      	pop	{r3, r4, r5, pc}
 8016d34:	f240 3086 	movw	r0, #902	@ 0x386
 8016d38:	bd38      	pop	{r3, r4, r5, pc}
 8016d3a:	200b      	movs	r0, #11
 8016d3c:	4770      	bx	lr
 8016d3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016d42:	bd38      	pop	{r3, r4, r5, pc}
 8016d44:	200b      	movs	r0, #11
 8016d46:	bd38      	pop	{r3, r4, r5, pc}
 8016d48:	2001      	movs	r0, #1
 8016d4a:	bd38      	pop	{r3, r4, r5, pc}

08016d4c <rcl_wait_set_add_client>:
 8016d4c:	b318      	cbz	r0, 8016d96 <rcl_wait_set_add_client+0x4a>
 8016d4e:	b538      	push	{r3, r4, r5, lr}
 8016d50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016d52:	4604      	mov	r4, r0
 8016d54:	b30b      	cbz	r3, 8016d9a <rcl_wait_set_add_client+0x4e>
 8016d56:	b319      	cbz	r1, 8016da0 <rcl_wait_set_add_client+0x54>
 8016d58:	699d      	ldr	r5, [r3, #24]
 8016d5a:	69c0      	ldr	r0, [r0, #28]
 8016d5c:	4285      	cmp	r5, r0
 8016d5e:	d217      	bcs.n	8016d90 <rcl_wait_set_add_client+0x44>
 8016d60:	1c68      	adds	r0, r5, #1
 8016d62:	6198      	str	r0, [r3, #24]
 8016d64:	69a3      	ldr	r3, [r4, #24]
 8016d66:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016d6a:	b102      	cbz	r2, 8016d6e <rcl_wait_set_add_client+0x22>
 8016d6c:	6015      	str	r5, [r2, #0]
 8016d6e:	4608      	mov	r0, r1
 8016d70:	f7fe fa50 	bl	8015214 <rcl_client_get_rmw_handle>
 8016d74:	b150      	cbz	r0, 8016d8c <rcl_wait_set_add_client+0x40>
 8016d76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016d78:	6842      	ldr	r2, [r0, #4]
 8016d7a:	2000      	movs	r0, #0
 8016d7c:	6a1b      	ldr	r3, [r3, #32]
 8016d7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016d82:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016d84:	69d3      	ldr	r3, [r2, #28]
 8016d86:	3301      	adds	r3, #1
 8016d88:	61d3      	str	r3, [r2, #28]
 8016d8a:	bd38      	pop	{r3, r4, r5, pc}
 8016d8c:	2001      	movs	r0, #1
 8016d8e:	bd38      	pop	{r3, r4, r5, pc}
 8016d90:	f240 3086 	movw	r0, #902	@ 0x386
 8016d94:	bd38      	pop	{r3, r4, r5, pc}
 8016d96:	200b      	movs	r0, #11
 8016d98:	4770      	bx	lr
 8016d9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016d9e:	bd38      	pop	{r3, r4, r5, pc}
 8016da0:	200b      	movs	r0, #11
 8016da2:	bd38      	pop	{r3, r4, r5, pc}

08016da4 <rcl_wait_set_add_service>:
 8016da4:	b318      	cbz	r0, 8016dee <rcl_wait_set_add_service+0x4a>
 8016da6:	b538      	push	{r3, r4, r5, lr}
 8016da8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016daa:	4604      	mov	r4, r0
 8016dac:	b30b      	cbz	r3, 8016df2 <rcl_wait_set_add_service+0x4e>
 8016dae:	b319      	cbz	r1, 8016df8 <rcl_wait_set_add_service+0x54>
 8016db0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8016db2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8016db4:	4285      	cmp	r5, r0
 8016db6:	d217      	bcs.n	8016de8 <rcl_wait_set_add_service+0x44>
 8016db8:	1c68      	adds	r0, r5, #1
 8016dba:	6258      	str	r0, [r3, #36]	@ 0x24
 8016dbc:	6a23      	ldr	r3, [r4, #32]
 8016dbe:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016dc2:	b102      	cbz	r2, 8016dc6 <rcl_wait_set_add_service+0x22>
 8016dc4:	6015      	str	r5, [r2, #0]
 8016dc6:	4608      	mov	r0, r1
 8016dc8:	f7fe ffe2 	bl	8015d90 <rcl_service_get_rmw_handle>
 8016dcc:	b150      	cbz	r0, 8016de4 <rcl_wait_set_add_service+0x40>
 8016dce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016dd0:	6842      	ldr	r2, [r0, #4]
 8016dd2:	2000      	movs	r0, #0
 8016dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016dd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016dda:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016ddc:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016dde:	3301      	adds	r3, #1
 8016de0:	6293      	str	r3, [r2, #40]	@ 0x28
 8016de2:	bd38      	pop	{r3, r4, r5, pc}
 8016de4:	2001      	movs	r0, #1
 8016de6:	bd38      	pop	{r3, r4, r5, pc}
 8016de8:	f240 3086 	movw	r0, #902	@ 0x386
 8016dec:	bd38      	pop	{r3, r4, r5, pc}
 8016dee:	200b      	movs	r0, #11
 8016df0:	4770      	bx	lr
 8016df2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016df6:	bd38      	pop	{r3, r4, r5, pc}
 8016df8:	200b      	movs	r0, #11
 8016dfa:	bd38      	pop	{r3, r4, r5, pc}
 8016dfc:	0000      	movs	r0, r0
	...

08016e00 <rcl_wait>:
 8016e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e04:	ed2d 8b02 	vpush	{d8}
 8016e08:	b08d      	sub	sp, #52	@ 0x34
 8016e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	f000 814f 	beq.w	80170b2 <rcl_wait+0x2b2>
 8016e14:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016e16:	4605      	mov	r5, r0
 8016e18:	2e00      	cmp	r6, #0
 8016e1a:	f000 811a 	beq.w	8017052 <rcl_wait+0x252>
 8016e1e:	6843      	ldr	r3, [r0, #4]
 8016e20:	b983      	cbnz	r3, 8016e44 <rcl_wait+0x44>
 8016e22:	68eb      	ldr	r3, [r5, #12]
 8016e24:	b973      	cbnz	r3, 8016e44 <rcl_wait+0x44>
 8016e26:	696b      	ldr	r3, [r5, #20]
 8016e28:	b963      	cbnz	r3, 8016e44 <rcl_wait+0x44>
 8016e2a:	69eb      	ldr	r3, [r5, #28]
 8016e2c:	b953      	cbnz	r3, 8016e44 <rcl_wait+0x44>
 8016e2e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016e30:	b943      	cbnz	r3, 8016e44 <rcl_wait+0x44>
 8016e32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8016e34:	b933      	cbnz	r3, 8016e44 <rcl_wait+0x44>
 8016e36:	f240 3085 	movw	r0, #901	@ 0x385
 8016e3a:	b00d      	add	sp, #52	@ 0x34
 8016e3c:	ecbd 8b02 	vpop	{d8}
 8016e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e44:	9b04      	ldr	r3, [sp, #16]
 8016e46:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016e48:	2b01      	cmp	r3, #1
 8016e4a:	9b05      	ldr	r3, [sp, #20]
 8016e4c:	f173 0300 	sbcs.w	r3, r3, #0
 8016e50:	f2c0 80f8 	blt.w	8017044 <rcl_wait+0x244>
 8016e54:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016e58:	2a00      	cmp	r2, #0
 8016e5a:	f000 810f 	beq.w	801707c <rcl_wait+0x27c>
 8016e5e:	2400      	movs	r4, #0
 8016e60:	4613      	mov	r3, r2
 8016e62:	f240 3921 	movw	r9, #801	@ 0x321
 8016e66:	4632      	mov	r2, r6
 8016e68:	46a2      	mov	sl, r4
 8016e6a:	46a3      	mov	fp, r4
 8016e6c:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 80170d0 <rcl_wait+0x2d0>
 8016e70:	e014      	b.n	8016e9c <rcl_wait+0x9c>
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d1e1      	bne.n	8016e3a <rcl_wait+0x3a>
 8016e76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016e7a:	4542      	cmp	r2, r8
 8016e7c:	eb73 0107 	sbcs.w	r1, r3, r7
 8016e80:	da03      	bge.n	8016e8a <rcl_wait+0x8a>
 8016e82:	4690      	mov	r8, r2
 8016e84:	461f      	mov	r7, r3
 8016e86:	f04f 0b01 	mov.w	fp, #1
 8016e8a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016e8c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016e8e:	3401      	adds	r4, #1
 8016e90:	f14a 0a00 	adc.w	sl, sl, #0
 8016e94:	429c      	cmp	r4, r3
 8016e96:	f17a 0100 	sbcs.w	r1, sl, #0
 8016e9a:	d228      	bcs.n	8016eee <rcl_wait+0xee>
 8016e9c:	6928      	ldr	r0, [r5, #16]
 8016e9e:	a908      	add	r1, sp, #32
 8016ea0:	00a6      	lsls	r6, r4, #2
 8016ea2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016ea6:	2800      	cmp	r0, #0
 8016ea8:	d0f1      	beq.n	8016e8e <rcl_wait+0x8e>
 8016eaa:	68eb      	ldr	r3, [r5, #12]
 8016eac:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016eb0:	4423      	add	r3, r4
 8016eb2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016eb6:	f1be 0f00 	cmp.w	lr, #0
 8016eba:	d006      	beq.n	8016eca <rcl_wait+0xca>
 8016ebc:	6913      	ldr	r3, [r2, #16]
 8016ebe:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	6113      	str	r3, [r2, #16]
 8016ec6:	692b      	ldr	r3, [r5, #16]
 8016ec8:	5998      	ldr	r0, [r3, r6]
 8016eca:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016ece:	f7ff fa89 	bl	80163e4 <rcl_timer_get_time_until_next_call>
 8016ed2:	4548      	cmp	r0, r9
 8016ed4:	d1cd      	bne.n	8016e72 <rcl_wait+0x72>
 8016ed6:	692b      	ldr	r3, [r5, #16]
 8016ed8:	2200      	movs	r2, #0
 8016eda:	3401      	adds	r4, #1
 8016edc:	519a      	str	r2, [r3, r6]
 8016ede:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016ee0:	f14a 0a00 	adc.w	sl, sl, #0
 8016ee4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016ee6:	429c      	cmp	r4, r3
 8016ee8:	f17a 0100 	sbcs.w	r1, sl, #0
 8016eec:	d3d6      	bcc.n	8016e9c <rcl_wait+0x9c>
 8016eee:	4659      	mov	r1, fp
 8016ef0:	4616      	mov	r6, r2
 8016ef2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016ef6:	4313      	orrs	r3, r2
 8016ef8:	f040 80b4 	bne.w	8017064 <rcl_wait+0x264>
 8016efc:	2300      	movs	r3, #0
 8016efe:	2200      	movs	r2, #0
 8016f00:	460c      	mov	r4, r1
 8016f02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016f06:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016f0a:	ab08      	add	r3, sp, #32
 8016f0c:	9302      	str	r3, [sp, #8]
 8016f0e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8016f12:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8016f14:	f106 0110 	add.w	r1, r6, #16
 8016f18:	9300      	str	r3, [sp, #0]
 8016f1a:	1d30      	adds	r0, r6, #4
 8016f1c:	f106 031c 	add.w	r3, r6, #28
 8016f20:	9201      	str	r2, [sp, #4]
 8016f22:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8016f26:	f001 fecf 	bl	8018cc8 <rmw_wait>
 8016f2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016f2c:	4680      	mov	r8, r0
 8016f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016f30:	b1e2      	cbz	r2, 8016f6c <rcl_wait+0x16c>
 8016f32:	f04f 0900 	mov.w	r9, #0
 8016f36:	464f      	mov	r7, r9
 8016f38:	692a      	ldr	r2, [r5, #16]
 8016f3a:	f10d 011f 	add.w	r1, sp, #31
 8016f3e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8016f42:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8016f46:	b160      	cbz	r0, 8016f62 <rcl_wait+0x162>
 8016f48:	f88d 701f 	strb.w	r7, [sp, #31]
 8016f4c:	f7ff fa0e 	bl	801636c <rcl_timer_is_ready>
 8016f50:	2800      	cmp	r0, #0
 8016f52:	f47f af72 	bne.w	8016e3a <rcl_wait+0x3a>
 8016f56:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016f5a:	b90b      	cbnz	r3, 8016f60 <rcl_wait+0x160>
 8016f5c:	692a      	ldr	r2, [r5, #16]
 8016f5e:	5193      	str	r3, [r2, r6]
 8016f60:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016f62:	f109 0901 	add.w	r9, r9, #1
 8016f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016f68:	454a      	cmp	r2, r9
 8016f6a:	d8e5      	bhi.n	8016f38 <rcl_wait+0x138>
 8016f6c:	f038 0002 	bics.w	r0, r8, #2
 8016f70:	d176      	bne.n	8017060 <rcl_wait+0x260>
 8016f72:	686f      	ldr	r7, [r5, #4]
 8016f74:	b17f      	cbz	r7, 8016f96 <rcl_wait+0x196>
 8016f76:	4602      	mov	r2, r0
 8016f78:	e002      	b.n	8016f80 <rcl_wait+0x180>
 8016f7a:	3201      	adds	r2, #1
 8016f7c:	42ba      	cmp	r2, r7
 8016f7e:	d00a      	beq.n	8016f96 <rcl_wait+0x196>
 8016f80:	6899      	ldr	r1, [r3, #8]
 8016f82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016f86:	2900      	cmp	r1, #0
 8016f88:	d1f7      	bne.n	8016f7a <rcl_wait+0x17a>
 8016f8a:	682e      	ldr	r6, [r5, #0]
 8016f8c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016f90:	3201      	adds	r2, #1
 8016f92:	42ba      	cmp	r2, r7
 8016f94:	d1f4      	bne.n	8016f80 <rcl_wait+0x180>
 8016f96:	68ef      	ldr	r7, [r5, #12]
 8016f98:	b17f      	cbz	r7, 8016fba <rcl_wait+0x1ba>
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	e002      	b.n	8016fa4 <rcl_wait+0x1a4>
 8016f9e:	3201      	adds	r2, #1
 8016fa0:	42ba      	cmp	r2, r7
 8016fa2:	d00a      	beq.n	8016fba <rcl_wait+0x1ba>
 8016fa4:	6959      	ldr	r1, [r3, #20]
 8016fa6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016faa:	2900      	cmp	r1, #0
 8016fac:	d1f7      	bne.n	8016f9e <rcl_wait+0x19e>
 8016fae:	68ae      	ldr	r6, [r5, #8]
 8016fb0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016fb4:	3201      	adds	r2, #1
 8016fb6:	42ba      	cmp	r2, r7
 8016fb8:	d1f4      	bne.n	8016fa4 <rcl_wait+0x1a4>
 8016fba:	69ef      	ldr	r7, [r5, #28]
 8016fbc:	b17f      	cbz	r7, 8016fde <rcl_wait+0x1de>
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	e002      	b.n	8016fc8 <rcl_wait+0x1c8>
 8016fc2:	3201      	adds	r2, #1
 8016fc4:	42ba      	cmp	r2, r7
 8016fc6:	d00a      	beq.n	8016fde <rcl_wait+0x1de>
 8016fc8:	6a19      	ldr	r1, [r3, #32]
 8016fca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016fce:	2900      	cmp	r1, #0
 8016fd0:	d1f7      	bne.n	8016fc2 <rcl_wait+0x1c2>
 8016fd2:	69ae      	ldr	r6, [r5, #24]
 8016fd4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016fd8:	3201      	adds	r2, #1
 8016fda:	42ba      	cmp	r2, r7
 8016fdc:	d1f4      	bne.n	8016fc8 <rcl_wait+0x1c8>
 8016fde:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8016fe0:	b17f      	cbz	r7, 8017002 <rcl_wait+0x202>
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	e002      	b.n	8016fec <rcl_wait+0x1ec>
 8016fe6:	3201      	adds	r2, #1
 8016fe8:	42ba      	cmp	r2, r7
 8016fea:	d00a      	beq.n	8017002 <rcl_wait+0x202>
 8016fec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016fee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016ff2:	2900      	cmp	r1, #0
 8016ff4:	d1f7      	bne.n	8016fe6 <rcl_wait+0x1e6>
 8016ff6:	6a2e      	ldr	r6, [r5, #32]
 8016ff8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016ffc:	3201      	adds	r2, #1
 8016ffe:	42ba      	cmp	r2, r7
 8017000:	d1f4      	bne.n	8016fec <rcl_wait+0x1ec>
 8017002:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8017004:	b17f      	cbz	r7, 8017026 <rcl_wait+0x226>
 8017006:	2200      	movs	r2, #0
 8017008:	e002      	b.n	8017010 <rcl_wait+0x210>
 801700a:	3201      	adds	r2, #1
 801700c:	42ba      	cmp	r2, r7
 801700e:	d00a      	beq.n	8017026 <rcl_wait+0x226>
 8017010:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017012:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017016:	2900      	cmp	r1, #0
 8017018:	d1f7      	bne.n	801700a <rcl_wait+0x20a>
 801701a:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 801701c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017020:	3201      	adds	r2, #1
 8017022:	42ba      	cmp	r2, r7
 8017024:	d1f4      	bne.n	8017010 <rcl_wait+0x210>
 8017026:	f1b8 0f02 	cmp.w	r8, #2
 801702a:	f47f af06 	bne.w	8016e3a <rcl_wait+0x3a>
 801702e:	f084 0301 	eor.w	r3, r4, #1
 8017032:	b2db      	uxtb	r3, r3
 8017034:	2b00      	cmp	r3, #0
 8017036:	bf18      	it	ne
 8017038:	2002      	movne	r0, #2
 801703a:	b00d      	add	sp, #52	@ 0x34
 801703c:	ecbd 8b02 	vpop	{d8}
 8017040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017044:	2a00      	cmp	r2, #0
 8017046:	d03a      	beq.n	80170be <rcl_wait+0x2be>
 8017048:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801704c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017050:	e705      	b.n	8016e5e <rcl_wait+0x5e>
 8017052:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017056:	b00d      	add	sp, #52	@ 0x34
 8017058:	ecbd 8b02 	vpop	{d8}
 801705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017060:	2001      	movs	r0, #1
 8017062:	e6ea      	b.n	8016e3a <rcl_wait+0x3a>
 8017064:	9b04      	ldr	r3, [sp, #16]
 8017066:	460c      	mov	r4, r1
 8017068:	2b01      	cmp	r3, #1
 801706a:	9b05      	ldr	r3, [sp, #20]
 801706c:	f173 0300 	sbcs.w	r3, r3, #0
 8017070:	bfa8      	it	ge
 8017072:	f044 0401 	orrge.w	r4, r4, #1
 8017076:	b914      	cbnz	r4, 801707e <rcl_wait+0x27e>
 8017078:	4623      	mov	r3, r4
 801707a:	e747      	b.n	8016f0c <rcl_wait+0x10c>
 801707c:	4611      	mov	r1, r2
 801707e:	2f00      	cmp	r7, #0
 8017080:	da02      	bge.n	8017088 <rcl_wait+0x288>
 8017082:	f04f 0800 	mov.w	r8, #0
 8017086:	4647      	mov	r7, r8
 8017088:	460c      	mov	r4, r1
 801708a:	4640      	mov	r0, r8
 801708c:	4639      	mov	r1, r7
 801708e:	a312      	add	r3, pc, #72	@ (adr r3, 80170d8 <rcl_wait+0x2d8>)
 8017090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017094:	f7e9 f93c 	bl	8000310 <__aeabi_ldivmod>
 8017098:	a30f      	add	r3, pc, #60	@ (adr r3, 80170d8 <rcl_wait+0x2d8>)
 801709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801709e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80170a2:	4640      	mov	r0, r8
 80170a4:	4639      	mov	r1, r7
 80170a6:	f7e9 f933 	bl	8000310 <__aeabi_ldivmod>
 80170aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80170ae:	ab08      	add	r3, sp, #32
 80170b0:	e72c      	b.n	8016f0c <rcl_wait+0x10c>
 80170b2:	200b      	movs	r0, #11
 80170b4:	b00d      	add	sp, #52	@ 0x34
 80170b6:	ecbd 8b02 	vpop	{d8}
 80170ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170be:	4611      	mov	r1, r2
 80170c0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80170c4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80170c8:	e713      	b.n	8016ef2 <rcl_wait+0xf2>
 80170ca:	bf00      	nop
 80170cc:	f3af 8000 	nop.w
 80170d0:	ffffffff 	.word	0xffffffff
 80170d4:	7fffffff 	.word	0x7fffffff
 80170d8:	3b9aca00 	.word	0x3b9aca00
 80170dc:	00000000 	.word	0x00000000

080170e0 <rcl_action_take_goal_response>:
 80170e0:	2800      	cmp	r0, #0
 80170e2:	d039      	beq.n	8017158 <rcl_action_take_goal_response+0x78>
 80170e4:	b570      	push	{r4, r5, r6, lr}
 80170e6:	4604      	mov	r4, r0
 80170e8:	6800      	ldr	r0, [r0, #0]
 80170ea:	b380      	cbz	r0, 801714e <rcl_action_take_goal_response+0x6e>
 80170ec:	460e      	mov	r6, r1
 80170ee:	4615      	mov	r5, r2
 80170f0:	f7fe f916 	bl	8015320 <rcl_client_is_valid>
 80170f4:	b330      	cbz	r0, 8017144 <rcl_action_take_goal_response+0x64>
 80170f6:	6820      	ldr	r0, [r4, #0]
 80170f8:	3004      	adds	r0, #4
 80170fa:	f7fe f911 	bl	8015320 <rcl_client_is_valid>
 80170fe:	b308      	cbz	r0, 8017144 <rcl_action_take_goal_response+0x64>
 8017100:	6820      	ldr	r0, [r4, #0]
 8017102:	3008      	adds	r0, #8
 8017104:	f7fe f90c 	bl	8015320 <rcl_client_is_valid>
 8017108:	b1e0      	cbz	r0, 8017144 <rcl_action_take_goal_response+0x64>
 801710a:	6820      	ldr	r0, [r4, #0]
 801710c:	300c      	adds	r0, #12
 801710e:	f7fe ffe5 	bl	80160dc <rcl_subscription_is_valid>
 8017112:	b1b8      	cbz	r0, 8017144 <rcl_action_take_goal_response+0x64>
 8017114:	6820      	ldr	r0, [r4, #0]
 8017116:	3010      	adds	r0, #16
 8017118:	f7fe ffe0 	bl	80160dc <rcl_subscription_is_valid>
 801711c:	b190      	cbz	r0, 8017144 <rcl_action_take_goal_response+0x64>
 801711e:	b1cd      	cbz	r5, 8017154 <rcl_action_take_goal_response+0x74>
 8017120:	b1c6      	cbz	r6, 8017154 <rcl_action_take_goal_response+0x74>
 8017122:	462a      	mov	r2, r5
 8017124:	4631      	mov	r1, r6
 8017126:	6820      	ldr	r0, [r4, #0]
 8017128:	f7fe f8b2 	bl	8015290 <rcl_take_response>
 801712c:	b148      	cbz	r0, 8017142 <rcl_action_take_goal_response+0x62>
 801712e:	280a      	cmp	r0, #10
 8017130:	d007      	beq.n	8017142 <rcl_action_take_goal_response+0x62>
 8017132:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017136:	f640 0337 	movw	r3, #2103	@ 0x837
 801713a:	4290      	cmp	r0, r2
 801713c:	bf0c      	ite	eq
 801713e:	4618      	moveq	r0, r3
 8017140:	2001      	movne	r0, #1
 8017142:	bd70      	pop	{r4, r5, r6, pc}
 8017144:	f7f9 fd2c 	bl	8010ba0 <rcutils_reset_error>
 8017148:	f640 0036 	movw	r0, #2102	@ 0x836
 801714c:	bd70      	pop	{r4, r5, r6, pc}
 801714e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017152:	bd70      	pop	{r4, r5, r6, pc}
 8017154:	200b      	movs	r0, #11
 8017156:	bd70      	pop	{r4, r5, r6, pc}
 8017158:	f640 0036 	movw	r0, #2102	@ 0x836
 801715c:	4770      	bx	lr
 801715e:	bf00      	nop

08017160 <rcl_action_send_result_request>:
 8017160:	b390      	cbz	r0, 80171c8 <rcl_action_send_result_request+0x68>
 8017162:	b570      	push	{r4, r5, r6, lr}
 8017164:	4604      	mov	r4, r0
 8017166:	6800      	ldr	r0, [r0, #0]
 8017168:	b348      	cbz	r0, 80171be <rcl_action_send_result_request+0x5e>
 801716a:	460e      	mov	r6, r1
 801716c:	4615      	mov	r5, r2
 801716e:	f7fe f8d7 	bl	8015320 <rcl_client_is_valid>
 8017172:	b1f8      	cbz	r0, 80171b4 <rcl_action_send_result_request+0x54>
 8017174:	6820      	ldr	r0, [r4, #0]
 8017176:	3004      	adds	r0, #4
 8017178:	f7fe f8d2 	bl	8015320 <rcl_client_is_valid>
 801717c:	b1d0      	cbz	r0, 80171b4 <rcl_action_send_result_request+0x54>
 801717e:	6820      	ldr	r0, [r4, #0]
 8017180:	3008      	adds	r0, #8
 8017182:	f7fe f8cd 	bl	8015320 <rcl_client_is_valid>
 8017186:	b1a8      	cbz	r0, 80171b4 <rcl_action_send_result_request+0x54>
 8017188:	6820      	ldr	r0, [r4, #0]
 801718a:	300c      	adds	r0, #12
 801718c:	f7fe ffa6 	bl	80160dc <rcl_subscription_is_valid>
 8017190:	b180      	cbz	r0, 80171b4 <rcl_action_send_result_request+0x54>
 8017192:	6820      	ldr	r0, [r4, #0]
 8017194:	3010      	adds	r0, #16
 8017196:	f7fe ffa1 	bl	80160dc <rcl_subscription_is_valid>
 801719a:	b158      	cbz	r0, 80171b4 <rcl_action_send_result_request+0x54>
 801719c:	b195      	cbz	r5, 80171c4 <rcl_action_send_result_request+0x64>
 801719e:	b18e      	cbz	r6, 80171c4 <rcl_action_send_result_request+0x64>
 80171a0:	6820      	ldr	r0, [r4, #0]
 80171a2:	462a      	mov	r2, r5
 80171a4:	4631      	mov	r1, r6
 80171a6:	3008      	adds	r0, #8
 80171a8:	f7fe f83a 	bl	8015220 <rcl_send_request>
 80171ac:	3800      	subs	r0, #0
 80171ae:	bf18      	it	ne
 80171b0:	2001      	movne	r0, #1
 80171b2:	bd70      	pop	{r4, r5, r6, pc}
 80171b4:	f7f9 fcf4 	bl	8010ba0 <rcutils_reset_error>
 80171b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80171bc:	bd70      	pop	{r4, r5, r6, pc}
 80171be:	f640 0036 	movw	r0, #2102	@ 0x836
 80171c2:	bd70      	pop	{r4, r5, r6, pc}
 80171c4:	200b      	movs	r0, #11
 80171c6:	bd70      	pop	{r4, r5, r6, pc}
 80171c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80171cc:	4770      	bx	lr
 80171ce:	bf00      	nop

080171d0 <rcl_action_take_result_response>:
 80171d0:	2800      	cmp	r0, #0
 80171d2:	d03a      	beq.n	801724a <rcl_action_take_result_response+0x7a>
 80171d4:	b570      	push	{r4, r5, r6, lr}
 80171d6:	4604      	mov	r4, r0
 80171d8:	6800      	ldr	r0, [r0, #0]
 80171da:	b388      	cbz	r0, 8017240 <rcl_action_take_result_response+0x70>
 80171dc:	460e      	mov	r6, r1
 80171de:	4615      	mov	r5, r2
 80171e0:	f7fe f89e 	bl	8015320 <rcl_client_is_valid>
 80171e4:	b338      	cbz	r0, 8017236 <rcl_action_take_result_response+0x66>
 80171e6:	6820      	ldr	r0, [r4, #0]
 80171e8:	3004      	adds	r0, #4
 80171ea:	f7fe f899 	bl	8015320 <rcl_client_is_valid>
 80171ee:	b310      	cbz	r0, 8017236 <rcl_action_take_result_response+0x66>
 80171f0:	6820      	ldr	r0, [r4, #0]
 80171f2:	3008      	adds	r0, #8
 80171f4:	f7fe f894 	bl	8015320 <rcl_client_is_valid>
 80171f8:	b1e8      	cbz	r0, 8017236 <rcl_action_take_result_response+0x66>
 80171fa:	6820      	ldr	r0, [r4, #0]
 80171fc:	300c      	adds	r0, #12
 80171fe:	f7fe ff6d 	bl	80160dc <rcl_subscription_is_valid>
 8017202:	b1c0      	cbz	r0, 8017236 <rcl_action_take_result_response+0x66>
 8017204:	6820      	ldr	r0, [r4, #0]
 8017206:	3010      	adds	r0, #16
 8017208:	f7fe ff68 	bl	80160dc <rcl_subscription_is_valid>
 801720c:	b198      	cbz	r0, 8017236 <rcl_action_take_result_response+0x66>
 801720e:	b1d5      	cbz	r5, 8017246 <rcl_action_take_result_response+0x76>
 8017210:	b1ce      	cbz	r6, 8017246 <rcl_action_take_result_response+0x76>
 8017212:	6820      	ldr	r0, [r4, #0]
 8017214:	462a      	mov	r2, r5
 8017216:	4631      	mov	r1, r6
 8017218:	3008      	adds	r0, #8
 801721a:	f7fe f839 	bl	8015290 <rcl_take_response>
 801721e:	b148      	cbz	r0, 8017234 <rcl_action_take_result_response+0x64>
 8017220:	280a      	cmp	r0, #10
 8017222:	d007      	beq.n	8017234 <rcl_action_take_result_response+0x64>
 8017224:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017228:	f640 0337 	movw	r3, #2103	@ 0x837
 801722c:	4290      	cmp	r0, r2
 801722e:	bf0c      	ite	eq
 8017230:	4618      	moveq	r0, r3
 8017232:	2001      	movne	r0, #1
 8017234:	bd70      	pop	{r4, r5, r6, pc}
 8017236:	f7f9 fcb3 	bl	8010ba0 <rcutils_reset_error>
 801723a:	f640 0036 	movw	r0, #2102	@ 0x836
 801723e:	bd70      	pop	{r4, r5, r6, pc}
 8017240:	f640 0036 	movw	r0, #2102	@ 0x836
 8017244:	bd70      	pop	{r4, r5, r6, pc}
 8017246:	200b      	movs	r0, #11
 8017248:	bd70      	pop	{r4, r5, r6, pc}
 801724a:	f640 0036 	movw	r0, #2102	@ 0x836
 801724e:	4770      	bx	lr

08017250 <rcl_action_take_cancel_response>:
 8017250:	2800      	cmp	r0, #0
 8017252:	d03a      	beq.n	80172ca <rcl_action_take_cancel_response+0x7a>
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	4604      	mov	r4, r0
 8017258:	6800      	ldr	r0, [r0, #0]
 801725a:	b388      	cbz	r0, 80172c0 <rcl_action_take_cancel_response+0x70>
 801725c:	460e      	mov	r6, r1
 801725e:	4615      	mov	r5, r2
 8017260:	f7fe f85e 	bl	8015320 <rcl_client_is_valid>
 8017264:	b338      	cbz	r0, 80172b6 <rcl_action_take_cancel_response+0x66>
 8017266:	6820      	ldr	r0, [r4, #0]
 8017268:	3004      	adds	r0, #4
 801726a:	f7fe f859 	bl	8015320 <rcl_client_is_valid>
 801726e:	b310      	cbz	r0, 80172b6 <rcl_action_take_cancel_response+0x66>
 8017270:	6820      	ldr	r0, [r4, #0]
 8017272:	3008      	adds	r0, #8
 8017274:	f7fe f854 	bl	8015320 <rcl_client_is_valid>
 8017278:	b1e8      	cbz	r0, 80172b6 <rcl_action_take_cancel_response+0x66>
 801727a:	6820      	ldr	r0, [r4, #0]
 801727c:	300c      	adds	r0, #12
 801727e:	f7fe ff2d 	bl	80160dc <rcl_subscription_is_valid>
 8017282:	b1c0      	cbz	r0, 80172b6 <rcl_action_take_cancel_response+0x66>
 8017284:	6820      	ldr	r0, [r4, #0]
 8017286:	3010      	adds	r0, #16
 8017288:	f7fe ff28 	bl	80160dc <rcl_subscription_is_valid>
 801728c:	b198      	cbz	r0, 80172b6 <rcl_action_take_cancel_response+0x66>
 801728e:	b1d5      	cbz	r5, 80172c6 <rcl_action_take_cancel_response+0x76>
 8017290:	b1ce      	cbz	r6, 80172c6 <rcl_action_take_cancel_response+0x76>
 8017292:	6820      	ldr	r0, [r4, #0]
 8017294:	462a      	mov	r2, r5
 8017296:	4631      	mov	r1, r6
 8017298:	3004      	adds	r0, #4
 801729a:	f7fd fff9 	bl	8015290 <rcl_take_response>
 801729e:	b148      	cbz	r0, 80172b4 <rcl_action_take_cancel_response+0x64>
 80172a0:	280a      	cmp	r0, #10
 80172a2:	d007      	beq.n	80172b4 <rcl_action_take_cancel_response+0x64>
 80172a4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80172a8:	f640 0337 	movw	r3, #2103	@ 0x837
 80172ac:	4290      	cmp	r0, r2
 80172ae:	bf0c      	ite	eq
 80172b0:	4618      	moveq	r0, r3
 80172b2:	2001      	movne	r0, #1
 80172b4:	bd70      	pop	{r4, r5, r6, pc}
 80172b6:	f7f9 fc73 	bl	8010ba0 <rcutils_reset_error>
 80172ba:	f640 0036 	movw	r0, #2102	@ 0x836
 80172be:	bd70      	pop	{r4, r5, r6, pc}
 80172c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80172c4:	bd70      	pop	{r4, r5, r6, pc}
 80172c6:	200b      	movs	r0, #11
 80172c8:	bd70      	pop	{r4, r5, r6, pc}
 80172ca:	f640 0036 	movw	r0, #2102	@ 0x836
 80172ce:	4770      	bx	lr

080172d0 <rcl_action_take_feedback>:
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d038      	beq.n	8017346 <rcl_action_take_feedback+0x76>
 80172d4:	b530      	push	{r4, r5, lr}
 80172d6:	4604      	mov	r4, r0
 80172d8:	6800      	ldr	r0, [r0, #0]
 80172da:	b091      	sub	sp, #68	@ 0x44
 80172dc:	b378      	cbz	r0, 801733e <rcl_action_take_feedback+0x6e>
 80172de:	460d      	mov	r5, r1
 80172e0:	f7fe f81e 	bl	8015320 <rcl_client_is_valid>
 80172e4:	b328      	cbz	r0, 8017332 <rcl_action_take_feedback+0x62>
 80172e6:	6820      	ldr	r0, [r4, #0]
 80172e8:	3004      	adds	r0, #4
 80172ea:	f7fe f819 	bl	8015320 <rcl_client_is_valid>
 80172ee:	b300      	cbz	r0, 8017332 <rcl_action_take_feedback+0x62>
 80172f0:	6820      	ldr	r0, [r4, #0]
 80172f2:	3008      	adds	r0, #8
 80172f4:	f7fe f814 	bl	8015320 <rcl_client_is_valid>
 80172f8:	b1d8      	cbz	r0, 8017332 <rcl_action_take_feedback+0x62>
 80172fa:	6820      	ldr	r0, [r4, #0]
 80172fc:	300c      	adds	r0, #12
 80172fe:	f7fe feed 	bl	80160dc <rcl_subscription_is_valid>
 8017302:	b1b0      	cbz	r0, 8017332 <rcl_action_take_feedback+0x62>
 8017304:	6820      	ldr	r0, [r4, #0]
 8017306:	3010      	adds	r0, #16
 8017308:	f7fe fee8 	bl	80160dc <rcl_subscription_is_valid>
 801730c:	b188      	cbz	r0, 8017332 <rcl_action_take_feedback+0x62>
 801730e:	b1ed      	cbz	r5, 801734c <rcl_action_take_feedback+0x7c>
 8017310:	6820      	ldr	r0, [r4, #0]
 8017312:	2300      	movs	r3, #0
 8017314:	466a      	mov	r2, sp
 8017316:	4629      	mov	r1, r5
 8017318:	300c      	adds	r0, #12
 801731a:	f7fe fe83 	bl	8016024 <rcl_take>
 801731e:	b160      	cbz	r0, 801733a <rcl_action_take_feedback+0x6a>
 8017320:	f240 1391 	movw	r3, #401	@ 0x191
 8017324:	4298      	cmp	r0, r3
 8017326:	d014      	beq.n	8017352 <rcl_action_take_feedback+0x82>
 8017328:	280a      	cmp	r0, #10
 801732a:	bf18      	it	ne
 801732c:	2001      	movne	r0, #1
 801732e:	b011      	add	sp, #68	@ 0x44
 8017330:	bd30      	pop	{r4, r5, pc}
 8017332:	f7f9 fc35 	bl	8010ba0 <rcutils_reset_error>
 8017336:	f640 0036 	movw	r0, #2102	@ 0x836
 801733a:	b011      	add	sp, #68	@ 0x44
 801733c:	bd30      	pop	{r4, r5, pc}
 801733e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017342:	b011      	add	sp, #68	@ 0x44
 8017344:	bd30      	pop	{r4, r5, pc}
 8017346:	f640 0036 	movw	r0, #2102	@ 0x836
 801734a:	4770      	bx	lr
 801734c:	200b      	movs	r0, #11
 801734e:	b011      	add	sp, #68	@ 0x44
 8017350:	bd30      	pop	{r4, r5, pc}
 8017352:	f640 0037 	movw	r0, #2103	@ 0x837
 8017356:	e7f0      	b.n	801733a <rcl_action_take_feedback+0x6a>

08017358 <rcl_action_wait_set_add_action_client>:
 8017358:	2800      	cmp	r0, #0
 801735a:	d048      	beq.n	80173ee <rcl_action_wait_set_add_action_client+0x96>
 801735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801735e:	460c      	mov	r4, r1
 8017360:	2900      	cmp	r1, #0
 8017362:	d03c      	beq.n	80173de <rcl_action_wait_set_add_action_client+0x86>
 8017364:	4605      	mov	r5, r0
 8017366:	6808      	ldr	r0, [r1, #0]
 8017368:	2800      	cmp	r0, #0
 801736a:	d038      	beq.n	80173de <rcl_action_wait_set_add_action_client+0x86>
 801736c:	4617      	mov	r7, r2
 801736e:	461e      	mov	r6, r3
 8017370:	f7fd ffd6 	bl	8015320 <rcl_client_is_valid>
 8017374:	b3b0      	cbz	r0, 80173e4 <rcl_action_wait_set_add_action_client+0x8c>
 8017376:	6820      	ldr	r0, [r4, #0]
 8017378:	3004      	adds	r0, #4
 801737a:	f7fd ffd1 	bl	8015320 <rcl_client_is_valid>
 801737e:	b388      	cbz	r0, 80173e4 <rcl_action_wait_set_add_action_client+0x8c>
 8017380:	6820      	ldr	r0, [r4, #0]
 8017382:	3008      	adds	r0, #8
 8017384:	f7fd ffcc 	bl	8015320 <rcl_client_is_valid>
 8017388:	b360      	cbz	r0, 80173e4 <rcl_action_wait_set_add_action_client+0x8c>
 801738a:	6820      	ldr	r0, [r4, #0]
 801738c:	300c      	adds	r0, #12
 801738e:	f7fe fea5 	bl	80160dc <rcl_subscription_is_valid>
 8017392:	b338      	cbz	r0, 80173e4 <rcl_action_wait_set_add_action_client+0x8c>
 8017394:	6820      	ldr	r0, [r4, #0]
 8017396:	3010      	adds	r0, #16
 8017398:	f7fe fea0 	bl	80160dc <rcl_subscription_is_valid>
 801739c:	b310      	cbz	r0, 80173e4 <rcl_action_wait_set_add_action_client+0x8c>
 801739e:	6821      	ldr	r1, [r4, #0]
 80173a0:	4628      	mov	r0, r5
 80173a2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80173a6:	f7ff fcd1 	bl	8016d4c <rcl_wait_set_add_client>
 80173aa:	b9b8      	cbnz	r0, 80173dc <rcl_action_wait_set_add_action_client+0x84>
 80173ac:	6821      	ldr	r1, [r4, #0]
 80173ae:	4628      	mov	r0, r5
 80173b0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80173b4:	3104      	adds	r1, #4
 80173b6:	f7ff fcc9 	bl	8016d4c <rcl_wait_set_add_client>
 80173ba:	b978      	cbnz	r0, 80173dc <rcl_action_wait_set_add_action_client+0x84>
 80173bc:	6821      	ldr	r1, [r4, #0]
 80173be:	4628      	mov	r0, r5
 80173c0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80173c4:	3108      	adds	r1, #8
 80173c6:	f7ff fcc1 	bl	8016d4c <rcl_wait_set_add_client>
 80173ca:	b938      	cbnz	r0, 80173dc <rcl_action_wait_set_add_action_client+0x84>
 80173cc:	6821      	ldr	r1, [r4, #0]
 80173ce:	4628      	mov	r0, r5
 80173d0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80173d4:	310c      	adds	r1, #12
 80173d6:	f7ff f969 	bl	80166ac <rcl_wait_set_add_subscription>
 80173da:	b158      	cbz	r0, 80173f4 <rcl_action_wait_set_add_action_client+0x9c>
 80173dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173de:	f640 0036 	movw	r0, #2102	@ 0x836
 80173e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173e4:	f7f9 fbdc 	bl	8010ba0 <rcutils_reset_error>
 80173e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80173ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80173f2:	4770      	bx	lr
 80173f4:	6821      	ldr	r1, [r4, #0]
 80173f6:	4628      	mov	r0, r5
 80173f8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80173fc:	3110      	adds	r1, #16
 80173fe:	f7ff f955 	bl	80166ac <rcl_wait_set_add_subscription>
 8017402:	2800      	cmp	r0, #0
 8017404:	d1ea      	bne.n	80173dc <rcl_action_wait_set_add_action_client+0x84>
 8017406:	b11f      	cbz	r7, 8017410 <rcl_action_wait_set_add_action_client+0xb8>
 8017408:	6823      	ldr	r3, [r4, #0]
 801740a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801740e:	603b      	str	r3, [r7, #0]
 8017410:	2e00      	cmp	r6, #0
 8017412:	d0e3      	beq.n	80173dc <rcl_action_wait_set_add_action_client+0x84>
 8017414:	6823      	ldr	r3, [r4, #0]
 8017416:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801741a:	6033      	str	r3, [r6, #0]
 801741c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801741e:	bf00      	nop

08017420 <rcl_action_client_wait_set_get_entities_ready>:
 8017420:	2800      	cmp	r0, #0
 8017422:	d050      	beq.n	80174c6 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8017424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017428:	460c      	mov	r4, r1
 801742a:	2900      	cmp	r1, #0
 801742c:	d03e      	beq.n	80174ac <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801742e:	4605      	mov	r5, r0
 8017430:	6808      	ldr	r0, [r1, #0]
 8017432:	2800      	cmp	r0, #0
 8017434:	d03a      	beq.n	80174ac <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8017436:	4616      	mov	r6, r2
 8017438:	461f      	mov	r7, r3
 801743a:	f7fd ff71 	bl	8015320 <rcl_client_is_valid>
 801743e:	2800      	cmp	r0, #0
 8017440:	d038      	beq.n	80174b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017442:	6820      	ldr	r0, [r4, #0]
 8017444:	3004      	adds	r0, #4
 8017446:	f7fd ff6b 	bl	8015320 <rcl_client_is_valid>
 801744a:	2800      	cmp	r0, #0
 801744c:	d032      	beq.n	80174b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801744e:	6820      	ldr	r0, [r4, #0]
 8017450:	3008      	adds	r0, #8
 8017452:	f7fd ff65 	bl	8015320 <rcl_client_is_valid>
 8017456:	b368      	cbz	r0, 80174b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017458:	6820      	ldr	r0, [r4, #0]
 801745a:	300c      	adds	r0, #12
 801745c:	f7fe fe3e 	bl	80160dc <rcl_subscription_is_valid>
 8017460:	b340      	cbz	r0, 80174b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017462:	6820      	ldr	r0, [r4, #0]
 8017464:	3010      	adds	r0, #16
 8017466:	f7fe fe39 	bl	80160dc <rcl_subscription_is_valid>
 801746a:	b318      	cbz	r0, 80174b4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801746c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8017470:	2a00      	cmp	r2, #0
 8017472:	bf18      	it	ne
 8017474:	2b00      	cmpne	r3, #0
 8017476:	9b08      	ldr	r3, [sp, #32]
 8017478:	bf0c      	ite	eq
 801747a:	2101      	moveq	r1, #1
 801747c:	2100      	movne	r1, #0
 801747e:	2b00      	cmp	r3, #0
 8017480:	bf08      	it	eq
 8017482:	f041 0101 	orreq.w	r1, r1, #1
 8017486:	2f00      	cmp	r7, #0
 8017488:	bf08      	it	eq
 801748a:	f041 0101 	orreq.w	r1, r1, #1
 801748e:	b9b9      	cbnz	r1, 80174c0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017490:	b1b6      	cbz	r6, 80174c0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017492:	6823      	ldr	r3, [r4, #0]
 8017494:	686c      	ldr	r4, [r5, #4]
 8017496:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801749a:	428a      	cmp	r2, r1
 801749c:	4610      	mov	r0, r2
 801749e:	bf38      	it	cc
 80174a0:	4608      	movcc	r0, r1
 80174a2:	4284      	cmp	r4, r0
 80174a4:	d812      	bhi.n	80174cc <rcl_action_client_wait_set_get_entities_ready+0xac>
 80174a6:	2001      	movs	r0, #1
 80174a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174ac:	f640 0036 	movw	r0, #2102	@ 0x836
 80174b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174b4:	f7f9 fb74 	bl	8010ba0 <rcutils_reset_error>
 80174b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80174bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174c0:	200b      	movs	r0, #11
 80174c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80174ca:	4770      	bx	lr
 80174cc:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 80174d0:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 80174d4:	45f0      	cmp	r8, lr
 80174d6:	4640      	mov	r0, r8
 80174d8:	69ec      	ldr	r4, [r5, #28]
 80174da:	bf38      	it	cc
 80174dc:	4670      	movcc	r0, lr
 80174de:	4560      	cmp	r0, ip
 80174e0:	bf38      	it	cc
 80174e2:	4660      	movcc	r0, ip
 80174e4:	4284      	cmp	r4, r0
 80174e6:	d9de      	bls.n	80174a6 <rcl_action_client_wait_set_get_entities_ready+0x86>
 80174e8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80174ec:	682d      	ldr	r5, [r5, #0]
 80174ee:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80174f2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80174f6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80174fa:	1a18      	subs	r0, r3, r0
 80174fc:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8017500:	f103 0c0c 	add.w	ip, r3, #12
 8017504:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8017508:	fab0 f080 	clz	r0, r0
 801750c:	eba5 050c 	sub.w	r5, r5, ip
 8017510:	0940      	lsrs	r0, r0, #5
 8017512:	fab5 f585 	clz	r5, r5
 8017516:	096d      	lsrs	r5, r5, #5
 8017518:	7035      	strb	r5, [r6, #0]
 801751a:	f103 0510 	add.w	r5, r3, #16
 801751e:	1b64      	subs	r4, r4, r5
 8017520:	9d08      	ldr	r5, [sp, #32]
 8017522:	fab4 f484 	clz	r4, r4
 8017526:	0964      	lsrs	r4, r4, #5
 8017528:	703c      	strb	r4, [r7, #0]
 801752a:	1d1c      	adds	r4, r3, #4
 801752c:	3308      	adds	r3, #8
 801752e:	7028      	strb	r0, [r5, #0]
 8017530:	1b09      	subs	r1, r1, r4
 8017532:	2000      	movs	r0, #0
 8017534:	1ad3      	subs	r3, r2, r3
 8017536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017538:	fab1 f181 	clz	r1, r1
 801753c:	fab3 f383 	clz	r3, r3
 8017540:	0949      	lsrs	r1, r1, #5
 8017542:	095b      	lsrs	r3, r3, #5
 8017544:	7011      	strb	r1, [r2, #0]
 8017546:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017548:	7013      	strb	r3, [r2, #0]
 801754a:	e7b1      	b.n	80174b0 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801754c <rcl_action_take_goal_request>:
 801754c:	2800      	cmp	r0, #0
 801754e:	d039      	beq.n	80175c4 <rcl_action_take_goal_request+0x78>
 8017550:	b570      	push	{r4, r5, r6, lr}
 8017552:	4604      	mov	r4, r0
 8017554:	6800      	ldr	r0, [r0, #0]
 8017556:	b380      	cbz	r0, 80175ba <rcl_action_take_goal_request+0x6e>
 8017558:	460e      	mov	r6, r1
 801755a:	4615      	mov	r5, r2
 801755c:	f7fe fc76 	bl	8015e4c <rcl_service_is_valid>
 8017560:	b330      	cbz	r0, 80175b0 <rcl_action_take_goal_request+0x64>
 8017562:	6820      	ldr	r0, [r4, #0]
 8017564:	3004      	adds	r0, #4
 8017566:	f7fe fc71 	bl	8015e4c <rcl_service_is_valid>
 801756a:	b308      	cbz	r0, 80175b0 <rcl_action_take_goal_request+0x64>
 801756c:	6820      	ldr	r0, [r4, #0]
 801756e:	3008      	adds	r0, #8
 8017570:	f7fe fc6c 	bl	8015e4c <rcl_service_is_valid>
 8017574:	b1e0      	cbz	r0, 80175b0 <rcl_action_take_goal_request+0x64>
 8017576:	6820      	ldr	r0, [r4, #0]
 8017578:	300c      	adds	r0, #12
 801757a:	f7f8 fb3d 	bl	800fbf8 <rcl_publisher_is_valid>
 801757e:	b1b8      	cbz	r0, 80175b0 <rcl_action_take_goal_request+0x64>
 8017580:	6820      	ldr	r0, [r4, #0]
 8017582:	3010      	adds	r0, #16
 8017584:	f7f8 fb38 	bl	800fbf8 <rcl_publisher_is_valid>
 8017588:	b190      	cbz	r0, 80175b0 <rcl_action_take_goal_request+0x64>
 801758a:	b1cd      	cbz	r5, 80175c0 <rcl_action_take_goal_request+0x74>
 801758c:	b1c6      	cbz	r6, 80175c0 <rcl_action_take_goal_request+0x74>
 801758e:	462a      	mov	r2, r5
 8017590:	4631      	mov	r1, r6
 8017592:	6820      	ldr	r0, [r4, #0]
 8017594:	f7fe fc02 	bl	8015d9c <rcl_take_request>
 8017598:	b148      	cbz	r0, 80175ae <rcl_action_take_goal_request+0x62>
 801759a:	280a      	cmp	r0, #10
 801759c:	d007      	beq.n	80175ae <rcl_action_take_goal_request+0x62>
 801759e:	f240 2259 	movw	r2, #601	@ 0x259
 80175a2:	f640 0399 	movw	r3, #2201	@ 0x899
 80175a6:	4290      	cmp	r0, r2
 80175a8:	bf0c      	ite	eq
 80175aa:	4618      	moveq	r0, r3
 80175ac:	2001      	movne	r0, #1
 80175ae:	bd70      	pop	{r4, r5, r6, pc}
 80175b0:	f7f9 faf6 	bl	8010ba0 <rcutils_reset_error>
 80175b4:	f640 0098 	movw	r0, #2200	@ 0x898
 80175b8:	bd70      	pop	{r4, r5, r6, pc}
 80175ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80175be:	bd70      	pop	{r4, r5, r6, pc}
 80175c0:	200b      	movs	r0, #11
 80175c2:	bd70      	pop	{r4, r5, r6, pc}
 80175c4:	f640 0098 	movw	r0, #2200	@ 0x898
 80175c8:	4770      	bx	lr
 80175ca:	bf00      	nop

080175cc <rcl_action_send_goal_response>:
 80175cc:	b390      	cbz	r0, 8017634 <rcl_action_send_goal_response+0x68>
 80175ce:	b570      	push	{r4, r5, r6, lr}
 80175d0:	4604      	mov	r4, r0
 80175d2:	6800      	ldr	r0, [r0, #0]
 80175d4:	b348      	cbz	r0, 801762a <rcl_action_send_goal_response+0x5e>
 80175d6:	460e      	mov	r6, r1
 80175d8:	4615      	mov	r5, r2
 80175da:	f7fe fc37 	bl	8015e4c <rcl_service_is_valid>
 80175de:	b1f8      	cbz	r0, 8017620 <rcl_action_send_goal_response+0x54>
 80175e0:	6820      	ldr	r0, [r4, #0]
 80175e2:	3004      	adds	r0, #4
 80175e4:	f7fe fc32 	bl	8015e4c <rcl_service_is_valid>
 80175e8:	b1d0      	cbz	r0, 8017620 <rcl_action_send_goal_response+0x54>
 80175ea:	6820      	ldr	r0, [r4, #0]
 80175ec:	3008      	adds	r0, #8
 80175ee:	f7fe fc2d 	bl	8015e4c <rcl_service_is_valid>
 80175f2:	b1a8      	cbz	r0, 8017620 <rcl_action_send_goal_response+0x54>
 80175f4:	6820      	ldr	r0, [r4, #0]
 80175f6:	300c      	adds	r0, #12
 80175f8:	f7f8 fafe 	bl	800fbf8 <rcl_publisher_is_valid>
 80175fc:	b180      	cbz	r0, 8017620 <rcl_action_send_goal_response+0x54>
 80175fe:	6820      	ldr	r0, [r4, #0]
 8017600:	3010      	adds	r0, #16
 8017602:	f7f8 faf9 	bl	800fbf8 <rcl_publisher_is_valid>
 8017606:	b158      	cbz	r0, 8017620 <rcl_action_send_goal_response+0x54>
 8017608:	b195      	cbz	r5, 8017630 <rcl_action_send_goal_response+0x64>
 801760a:	b18e      	cbz	r6, 8017630 <rcl_action_send_goal_response+0x64>
 801760c:	462a      	mov	r2, r5
 801760e:	4631      	mov	r1, r6
 8017610:	6820      	ldr	r0, [r4, #0]
 8017612:	f7fe fc03 	bl	8015e1c <rcl_send_response>
 8017616:	b110      	cbz	r0, 801761e <rcl_action_send_goal_response+0x52>
 8017618:	2802      	cmp	r0, #2
 801761a:	bf18      	it	ne
 801761c:	2001      	movne	r0, #1
 801761e:	bd70      	pop	{r4, r5, r6, pc}
 8017620:	f7f9 fabe 	bl	8010ba0 <rcutils_reset_error>
 8017624:	f640 0098 	movw	r0, #2200	@ 0x898
 8017628:	bd70      	pop	{r4, r5, r6, pc}
 801762a:	f640 0098 	movw	r0, #2200	@ 0x898
 801762e:	bd70      	pop	{r4, r5, r6, pc}
 8017630:	200b      	movs	r0, #11
 8017632:	bd70      	pop	{r4, r5, r6, pc}
 8017634:	f640 0098 	movw	r0, #2200	@ 0x898
 8017638:	4770      	bx	lr
 801763a:	bf00      	nop

0801763c <rcl_action_take_result_request>:
 801763c:	2800      	cmp	r0, #0
 801763e:	d03a      	beq.n	80176b6 <rcl_action_take_result_request+0x7a>
 8017640:	b570      	push	{r4, r5, r6, lr}
 8017642:	4604      	mov	r4, r0
 8017644:	6800      	ldr	r0, [r0, #0]
 8017646:	b388      	cbz	r0, 80176ac <rcl_action_take_result_request+0x70>
 8017648:	460e      	mov	r6, r1
 801764a:	4615      	mov	r5, r2
 801764c:	f7fe fbfe 	bl	8015e4c <rcl_service_is_valid>
 8017650:	b338      	cbz	r0, 80176a2 <rcl_action_take_result_request+0x66>
 8017652:	6820      	ldr	r0, [r4, #0]
 8017654:	3004      	adds	r0, #4
 8017656:	f7fe fbf9 	bl	8015e4c <rcl_service_is_valid>
 801765a:	b310      	cbz	r0, 80176a2 <rcl_action_take_result_request+0x66>
 801765c:	6820      	ldr	r0, [r4, #0]
 801765e:	3008      	adds	r0, #8
 8017660:	f7fe fbf4 	bl	8015e4c <rcl_service_is_valid>
 8017664:	b1e8      	cbz	r0, 80176a2 <rcl_action_take_result_request+0x66>
 8017666:	6820      	ldr	r0, [r4, #0]
 8017668:	300c      	adds	r0, #12
 801766a:	f7f8 fac5 	bl	800fbf8 <rcl_publisher_is_valid>
 801766e:	b1c0      	cbz	r0, 80176a2 <rcl_action_take_result_request+0x66>
 8017670:	6820      	ldr	r0, [r4, #0]
 8017672:	3010      	adds	r0, #16
 8017674:	f7f8 fac0 	bl	800fbf8 <rcl_publisher_is_valid>
 8017678:	b198      	cbz	r0, 80176a2 <rcl_action_take_result_request+0x66>
 801767a:	b1d5      	cbz	r5, 80176b2 <rcl_action_take_result_request+0x76>
 801767c:	b1ce      	cbz	r6, 80176b2 <rcl_action_take_result_request+0x76>
 801767e:	6820      	ldr	r0, [r4, #0]
 8017680:	462a      	mov	r2, r5
 8017682:	4631      	mov	r1, r6
 8017684:	3008      	adds	r0, #8
 8017686:	f7fe fb89 	bl	8015d9c <rcl_take_request>
 801768a:	b148      	cbz	r0, 80176a0 <rcl_action_take_result_request+0x64>
 801768c:	280a      	cmp	r0, #10
 801768e:	d007      	beq.n	80176a0 <rcl_action_take_result_request+0x64>
 8017690:	f240 2259 	movw	r2, #601	@ 0x259
 8017694:	f640 0399 	movw	r3, #2201	@ 0x899
 8017698:	4290      	cmp	r0, r2
 801769a:	bf0c      	ite	eq
 801769c:	4618      	moveq	r0, r3
 801769e:	2001      	movne	r0, #1
 80176a0:	bd70      	pop	{r4, r5, r6, pc}
 80176a2:	f7f9 fa7d 	bl	8010ba0 <rcutils_reset_error>
 80176a6:	f640 0098 	movw	r0, #2200	@ 0x898
 80176aa:	bd70      	pop	{r4, r5, r6, pc}
 80176ac:	f640 0098 	movw	r0, #2200	@ 0x898
 80176b0:	bd70      	pop	{r4, r5, r6, pc}
 80176b2:	200b      	movs	r0, #11
 80176b4:	bd70      	pop	{r4, r5, r6, pc}
 80176b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80176ba:	4770      	bx	lr

080176bc <rcl_action_take_cancel_request>:
 80176bc:	2800      	cmp	r0, #0
 80176be:	d03a      	beq.n	8017736 <rcl_action_take_cancel_request+0x7a>
 80176c0:	b570      	push	{r4, r5, r6, lr}
 80176c2:	4604      	mov	r4, r0
 80176c4:	6800      	ldr	r0, [r0, #0]
 80176c6:	b388      	cbz	r0, 801772c <rcl_action_take_cancel_request+0x70>
 80176c8:	460e      	mov	r6, r1
 80176ca:	4615      	mov	r5, r2
 80176cc:	f7fe fbbe 	bl	8015e4c <rcl_service_is_valid>
 80176d0:	b338      	cbz	r0, 8017722 <rcl_action_take_cancel_request+0x66>
 80176d2:	6820      	ldr	r0, [r4, #0]
 80176d4:	3004      	adds	r0, #4
 80176d6:	f7fe fbb9 	bl	8015e4c <rcl_service_is_valid>
 80176da:	b310      	cbz	r0, 8017722 <rcl_action_take_cancel_request+0x66>
 80176dc:	6820      	ldr	r0, [r4, #0]
 80176de:	3008      	adds	r0, #8
 80176e0:	f7fe fbb4 	bl	8015e4c <rcl_service_is_valid>
 80176e4:	b1e8      	cbz	r0, 8017722 <rcl_action_take_cancel_request+0x66>
 80176e6:	6820      	ldr	r0, [r4, #0]
 80176e8:	300c      	adds	r0, #12
 80176ea:	f7f8 fa85 	bl	800fbf8 <rcl_publisher_is_valid>
 80176ee:	b1c0      	cbz	r0, 8017722 <rcl_action_take_cancel_request+0x66>
 80176f0:	6820      	ldr	r0, [r4, #0]
 80176f2:	3010      	adds	r0, #16
 80176f4:	f7f8 fa80 	bl	800fbf8 <rcl_publisher_is_valid>
 80176f8:	b198      	cbz	r0, 8017722 <rcl_action_take_cancel_request+0x66>
 80176fa:	b1d5      	cbz	r5, 8017732 <rcl_action_take_cancel_request+0x76>
 80176fc:	b1ce      	cbz	r6, 8017732 <rcl_action_take_cancel_request+0x76>
 80176fe:	6820      	ldr	r0, [r4, #0]
 8017700:	462a      	mov	r2, r5
 8017702:	4631      	mov	r1, r6
 8017704:	3004      	adds	r0, #4
 8017706:	f7fe fb49 	bl	8015d9c <rcl_take_request>
 801770a:	b148      	cbz	r0, 8017720 <rcl_action_take_cancel_request+0x64>
 801770c:	280a      	cmp	r0, #10
 801770e:	d007      	beq.n	8017720 <rcl_action_take_cancel_request+0x64>
 8017710:	f240 2259 	movw	r2, #601	@ 0x259
 8017714:	f640 0399 	movw	r3, #2201	@ 0x899
 8017718:	4290      	cmp	r0, r2
 801771a:	bf0c      	ite	eq
 801771c:	4618      	moveq	r0, r3
 801771e:	2001      	movne	r0, #1
 8017720:	bd70      	pop	{r4, r5, r6, pc}
 8017722:	f7f9 fa3d 	bl	8010ba0 <rcutils_reset_error>
 8017726:	f640 0098 	movw	r0, #2200	@ 0x898
 801772a:	bd70      	pop	{r4, r5, r6, pc}
 801772c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017730:	bd70      	pop	{r4, r5, r6, pc}
 8017732:	200b      	movs	r0, #11
 8017734:	bd70      	pop	{r4, r5, r6, pc}
 8017736:	f640 0098 	movw	r0, #2200	@ 0x898
 801773a:	4770      	bx	lr

0801773c <rcl_action_send_cancel_response>:
 801773c:	b398      	cbz	r0, 80177a6 <rcl_action_send_cancel_response+0x6a>
 801773e:	b570      	push	{r4, r5, r6, lr}
 8017740:	4604      	mov	r4, r0
 8017742:	6800      	ldr	r0, [r0, #0]
 8017744:	b350      	cbz	r0, 801779c <rcl_action_send_cancel_response+0x60>
 8017746:	460e      	mov	r6, r1
 8017748:	4615      	mov	r5, r2
 801774a:	f7fe fb7f 	bl	8015e4c <rcl_service_is_valid>
 801774e:	b300      	cbz	r0, 8017792 <rcl_action_send_cancel_response+0x56>
 8017750:	6820      	ldr	r0, [r4, #0]
 8017752:	3004      	adds	r0, #4
 8017754:	f7fe fb7a 	bl	8015e4c <rcl_service_is_valid>
 8017758:	b1d8      	cbz	r0, 8017792 <rcl_action_send_cancel_response+0x56>
 801775a:	6820      	ldr	r0, [r4, #0]
 801775c:	3008      	adds	r0, #8
 801775e:	f7fe fb75 	bl	8015e4c <rcl_service_is_valid>
 8017762:	b1b0      	cbz	r0, 8017792 <rcl_action_send_cancel_response+0x56>
 8017764:	6820      	ldr	r0, [r4, #0]
 8017766:	300c      	adds	r0, #12
 8017768:	f7f8 fa46 	bl	800fbf8 <rcl_publisher_is_valid>
 801776c:	b188      	cbz	r0, 8017792 <rcl_action_send_cancel_response+0x56>
 801776e:	6820      	ldr	r0, [r4, #0]
 8017770:	3010      	adds	r0, #16
 8017772:	f7f8 fa41 	bl	800fbf8 <rcl_publisher_is_valid>
 8017776:	b160      	cbz	r0, 8017792 <rcl_action_send_cancel_response+0x56>
 8017778:	b19d      	cbz	r5, 80177a2 <rcl_action_send_cancel_response+0x66>
 801777a:	b196      	cbz	r6, 80177a2 <rcl_action_send_cancel_response+0x66>
 801777c:	6820      	ldr	r0, [r4, #0]
 801777e:	462a      	mov	r2, r5
 8017780:	4631      	mov	r1, r6
 8017782:	3004      	adds	r0, #4
 8017784:	f7fe fb4a 	bl	8015e1c <rcl_send_response>
 8017788:	b110      	cbz	r0, 8017790 <rcl_action_send_cancel_response+0x54>
 801778a:	2802      	cmp	r0, #2
 801778c:	bf18      	it	ne
 801778e:	2001      	movne	r0, #1
 8017790:	bd70      	pop	{r4, r5, r6, pc}
 8017792:	f7f9 fa05 	bl	8010ba0 <rcutils_reset_error>
 8017796:	f640 0098 	movw	r0, #2200	@ 0x898
 801779a:	bd70      	pop	{r4, r5, r6, pc}
 801779c:	f640 0098 	movw	r0, #2200	@ 0x898
 80177a0:	bd70      	pop	{r4, r5, r6, pc}
 80177a2:	200b      	movs	r0, #11
 80177a4:	bd70      	pop	{r4, r5, r6, pc}
 80177a6:	f640 0098 	movw	r0, #2200	@ 0x898
 80177aa:	4770      	bx	lr

080177ac <rcl_action_wait_set_add_action_server>:
 80177ac:	2800      	cmp	r0, #0
 80177ae:	d04d      	beq.n	801784c <rcl_action_wait_set_add_action_server+0xa0>
 80177b0:	b570      	push	{r4, r5, r6, lr}
 80177b2:	460c      	mov	r4, r1
 80177b4:	b159      	cbz	r1, 80177ce <rcl_action_wait_set_add_action_server+0x22>
 80177b6:	4605      	mov	r5, r0
 80177b8:	6808      	ldr	r0, [r1, #0]
 80177ba:	b140      	cbz	r0, 80177ce <rcl_action_wait_set_add_action_server+0x22>
 80177bc:	4616      	mov	r6, r2
 80177be:	f7fe fb45 	bl	8015e4c <rcl_service_is_valid>
 80177c2:	b120      	cbz	r0, 80177ce <rcl_action_wait_set_add_action_server+0x22>
 80177c4:	6820      	ldr	r0, [r4, #0]
 80177c6:	3004      	adds	r0, #4
 80177c8:	f7fe fb40 	bl	8015e4c <rcl_service_is_valid>
 80177cc:	b910      	cbnz	r0, 80177d4 <rcl_action_wait_set_add_action_server+0x28>
 80177ce:	f640 0098 	movw	r0, #2200	@ 0x898
 80177d2:	bd70      	pop	{r4, r5, r6, pc}
 80177d4:	6820      	ldr	r0, [r4, #0]
 80177d6:	3008      	adds	r0, #8
 80177d8:	f7fe fb38 	bl	8015e4c <rcl_service_is_valid>
 80177dc:	2800      	cmp	r0, #0
 80177de:	d0f6      	beq.n	80177ce <rcl_action_wait_set_add_action_server+0x22>
 80177e0:	6820      	ldr	r0, [r4, #0]
 80177e2:	300c      	adds	r0, #12
 80177e4:	f7f8 fa20 	bl	800fc28 <rcl_publisher_is_valid_except_context>
 80177e8:	2800      	cmp	r0, #0
 80177ea:	d0f0      	beq.n	80177ce <rcl_action_wait_set_add_action_server+0x22>
 80177ec:	6820      	ldr	r0, [r4, #0]
 80177ee:	3010      	adds	r0, #16
 80177f0:	f7f8 fa1a 	bl	800fc28 <rcl_publisher_is_valid_except_context>
 80177f4:	2800      	cmp	r0, #0
 80177f6:	d0ea      	beq.n	80177ce <rcl_action_wait_set_add_action_server+0x22>
 80177f8:	6821      	ldr	r1, [r4, #0]
 80177fa:	4628      	mov	r0, r5
 80177fc:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8017800:	f7ff fad0 	bl	8016da4 <rcl_wait_set_add_service>
 8017804:	2800      	cmp	r0, #0
 8017806:	d1e4      	bne.n	80177d2 <rcl_action_wait_set_add_action_server+0x26>
 8017808:	6821      	ldr	r1, [r4, #0]
 801780a:	4628      	mov	r0, r5
 801780c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8017810:	3104      	adds	r1, #4
 8017812:	f7ff fac7 	bl	8016da4 <rcl_wait_set_add_service>
 8017816:	2800      	cmp	r0, #0
 8017818:	d1db      	bne.n	80177d2 <rcl_action_wait_set_add_action_server+0x26>
 801781a:	6821      	ldr	r1, [r4, #0]
 801781c:	4628      	mov	r0, r5
 801781e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8017822:	3108      	adds	r1, #8
 8017824:	f7ff fabe 	bl	8016da4 <rcl_wait_set_add_service>
 8017828:	2800      	cmp	r0, #0
 801782a:	d1d2      	bne.n	80177d2 <rcl_action_wait_set_add_action_server+0x26>
 801782c:	6821      	ldr	r1, [r4, #0]
 801782e:	4628      	mov	r0, r5
 8017830:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8017834:	3114      	adds	r1, #20
 8017836:	f7ff fa59 	bl	8016cec <rcl_wait_set_add_timer>
 801783a:	2800      	cmp	r0, #0
 801783c:	d1c9      	bne.n	80177d2 <rcl_action_wait_set_add_action_server+0x26>
 801783e:	2e00      	cmp	r6, #0
 8017840:	d0c7      	beq.n	80177d2 <rcl_action_wait_set_add_action_server+0x26>
 8017842:	6823      	ldr	r3, [r4, #0]
 8017844:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8017848:	6033      	str	r3, [r6, #0]
 801784a:	bd70      	pop	{r4, r5, r6, pc}
 801784c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017850:	4770      	bx	lr
 8017852:	bf00      	nop

08017854 <rcl_action_server_wait_set_get_entities_ready>:
 8017854:	2800      	cmp	r0, #0
 8017856:	d067      	beq.n	8017928 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8017858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801785c:	460c      	mov	r4, r1
 801785e:	b161      	cbz	r1, 801787a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017860:	4605      	mov	r5, r0
 8017862:	6808      	ldr	r0, [r1, #0]
 8017864:	b148      	cbz	r0, 801787a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017866:	4616      	mov	r6, r2
 8017868:	4698      	mov	r8, r3
 801786a:	f7fe faef 	bl	8015e4c <rcl_service_is_valid>
 801786e:	b120      	cbz	r0, 801787a <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017870:	6820      	ldr	r0, [r4, #0]
 8017872:	3004      	adds	r0, #4
 8017874:	f7fe faea 	bl	8015e4c <rcl_service_is_valid>
 8017878:	b918      	cbnz	r0, 8017882 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801787a:	f640 0098 	movw	r0, #2200	@ 0x898
 801787e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017882:	6820      	ldr	r0, [r4, #0]
 8017884:	3008      	adds	r0, #8
 8017886:	f7fe fae1 	bl	8015e4c <rcl_service_is_valid>
 801788a:	2800      	cmp	r0, #0
 801788c:	d0f5      	beq.n	801787a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801788e:	6820      	ldr	r0, [r4, #0]
 8017890:	300c      	adds	r0, #12
 8017892:	f7f8 f9c9 	bl	800fc28 <rcl_publisher_is_valid_except_context>
 8017896:	2800      	cmp	r0, #0
 8017898:	d0ef      	beq.n	801787a <rcl_action_server_wait_set_get_entities_ready+0x26>
 801789a:	6820      	ldr	r0, [r4, #0]
 801789c:	3010      	adds	r0, #16
 801789e:	f7f8 f9c3 	bl	800fc28 <rcl_publisher_is_valid_except_context>
 80178a2:	2800      	cmp	r0, #0
 80178a4:	d0e9      	beq.n	801787a <rcl_action_server_wait_set_get_entities_ready+0x26>
 80178a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80178aa:	2a00      	cmp	r2, #0
 80178ac:	bf18      	it	ne
 80178ae:	2b00      	cmpne	r3, #0
 80178b0:	bf0c      	ite	eq
 80178b2:	2101      	moveq	r1, #1
 80178b4:	2100      	movne	r1, #0
 80178b6:	f1b8 0f00 	cmp.w	r8, #0
 80178ba:	bf08      	it	eq
 80178bc:	f041 0101 	orreq.w	r1, r1, #1
 80178c0:	bba9      	cbnz	r1, 801792e <rcl_action_server_wait_set_get_entities_ready+0xda>
 80178c2:	b3a6      	cbz	r6, 801792e <rcl_action_server_wait_set_get_entities_ready+0xda>
 80178c4:	6821      	ldr	r1, [r4, #0]
 80178c6:	2000      	movs	r0, #0
 80178c8:	692c      	ldr	r4, [r5, #16]
 80178ca:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 80178ce:	6a2f      	ldr	r7, [r5, #32]
 80178d0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80178d4:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 80178d8:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80178dc:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80178e0:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80178e4:	1a64      	subs	r4, r4, r1
 80178e6:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 80178ea:	fab4 f484 	clz	r4, r4
 80178ee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80178f2:	0964      	lsrs	r4, r4, #5
 80178f4:	7034      	strb	r4, [r6, #0]
 80178f6:	1d0c      	adds	r4, r1, #4
 80178f8:	1b2c      	subs	r4, r5, r4
 80178fa:	fab4 f484 	clz	r4, r4
 80178fe:	0964      	lsrs	r4, r4, #5
 8017900:	f888 4000 	strb.w	r4, [r8]
 8017904:	f101 0408 	add.w	r4, r1, #8
 8017908:	1b1b      	subs	r3, r3, r4
 801790a:	9c06      	ldr	r4, [sp, #24]
 801790c:	fab3 f383 	clz	r3, r3
 8017910:	095b      	lsrs	r3, r3, #5
 8017912:	7023      	strb	r3, [r4, #0]
 8017914:	f101 0314 	add.w	r3, r1, #20
 8017918:	1ad3      	subs	r3, r2, r3
 801791a:	9a07      	ldr	r2, [sp, #28]
 801791c:	fab3 f383 	clz	r3, r3
 8017920:	095b      	lsrs	r3, r3, #5
 8017922:	7013      	strb	r3, [r2, #0]
 8017924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017928:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801792c:	4770      	bx	lr
 801792e:	200b      	movs	r0, #11
 8017930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017934 <_execute_event_handler>:
 8017934:	2002      	movs	r0, #2
 8017936:	4770      	bx	lr

08017938 <_cancel_goal_event_handler>:
 8017938:	2003      	movs	r0, #3
 801793a:	4770      	bx	lr

0801793c <_succeed_event_handler>:
 801793c:	2004      	movs	r0, #4
 801793e:	4770      	bx	lr

08017940 <_abort_event_handler>:
 8017940:	2006      	movs	r0, #6
 8017942:	4770      	bx	lr

08017944 <_canceled_event_handler>:
 8017944:	2005      	movs	r0, #5
 8017946:	4770      	bx	lr

08017948 <rcl_action_transition_goal_state>:
 8017948:	b2c2      	uxtb	r2, r0
 801794a:	2a06      	cmp	r2, #6
 801794c:	d810      	bhi.n	8017970 <rcl_action_transition_goal_state+0x28>
 801794e:	2904      	cmp	r1, #4
 8017950:	d80e      	bhi.n	8017970 <rcl_action_transition_goal_state+0x28>
 8017952:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8017956:	b410      	push	{r4}
 8017958:	1853      	adds	r3, r2, r1
 801795a:	4c06      	ldr	r4, [pc, #24]	@ (8017974 <rcl_action_transition_goal_state+0x2c>)
 801795c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017960:	b113      	cbz	r3, 8017968 <rcl_action_transition_goal_state+0x20>
 8017962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017966:	4718      	bx	r3
 8017968:	2000      	movs	r0, #0
 801796a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801796e:	4770      	bx	lr
 8017970:	2000      	movs	r0, #0
 8017972:	4770      	bx	lr
 8017974:	0801d1bc 	.word	0x0801d1bc

08017978 <rcl_action_get_zero_initialized_cancel_response>:
 8017978:	b510      	push	{r4, lr}
 801797a:	4c07      	ldr	r4, [pc, #28]	@ (8017998 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801797c:	4686      	mov	lr, r0
 801797e:	4684      	mov	ip, r0
 8017980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017982:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017988:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801798c:	6823      	ldr	r3, [r4, #0]
 801798e:	4670      	mov	r0, lr
 8017990:	f8cc 3000 	str.w	r3, [ip]
 8017994:	bd10      	pop	{r4, pc}
 8017996:	bf00      	nop
 8017998:	0801d248 	.word	0x0801d248

0801799c <rclc_action_send_result_request>:
 801799c:	b1d0      	cbz	r0, 80179d4 <rclc_action_send_result_request+0x38>
 801799e:	4684      	mov	ip, r0
 80179a0:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80179a4:	b500      	push	{lr}
 80179a6:	b087      	sub	sp, #28
 80179a8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80179ac:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80179b0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80179b4:	f10d 0e08 	add.w	lr, sp, #8
 80179b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80179bc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80179c0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80179c4:	a902      	add	r1, sp, #8
 80179c6:	3010      	adds	r0, #16
 80179c8:	f7ff fbca 	bl	8017160 <rcl_action_send_result_request>
 80179cc:	b920      	cbnz	r0, 80179d8 <rclc_action_send_result_request+0x3c>
 80179ce:	b007      	add	sp, #28
 80179d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80179d4:	200b      	movs	r0, #11
 80179d6:	4770      	bx	lr
 80179d8:	9001      	str	r0, [sp, #4]
 80179da:	f7f9 f8e1 	bl	8010ba0 <rcutils_reset_error>
 80179de:	9801      	ldr	r0, [sp, #4]
 80179e0:	b007      	add	sp, #28
 80179e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80179e6:	bf00      	nop

080179e8 <rclc_action_take_goal_handle>:
 80179e8:	b160      	cbz	r0, 8017a04 <rclc_action_take_goal_handle+0x1c>
 80179ea:	6883      	ldr	r3, [r0, #8]
 80179ec:	b143      	cbz	r3, 8017a00 <rclc_action_take_goal_handle+0x18>
 80179ee:	6819      	ldr	r1, [r3, #0]
 80179f0:	2200      	movs	r2, #0
 80179f2:	6081      	str	r1, [r0, #8]
 80179f4:	721a      	strb	r2, [r3, #8]
 80179f6:	68c1      	ldr	r1, [r0, #12]
 80179f8:	621a      	str	r2, [r3, #32]
 80179fa:	849a      	strh	r2, [r3, #36]	@ 0x24
 80179fc:	6019      	str	r1, [r3, #0]
 80179fe:	60c3      	str	r3, [r0, #12]
 8017a00:	4618      	mov	r0, r3
 8017a02:	4770      	bx	lr
 8017a04:	4603      	mov	r3, r0
 8017a06:	e7fb      	b.n	8017a00 <rclc_action_take_goal_handle+0x18>

08017a08 <rclc_action_remove_used_goal_handle>:
 8017a08:	b180      	cbz	r0, 8017a2c <rclc_action_remove_used_goal_handle+0x24>
 8017a0a:	b179      	cbz	r1, 8017a2c <rclc_action_remove_used_goal_handle+0x24>
 8017a0c:	68c3      	ldr	r3, [r0, #12]
 8017a0e:	4299      	cmp	r1, r3
 8017a10:	d00d      	beq.n	8017a2e <rclc_action_remove_used_goal_handle+0x26>
 8017a12:	b12b      	cbz	r3, 8017a20 <rclc_action_remove_used_goal_handle+0x18>
 8017a14:	681a      	ldr	r2, [r3, #0]
 8017a16:	4291      	cmp	r1, r2
 8017a18:	d003      	beq.n	8017a22 <rclc_action_remove_used_goal_handle+0x1a>
 8017a1a:	4613      	mov	r3, r2
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d1f9      	bne.n	8017a14 <rclc_action_remove_used_goal_handle+0xc>
 8017a20:	4770      	bx	lr
 8017a22:	680a      	ldr	r2, [r1, #0]
 8017a24:	601a      	str	r2, [r3, #0]
 8017a26:	6883      	ldr	r3, [r0, #8]
 8017a28:	600b      	str	r3, [r1, #0]
 8017a2a:	6081      	str	r1, [r0, #8]
 8017a2c:	4770      	bx	lr
 8017a2e:	680b      	ldr	r3, [r1, #0]
 8017a30:	60c3      	str	r3, [r0, #12]
 8017a32:	e7f8      	b.n	8017a26 <rclc_action_remove_used_goal_handle+0x1e>

08017a34 <rclc_action_find_goal_handle_by_uuid>:
 8017a34:	b538      	push	{r3, r4, r5, lr}
 8017a36:	b181      	cbz	r1, 8017a5a <rclc_action_find_goal_handle_by_uuid+0x26>
 8017a38:	b178      	cbz	r0, 8017a5a <rclc_action_find_goal_handle_by_uuid+0x26>
 8017a3a:	68c4      	ldr	r4, [r0, #12]
 8017a3c:	460d      	mov	r5, r1
 8017a3e:	b914      	cbnz	r4, 8017a46 <rclc_action_find_goal_handle_by_uuid+0x12>
 8017a40:	e009      	b.n	8017a56 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017a42:	6824      	ldr	r4, [r4, #0]
 8017a44:	b13c      	cbz	r4, 8017a56 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017a46:	f104 0009 	add.w	r0, r4, #9
 8017a4a:	2210      	movs	r2, #16
 8017a4c:	4629      	mov	r1, r5
 8017a4e:	f003 fe47 	bl	801b6e0 <memcmp>
 8017a52:	2800      	cmp	r0, #0
 8017a54:	d1f5      	bne.n	8017a42 <rclc_action_find_goal_handle_by_uuid+0xe>
 8017a56:	4620      	mov	r0, r4
 8017a58:	bd38      	pop	{r3, r4, r5, pc}
 8017a5a:	2400      	movs	r4, #0
 8017a5c:	4620      	mov	r0, r4
 8017a5e:	bd38      	pop	{r3, r4, r5, pc}

08017a60 <rclc_action_find_first_handle_by_status>:
 8017a60:	b140      	cbz	r0, 8017a74 <rclc_action_find_first_handle_by_status+0x14>
 8017a62:	68c0      	ldr	r0, [r0, #12]
 8017a64:	b910      	cbnz	r0, 8017a6c <rclc_action_find_first_handle_by_status+0xc>
 8017a66:	e005      	b.n	8017a74 <rclc_action_find_first_handle_by_status+0x14>
 8017a68:	6800      	ldr	r0, [r0, #0]
 8017a6a:	b118      	cbz	r0, 8017a74 <rclc_action_find_first_handle_by_status+0x14>
 8017a6c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017a70:	428b      	cmp	r3, r1
 8017a72:	d1f9      	bne.n	8017a68 <rclc_action_find_first_handle_by_status+0x8>
 8017a74:	4770      	bx	lr
 8017a76:	bf00      	nop

08017a78 <rclc_action_find_first_terminated_handle>:
 8017a78:	b140      	cbz	r0, 8017a8c <rclc_action_find_first_terminated_handle+0x14>
 8017a7a:	68c0      	ldr	r0, [r0, #12]
 8017a7c:	b910      	cbnz	r0, 8017a84 <rclc_action_find_first_terminated_handle+0xc>
 8017a7e:	e005      	b.n	8017a8c <rclc_action_find_first_terminated_handle+0x14>
 8017a80:	6800      	ldr	r0, [r0, #0]
 8017a82:	b118      	cbz	r0, 8017a8c <rclc_action_find_first_terminated_handle+0x14>
 8017a84:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017a88:	2b03      	cmp	r3, #3
 8017a8a:	ddf9      	ble.n	8017a80 <rclc_action_find_first_terminated_handle+0x8>
 8017a8c:	4770      	bx	lr
 8017a8e:	bf00      	nop

08017a90 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8017a90:	b170      	cbz	r0, 8017ab0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017a92:	68c0      	ldr	r0, [r0, #12]
 8017a94:	b160      	cbz	r0, 8017ab0 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017a96:	b410      	push	{r4}
 8017a98:	e001      	b.n	8017a9e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017a9a:	6800      	ldr	r0, [r0, #0]
 8017a9c:	b128      	cbz	r0, 8017aaa <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8017a9e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8017aa2:	4299      	cmp	r1, r3
 8017aa4:	bf08      	it	eq
 8017aa6:	4294      	cmpeq	r4, r2
 8017aa8:	d1f7      	bne.n	8017a9a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8017aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017aae:	4770      	bx	lr
 8017ab0:	4770      	bx	lr
 8017ab2:	bf00      	nop

08017ab4 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017ab4:	b170      	cbz	r0, 8017ad4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017ab6:	68c0      	ldr	r0, [r0, #12]
 8017ab8:	b160      	cbz	r0, 8017ad4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017aba:	b410      	push	{r4}
 8017abc:	e001      	b.n	8017ac2 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8017abe:	6800      	ldr	r0, [r0, #0]
 8017ac0:	b128      	cbz	r0, 8017ace <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8017ac2:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8017ac6:	4299      	cmp	r1, r3
 8017ac8:	bf08      	it	eq
 8017aca:	4294      	cmpeq	r4, r2
 8017acc:	d1f7      	bne.n	8017abe <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8017ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ad2:	4770      	bx	lr
 8017ad4:	4770      	bx	lr
 8017ad6:	bf00      	nop

08017ad8 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8017ad8:	b170      	cbz	r0, 8017af8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017ada:	68c0      	ldr	r0, [r0, #12]
 8017adc:	b160      	cbz	r0, 8017af8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017ade:	b410      	push	{r4}
 8017ae0:	e001      	b.n	8017ae6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8017ae2:	6800      	ldr	r0, [r0, #0]
 8017ae4:	b128      	cbz	r0, 8017af2 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8017ae6:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8017aea:	4299      	cmp	r1, r3
 8017aec:	bf08      	it	eq
 8017aee:	4294      	cmpeq	r4, r2
 8017af0:	d1f7      	bne.n	8017ae2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8017af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017af6:	4770      	bx	lr
 8017af8:	4770      	bx	lr
 8017afa:	bf00      	nop

08017afc <rclc_action_find_first_handle_with_goal_response>:
 8017afc:	b140      	cbz	r0, 8017b10 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017afe:	68c0      	ldr	r0, [r0, #12]
 8017b00:	b910      	cbnz	r0, 8017b08 <rclc_action_find_first_handle_with_goal_response+0xc>
 8017b02:	e005      	b.n	8017b10 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017b04:	6800      	ldr	r0, [r0, #0]
 8017b06:	b118      	cbz	r0, 8017b10 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017b08:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d0f9      	beq.n	8017b04 <rclc_action_find_first_handle_with_goal_response+0x8>
 8017b10:	4770      	bx	lr
 8017b12:	bf00      	nop

08017b14 <rclc_action_find_first_handle_with_result_response>:
 8017b14:	b140      	cbz	r0, 8017b28 <rclc_action_find_first_handle_with_result_response+0x14>
 8017b16:	68c0      	ldr	r0, [r0, #12]
 8017b18:	b910      	cbnz	r0, 8017b20 <rclc_action_find_first_handle_with_result_response+0xc>
 8017b1a:	e005      	b.n	8017b28 <rclc_action_find_first_handle_with_result_response+0x14>
 8017b1c:	6800      	ldr	r0, [r0, #0]
 8017b1e:	b118      	cbz	r0, 8017b28 <rclc_action_find_first_handle_with_result_response+0x14>
 8017b20:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d0f9      	beq.n	8017b1c <rclc_action_find_first_handle_with_result_response+0x8>
 8017b28:	4770      	bx	lr
 8017b2a:	bf00      	nop

08017b2c <rclc_action_server_response_goal_request>:
 8017b2c:	b198      	cbz	r0, 8017b56 <rclc_action_server_response_goal_request+0x2a>
 8017b2e:	2200      	movs	r2, #0
 8017b30:	460b      	mov	r3, r1
 8017b32:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8017b36:	b510      	push	{r4, lr}
 8017b38:	6844      	ldr	r4, [r0, #4]
 8017b3a:	b086      	sub	sp, #24
 8017b3c:	f104 0010 	add.w	r0, r4, #16
 8017b40:	9205      	str	r2, [sp, #20]
 8017b42:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8017b46:	aa03      	add	r2, sp, #12
 8017b48:	f88d 300c 	strb.w	r3, [sp, #12]
 8017b4c:	f7ff fd3e 	bl	80175cc <rcl_action_send_goal_response>
 8017b50:	b918      	cbnz	r0, 8017b5a <rclc_action_server_response_goal_request+0x2e>
 8017b52:	b006      	add	sp, #24
 8017b54:	bd10      	pop	{r4, pc}
 8017b56:	200b      	movs	r0, #11
 8017b58:	4770      	bx	lr
 8017b5a:	9001      	str	r0, [sp, #4]
 8017b5c:	f7f9 f820 	bl	8010ba0 <rcutils_reset_error>
 8017b60:	9801      	ldr	r0, [sp, #4]
 8017b62:	b006      	add	sp, #24
 8017b64:	bd10      	pop	{r4, pc}
 8017b66:	bf00      	nop

08017b68 <rclc_action_server_goal_cancel_accept>:
 8017b68:	b310      	cbz	r0, 8017bb0 <rclc_action_server_goal_cancel_accept+0x48>
 8017b6a:	b510      	push	{r4, lr}
 8017b6c:	b090      	sub	sp, #64	@ 0x40
 8017b6e:	4604      	mov	r4, r0
 8017b70:	a806      	add	r0, sp, #24
 8017b72:	f7ff ff01 	bl	8017978 <rcl_action_get_zero_initialized_cancel_response>
 8017b76:	2300      	movs	r3, #0
 8017b78:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8017b7c:	46ec      	mov	ip, sp
 8017b7e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8017b82:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8017b86:	f88d 3018 	strb.w	r3, [sp, #24]
 8017b8a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8017b8e:	f8cd d01c 	str.w	sp, [sp, #28]
 8017b92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017b96:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8017bb8 <rclc_action_server_goal_cancel_accept+0x50>
 8017b9a:	6860      	ldr	r0, [r4, #4]
 8017b9c:	aa06      	add	r2, sp, #24
 8017b9e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8017ba2:	3010      	adds	r0, #16
 8017ba4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017ba8:	f7ff fdc8 	bl	801773c <rcl_action_send_cancel_response>
 8017bac:	b010      	add	sp, #64	@ 0x40
 8017bae:	bd10      	pop	{r4, pc}
 8017bb0:	200b      	movs	r0, #11
 8017bb2:	4770      	bx	lr
 8017bb4:	f3af 8000 	nop.w
 8017bb8:	00000001 	.word	0x00000001
 8017bbc:	00000001 	.word	0x00000001

08017bc0 <rclc_action_server_goal_cancel_reject>:
 8017bc0:	b082      	sub	sp, #8
 8017bc2:	b530      	push	{r4, r5, lr}
 8017bc4:	b08b      	sub	sp, #44	@ 0x2c
 8017bc6:	ac0e      	add	r4, sp, #56	@ 0x38
 8017bc8:	e884 000c 	stmia.w	r4, {r2, r3}
 8017bcc:	b188      	cbz	r0, 8017bf2 <rclc_action_server_goal_cancel_reject+0x32>
 8017bce:	4604      	mov	r4, r0
 8017bd0:	a801      	add	r0, sp, #4
 8017bd2:	460d      	mov	r5, r1
 8017bd4:	f7ff fed0 	bl	8017978 <rcl_action_get_zero_initialized_cancel_response>
 8017bd8:	aa01      	add	r2, sp, #4
 8017bda:	a90e      	add	r1, sp, #56	@ 0x38
 8017bdc:	f104 0010 	add.w	r0, r4, #16
 8017be0:	f88d 5004 	strb.w	r5, [sp, #4]
 8017be4:	f7ff fdaa 	bl	801773c <rcl_action_send_cancel_response>
 8017be8:	b00b      	add	sp, #44	@ 0x2c
 8017bea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bee:	b002      	add	sp, #8
 8017bf0:	4770      	bx	lr
 8017bf2:	200b      	movs	r0, #11
 8017bf4:	b00b      	add	sp, #44	@ 0x2c
 8017bf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bfa:	b002      	add	sp, #8
 8017bfc:	4770      	bx	lr
 8017bfe:	bf00      	nop

08017c00 <__atomic_load_8>:
 8017c00:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017c04:	4a16      	ldr	r2, [pc, #88]	@ (8017c60 <__atomic_load_8+0x60>)
 8017c06:	4b17      	ldr	r3, [pc, #92]	@ (8017c64 <__atomic_load_8+0x64>)
 8017c08:	f04f 0c01 	mov.w	ip, #1
 8017c0c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017c10:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017c14:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017c18:	fb02 f101 	mul.w	r1, r2, r1
 8017c1c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017c20:	fba3 2301 	umull	r2, r3, r3, r1
 8017c24:	091b      	lsrs	r3, r3, #4
 8017c26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017c2a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8017c2e:	b4d0      	push	{r4, r6, r7}
 8017c30:	1ac9      	subs	r1, r1, r3
 8017c32:	4c0d      	ldr	r4, [pc, #52]	@ (8017c68 <__atomic_load_8+0x68>)
 8017c34:	1862      	adds	r2, r4, r1
 8017c36:	e8d2 3f4f 	ldrexb	r3, [r2]
 8017c3a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8017c3e:	2e00      	cmp	r6, #0
 8017c40:	d1f9      	bne.n	8017c36 <__atomic_load_8+0x36>
 8017c42:	b2db      	uxtb	r3, r3
 8017c44:	f3bf 8f5b 	dmb	ish
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d1f4      	bne.n	8017c36 <__atomic_load_8+0x36>
 8017c4c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017c50:	f3bf 8f5b 	dmb	ish
 8017c54:	5463      	strb	r3, [r4, r1]
 8017c56:	4630      	mov	r0, r6
 8017c58:	4639      	mov	r1, r7
 8017c5a:	bcd0      	pop	{r4, r6, r7}
 8017c5c:	4770      	bx	lr
 8017c5e:	bf00      	nop
 8017c60:	27d4eb2d 	.word	0x27d4eb2d
 8017c64:	b21642c9 	.word	0xb21642c9
 8017c68:	20012810 	.word	0x20012810

08017c6c <__atomic_store_8>:
 8017c6c:	b570      	push	{r4, r5, r6, lr}
 8017c6e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8017c72:	4916      	ldr	r1, [pc, #88]	@ (8017ccc <__atomic_store_8+0x60>)
 8017c74:	4c16      	ldr	r4, [pc, #88]	@ (8017cd0 <__atomic_store_8+0x64>)
 8017c76:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8017c7a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8017c7e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8017c82:	fb01 fe0e 	mul.w	lr, r1, lr
 8017c86:	4913      	ldr	r1, [pc, #76]	@ (8017cd4 <__atomic_store_8+0x68>)
 8017c88:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8017c8c:	fba1 510e 	umull	r5, r1, r1, lr
 8017c90:	f04f 0501 	mov.w	r5, #1
 8017c94:	0909      	lsrs	r1, r1, #4
 8017c96:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8017c9a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8017c9e:	ebae 0e01 	sub.w	lr, lr, r1
 8017ca2:	eb04 0c0e 	add.w	ip, r4, lr
 8017ca6:	e8dc 1f4f 	ldrexb	r1, [ip]
 8017caa:	e8cc 5f46 	strexb	r6, r5, [ip]
 8017cae:	2e00      	cmp	r6, #0
 8017cb0:	d1f9      	bne.n	8017ca6 <__atomic_store_8+0x3a>
 8017cb2:	b2c9      	uxtb	r1, r1
 8017cb4:	f3bf 8f5b 	dmb	ish
 8017cb8:	2900      	cmp	r1, #0
 8017cba:	d1f4      	bne.n	8017ca6 <__atomic_store_8+0x3a>
 8017cbc:	e9c0 2300 	strd	r2, r3, [r0]
 8017cc0:	f3bf 8f5b 	dmb	ish
 8017cc4:	f804 100e 	strb.w	r1, [r4, lr]
 8017cc8:	bd70      	pop	{r4, r5, r6, pc}
 8017cca:	bf00      	nop
 8017ccc:	27d4eb2d 	.word	0x27d4eb2d
 8017cd0:	20012810 	.word	0x20012810
 8017cd4:	b21642c9 	.word	0xb21642c9

08017cd8 <__atomic_exchange_8>:
 8017cd8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8017cdc:	4917      	ldr	r1, [pc, #92]	@ (8017d3c <__atomic_exchange_8+0x64>)
 8017cde:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8017ce2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8017ce6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8017cea:	fb01 fc0c 	mul.w	ip, r1, ip
 8017cee:	4914      	ldr	r1, [pc, #80]	@ (8017d40 <__atomic_exchange_8+0x68>)
 8017cf0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8017cf4:	b570      	push	{r4, r5, r6, lr}
 8017cf6:	4686      	mov	lr, r0
 8017cf8:	fba1 010c 	umull	r0, r1, r1, ip
 8017cfc:	4d11      	ldr	r5, [pc, #68]	@ (8017d44 <__atomic_exchange_8+0x6c>)
 8017cfe:	f04f 0001 	mov.w	r0, #1
 8017d02:	0909      	lsrs	r1, r1, #4
 8017d04:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8017d08:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8017d0c:	ebac 0c01 	sub.w	ip, ip, r1
 8017d10:	eb05 010c 	add.w	r1, r5, ip
 8017d14:	e8d1 4f4f 	ldrexb	r4, [r1]
 8017d18:	e8c1 0f46 	strexb	r6, r0, [r1]
 8017d1c:	2e00      	cmp	r6, #0
 8017d1e:	d1f9      	bne.n	8017d14 <__atomic_exchange_8+0x3c>
 8017d20:	b2e4      	uxtb	r4, r4
 8017d22:	f3bf 8f5b 	dmb	ish
 8017d26:	2c00      	cmp	r4, #0
 8017d28:	d1f4      	bne.n	8017d14 <__atomic_exchange_8+0x3c>
 8017d2a:	e9de 0100 	ldrd	r0, r1, [lr]
 8017d2e:	e9ce 2300 	strd	r2, r3, [lr]
 8017d32:	f3bf 8f5b 	dmb	ish
 8017d36:	f805 400c 	strb.w	r4, [r5, ip]
 8017d3a:	bd70      	pop	{r4, r5, r6, pc}
 8017d3c:	27d4eb2d 	.word	0x27d4eb2d
 8017d40:	b21642c9 	.word	0xb21642c9
 8017d44:	20012810 	.word	0x20012810

08017d48 <rcutils_is_directory>:
 8017d48:	2000      	movs	r0, #0
 8017d4a:	4770      	bx	lr

08017d4c <rcutils_join_path>:
 8017d4c:	b082      	sub	sp, #8
 8017d4e:	2000      	movs	r0, #0
 8017d50:	e88d 000c 	stmia.w	sp, {r2, r3}
 8017d54:	b002      	add	sp, #8
 8017d56:	4770      	bx	lr

08017d58 <rcutils_to_native_path>:
 8017d58:	b084      	sub	sp, #16
 8017d5a:	2000      	movs	r0, #0
 8017d5c:	f10d 0c04 	add.w	ip, sp, #4
 8017d60:	b004      	add	sp, #16
 8017d62:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8017d66:	4770      	bx	lr

08017d68 <rcutils_get_zero_initialized_string_map>:
 8017d68:	2000      	movs	r0, #0
 8017d6a:	4b01      	ldr	r3, [pc, #4]	@ (8017d70 <rcutils_get_zero_initialized_string_map+0x8>)
 8017d6c:	6018      	str	r0, [r3, #0]
 8017d6e:	4770      	bx	lr
 8017d70:	20012828 	.word	0x20012828

08017d74 <rcutils_string_map_reserve>:
 8017d74:	2800      	cmp	r0, #0
 8017d76:	d05e      	beq.n	8017e36 <rcutils_string_map_reserve+0xc2>
 8017d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d7c:	460c      	mov	r4, r1
 8017d7e:	6801      	ldr	r1, [r0, #0]
 8017d80:	b082      	sub	sp, #8
 8017d82:	4605      	mov	r5, r0
 8017d84:	b129      	cbz	r1, 8017d92 <rcutils_string_map_reserve+0x1e>
 8017d86:	68cb      	ldr	r3, [r1, #12]
 8017d88:	42a3      	cmp	r3, r4
 8017d8a:	d906      	bls.n	8017d9a <rcutils_string_map_reserve+0x26>
 8017d8c:	461c      	mov	r4, r3
 8017d8e:	2900      	cmp	r1, #0
 8017d90:	d1f9      	bne.n	8017d86 <rcutils_string_map_reserve+0x12>
 8017d92:	201f      	movs	r0, #31
 8017d94:	b002      	add	sp, #8
 8017d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d9a:	688b      	ldr	r3, [r1, #8]
 8017d9c:	42a3      	cmp	r3, r4
 8017d9e:	d046      	beq.n	8017e2e <rcutils_string_map_reserve+0xba>
 8017da0:	6a0e      	ldr	r6, [r1, #32]
 8017da2:	2c00      	cmp	r4, #0
 8017da4:	d033      	beq.n	8017e0e <rcutils_string_map_reserve+0x9a>
 8017da6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8017daa:	d242      	bcs.n	8017e32 <rcutils_string_map_reserve+0xbe>
 8017dac:	00a7      	lsls	r7, r4, #2
 8017dae:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017db2:	6808      	ldr	r0, [r1, #0]
 8017db4:	4632      	mov	r2, r6
 8017db6:	4639      	mov	r1, r7
 8017db8:	47c0      	blx	r8
 8017dba:	2800      	cmp	r0, #0
 8017dbc:	d039      	beq.n	8017e32 <rcutils_string_map_reserve+0xbe>
 8017dbe:	682b      	ldr	r3, [r5, #0]
 8017dc0:	4632      	mov	r2, r6
 8017dc2:	4639      	mov	r1, r7
 8017dc4:	6018      	str	r0, [r3, #0]
 8017dc6:	6858      	ldr	r0, [r3, #4]
 8017dc8:	47c0      	blx	r8
 8017dca:	2800      	cmp	r0, #0
 8017dcc:	d031      	beq.n	8017e32 <rcutils_string_map_reserve+0xbe>
 8017dce:	682d      	ldr	r5, [r5, #0]
 8017dd0:	68ab      	ldr	r3, [r5, #8]
 8017dd2:	6068      	str	r0, [r5, #4]
 8017dd4:	42a3      	cmp	r3, r4
 8017dd6:	d225      	bcs.n	8017e24 <rcutils_string_map_reserve+0xb0>
 8017dd8:	682a      	ldr	r2, [r5, #0]
 8017dda:	eb00 0c07 	add.w	ip, r0, r7
 8017dde:	0099      	lsls	r1, r3, #2
 8017de0:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8017de4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8017de8:	45e6      	cmp	lr, ip
 8017dea:	d203      	bcs.n	8017df4 <rcutils_string_map_reserve+0x80>
 8017dec:	eb02 0c07 	add.w	ip, r2, r7
 8017df0:	4566      	cmp	r6, ip
 8017df2:	d322      	bcc.n	8017e3a <rcutils_string_map_reserve+0xc6>
 8017df4:	1ae3      	subs	r3, r4, r3
 8017df6:	4670      	mov	r0, lr
 8017df8:	2100      	movs	r1, #0
 8017dfa:	009a      	lsls	r2, r3, #2
 8017dfc:	9201      	str	r2, [sp, #4]
 8017dfe:	f003 fc99 	bl	801b734 <memset>
 8017e02:	9a01      	ldr	r2, [sp, #4]
 8017e04:	2100      	movs	r1, #0
 8017e06:	4630      	mov	r0, r6
 8017e08:	f003 fc94 	bl	801b734 <memset>
 8017e0c:	e00a      	b.n	8017e24 <rcutils_string_map_reserve+0xb0>
 8017e0e:	694f      	ldr	r7, [r1, #20]
 8017e10:	6808      	ldr	r0, [r1, #0]
 8017e12:	4631      	mov	r1, r6
 8017e14:	47b8      	blx	r7
 8017e16:	682b      	ldr	r3, [r5, #0]
 8017e18:	4631      	mov	r1, r6
 8017e1a:	6858      	ldr	r0, [r3, #4]
 8017e1c:	601c      	str	r4, [r3, #0]
 8017e1e:	47b8      	blx	r7
 8017e20:	682d      	ldr	r5, [r5, #0]
 8017e22:	606c      	str	r4, [r5, #4]
 8017e24:	2000      	movs	r0, #0
 8017e26:	60ac      	str	r4, [r5, #8]
 8017e28:	b002      	add	sp, #8
 8017e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e2e:	2000      	movs	r0, #0
 8017e30:	e7b0      	b.n	8017d94 <rcutils_string_map_reserve+0x20>
 8017e32:	200a      	movs	r0, #10
 8017e34:	e7ae      	b.n	8017d94 <rcutils_string_map_reserve+0x20>
 8017e36:	200b      	movs	r0, #11
 8017e38:	4770      	bx	lr
 8017e3a:	1f0b      	subs	r3, r1, #4
 8017e3c:	4418      	add	r0, r3
 8017e3e:	4413      	add	r3, r2
 8017e40:	3a04      	subs	r2, #4
 8017e42:	4417      	add	r7, r2
 8017e44:	2200      	movs	r2, #0
 8017e46:	f843 2f04 	str.w	r2, [r3, #4]!
 8017e4a:	42bb      	cmp	r3, r7
 8017e4c:	f840 2f04 	str.w	r2, [r0, #4]!
 8017e50:	d1f9      	bne.n	8017e46 <rcutils_string_map_reserve+0xd2>
 8017e52:	e7e7      	b.n	8017e24 <rcutils_string_map_reserve+0xb0>

08017e54 <rcutils_string_map_init>:
 8017e54:	b082      	sub	sp, #8
 8017e56:	b570      	push	{r4, r5, r6, lr}
 8017e58:	ac04      	add	r4, sp, #16
 8017e5a:	e884 000c 	stmia.w	r4, {r2, r3}
 8017e5e:	b380      	cbz	r0, 8017ec2 <rcutils_string_map_init+0x6e>
 8017e60:	6806      	ldr	r6, [r0, #0]
 8017e62:	4604      	mov	r4, r0
 8017e64:	b12e      	cbz	r6, 8017e72 <rcutils_string_map_init+0x1e>
 8017e66:	251e      	movs	r5, #30
 8017e68:	4628      	mov	r0, r5
 8017e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e6e:	b002      	add	sp, #8
 8017e70:	4770      	bx	lr
 8017e72:	a804      	add	r0, sp, #16
 8017e74:	460d      	mov	r5, r1
 8017e76:	f7f8 fe55 	bl	8010b24 <rcutils_allocator_is_valid>
 8017e7a:	b310      	cbz	r0, 8017ec2 <rcutils_string_map_init+0x6e>
 8017e7c:	9b04      	ldr	r3, [sp, #16]
 8017e7e:	2024      	movs	r0, #36	@ 0x24
 8017e80:	9908      	ldr	r1, [sp, #32]
 8017e82:	4798      	blx	r3
 8017e84:	6020      	str	r0, [r4, #0]
 8017e86:	b310      	cbz	r0, 8017ece <rcutils_string_map_init+0x7a>
 8017e88:	f10d 0e10 	add.w	lr, sp, #16
 8017e8c:	f100 0c10 	add.w	ip, r0, #16
 8017e90:	e9c0 6600 	strd	r6, r6, [r0]
 8017e94:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017e98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ea0:	f8de 3000 	ldr.w	r3, [lr]
 8017ea4:	4629      	mov	r1, r5
 8017ea6:	4620      	mov	r0, r4
 8017ea8:	f8cc 3000 	str.w	r3, [ip]
 8017eac:	f7ff ff62 	bl	8017d74 <rcutils_string_map_reserve>
 8017eb0:	4605      	mov	r5, r0
 8017eb2:	2800      	cmp	r0, #0
 8017eb4:	d0d8      	beq.n	8017e68 <rcutils_string_map_init+0x14>
 8017eb6:	9b05      	ldr	r3, [sp, #20]
 8017eb8:	9908      	ldr	r1, [sp, #32]
 8017eba:	6820      	ldr	r0, [r4, #0]
 8017ebc:	4798      	blx	r3
 8017ebe:	6026      	str	r6, [r4, #0]
 8017ec0:	e7d2      	b.n	8017e68 <rcutils_string_map_init+0x14>
 8017ec2:	250b      	movs	r5, #11
 8017ec4:	4628      	mov	r0, r5
 8017ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017eca:	b002      	add	sp, #8
 8017ecc:	4770      	bx	lr
 8017ece:	250a      	movs	r5, #10
 8017ed0:	e7ca      	b.n	8017e68 <rcutils_string_map_init+0x14>
 8017ed2:	bf00      	nop

08017ed4 <rcutils_string_map_fini>:
 8017ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ed8:	b082      	sub	sp, #8
 8017eda:	2800      	cmp	r0, #0
 8017edc:	d03a      	beq.n	8017f54 <rcutils_string_map_fini+0x80>
 8017ede:	6804      	ldr	r4, [r0, #0]
 8017ee0:	4606      	mov	r6, r0
 8017ee2:	2c00      	cmp	r4, #0
 8017ee4:	d032      	beq.n	8017f4c <rcutils_string_map_fini+0x78>
 8017ee6:	68a3      	ldr	r3, [r4, #8]
 8017ee8:	b32b      	cbz	r3, 8017f36 <rcutils_string_map_fini+0x62>
 8017eea:	2500      	movs	r5, #0
 8017eec:	6822      	ldr	r2, [r4, #0]
 8017eee:	462f      	mov	r7, r5
 8017ef0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017ef4:	b1e0      	cbz	r0, 8017f30 <rcutils_string_map_fini+0x5c>
 8017ef6:	6a21      	ldr	r1, [r4, #32]
 8017ef8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8017efc:	9101      	str	r1, [sp, #4]
 8017efe:	47c0      	blx	r8
 8017f00:	9901      	ldr	r1, [sp, #4]
 8017f02:	e9d4 3200 	ldrd	r3, r2, [r4]
 8017f06:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8017f0a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017f0e:	47c0      	blx	r8
 8017f10:	68e3      	ldr	r3, [r4, #12]
 8017f12:	6862      	ldr	r2, [r4, #4]
 8017f14:	3b01      	subs	r3, #1
 8017f16:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8017f1a:	3501      	adds	r5, #1
 8017f1c:	60e3      	str	r3, [r4, #12]
 8017f1e:	6834      	ldr	r4, [r6, #0]
 8017f20:	68a3      	ldr	r3, [r4, #8]
 8017f22:	429d      	cmp	r5, r3
 8017f24:	d207      	bcs.n	8017f36 <rcutils_string_map_fini+0x62>
 8017f26:	6822      	ldr	r2, [r4, #0]
 8017f28:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017f2c:	2800      	cmp	r0, #0
 8017f2e:	d1e2      	bne.n	8017ef6 <rcutils_string_map_fini+0x22>
 8017f30:	3501      	adds	r5, #1
 8017f32:	429d      	cmp	r5, r3
 8017f34:	d3dc      	bcc.n	8017ef0 <rcutils_string_map_fini+0x1c>
 8017f36:	2100      	movs	r1, #0
 8017f38:	4630      	mov	r0, r6
 8017f3a:	f7ff ff1b 	bl	8017d74 <rcutils_string_map_reserve>
 8017f3e:	4604      	mov	r4, r0
 8017f40:	b920      	cbnz	r0, 8017f4c <rcutils_string_map_fini+0x78>
 8017f42:	6830      	ldr	r0, [r6, #0]
 8017f44:	6943      	ldr	r3, [r0, #20]
 8017f46:	6a01      	ldr	r1, [r0, #32]
 8017f48:	4798      	blx	r3
 8017f4a:	6034      	str	r4, [r6, #0]
 8017f4c:	4620      	mov	r0, r4
 8017f4e:	b002      	add	sp, #8
 8017f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f54:	240b      	movs	r4, #11
 8017f56:	4620      	mov	r0, r4
 8017f58:	b002      	add	sp, #8
 8017f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f5e:	bf00      	nop

08017f60 <rcutils_string_map_getn>:
 8017f60:	b378      	cbz	r0, 8017fc2 <rcutils_string_map_getn+0x62>
 8017f62:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f66:	f8d0 b000 	ldr.w	fp, [r0]
 8017f6a:	f1bb 0f00 	cmp.w	fp, #0
 8017f6e:	d01f      	beq.n	8017fb0 <rcutils_string_map_getn+0x50>
 8017f70:	fab1 f481 	clz	r4, r1
 8017f74:	4688      	mov	r8, r1
 8017f76:	0964      	lsrs	r4, r4, #5
 8017f78:	b1d1      	cbz	r1, 8017fb0 <rcutils_string_map_getn+0x50>
 8017f7a:	f8db 7008 	ldr.w	r7, [fp, #8]
 8017f7e:	f8db 6000 	ldr.w	r6, [fp]
 8017f82:	b1af      	cbz	r7, 8017fb0 <rcutils_string_map_getn+0x50>
 8017f84:	4691      	mov	r9, r2
 8017f86:	3e04      	subs	r6, #4
 8017f88:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8017f8c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8017f90:	3401      	adds	r4, #1
 8017f92:	4628      	mov	r0, r5
 8017f94:	b155      	cbz	r5, 8017fac <rcutils_string_map_getn+0x4c>
 8017f96:	f7e8 f95d 	bl	8000254 <strlen>
 8017f9a:	4602      	mov	r2, r0
 8017f9c:	4629      	mov	r1, r5
 8017f9e:	4640      	mov	r0, r8
 8017fa0:	454a      	cmp	r2, r9
 8017fa2:	bf38      	it	cc
 8017fa4:	464a      	movcc	r2, r9
 8017fa6:	f003 fbda 	bl	801b75e <strncmp>
 8017faa:	b120      	cbz	r0, 8017fb6 <rcutils_string_map_getn+0x56>
 8017fac:	42a7      	cmp	r7, r4
 8017fae:	d1eb      	bne.n	8017f88 <rcutils_string_map_getn+0x28>
 8017fb0:	2000      	movs	r0, #0
 8017fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fb6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8017fba:	f853 000a 	ldr.w	r0, [r3, sl]
 8017fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fc2:	4770      	bx	lr
 8017fc4:	0000      	movs	r0, r0
	...

08017fc8 <rmw_get_zero_initialized_context>:
 8017fc8:	b510      	push	{r4, lr}
 8017fca:	4604      	mov	r4, r0
 8017fcc:	3010      	adds	r0, #16
 8017fce:	f000 f80f 	bl	8017ff0 <rmw_get_zero_initialized_init_options>
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	4620      	mov	r0, r4
 8017fd6:	60a3      	str	r3, [r4, #8]
 8017fd8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8017fda:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8017fdc:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8017fe8 <rmw_get_zero_initialized_context+0x20>
 8017fe0:	ed84 7b00 	vstr	d7, [r4]
 8017fe4:	bd10      	pop	{r4, pc}
 8017fe6:	bf00      	nop
	...

08017ff0 <rmw_get_zero_initialized_init_options>:
 8017ff0:	b510      	push	{r4, lr}
 8017ff2:	4604      	mov	r4, r0
 8017ff4:	2238      	movs	r2, #56	@ 0x38
 8017ff6:	2100      	movs	r1, #0
 8017ff8:	f003 fb9c 	bl	801b734 <memset>
 8017ffc:	f104 0010 	add.w	r0, r4, #16
 8018000:	f000 f806 	bl	8018010 <rmw_get_default_security_options>
 8018004:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018008:	4620      	mov	r0, r4
 801800a:	60e3      	str	r3, [r4, #12]
 801800c:	bd10      	pop	{r4, pc}
 801800e:	bf00      	nop

08018010 <rmw_get_default_security_options>:
 8018010:	2200      	movs	r2, #0
 8018012:	7002      	strb	r2, [r0, #0]
 8018014:	6042      	str	r2, [r0, #4]
 8018016:	4770      	bx	lr

08018018 <rmw_subscription_content_filter_options_fini>:
 8018018:	b1b0      	cbz	r0, 8018048 <rmw_subscription_content_filter_options_fini+0x30>
 801801a:	b538      	push	{r3, r4, r5, lr}
 801801c:	4604      	mov	r4, r0
 801801e:	4608      	mov	r0, r1
 8018020:	460d      	mov	r5, r1
 8018022:	f7f8 fd7f 	bl	8010b24 <rcutils_allocator_is_valid>
 8018026:	b168      	cbz	r0, 8018044 <rmw_subscription_content_filter_options_fini+0x2c>
 8018028:	6820      	ldr	r0, [r4, #0]
 801802a:	b120      	cbz	r0, 8018036 <rmw_subscription_content_filter_options_fini+0x1e>
 801802c:	686b      	ldr	r3, [r5, #4]
 801802e:	6929      	ldr	r1, [r5, #16]
 8018030:	4798      	blx	r3
 8018032:	2300      	movs	r3, #0
 8018034:	6023      	str	r3, [r4, #0]
 8018036:	1d20      	adds	r0, r4, #4
 8018038:	f002 fe80 	bl	801ad3c <rcutils_string_array_fini>
 801803c:	3800      	subs	r0, #0
 801803e:	bf18      	it	ne
 8018040:	2001      	movne	r0, #1
 8018042:	bd38      	pop	{r3, r4, r5, pc}
 8018044:	200b      	movs	r0, #11
 8018046:	bd38      	pop	{r3, r4, r5, pc}
 8018048:	200b      	movs	r0, #11
 801804a:	4770      	bx	lr

0801804c <rmw_get_default_subscription_options>:
 801804c:	2200      	movs	r2, #0
 801804e:	e9c0 2200 	strd	r2, r2, [r0]
 8018052:	6082      	str	r2, [r0, #8]
 8018054:	4770      	bx	lr
 8018056:	bf00      	nop

08018058 <rmw_time_equal>:
 8018058:	b4f0      	push	{r4, r5, r6, r7}
 801805a:	b084      	sub	sp, #16
 801805c:	ac04      	add	r4, sp, #16
 801805e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018062:	4603      	mov	r3, r0
 8018064:	4925      	ldr	r1, [pc, #148]	@ (80180fc <rmw_time_equal+0xa4>)
 8018066:	9d01      	ldr	r5, [sp, #4]
 8018068:	4610      	mov	r0, r2
 801806a:	4299      	cmp	r1, r3
 801806c:	f04f 0202 	mov.w	r2, #2
 8018070:	9e03      	ldr	r6, [sp, #12]
 8018072:	41aa      	sbcs	r2, r5
 8018074:	d330      	bcc.n	80180d8 <rmw_time_equal+0x80>
 8018076:	4c22      	ldr	r4, [pc, #136]	@ (8018100 <rmw_time_equal+0xa8>)
 8018078:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801807c:	fba3 3204 	umull	r3, r2, r3, r4
 8018080:	fb04 2205 	mla	r2, r4, r5, r2
 8018084:	43dd      	mvns	r5, r3
 8018086:	1a8c      	subs	r4, r1, r2
 8018088:	4285      	cmp	r5, r0
 801808a:	41b4      	sbcs	r4, r6
 801808c:	d332      	bcc.n	80180f4 <rmw_time_equal+0x9c>
 801808e:	eb10 0c03 	adds.w	ip, r0, r3
 8018092:	eb42 0106 	adc.w	r1, r2, r6
 8018096:	4819      	ldr	r0, [pc, #100]	@ (80180fc <rmw_time_equal+0xa4>)
 8018098:	2202      	movs	r2, #2
 801809a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801809c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801809e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80180a2:	4298      	cmp	r0, r3
 80180a4:	41b2      	sbcs	r2, r6
 80180a6:	d31c      	bcc.n	80180e2 <rmw_time_equal+0x8a>
 80180a8:	4c15      	ldr	r4, [pc, #84]	@ (8018100 <rmw_time_equal+0xa8>)
 80180aa:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80180ae:	fba3 3204 	umull	r3, r2, r3, r4
 80180b2:	fb04 2206 	mla	r2, r4, r6, r2
 80180b6:	43de      	mvns	r6, r3
 80180b8:	1a84      	subs	r4, r0, r2
 80180ba:	42ae      	cmp	r6, r5
 80180bc:	41bc      	sbcs	r4, r7
 80180be:	d315      	bcc.n	80180ec <rmw_time_equal+0x94>
 80180c0:	195b      	adds	r3, r3, r5
 80180c2:	eb42 0207 	adc.w	r2, r2, r7
 80180c6:	428a      	cmp	r2, r1
 80180c8:	bf08      	it	eq
 80180ca:	4563      	cmpeq	r3, ip
 80180cc:	bf0c      	ite	eq
 80180ce:	2001      	moveq	r0, #1
 80180d0:	2000      	movne	r0, #0
 80180d2:	b004      	add	sp, #16
 80180d4:	bcf0      	pop	{r4, r5, r6, r7}
 80180d6:	4770      	bx	lr
 80180d8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80180dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80180e0:	e7d9      	b.n	8018096 <rmw_time_equal+0x3e>
 80180e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80180e6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80180ea:	e7ec      	b.n	80180c6 <rmw_time_equal+0x6e>
 80180ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80180f0:	4602      	mov	r2, r0
 80180f2:	e7e8      	b.n	80180c6 <rmw_time_equal+0x6e>
 80180f4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80180f8:	e7cd      	b.n	8018096 <rmw_time_equal+0x3e>
 80180fa:	bf00      	nop
 80180fc:	25c17d04 	.word	0x25c17d04
 8018100:	3b9aca00 	.word	0x3b9aca00

08018104 <rmw_time_total_nsec>:
 8018104:	b470      	push	{r4, r5, r6}
 8018106:	b085      	sub	sp, #20
 8018108:	ac04      	add	r4, sp, #16
 801810a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801810e:	4603      	mov	r3, r0
 8018110:	4913      	ldr	r1, [pc, #76]	@ (8018160 <rmw_time_total_nsec+0x5c>)
 8018112:	9d01      	ldr	r5, [sp, #4]
 8018114:	4610      	mov	r0, r2
 8018116:	4299      	cmp	r1, r3
 8018118:	f04f 0202 	mov.w	r2, #2
 801811c:	9e03      	ldr	r6, [sp, #12]
 801811e:	41aa      	sbcs	r2, r5
 8018120:	d311      	bcc.n	8018146 <rmw_time_total_nsec+0x42>
 8018122:	4c10      	ldr	r4, [pc, #64]	@ (8018164 <rmw_time_total_nsec+0x60>)
 8018124:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018128:	fba3 3204 	umull	r3, r2, r3, r4
 801812c:	fb04 2205 	mla	r2, r4, r5, r2
 8018130:	43dd      	mvns	r5, r3
 8018132:	1a8c      	subs	r4, r1, r2
 8018134:	4285      	cmp	r5, r0
 8018136:	41b4      	sbcs	r4, r6
 8018138:	d30c      	bcc.n	8018154 <rmw_time_total_nsec+0x50>
 801813a:	1818      	adds	r0, r3, r0
 801813c:	eb42 0106 	adc.w	r1, r2, r6
 8018140:	b005      	add	sp, #20
 8018142:	bc70      	pop	{r4, r5, r6}
 8018144:	4770      	bx	lr
 8018146:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801814a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801814e:	b005      	add	sp, #20
 8018150:	bc70      	pop	{r4, r5, r6}
 8018152:	4770      	bx	lr
 8018154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018158:	b005      	add	sp, #20
 801815a:	bc70      	pop	{r4, r5, r6}
 801815c:	4770      	bx	lr
 801815e:	bf00      	nop
 8018160:	25c17d04 	.word	0x25c17d04
 8018164:	3b9aca00 	.word	0x3b9aca00

08018168 <rmw_get_zero_initialized_message_info>:
 8018168:	b510      	push	{r4, lr}
 801816a:	4604      	mov	r4, r0
 801816c:	2240      	movs	r2, #64	@ 0x40
 801816e:	2100      	movs	r1, #0
 8018170:	f003 fae0 	bl	801b734 <memset>
 8018174:	4620      	mov	r0, r4
 8018176:	bd10      	pop	{r4, pc}

08018178 <rmw_validate_full_topic_name>:
 8018178:	2800      	cmp	r0, #0
 801817a:	d05d      	beq.n	8018238 <rmw_validate_full_topic_name+0xc0>
 801817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018180:	460d      	mov	r5, r1
 8018182:	2900      	cmp	r1, #0
 8018184:	d05a      	beq.n	801823c <rmw_validate_full_topic_name+0xc4>
 8018186:	4604      	mov	r4, r0
 8018188:	4616      	mov	r6, r2
 801818a:	f7e8 f863 	bl	8000254 <strlen>
 801818e:	b150      	cbz	r0, 80181a6 <rmw_validate_full_topic_name+0x2e>
 8018190:	7823      	ldrb	r3, [r4, #0]
 8018192:	2b2f      	cmp	r3, #47	@ 0x2f
 8018194:	d00e      	beq.n	80181b4 <rmw_validate_full_topic_name+0x3c>
 8018196:	2302      	movs	r3, #2
 8018198:	602b      	str	r3, [r5, #0]
 801819a:	b146      	cbz	r6, 80181ae <rmw_validate_full_topic_name+0x36>
 801819c:	2300      	movs	r3, #0
 801819e:	4618      	mov	r0, r3
 80181a0:	6033      	str	r3, [r6, #0]
 80181a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181a6:	2301      	movs	r3, #1
 80181a8:	602b      	str	r3, [r5, #0]
 80181aa:	2e00      	cmp	r6, #0
 80181ac:	d1f6      	bne.n	801819c <rmw_validate_full_topic_name+0x24>
 80181ae:	2000      	movs	r0, #0
 80181b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181b4:	1e43      	subs	r3, r0, #1
 80181b6:	5ce2      	ldrb	r2, [r4, r3]
 80181b8:	2a2f      	cmp	r2, #47	@ 0x2f
 80181ba:	d041      	beq.n	8018240 <rmw_validate_full_topic_name+0xc8>
 80181bc:	1e62      	subs	r2, r4, #1
 80181be:	f1c4 0e01 	rsb	lr, r4, #1
 80181c2:	eb02 0800 	add.w	r8, r2, r0
 80181c6:	eb0e 0702 	add.w	r7, lr, r2
 80181ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80181ce:	f023 0120 	bic.w	r1, r3, #32
 80181d2:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 80181d6:	3941      	subs	r1, #65	@ 0x41
 80181d8:	2919      	cmp	r1, #25
 80181da:	d90f      	bls.n	80181fc <rmw_validate_full_topic_name+0x84>
 80181dc:	f1bc 0f0a 	cmp.w	ip, #10
 80181e0:	d90c      	bls.n	80181fc <rmw_validate_full_topic_name+0x84>
 80181e2:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 80181e6:	fab3 f383 	clz	r3, r3
 80181ea:	095b      	lsrs	r3, r3, #5
 80181ec:	b933      	cbnz	r3, 80181fc <rmw_validate_full_topic_name+0x84>
 80181ee:	2204      	movs	r2, #4
 80181f0:	602a      	str	r2, [r5, #0]
 80181f2:	2e00      	cmp	r6, #0
 80181f4:	d0db      	beq.n	80181ae <rmw_validate_full_topic_name+0x36>
 80181f6:	4618      	mov	r0, r3
 80181f8:	6037      	str	r7, [r6, #0]
 80181fa:	e7d2      	b.n	80181a2 <rmw_validate_full_topic_name+0x2a>
 80181fc:	4542      	cmp	r2, r8
 80181fe:	d1e2      	bne.n	80181c6 <rmw_validate_full_topic_name+0x4e>
 8018200:	2301      	movs	r3, #1
 8018202:	4f1a      	ldr	r7, [pc, #104]	@ (801826c <rmw_validate_full_topic_name+0xf4>)
 8018204:	e004      	b.n	8018210 <rmw_validate_full_topic_name+0x98>
 8018206:	4298      	cmp	r0, r3
 8018208:	f104 0401 	add.w	r4, r4, #1
 801820c:	4613      	mov	r3, r2
 801820e:	d91c      	bls.n	801824a <rmw_validate_full_topic_name+0xd2>
 8018210:	4298      	cmp	r0, r3
 8018212:	f103 0201 	add.w	r2, r3, #1
 8018216:	d0f6      	beq.n	8018206 <rmw_validate_full_topic_name+0x8e>
 8018218:	7821      	ldrb	r1, [r4, #0]
 801821a:	292f      	cmp	r1, #47	@ 0x2f
 801821c:	d1f3      	bne.n	8018206 <rmw_validate_full_topic_name+0x8e>
 801821e:	7861      	ldrb	r1, [r4, #1]
 8018220:	292f      	cmp	r1, #47	@ 0x2f
 8018222:	d01e      	beq.n	8018262 <rmw_validate_full_topic_name+0xea>
 8018224:	5dc9      	ldrb	r1, [r1, r7]
 8018226:	0749      	lsls	r1, r1, #29
 8018228:	d5ed      	bpl.n	8018206 <rmw_validate_full_topic_name+0x8e>
 801822a:	2206      	movs	r2, #6
 801822c:	602a      	str	r2, [r5, #0]
 801822e:	2e00      	cmp	r6, #0
 8018230:	d0bd      	beq.n	80181ae <rmw_validate_full_topic_name+0x36>
 8018232:	2000      	movs	r0, #0
 8018234:	6033      	str	r3, [r6, #0]
 8018236:	e7b4      	b.n	80181a2 <rmw_validate_full_topic_name+0x2a>
 8018238:	200b      	movs	r0, #11
 801823a:	4770      	bx	lr
 801823c:	200b      	movs	r0, #11
 801823e:	e7b0      	b.n	80181a2 <rmw_validate_full_topic_name+0x2a>
 8018240:	2203      	movs	r2, #3
 8018242:	602a      	str	r2, [r5, #0]
 8018244:	2e00      	cmp	r6, #0
 8018246:	d1f4      	bne.n	8018232 <rmw_validate_full_topic_name+0xba>
 8018248:	e7b1      	b.n	80181ae <rmw_validate_full_topic_name+0x36>
 801824a:	28f7      	cmp	r0, #247	@ 0xf7
 801824c:	d803      	bhi.n	8018256 <rmw_validate_full_topic_name+0xde>
 801824e:	2300      	movs	r3, #0
 8018250:	4618      	mov	r0, r3
 8018252:	602b      	str	r3, [r5, #0]
 8018254:	e7a5      	b.n	80181a2 <rmw_validate_full_topic_name+0x2a>
 8018256:	2307      	movs	r3, #7
 8018258:	602b      	str	r3, [r5, #0]
 801825a:	2e00      	cmp	r6, #0
 801825c:	d0a7      	beq.n	80181ae <rmw_validate_full_topic_name+0x36>
 801825e:	23f6      	movs	r3, #246	@ 0xf6
 8018260:	e7e7      	b.n	8018232 <rmw_validate_full_topic_name+0xba>
 8018262:	2205      	movs	r2, #5
 8018264:	602a      	str	r2, [r5, #0]
 8018266:	2e00      	cmp	r6, #0
 8018268:	d1e3      	bne.n	8018232 <rmw_validate_full_topic_name+0xba>
 801826a:	e7a0      	b.n	80181ae <rmw_validate_full_topic_name+0x36>
 801826c:	0801d52c 	.word	0x0801d52c

08018270 <get_memory>:
 8018270:	4603      	mov	r3, r0
 8018272:	6840      	ldr	r0, [r0, #4]
 8018274:	b158      	cbz	r0, 801828e <get_memory+0x1e>
 8018276:	6842      	ldr	r2, [r0, #4]
 8018278:	605a      	str	r2, [r3, #4]
 801827a:	b10a      	cbz	r2, 8018280 <get_memory+0x10>
 801827c:	2100      	movs	r1, #0
 801827e:	6011      	str	r1, [r2, #0]
 8018280:	681a      	ldr	r2, [r3, #0]
 8018282:	6042      	str	r2, [r0, #4]
 8018284:	b102      	cbz	r2, 8018288 <get_memory+0x18>
 8018286:	6010      	str	r0, [r2, #0]
 8018288:	2200      	movs	r2, #0
 801828a:	6002      	str	r2, [r0, #0]
 801828c:	6018      	str	r0, [r3, #0]
 801828e:	4770      	bx	lr

08018290 <put_memory>:
 8018290:	680b      	ldr	r3, [r1, #0]
 8018292:	b10b      	cbz	r3, 8018298 <put_memory+0x8>
 8018294:	684a      	ldr	r2, [r1, #4]
 8018296:	605a      	str	r2, [r3, #4]
 8018298:	684a      	ldr	r2, [r1, #4]
 801829a:	b102      	cbz	r2, 801829e <put_memory+0xe>
 801829c:	6013      	str	r3, [r2, #0]
 801829e:	6803      	ldr	r3, [r0, #0]
 80182a0:	428b      	cmp	r3, r1
 80182a2:	6843      	ldr	r3, [r0, #4]
 80182a4:	bf08      	it	eq
 80182a6:	6002      	streq	r2, [r0, #0]
 80182a8:	604b      	str	r3, [r1, #4]
 80182aa:	b103      	cbz	r3, 80182ae <put_memory+0x1e>
 80182ac:	6019      	str	r1, [r3, #0]
 80182ae:	2300      	movs	r3, #0
 80182b0:	600b      	str	r3, [r1, #0]
 80182b2:	6041      	str	r1, [r0, #4]
 80182b4:	4770      	bx	lr
 80182b6:	bf00      	nop

080182b8 <rmw_destroy_client>:
 80182b8:	b570      	push	{r4, r5, r6, lr}
 80182ba:	b128      	cbz	r0, 80182c8 <rmw_destroy_client+0x10>
 80182bc:	4604      	mov	r4, r0
 80182be:	6800      	ldr	r0, [r0, #0]
 80182c0:	460d      	mov	r5, r1
 80182c2:	f7f9 ff0d 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 80182c6:	b910      	cbnz	r0, 80182ce <rmw_destroy_client+0x16>
 80182c8:	2401      	movs	r4, #1
 80182ca:	4620      	mov	r0, r4
 80182cc:	bd70      	pop	{r4, r5, r6, pc}
 80182ce:	6863      	ldr	r3, [r4, #4]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d0f9      	beq.n	80182c8 <rmw_destroy_client+0x10>
 80182d4:	2d00      	cmp	r5, #0
 80182d6:	d0f7      	beq.n	80182c8 <rmw_destroy_client+0x10>
 80182d8:	6828      	ldr	r0, [r5, #0]
 80182da:	f7f9 ff01 	bl	80120e0 <is_uxrce_rmw_identifier_valid>
 80182de:	2800      	cmp	r0, #0
 80182e0:	d0f2      	beq.n	80182c8 <rmw_destroy_client+0x10>
 80182e2:	686e      	ldr	r6, [r5, #4]
 80182e4:	2e00      	cmp	r6, #0
 80182e6:	d0ef      	beq.n	80182c8 <rmw_destroy_client+0x10>
 80182e8:	6864      	ldr	r4, [r4, #4]
 80182ea:	6932      	ldr	r2, [r6, #16]
 80182ec:	6920      	ldr	r0, [r4, #16]
 80182ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80182f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80182f6:	6819      	ldr	r1, [r3, #0]
 80182f8:	f7fa fa34 	bl	8012764 <uxr_buffer_cancel_data>
 80182fc:	4602      	mov	r2, r0
 80182fe:	6920      	ldr	r0, [r4, #16]
 8018300:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018304:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018308:	f7f9 fe70 	bl	8011fec <run_xrce_session>
 801830c:	6920      	ldr	r0, [r4, #16]
 801830e:	6932      	ldr	r2, [r6, #16]
 8018310:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018314:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018318:	6819      	ldr	r1, [r3, #0]
 801831a:	f7f9 ffb7 	bl	801228c <uxr_buffer_delete_entity>
 801831e:	4602      	mov	r2, r0
 8018320:	6920      	ldr	r0, [r4, #16]
 8018322:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018326:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801832a:	f7f9 fe5f 	bl	8011fec <run_xrce_session>
 801832e:	4603      	mov	r3, r0
 8018330:	4628      	mov	r0, r5
 8018332:	2b00      	cmp	r3, #0
 8018334:	bf14      	ite	ne
 8018336:	2400      	movne	r4, #0
 8018338:	2402      	moveq	r4, #2
 801833a:	f7f9 fd33 	bl	8011da4 <rmw_uxrce_fini_client_memory>
 801833e:	e7c4      	b.n	80182ca <rmw_destroy_client+0x12>

08018340 <rmw_get_implementation_identifier>:
 8018340:	4b01      	ldr	r3, [pc, #4]	@ (8018348 <rmw_get_implementation_identifier+0x8>)
 8018342:	6818      	ldr	r0, [r3, #0]
 8018344:	4770      	bx	lr
 8018346:	bf00      	nop
 8018348:	0801d284 	.word	0x0801d284

0801834c <rmw_create_guard_condition>:
 801834c:	b538      	push	{r3, r4, r5, lr}
 801834e:	4605      	mov	r5, r0
 8018350:	4808      	ldr	r0, [pc, #32]	@ (8018374 <rmw_create_guard_condition+0x28>)
 8018352:	f7ff ff8d 	bl	8018270 <get_memory>
 8018356:	4603      	mov	r3, r0
 8018358:	b148      	cbz	r0, 801836e <rmw_create_guard_condition+0x22>
 801835a:	6884      	ldr	r4, [r0, #8]
 801835c:	2300      	movs	r3, #0
 801835e:	61e5      	str	r5, [r4, #28]
 8018360:	7423      	strb	r3, [r4, #16]
 8018362:	f7ff ffed 	bl	8018340 <rmw_get_implementation_identifier>
 8018366:	f104 0314 	add.w	r3, r4, #20
 801836a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801836e:	4618      	mov	r0, r3
 8018370:	bd38      	pop	{r3, r4, r5, pc}
 8018372:	bf00      	nop
 8018374:	200126e4 	.word	0x200126e4

08018378 <rmw_destroy_guard_condition>:
 8018378:	b508      	push	{r3, lr}
 801837a:	4b08      	ldr	r3, [pc, #32]	@ (801839c <rmw_destroy_guard_condition+0x24>)
 801837c:	6819      	ldr	r1, [r3, #0]
 801837e:	b911      	cbnz	r1, 8018386 <rmw_destroy_guard_condition+0xe>
 8018380:	e00a      	b.n	8018398 <rmw_destroy_guard_condition+0x20>
 8018382:	6849      	ldr	r1, [r1, #4]
 8018384:	b141      	cbz	r1, 8018398 <rmw_destroy_guard_condition+0x20>
 8018386:	688b      	ldr	r3, [r1, #8]
 8018388:	3314      	adds	r3, #20
 801838a:	4298      	cmp	r0, r3
 801838c:	d1f9      	bne.n	8018382 <rmw_destroy_guard_condition+0xa>
 801838e:	4803      	ldr	r0, [pc, #12]	@ (801839c <rmw_destroy_guard_condition+0x24>)
 8018390:	f7ff ff7e 	bl	8018290 <put_memory>
 8018394:	2000      	movs	r0, #0
 8018396:	bd08      	pop	{r3, pc}
 8018398:	2001      	movs	r0, #1
 801839a:	bd08      	pop	{r3, pc}
 801839c:	200126e4 	.word	0x200126e4

080183a0 <rmw_init_options_init>:
 80183a0:	b084      	sub	sp, #16
 80183a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183a4:	b083      	sub	sp, #12
 80183a6:	ad09      	add	r5, sp, #36	@ 0x24
 80183a8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80183ac:	b130      	cbz	r0, 80183bc <rmw_init_options_init+0x1c>
 80183ae:	4604      	mov	r4, r0
 80183b0:	4628      	mov	r0, r5
 80183b2:	f7f8 fbb7 	bl	8010b24 <rcutils_allocator_is_valid>
 80183b6:	b108      	cbz	r0, 80183bc <rmw_init_options_init+0x1c>
 80183b8:	68a6      	ldr	r6, [r4, #8]
 80183ba:	b12e      	cbz	r6, 80183c8 <rmw_init_options_init+0x28>
 80183bc:	200b      	movs	r0, #11
 80183be:	b003      	add	sp, #12
 80183c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80183c4:	b004      	add	sp, #16
 80183c6:	4770      	bx	lr
 80183c8:	2200      	movs	r2, #0
 80183ca:	2300      	movs	r3, #0
 80183cc:	f104 0c20 	add.w	ip, r4, #32
 80183d0:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801846c <rmw_init_options_init+0xcc>
 80183d4:	466f      	mov	r7, sp
 80183d6:	e9c4 2300 	strd	r2, r3, [r4]
 80183da:	4b20      	ldr	r3, [pc, #128]	@ (801845c <rmw_init_options_init+0xbc>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	60a3      	str	r3, [r4, #8]
 80183e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183e6:	682b      	ldr	r3, [r5, #0]
 80183e8:	4638      	mov	r0, r7
 80183ea:	f8cc 3000 	str.w	r3, [ip]
 80183ee:	f8c4 e01c 	str.w	lr, [r4, #28]
 80183f2:	60e6      	str	r6, [r4, #12]
 80183f4:	f7ff fe0c 	bl	8018010 <rmw_get_default_security_options>
 80183f8:	f104 0310 	add.w	r3, r4, #16
 80183fc:	2203      	movs	r2, #3
 80183fe:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018402:	e883 0003 	stmia.w	r3, {r0, r1}
 8018406:	4816      	ldr	r0, [pc, #88]	@ (8018460 <rmw_init_options_init+0xc0>)
 8018408:	4916      	ldr	r1, [pc, #88]	@ (8018464 <rmw_init_options_init+0xc4>)
 801840a:	7626      	strb	r6, [r4, #24]
 801840c:	f7f9 fc0a 	bl	8011c24 <rmw_uxrce_init_init_options_impl_memory>
 8018410:	4813      	ldr	r0, [pc, #76]	@ (8018460 <rmw_init_options_init+0xc0>)
 8018412:	f7ff ff2d 	bl	8018270 <get_memory>
 8018416:	b1f0      	cbz	r0, 8018456 <rmw_init_options_init+0xb6>
 8018418:	4a13      	ldr	r2, [pc, #76]	@ (8018468 <rmw_init_options_init+0xc8>)
 801841a:	6883      	ldr	r3, [r0, #8]
 801841c:	6851      	ldr	r1, [r2, #4]
 801841e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018420:	7810      	ldrb	r0, [r2, #0]
 8018422:	6159      	str	r1, [r3, #20]
 8018424:	68d1      	ldr	r1, [r2, #12]
 8018426:	7418      	strb	r0, [r3, #16]
 8018428:	61d9      	str	r1, [r3, #28]
 801842a:	6911      	ldr	r1, [r2, #16]
 801842c:	6219      	str	r1, [r3, #32]
 801842e:	6951      	ldr	r1, [r2, #20]
 8018430:	6892      	ldr	r2, [r2, #8]
 8018432:	6259      	str	r1, [r3, #36]	@ 0x24
 8018434:	619a      	str	r2, [r3, #24]
 8018436:	f7fb fcc5 	bl	8013dc4 <uxr_nanos>
 801843a:	f002 feb3 	bl	801b1a4 <srand>
 801843e:	f002 fedf 	bl	801b200 <rand>
 8018442:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018444:	6298      	str	r0, [r3, #40]	@ 0x28
 8018446:	2800      	cmp	r0, #0
 8018448:	d0f9      	beq.n	801843e <rmw_init_options_init+0x9e>
 801844a:	2000      	movs	r0, #0
 801844c:	b003      	add	sp, #12
 801844e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018452:	b004      	add	sp, #16
 8018454:	4770      	bx	lr
 8018456:	2001      	movs	r0, #1
 8018458:	e7b1      	b.n	80183be <rmw_init_options_init+0x1e>
 801845a:	bf00      	nop
 801845c:	0801d284 	.word	0x0801d284
 8018460:	200126f4 	.word	0x200126f4
 8018464:	2000df90 	.word	0x2000df90
 8018468:	2000dddc 	.word	0x2000dddc
 801846c:	0801c9c0 	.word	0x0801c9c0

08018470 <rmw_init_options_copy>:
 8018470:	2800      	cmp	r0, #0
 8018472:	d047      	beq.n	8018504 <rmw_init_options_copy+0x94>
 8018474:	b570      	push	{r4, r5, r6, lr}
 8018476:	460d      	mov	r5, r1
 8018478:	b149      	cbz	r1, 801848e <rmw_init_options_copy+0x1e>
 801847a:	4604      	mov	r4, r0
 801847c:	6880      	ldr	r0, [r0, #8]
 801847e:	b120      	cbz	r0, 801848a <rmw_init_options_copy+0x1a>
 8018480:	4b22      	ldr	r3, [pc, #136]	@ (801850c <rmw_init_options_copy+0x9c>)
 8018482:	6819      	ldr	r1, [r3, #0]
 8018484:	f7e7 fedc 	bl	8000240 <strcmp>
 8018488:	bba8      	cbnz	r0, 80184f6 <rmw_init_options_copy+0x86>
 801848a:	68ab      	ldr	r3, [r5, #8]
 801848c:	b11b      	cbz	r3, 8018496 <rmw_init_options_copy+0x26>
 801848e:	f04f 0c0b 	mov.w	ip, #11
 8018492:	4660      	mov	r0, ip
 8018494:	bd70      	pop	{r4, r5, r6, pc}
 8018496:	4623      	mov	r3, r4
 8018498:	462a      	mov	r2, r5
 801849a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801849e:	f8d3 e000 	ldr.w	lr, [r3]
 80184a2:	3310      	adds	r3, #16
 80184a4:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 80184a8:	3210      	adds	r2, #16
 80184aa:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80184ae:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80184b2:	42b3      	cmp	r3, r6
 80184b4:	f842 ec10 	str.w	lr, [r2, #-16]
 80184b8:	f842 cc0c 	str.w	ip, [r2, #-12]
 80184bc:	f842 0c08 	str.w	r0, [r2, #-8]
 80184c0:	f842 1c04 	str.w	r1, [r2, #-4]
 80184c4:	d1eb      	bne.n	801849e <rmw_init_options_copy+0x2e>
 80184c6:	6819      	ldr	r1, [r3, #0]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	4811      	ldr	r0, [pc, #68]	@ (8018510 <rmw_init_options_copy+0xa0>)
 80184cc:	6011      	str	r1, [r2, #0]
 80184ce:	6053      	str	r3, [r2, #4]
 80184d0:	f7ff fece 	bl	8018270 <get_memory>
 80184d4:	b198      	cbz	r0, 80184fe <rmw_init_options_copy+0x8e>
 80184d6:	6883      	ldr	r3, [r0, #8]
 80184d8:	f04f 0c00 	mov.w	ip, #0
 80184dc:	636b      	str	r3, [r5, #52]	@ 0x34
 80184de:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80184e0:	f103 0410 	add.w	r4, r3, #16
 80184e4:	3510      	adds	r5, #16
 80184e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80184ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80184f2:	4660      	mov	r0, ip
 80184f4:	bd70      	pop	{r4, r5, r6, pc}
 80184f6:	f04f 0c0c 	mov.w	ip, #12
 80184fa:	4660      	mov	r0, ip
 80184fc:	bd70      	pop	{r4, r5, r6, pc}
 80184fe:	f04f 0c01 	mov.w	ip, #1
 8018502:	e7c6      	b.n	8018492 <rmw_init_options_copy+0x22>
 8018504:	f04f 0c0b 	mov.w	ip, #11
 8018508:	4660      	mov	r0, ip
 801850a:	4770      	bx	lr
 801850c:	0801d284 	.word	0x0801d284
 8018510:	200126f4 	.word	0x200126f4

08018514 <rmw_init_options_fini>:
 8018514:	b510      	push	{r4, lr}
 8018516:	b08e      	sub	sp, #56	@ 0x38
 8018518:	b388      	cbz	r0, 801857e <rmw_init_options_fini+0x6a>
 801851a:	4604      	mov	r4, r0
 801851c:	3020      	adds	r0, #32
 801851e:	f7f8 fb01 	bl	8010b24 <rcutils_allocator_is_valid>
 8018522:	b360      	cbz	r0, 801857e <rmw_init_options_fini+0x6a>
 8018524:	68a0      	ldr	r0, [r4, #8]
 8018526:	b120      	cbz	r0, 8018532 <rmw_init_options_fini+0x1e>
 8018528:	4b1a      	ldr	r3, [pc, #104]	@ (8018594 <rmw_init_options_fini+0x80>)
 801852a:	6819      	ldr	r1, [r3, #0]
 801852c:	f7e7 fe88 	bl	8000240 <strcmp>
 8018530:	bb68      	cbnz	r0, 801858e <rmw_init_options_fini+0x7a>
 8018532:	4b19      	ldr	r3, [pc, #100]	@ (8018598 <rmw_init_options_fini+0x84>)
 8018534:	6819      	ldr	r1, [r3, #0]
 8018536:	b331      	cbz	r1, 8018586 <rmw_init_options_fini+0x72>
 8018538:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801853a:	e001      	b.n	8018540 <rmw_init_options_fini+0x2c>
 801853c:	6849      	ldr	r1, [r1, #4]
 801853e:	b311      	cbz	r1, 8018586 <rmw_init_options_fini+0x72>
 8018540:	688b      	ldr	r3, [r1, #8]
 8018542:	429a      	cmp	r2, r3
 8018544:	d1fa      	bne.n	801853c <rmw_init_options_fini+0x28>
 8018546:	4814      	ldr	r0, [pc, #80]	@ (8018598 <rmw_init_options_fini+0x84>)
 8018548:	f7ff fea2 	bl	8018290 <put_memory>
 801854c:	4668      	mov	r0, sp
 801854e:	f7ff fd4f 	bl	8017ff0 <rmw_get_zero_initialized_init_options>
 8018552:	46ee      	mov	lr, sp
 8018554:	46a4      	mov	ip, r4
 8018556:	2400      	movs	r4, #0
 8018558:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801855c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018560:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018564:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018568:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801856c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018570:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018574:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018578:	4620      	mov	r0, r4
 801857a:	b00e      	add	sp, #56	@ 0x38
 801857c:	bd10      	pop	{r4, pc}
 801857e:	240b      	movs	r4, #11
 8018580:	4620      	mov	r0, r4
 8018582:	b00e      	add	sp, #56	@ 0x38
 8018584:	bd10      	pop	{r4, pc}
 8018586:	2401      	movs	r4, #1
 8018588:	4620      	mov	r0, r4
 801858a:	b00e      	add	sp, #56	@ 0x38
 801858c:	bd10      	pop	{r4, pc}
 801858e:	240c      	movs	r4, #12
 8018590:	e7f2      	b.n	8018578 <rmw_init_options_fini+0x64>
 8018592:	bf00      	nop
 8018594:	0801d284 	.word	0x0801d284
 8018598:	200126f4 	.word	0x200126f4

0801859c <rmw_init>:
 801859c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185a0:	b083      	sub	sp, #12
 80185a2:	2800      	cmp	r0, #0
 80185a4:	f000 80d3 	beq.w	801874e <rmw_init+0x1b2>
 80185a8:	460e      	mov	r6, r1
 80185aa:	2900      	cmp	r1, #0
 80185ac:	f000 80cf 	beq.w	801874e <rmw_init+0x1b2>
 80185b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80185b2:	4605      	mov	r5, r0
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	f000 80ca 	beq.w	801874e <rmw_init+0x1b2>
 80185ba:	4b78      	ldr	r3, [pc, #480]	@ (801879c <rmw_init+0x200>)
 80185bc:	6880      	ldr	r0, [r0, #8]
 80185be:	681f      	ldr	r7, [r3, #0]
 80185c0:	b128      	cbz	r0, 80185ce <rmw_init+0x32>
 80185c2:	4639      	mov	r1, r7
 80185c4:	f7e7 fe3c 	bl	8000240 <strcmp>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	f040 80ca 	bne.w	8018762 <rmw_init+0x1c6>
 80185ce:	4c74      	ldr	r4, [pc, #464]	@ (80187a0 <rmw_init+0x204>)
 80185d0:	f04f 0800 	mov.w	r8, #0
 80185d4:	4973      	ldr	r1, [pc, #460]	@ (80187a4 <rmw_init+0x208>)
 80185d6:	4874      	ldr	r0, [pc, #464]	@ (80187a8 <rmw_init+0x20c>)
 80185d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80185dc:	60b7      	str	r7, [r6, #8]
 80185de:	e9c6 2300 	strd	r2, r3, [r6]
 80185e2:	68eb      	ldr	r3, [r5, #12]
 80185e4:	2201      	movs	r2, #1
 80185e6:	64b3      	str	r3, [r6, #72]	@ 0x48
 80185e8:	f7f9 fabc 	bl	8011b64 <rmw_uxrce_init_session_memory>
 80185ec:	4620      	mov	r0, r4
 80185ee:	2204      	movs	r2, #4
 80185f0:	496e      	ldr	r1, [pc, #440]	@ (80187ac <rmw_init+0x210>)
 80185f2:	f7f9 faf7 	bl	8011be4 <rmw_uxrce_init_static_input_buffer_memory>
 80185f6:	486c      	ldr	r0, [pc, #432]	@ (80187a8 <rmw_init+0x20c>)
 80185f8:	f884 800d 	strb.w	r8, [r4, #13]
 80185fc:	f7ff fe38 	bl	8018270 <get_memory>
 8018600:	2800      	cmp	r0, #0
 8018602:	f000 80a9 	beq.w	8018758 <rmw_init+0x1bc>
 8018606:	6884      	ldr	r4, [r0, #8]
 8018608:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801860a:	f104 0910 	add.w	r9, r4, #16
 801860e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018610:	f890 c010 	ldrb.w	ip, [r0, #16]
 8018614:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018618:	9101      	str	r1, [sp, #4]
 801861a:	4661      	mov	r1, ip
 801861c:	6a00      	ldr	r0, [r0, #32]
 801861e:	9000      	str	r0, [sp, #0]
 8018620:	4648      	mov	r0, r9
 8018622:	f000 ff05 	bl	8019430 <uxr_set_custom_transport_callbacks>
 8018626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801862a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801862e:	4960      	ldr	r1, [pc, #384]	@ (80187b0 <rmw_init+0x214>)
 8018630:	4860      	ldr	r0, [pc, #384]	@ (80187b4 <rmw_init+0x218>)
 8018632:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8018636:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801863a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801863e:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8018642:	2201      	movs	r2, #1
 8018644:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8018648:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801864c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8018650:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8018654:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8018656:	f7f9 fa65 	bl	8011b24 <rmw_uxrce_init_node_memory>
 801865a:	2205      	movs	r2, #5
 801865c:	4956      	ldr	r1, [pc, #344]	@ (80187b8 <rmw_init+0x21c>)
 801865e:	4857      	ldr	r0, [pc, #348]	@ (80187bc <rmw_init+0x220>)
 8018660:	f7f9 fa40 	bl	8011ae4 <rmw_uxrce_init_subscription_memory>
 8018664:	220a      	movs	r2, #10
 8018666:	4956      	ldr	r1, [pc, #344]	@ (80187c0 <rmw_init+0x224>)
 8018668:	4856      	ldr	r0, [pc, #344]	@ (80187c4 <rmw_init+0x228>)
 801866a:	f7f9 fa1b 	bl	8011aa4 <rmw_uxrce_init_publisher_memory>
 801866e:	2201      	movs	r2, #1
 8018670:	4955      	ldr	r1, [pc, #340]	@ (80187c8 <rmw_init+0x22c>)
 8018672:	4856      	ldr	r0, [pc, #344]	@ (80187cc <rmw_init+0x230>)
 8018674:	f7f9 f9d6 	bl	8011a24 <rmw_uxrce_init_service_memory>
 8018678:	2201      	movs	r2, #1
 801867a:	4955      	ldr	r1, [pc, #340]	@ (80187d0 <rmw_init+0x234>)
 801867c:	4855      	ldr	r0, [pc, #340]	@ (80187d4 <rmw_init+0x238>)
 801867e:	f7f9 f9f1 	bl	8011a64 <rmw_uxrce_init_client_memory>
 8018682:	220f      	movs	r2, #15
 8018684:	4954      	ldr	r1, [pc, #336]	@ (80187d8 <rmw_init+0x23c>)
 8018686:	4855      	ldr	r0, [pc, #340]	@ (80187dc <rmw_init+0x240>)
 8018688:	f7f9 fa8c 	bl	8011ba4 <rmw_uxrce_init_topic_memory>
 801868c:	2203      	movs	r2, #3
 801868e:	4954      	ldr	r1, [pc, #336]	@ (80187e0 <rmw_init+0x244>)
 8018690:	4854      	ldr	r0, [pc, #336]	@ (80187e4 <rmw_init+0x248>)
 8018692:	f7f9 fac7 	bl	8011c24 <rmw_uxrce_init_init_options_impl_memory>
 8018696:	2204      	movs	r2, #4
 8018698:	4953      	ldr	r1, [pc, #332]	@ (80187e8 <rmw_init+0x24c>)
 801869a:	4854      	ldr	r0, [pc, #336]	@ (80187ec <rmw_init+0x250>)
 801869c:	f7f9 fae2 	bl	8011c64 <rmw_uxrce_init_wait_set_memory>
 80186a0:	4953      	ldr	r1, [pc, #332]	@ (80187f0 <rmw_init+0x254>)
 80186a2:	4854      	ldr	r0, [pc, #336]	@ (80187f4 <rmw_init+0x258>)
 80186a4:	2204      	movs	r2, #4
 80186a6:	f7f9 fafd 	bl	8011ca4 <rmw_uxrce_init_guard_condition_memory>
 80186aa:	4642      	mov	r2, r8
 80186ac:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80186ae:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80186b0:	f000 faf2 	bl	8018c98 <rmw_uxrce_transport_init>
 80186b4:	4607      	mov	r7, r0
 80186b6:	2800      	cmp	r0, #0
 80186b8:	d158      	bne.n	801876c <rmw_init+0x1d0>
 80186ba:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80186bc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80186c0:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80186c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80186c6:	4628      	mov	r0, r5
 80186c8:	f7fa f9d2 	bl	8012a70 <uxr_init_session>
 80186cc:	4622      	mov	r2, r4
 80186ce:	494a      	ldr	r1, [pc, #296]	@ (80187f8 <rmw_init+0x25c>)
 80186d0:	4628      	mov	r0, r5
 80186d2:	f7fa f9f1 	bl	8012ab8 <uxr_set_topic_callback>
 80186d6:	463a      	mov	r2, r7
 80186d8:	4948      	ldr	r1, [pc, #288]	@ (80187fc <rmw_init+0x260>)
 80186da:	4628      	mov	r0, r5
 80186dc:	f7fa f9e8 	bl	8012ab0 <uxr_set_status_callback>
 80186e0:	463a      	mov	r2, r7
 80186e2:	4947      	ldr	r1, [pc, #284]	@ (8018800 <rmw_init+0x264>)
 80186e4:	4628      	mov	r0, r5
 80186e6:	f7fa f9eb 	bl	8012ac0 <uxr_set_request_callback>
 80186ea:	463a      	mov	r2, r7
 80186ec:	4945      	ldr	r1, [pc, #276]	@ (8018804 <rmw_init+0x268>)
 80186ee:	4628      	mov	r0, r5
 80186f0:	f7fa f9ea 	bl	8012ac8 <uxr_set_reply_callback>
 80186f4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80186f8:	2304      	movs	r3, #4
 80186fa:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80186fe:	0092      	lsls	r2, r2, #2
 8018700:	4628      	mov	r0, r5
 8018702:	f7fa fa21 	bl	8012b48 <uxr_create_input_reliable_stream>
 8018706:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801870a:	2304      	movs	r3, #4
 801870c:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8018710:	0092      	lsls	r2, r2, #2
 8018712:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8018716:	4628      	mov	r0, r5
 8018718:	f7fa f9ec 	bl	8012af4 <uxr_create_output_reliable_stream>
 801871c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8018720:	4628      	mov	r0, r5
 8018722:	f7fa fa0b 	bl	8012b3c <uxr_create_input_best_effort_stream>
 8018726:	f241 3194 	movw	r1, #5012	@ 0x1394
 801872a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801872e:	4628      	mov	r0, r5
 8018730:	4421      	add	r1, r4
 8018732:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018736:	f7fa f9cb 	bl	8012ad0 <uxr_create_output_best_effort_stream>
 801873a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801873e:	4628      	mov	r0, r5
 8018740:	f7fa ff54 	bl	80135ec <uxr_create_session>
 8018744:	b1f8      	cbz	r0, 8018786 <rmw_init+0x1ea>
 8018746:	4638      	mov	r0, r7
 8018748:	b003      	add	sp, #12
 801874a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801874e:	270b      	movs	r7, #11
 8018750:	4638      	mov	r0, r7
 8018752:	b003      	add	sp, #12
 8018754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018758:	2701      	movs	r7, #1
 801875a:	4638      	mov	r0, r7
 801875c:	b003      	add	sp, #12
 801875e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018762:	270c      	movs	r7, #12
 8018764:	4638      	mov	r0, r7
 8018766:	b003      	add	sp, #12
 8018768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801876c:	4648      	mov	r0, r9
 801876e:	f000 fe9d 	bl	80194ac <uxr_close_custom_transport>
 8018772:	4621      	mov	r1, r4
 8018774:	480c      	ldr	r0, [pc, #48]	@ (80187a8 <rmw_init+0x20c>)
 8018776:	f7ff fd8b 	bl	8018290 <put_memory>
 801877a:	4638      	mov	r0, r7
 801877c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8018780:	b003      	add	sp, #12
 8018782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018786:	4648      	mov	r0, r9
 8018788:	f000 fe90 	bl	80194ac <uxr_close_custom_transport>
 801878c:	4621      	mov	r1, r4
 801878e:	4806      	ldr	r0, [pc, #24]	@ (80187a8 <rmw_init+0x20c>)
 8018790:	f7ff fd7e 	bl	8018290 <put_memory>
 8018794:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8018796:	2701      	movs	r7, #1
 8018798:	e7d5      	b.n	8018746 <rmw_init+0x1aa>
 801879a:	bf00      	nop
 801879c:	0801d284 	.word	0x0801d284
 80187a0:	20012744 	.word	0x20012744
 80187a4:	2000e9f0 	.word	0x2000e9f0
 80187a8:	20012734 	.word	0x20012734
 80187ac:	2000ff98 	.word	0x2000ff98
 80187b0:	2000e014 	.word	0x2000e014
 80187b4:	20012704 	.word	0x20012704
 80187b8:	20012098 	.word	0x20012098
 80187bc:	20012754 	.word	0x20012754
 80187c0:	2000e0b8 	.word	0x2000e0b8
 80187c4:	20012714 	.word	0x20012714
 80187c8:	2000e928 	.word	0x2000e928
 80187cc:	20012724 	.word	0x20012724
 80187d0:	2000de48 	.word	0x2000de48
 80187d4:	2000de34 	.word	0x2000de34
 80187d8:	200124d0 	.word	0x200124d0
 80187dc:	20012764 	.word	0x20012764
 80187e0:	2000df90 	.word	0x2000df90
 80187e4:	200126f4 	.word	0x200126f4
 80187e8:	20012674 	.word	0x20012674
 80187ec:	20012774 	.word	0x20012774
 80187f0:	2000df10 	.word	0x2000df10
 80187f4:	200126e4 	.word	0x200126e4
 80187f8:	0801ad99 	.word	0x0801ad99
 80187fc:	0801ad91 	.word	0x0801ad91
 8018800:	0801ae31 	.word	0x0801ae31
 8018804:	0801aecd 	.word	0x0801aecd

08018808 <rmw_context_fini>:
 8018808:	4b17      	ldr	r3, [pc, #92]	@ (8018868 <rmw_context_fini+0x60>)
 801880a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801880c:	b570      	push	{r4, r5, r6, lr}
 801880e:	681c      	ldr	r4, [r3, #0]
 8018810:	4605      	mov	r5, r0
 8018812:	b334      	cbz	r4, 8018862 <rmw_context_fini+0x5a>
 8018814:	2600      	movs	r6, #0
 8018816:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801881a:	6902      	ldr	r2, [r0, #16]
 801881c:	428a      	cmp	r2, r1
 801881e:	d018      	beq.n	8018852 <rmw_context_fini+0x4a>
 8018820:	2c00      	cmp	r4, #0
 8018822:	d1f8      	bne.n	8018816 <rmw_context_fini+0xe>
 8018824:	b189      	cbz	r1, 801884a <rmw_context_fini+0x42>
 8018826:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801882a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801882e:	789b      	ldrb	r3, [r3, #2]
 8018830:	2b01      	cmp	r3, #1
 8018832:	bf14      	ite	ne
 8018834:	210a      	movne	r1, #10
 8018836:	2100      	moveq	r1, #0
 8018838:	f7fa feb0 	bl	801359c <uxr_delete_session_retries>
 801883c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801883e:	f7f9 fa51 	bl	8011ce4 <rmw_uxrce_fini_session_memory>
 8018842:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8018844:	3010      	adds	r0, #16
 8018846:	f000 fe31 	bl	80194ac <uxr_close_custom_transport>
 801884a:	2300      	movs	r3, #0
 801884c:	4630      	mov	r0, r6
 801884e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8018850:	bd70      	pop	{r4, r5, r6, pc}
 8018852:	3018      	adds	r0, #24
 8018854:	f7f8 fd02 	bl	801125c <rmw_destroy_node>
 8018858:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801885a:	4606      	mov	r6, r0
 801885c:	2c00      	cmp	r4, #0
 801885e:	d1da      	bne.n	8018816 <rmw_context_fini+0xe>
 8018860:	e7e0      	b.n	8018824 <rmw_context_fini+0x1c>
 8018862:	4626      	mov	r6, r4
 8018864:	e7de      	b.n	8018824 <rmw_context_fini+0x1c>
 8018866:	bf00      	nop
 8018868:	20012704 	.word	0x20012704

0801886c <create_topic>:
 801886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018870:	4605      	mov	r5, r0
 8018872:	b084      	sub	sp, #16
 8018874:	4822      	ldr	r0, [pc, #136]	@ (8018900 <create_topic+0x94>)
 8018876:	460f      	mov	r7, r1
 8018878:	4616      	mov	r6, r2
 801887a:	f7ff fcf9 	bl	8018270 <get_memory>
 801887e:	4604      	mov	r4, r0
 8018880:	2800      	cmp	r0, #0
 8018882:	d039      	beq.n	80188f8 <create_topic+0x8c>
 8018884:	692b      	ldr	r3, [r5, #16]
 8018886:	2102      	movs	r1, #2
 8018888:	6884      	ldr	r4, [r0, #8]
 801888a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801888e:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8018908 <create_topic+0x9c>
 8018892:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8018896:	1c42      	adds	r2, r0, #1
 8018898:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801889c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80188a0:	f7f9 fef6 	bl	8012690 <uxr_object_id>
 80188a4:	223c      	movs	r2, #60	@ 0x3c
 80188a6:	6120      	str	r0, [r4, #16]
 80188a8:	4641      	mov	r1, r8
 80188aa:	4638      	mov	r0, r7
 80188ac:	f7f9 fc00 	bl	80120b0 <generate_topic_name>
 80188b0:	b1f0      	cbz	r0, 80188f0 <create_topic+0x84>
 80188b2:	4f14      	ldr	r7, [pc, #80]	@ (8018904 <create_topic+0x98>)
 80188b4:	4630      	mov	r0, r6
 80188b6:	2264      	movs	r2, #100	@ 0x64
 80188b8:	4639      	mov	r1, r7
 80188ba:	f7f9 fbcb 	bl	8012054 <generate_type_name>
 80188be:	b1b8      	cbz	r0, 80188f0 <create_topic+0x84>
 80188c0:	6928      	ldr	r0, [r5, #16]
 80188c2:	2106      	movs	r1, #6
 80188c4:	696b      	ldr	r3, [r5, #20]
 80188c6:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80188ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80188ce:	f8cd 8000 	str.w	r8, [sp]
 80188d2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 80188d6:	6811      	ldr	r1, [r2, #0]
 80188d8:	6922      	ldr	r2, [r4, #16]
 80188da:	f7f9 fd55 	bl	8012388 <uxr_buffer_create_topic_bin>
 80188de:	4602      	mov	r2, r0
 80188e0:	6928      	ldr	r0, [r5, #16]
 80188e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80188e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80188ea:	f7f9 fb7f 	bl	8011fec <run_xrce_session>
 80188ee:	b918      	cbnz	r0, 80188f8 <create_topic+0x8c>
 80188f0:	4620      	mov	r0, r4
 80188f2:	2400      	movs	r4, #0
 80188f4:	f7f9 fa6c 	bl	8011dd0 <rmw_uxrce_fini_topic_memory>
 80188f8:	4620      	mov	r0, r4
 80188fa:	b004      	add	sp, #16
 80188fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018900:	20012764 	.word	0x20012764
 8018904:	20012868 	.word	0x20012868
 8018908:	2001282c 	.word	0x2001282c

0801890c <destroy_topic>:
 801890c:	b538      	push	{r3, r4, r5, lr}
 801890e:	6985      	ldr	r5, [r0, #24]
 8018910:	b1dd      	cbz	r5, 801894a <destroy_topic+0x3e>
 8018912:	4604      	mov	r4, r0
 8018914:	6928      	ldr	r0, [r5, #16]
 8018916:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801891a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801891e:	6922      	ldr	r2, [r4, #16]
 8018920:	6819      	ldr	r1, [r3, #0]
 8018922:	f7f9 fcb3 	bl	801228c <uxr_buffer_delete_entity>
 8018926:	4602      	mov	r2, r0
 8018928:	6928      	ldr	r0, [r5, #16]
 801892a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801892e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018932:	f7f9 fb5b 	bl	8011fec <run_xrce_session>
 8018936:	4603      	mov	r3, r0
 8018938:	4620      	mov	r0, r4
 801893a:	2b00      	cmp	r3, #0
 801893c:	bf14      	ite	ne
 801893e:	2400      	movne	r4, #0
 8018940:	2402      	moveq	r4, #2
 8018942:	f7f9 fa45 	bl	8011dd0 <rmw_uxrce_fini_topic_memory>
 8018946:	4620      	mov	r0, r4
 8018948:	bd38      	pop	{r3, r4, r5, pc}
 801894a:	2401      	movs	r4, #1
 801894c:	4620      	mov	r0, r4
 801894e:	bd38      	pop	{r3, r4, r5, pc}

08018950 <rmw_send_request>:
 8018950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018954:	4604      	mov	r4, r0
 8018956:	6800      	ldr	r0, [r0, #0]
 8018958:	b08b      	sub	sp, #44	@ 0x2c
 801895a:	460e      	mov	r6, r1
 801895c:	4615      	mov	r5, r2
 801895e:	b128      	cbz	r0, 801896c <rmw_send_request+0x1c>
 8018960:	4b21      	ldr	r3, [pc, #132]	@ (80189e8 <rmw_send_request+0x98>)
 8018962:	6819      	ldr	r1, [r3, #0]
 8018964:	f7e7 fc6c 	bl	8000240 <strcmp>
 8018968:	2800      	cmp	r0, #0
 801896a:	d139      	bne.n	80189e0 <rmw_send_request+0x90>
 801896c:	6864      	ldr	r4, [r4, #4]
 801896e:	2700      	movs	r7, #0
 8018970:	6963      	ldr	r3, [r4, #20]
 8018972:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8018976:	689b      	ldr	r3, [r3, #8]
 8018978:	4798      	blx	r3
 801897a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801897e:	4630      	mov	r0, r6
 8018980:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018984:	4798      	blx	r3
 8018986:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801898a:	9000      	str	r0, [sp, #0]
 801898c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8018990:	6922      	ldr	r2, [r4, #16]
 8018992:	ab02      	add	r3, sp, #8
 8018994:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8018996:	f7fb fab5 	bl	8013f04 <uxr_prepare_output_stream>
 801899a:	e9c5 0700 	strd	r0, r7, [r5]
 801899e:	b198      	cbz	r0, 80189c8 <rmw_send_request+0x78>
 80189a0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80189a4:	a902      	add	r1, sp, #8
 80189a6:	4630      	mov	r0, r6
 80189a8:	4798      	blx	r3
 80189aa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80189ae:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80189b2:	2b01      	cmp	r3, #1
 80189b4:	d00c      	beq.n	80189d0 <rmw_send_request+0x80>
 80189b6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80189b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80189bc:	f7fa fca4 	bl	8013308 <uxr_run_session_until_confirm_delivery>
 80189c0:	4638      	mov	r0, r7
 80189c2:	b00b      	add	sp, #44	@ 0x2c
 80189c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189c8:	2001      	movs	r0, #1
 80189ca:	b00b      	add	sp, #44	@ 0x2c
 80189cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80189d4:	f7fa f8de 	bl	8012b94 <uxr_flash_output_streams>
 80189d8:	4638      	mov	r0, r7
 80189da:	b00b      	add	sp, #44	@ 0x2c
 80189dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189e0:	200c      	movs	r0, #12
 80189e2:	b00b      	add	sp, #44	@ 0x2c
 80189e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189e8:	0801d284 	.word	0x0801d284

080189ec <rmw_take_request>:
 80189ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189f0:	4605      	mov	r5, r0
 80189f2:	6800      	ldr	r0, [r0, #0]
 80189f4:	b089      	sub	sp, #36	@ 0x24
 80189f6:	460c      	mov	r4, r1
 80189f8:	4690      	mov	r8, r2
 80189fa:	461e      	mov	r6, r3
 80189fc:	b128      	cbz	r0, 8018a0a <rmw_take_request+0x1e>
 80189fe:	4b28      	ldr	r3, [pc, #160]	@ (8018aa0 <rmw_take_request+0xb4>)
 8018a00:	6819      	ldr	r1, [r3, #0]
 8018a02:	f7e7 fc1d 	bl	8000240 <strcmp>
 8018a06:	2800      	cmp	r0, #0
 8018a08:	d146      	bne.n	8018a98 <rmw_take_request+0xac>
 8018a0a:	b10e      	cbz	r6, 8018a10 <rmw_take_request+0x24>
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	7033      	strb	r3, [r6, #0]
 8018a10:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018a14:	f7f9 fa6c 	bl	8011ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018a18:	4648      	mov	r0, r9
 8018a1a:	f7f9 fa3f 	bl	8011e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018a1e:	4607      	mov	r7, r0
 8018a20:	b3b0      	cbz	r0, 8018a90 <rmw_take_request+0xa4>
 8018a22:	6885      	ldr	r5, [r0, #8]
 8018a24:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8018a28:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8018a2c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8018a30:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8018a34:	7423      	strb	r3, [r4, #16]
 8018a36:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8018a3a:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8018a3e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8018a42:	74e3      	strb	r3, [r4, #19]
 8018a44:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8018a48:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8018a4c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8018a50:	6161      	str	r1, [r4, #20]
 8018a52:	61a2      	str	r2, [r4, #24]
 8018a54:	61e3      	str	r3, [r4, #28]
 8018a56:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018a5a:	689b      	ldr	r3, [r3, #8]
 8018a5c:	4798      	blx	r3
 8018a5e:	6844      	ldr	r4, [r0, #4]
 8018a60:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8018a64:	f105 0110 	add.w	r1, r5, #16
 8018a68:	4668      	mov	r0, sp
 8018a6a:	f7f6 fdb5 	bl	800f5d8 <ucdr_init_buffer>
 8018a6e:	4641      	mov	r1, r8
 8018a70:	68e3      	ldr	r3, [r4, #12]
 8018a72:	4668      	mov	r0, sp
 8018a74:	4798      	blx	r3
 8018a76:	4639      	mov	r1, r7
 8018a78:	4604      	mov	r4, r0
 8018a7a:	480a      	ldr	r0, [pc, #40]	@ (8018aa4 <rmw_take_request+0xb8>)
 8018a7c:	f7ff fc08 	bl	8018290 <put_memory>
 8018a80:	b106      	cbz	r6, 8018a84 <rmw_take_request+0x98>
 8018a82:	7034      	strb	r4, [r6, #0]
 8018a84:	f084 0001 	eor.w	r0, r4, #1
 8018a88:	b2c0      	uxtb	r0, r0
 8018a8a:	b009      	add	sp, #36	@ 0x24
 8018a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a90:	2001      	movs	r0, #1
 8018a92:	b009      	add	sp, #36	@ 0x24
 8018a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a98:	200c      	movs	r0, #12
 8018a9a:	b009      	add	sp, #36	@ 0x24
 8018a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018aa0:	0801d284 	.word	0x0801d284
 8018aa4:	20012744 	.word	0x20012744

08018aa8 <rmw_send_response>:
 8018aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018aaa:	4605      	mov	r5, r0
 8018aac:	6800      	ldr	r0, [r0, #0]
 8018aae:	b091      	sub	sp, #68	@ 0x44
 8018ab0:	460c      	mov	r4, r1
 8018ab2:	4616      	mov	r6, r2
 8018ab4:	b128      	cbz	r0, 8018ac2 <rmw_send_response+0x1a>
 8018ab6:	4b29      	ldr	r3, [pc, #164]	@ (8018b5c <rmw_send_response+0xb4>)
 8018ab8:	6819      	ldr	r1, [r3, #0]
 8018aba:	f7e7 fbc1 	bl	8000240 <strcmp>
 8018abe:	2800      	cmp	r0, #0
 8018ac0:	d141      	bne.n	8018b46 <rmw_send_response+0x9e>
 8018ac2:	686d      	ldr	r5, [r5, #4]
 8018ac4:	68a1      	ldr	r1, [r4, #8]
 8018ac6:	6860      	ldr	r0, [r4, #4]
 8018ac8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8018aca:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8018ace:	9307      	str	r3, [sp, #28]
 8018ad0:	4623      	mov	r3, r4
 8018ad2:	9206      	str	r2, [sp, #24]
 8018ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ad8:	789b      	ldrb	r3, [r3, #2]
 8018ada:	f88d 2017 	strb.w	r2, [sp, #23]
 8018ade:	f88d 3016 	strb.w	r3, [sp, #22]
 8018ae2:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018ae6:	68e2      	ldr	r2, [r4, #12]
 8018ae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018aec:	ab02      	add	r3, sp, #8
 8018aee:	696c      	ldr	r4, [r5, #20]
 8018af0:	c307      	stmia	r3!, {r0, r1, r2}
 8018af2:	68e3      	ldr	r3, [r4, #12]
 8018af4:	4798      	blx	r3
 8018af6:	6844      	ldr	r4, [r0, #4]
 8018af8:	4630      	mov	r0, r6
 8018afa:	6923      	ldr	r3, [r4, #16]
 8018afc:	4798      	blx	r3
 8018afe:	f100 0318 	add.w	r3, r0, #24
 8018b02:	6938      	ldr	r0, [r7, #16]
 8018b04:	9300      	str	r3, [sp, #0]
 8018b06:	ab08      	add	r3, sp, #32
 8018b08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b0c:	692a      	ldr	r2, [r5, #16]
 8018b0e:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8018b10:	f7fb f9f8 	bl	8013f04 <uxr_prepare_output_stream>
 8018b14:	b910      	cbnz	r0, 8018b1c <rmw_send_response+0x74>
 8018b16:	2001      	movs	r0, #1
 8018b18:	b011      	add	sp, #68	@ 0x44
 8018b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b1c:	a902      	add	r1, sp, #8
 8018b1e:	a808      	add	r0, sp, #32
 8018b20:	f7fc fb28 	bl	8015174 <uxr_serialize_SampleIdentity>
 8018b24:	68a3      	ldr	r3, [r4, #8]
 8018b26:	a908      	add	r1, sp, #32
 8018b28:	4630      	mov	r0, r6
 8018b2a:	4798      	blx	r3
 8018b2c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8018b30:	6938      	ldr	r0, [r7, #16]
 8018b32:	2b01      	cmp	r3, #1
 8018b34:	d00a      	beq.n	8018b4c <rmw_send_response+0xa4>
 8018b36:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8018b38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b3c:	f7fa fbe4 	bl	8013308 <uxr_run_session_until_confirm_delivery>
 8018b40:	2000      	movs	r0, #0
 8018b42:	b011      	add	sp, #68	@ 0x44
 8018b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b46:	200c      	movs	r0, #12
 8018b48:	b011      	add	sp, #68	@ 0x44
 8018b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b50:	f7fa f820 	bl	8012b94 <uxr_flash_output_streams>
 8018b54:	2000      	movs	r0, #0
 8018b56:	b011      	add	sp, #68	@ 0x44
 8018b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b5a:	bf00      	nop
 8018b5c:	0801d284 	.word	0x0801d284

08018b60 <rmw_take_response>:
 8018b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b64:	4604      	mov	r4, r0
 8018b66:	6800      	ldr	r0, [r0, #0]
 8018b68:	b088      	sub	sp, #32
 8018b6a:	460f      	mov	r7, r1
 8018b6c:	4690      	mov	r8, r2
 8018b6e:	461d      	mov	r5, r3
 8018b70:	b120      	cbz	r0, 8018b7c <rmw_take_response+0x1c>
 8018b72:	4b1d      	ldr	r3, [pc, #116]	@ (8018be8 <rmw_take_response+0x88>)
 8018b74:	6819      	ldr	r1, [r3, #0]
 8018b76:	f7e7 fb63 	bl	8000240 <strcmp>
 8018b7a:	bb68      	cbnz	r0, 8018bd8 <rmw_take_response+0x78>
 8018b7c:	b10d      	cbz	r5, 8018b82 <rmw_take_response+0x22>
 8018b7e:	2300      	movs	r3, #0
 8018b80:	702b      	strb	r3, [r5, #0]
 8018b82:	6864      	ldr	r4, [r4, #4]
 8018b84:	f7f9 f9b4 	bl	8011ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018b88:	4620      	mov	r0, r4
 8018b8a:	f7f9 f987 	bl	8011e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018b8e:	4606      	mov	r6, r0
 8018b90:	b330      	cbz	r0, 8018be0 <rmw_take_response+0x80>
 8018b92:	6963      	ldr	r3, [r4, #20]
 8018b94:	6884      	ldr	r4, [r0, #8]
 8018b96:	68db      	ldr	r3, [r3, #12]
 8018b98:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8018b9c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018ba0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8018ba4:	4798      	blx	r3
 8018ba6:	6847      	ldr	r7, [r0, #4]
 8018ba8:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8018bac:	f104 0110 	add.w	r1, r4, #16
 8018bb0:	4668      	mov	r0, sp
 8018bb2:	f7f6 fd11 	bl	800f5d8 <ucdr_init_buffer>
 8018bb6:	4641      	mov	r1, r8
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	4668      	mov	r0, sp
 8018bbc:	4798      	blx	r3
 8018bbe:	4631      	mov	r1, r6
 8018bc0:	4604      	mov	r4, r0
 8018bc2:	480a      	ldr	r0, [pc, #40]	@ (8018bec <rmw_take_response+0x8c>)
 8018bc4:	f7ff fb64 	bl	8018290 <put_memory>
 8018bc8:	b105      	cbz	r5, 8018bcc <rmw_take_response+0x6c>
 8018bca:	702c      	strb	r4, [r5, #0]
 8018bcc:	f084 0001 	eor.w	r0, r4, #1
 8018bd0:	b2c0      	uxtb	r0, r0
 8018bd2:	b008      	add	sp, #32
 8018bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bd8:	200c      	movs	r0, #12
 8018bda:	b008      	add	sp, #32
 8018bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018be0:	2001      	movs	r0, #1
 8018be2:	b008      	add	sp, #32
 8018be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018be8:	0801d284 	.word	0x0801d284
 8018bec:	20012744 	.word	0x20012744

08018bf0 <rmw_take_with_info>:
 8018bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bf2:	4604      	mov	r4, r0
 8018bf4:	6800      	ldr	r0, [r0, #0]
 8018bf6:	b089      	sub	sp, #36	@ 0x24
 8018bf8:	460f      	mov	r7, r1
 8018bfa:	4615      	mov	r5, r2
 8018bfc:	b128      	cbz	r0, 8018c0a <rmw_take_with_info+0x1a>
 8018bfe:	4b24      	ldr	r3, [pc, #144]	@ (8018c90 <rmw_take_with_info+0xa0>)
 8018c00:	6819      	ldr	r1, [r3, #0]
 8018c02:	f7e7 fb1d 	bl	8000240 <strcmp>
 8018c06:	2800      	cmp	r0, #0
 8018c08:	d13e      	bne.n	8018c88 <rmw_take_with_info+0x98>
 8018c0a:	b305      	cbz	r5, 8018c4e <rmw_take_with_info+0x5e>
 8018c0c:	2300      	movs	r3, #0
 8018c0e:	6864      	ldr	r4, [r4, #4]
 8018c10:	702b      	strb	r3, [r5, #0]
 8018c12:	f7f9 f96d 	bl	8011ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018c16:	4620      	mov	r0, r4
 8018c18:	f7f9 f940 	bl	8011e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018c1c:	4606      	mov	r6, r0
 8018c1e:	b1f0      	cbz	r0, 8018c5e <rmw_take_with_info+0x6e>
 8018c20:	6881      	ldr	r1, [r0, #8]
 8018c22:	4668      	mov	r0, sp
 8018c24:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018c28:	3110      	adds	r1, #16
 8018c2a:	f7f6 fcd5 	bl	800f5d8 <ucdr_init_buffer>
 8018c2e:	69a3      	ldr	r3, [r4, #24]
 8018c30:	4639      	mov	r1, r7
 8018c32:	4668      	mov	r0, sp
 8018c34:	68db      	ldr	r3, [r3, #12]
 8018c36:	4798      	blx	r3
 8018c38:	4604      	mov	r4, r0
 8018c3a:	4631      	mov	r1, r6
 8018c3c:	4815      	ldr	r0, [pc, #84]	@ (8018c94 <rmw_take_with_info+0xa4>)
 8018c3e:	f7ff fb27 	bl	8018290 <put_memory>
 8018c42:	702c      	strb	r4, [r5, #0]
 8018c44:	f084 0001 	eor.w	r0, r4, #1
 8018c48:	b2c0      	uxtb	r0, r0
 8018c4a:	b009      	add	sp, #36	@ 0x24
 8018c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c4e:	6864      	ldr	r4, [r4, #4]
 8018c50:	f7f9 f94e 	bl	8011ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018c54:	4620      	mov	r0, r4
 8018c56:	f7f9 f921 	bl	8011e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018c5a:	4605      	mov	r5, r0
 8018c5c:	b910      	cbnz	r0, 8018c64 <rmw_take_with_info+0x74>
 8018c5e:	2001      	movs	r0, #1
 8018c60:	b009      	add	sp, #36	@ 0x24
 8018c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c64:	68a9      	ldr	r1, [r5, #8]
 8018c66:	4668      	mov	r0, sp
 8018c68:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018c6c:	3110      	adds	r1, #16
 8018c6e:	f7f6 fcb3 	bl	800f5d8 <ucdr_init_buffer>
 8018c72:	69a3      	ldr	r3, [r4, #24]
 8018c74:	4639      	mov	r1, r7
 8018c76:	4668      	mov	r0, sp
 8018c78:	68db      	ldr	r3, [r3, #12]
 8018c7a:	4798      	blx	r3
 8018c7c:	4629      	mov	r1, r5
 8018c7e:	4604      	mov	r4, r0
 8018c80:	4804      	ldr	r0, [pc, #16]	@ (8018c94 <rmw_take_with_info+0xa4>)
 8018c82:	f7ff fb05 	bl	8018290 <put_memory>
 8018c86:	e7dd      	b.n	8018c44 <rmw_take_with_info+0x54>
 8018c88:	200c      	movs	r0, #12
 8018c8a:	b009      	add	sp, #36	@ 0x24
 8018c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c8e:	bf00      	nop
 8018c90:	0801d284 	.word	0x0801d284
 8018c94:	20012744 	.word	0x20012744

08018c98 <rmw_uxrce_transport_init>:
 8018c98:	b508      	push	{r3, lr}
 8018c9a:	b108      	cbz	r0, 8018ca0 <rmw_uxrce_transport_init+0x8>
 8018c9c:	f100 0210 	add.w	r2, r0, #16
 8018ca0:	b139      	cbz	r1, 8018cb2 <rmw_uxrce_transport_init+0x1a>
 8018ca2:	6949      	ldr	r1, [r1, #20]
 8018ca4:	4610      	mov	r0, r2
 8018ca6:	f000 fbcd 	bl	8019444 <uxr_init_custom_transport>
 8018caa:	f080 0001 	eor.w	r0, r0, #1
 8018cae:	b2c0      	uxtb	r0, r0
 8018cb0:	bd08      	pop	{r3, pc}
 8018cb2:	4b04      	ldr	r3, [pc, #16]	@ (8018cc4 <rmw_uxrce_transport_init+0x2c>)
 8018cb4:	4610      	mov	r0, r2
 8018cb6:	6859      	ldr	r1, [r3, #4]
 8018cb8:	f000 fbc4 	bl	8019444 <uxr_init_custom_transport>
 8018cbc:	f080 0001 	eor.w	r0, r0, #1
 8018cc0:	b2c0      	uxtb	r0, r0
 8018cc2:	bd08      	pop	{r3, pc}
 8018cc4:	2000dddc 	.word	0x2000dddc

08018cc8 <rmw_wait>:
 8018cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ccc:	4698      	mov	r8, r3
 8018cce:	ea40 0301 	orr.w	r3, r0, r1
 8018cd2:	b089      	sub	sp, #36	@ 0x24
 8018cd4:	ea48 0303 	orr.w	r3, r8, r3
 8018cd8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018cda:	4313      	orrs	r3, r2
 8018cdc:	f000 8106 	beq.w	8018eec <rmw_wait+0x224>
 8018ce0:	4605      	mov	r5, r0
 8018ce2:	460e      	mov	r6, r1
 8018ce4:	4691      	mov	r9, r2
 8018ce6:	b16c      	cbz	r4, 8018d04 <rmw_wait+0x3c>
 8018ce8:	4ba6      	ldr	r3, [pc, #664]	@ (8018f84 <rmw_wait+0x2bc>)
 8018cea:	af04      	add	r7, sp, #16
 8018cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018cee:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018cf2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8018cf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018cfa:	f7ff f9ad 	bl	8018058 <rmw_time_equal>
 8018cfe:	2800      	cmp	r0, #0
 8018d00:	f000 810b 	beq.w	8018f1a <rmw_wait+0x252>
 8018d04:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018d08:	f7f9 f8f2 	bl	8011ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 8018d0c:	4b9e      	ldr	r3, [pc, #632]	@ (8018f88 <rmw_wait+0x2c0>)
 8018d0e:	681c      	ldr	r4, [r3, #0]
 8018d10:	b14c      	cbz	r4, 8018d26 <rmw_wait+0x5e>
 8018d12:	4623      	mov	r3, r4
 8018d14:	2100      	movs	r1, #0
 8018d16:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8018d1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018d1e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d1f7      	bne.n	8018d16 <rmw_wait+0x4e>
 8018d26:	f1b9 0f00 	cmp.w	r9, #0
 8018d2a:	d011      	beq.n	8018d50 <rmw_wait+0x88>
 8018d2c:	f8d9 1000 	ldr.w	r1, [r9]
 8018d30:	b171      	cbz	r1, 8018d50 <rmw_wait+0x88>
 8018d32:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8018d36:	2300      	movs	r3, #0
 8018d38:	2001      	movs	r0, #1
 8018d3a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018d3e:	3301      	adds	r3, #1
 8018d40:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018d42:	4299      	cmp	r1, r3
 8018d44:	6912      	ldr	r2, [r2, #16]
 8018d46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018d4a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018d4e:	d1f4      	bne.n	8018d3a <rmw_wait+0x72>
 8018d50:	f1b8 0f00 	cmp.w	r8, #0
 8018d54:	d011      	beq.n	8018d7a <rmw_wait+0xb2>
 8018d56:	f8d8 1000 	ldr.w	r1, [r8]
 8018d5a:	b171      	cbz	r1, 8018d7a <rmw_wait+0xb2>
 8018d5c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8018d60:	2300      	movs	r3, #0
 8018d62:	2001      	movs	r0, #1
 8018d64:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018d68:	3301      	adds	r3, #1
 8018d6a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018d6c:	4299      	cmp	r1, r3
 8018d6e:	6912      	ldr	r2, [r2, #16]
 8018d70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018d74:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018d78:	d1f4      	bne.n	8018d64 <rmw_wait+0x9c>
 8018d7a:	b185      	cbz	r5, 8018d9e <rmw_wait+0xd6>
 8018d7c:	6829      	ldr	r1, [r5, #0]
 8018d7e:	b171      	cbz	r1, 8018d9e <rmw_wait+0xd6>
 8018d80:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8018d84:	2300      	movs	r3, #0
 8018d86:	2001      	movs	r0, #1
 8018d88:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018d8c:	3301      	adds	r3, #1
 8018d8e:	6a12      	ldr	r2, [r2, #32]
 8018d90:	4299      	cmp	r1, r3
 8018d92:	6912      	ldr	r2, [r2, #16]
 8018d94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018d98:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018d9c:	d1f4      	bne.n	8018d88 <rmw_wait+0xc0>
 8018d9e:	b344      	cbz	r4, 8018df2 <rmw_wait+0x12a>
 8018da0:	4622      	mov	r2, r4
 8018da2:	2300      	movs	r3, #0
 8018da4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8018da8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8018dac:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8018db0:	440b      	add	r3, r1
 8018db2:	b2db      	uxtb	r3, r3
 8018db4:	2a00      	cmp	r2, #0
 8018db6:	d1f5      	bne.n	8018da4 <rmw_wait+0xdc>
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d05f      	beq.n	8018e7c <rmw_wait+0x1b4>
 8018dbc:	1c7a      	adds	r2, r7, #1
 8018dbe:	d00d      	beq.n	8018ddc <rmw_wait+0x114>
 8018dc0:	ee07 7a90 	vmov	s15, r7
 8018dc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018dc8:	ee07 3a90 	vmov	s15, r3
 8018dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018dd4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8018dd8:	ee17 7a90 	vmov	r7, s15
 8018ddc:	68a0      	ldr	r0, [r4, #8]
 8018dde:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8018de2:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	f040 808d 	bne.w	8018f06 <rmw_wait+0x23e>
 8018dec:	6864      	ldr	r4, [r4, #4]
 8018dee:	2c00      	cmp	r4, #0
 8018df0:	d1f4      	bne.n	8018ddc <rmw_wait+0x114>
 8018df2:	f1b9 0f00 	cmp.w	r9, #0
 8018df6:	f000 80a1 	beq.w	8018f3c <rmw_wait+0x274>
 8018dfa:	f8d9 7000 	ldr.w	r7, [r9]
 8018dfe:	2f00      	cmp	r7, #0
 8018e00:	f000 80a4 	beq.w	8018f4c <rmw_wait+0x284>
 8018e04:	2400      	movs	r4, #0
 8018e06:	4627      	mov	r7, r4
 8018e08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018e0c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018e10:	f7f9 f844 	bl	8011e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018e14:	2800      	cmp	r0, #0
 8018e16:	d03b      	beq.n	8018e90 <rmw_wait+0x1c8>
 8018e18:	3401      	adds	r4, #1
 8018e1a:	f8d9 3000 	ldr.w	r3, [r9]
 8018e1e:	2701      	movs	r7, #1
 8018e20:	42a3      	cmp	r3, r4
 8018e22:	d8f1      	bhi.n	8018e08 <rmw_wait+0x140>
 8018e24:	2701      	movs	r7, #1
 8018e26:	f1b8 0f00 	cmp.w	r8, #0
 8018e2a:	d010      	beq.n	8018e4e <rmw_wait+0x186>
 8018e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8018e30:	b16b      	cbz	r3, 8018e4e <rmw_wait+0x186>
 8018e32:	2400      	movs	r4, #0
 8018e34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018e38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018e3c:	f7f9 f82e 	bl	8011e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018e40:	b370      	cbz	r0, 8018ea0 <rmw_wait+0x1d8>
 8018e42:	3401      	adds	r4, #1
 8018e44:	f8d8 3000 	ldr.w	r3, [r8]
 8018e48:	2701      	movs	r7, #1
 8018e4a:	42a3      	cmp	r3, r4
 8018e4c:	d8f2      	bhi.n	8018e34 <rmw_wait+0x16c>
 8018e4e:	2d00      	cmp	r5, #0
 8018e50:	d035      	beq.n	8018ebe <rmw_wait+0x1f6>
 8018e52:	682b      	ldr	r3, [r5, #0]
 8018e54:	b39b      	cbz	r3, 8018ebe <rmw_wait+0x1f6>
 8018e56:	2400      	movs	r4, #0
 8018e58:	686b      	ldr	r3, [r5, #4]
 8018e5a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018e5e:	f7f9 f81d 	bl	8011e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018e62:	b328      	cbz	r0, 8018eb0 <rmw_wait+0x1e8>
 8018e64:	3401      	adds	r4, #1
 8018e66:	682b      	ldr	r3, [r5, #0]
 8018e68:	2701      	movs	r7, #1
 8018e6a:	42a3      	cmp	r3, r4
 8018e6c:	d8f4      	bhi.n	8018e58 <rmw_wait+0x190>
 8018e6e:	2e00      	cmp	r6, #0
 8018e70:	d03c      	beq.n	8018eec <rmw_wait+0x224>
 8018e72:	6834      	ldr	r4, [r6, #0]
 8018e74:	2c00      	cmp	r4, #0
 8018e76:	d039      	beq.n	8018eec <rmw_wait+0x224>
 8018e78:	2701      	movs	r7, #1
 8018e7a:	e023      	b.n	8018ec4 <rmw_wait+0x1fc>
 8018e7c:	68a0      	ldr	r0, [r4, #8]
 8018e7e:	2100      	movs	r1, #0
 8018e80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e84:	f7fa fa06 	bl	8013294 <uxr_run_session_timeout>
 8018e88:	6864      	ldr	r4, [r4, #4]
 8018e8a:	2c00      	cmp	r4, #0
 8018e8c:	d1f6      	bne.n	8018e7c <rmw_wait+0x1b4>
 8018e8e:	e7b0      	b.n	8018df2 <rmw_wait+0x12a>
 8018e90:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018e94:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e98:	3401      	adds	r4, #1
 8018e9a:	42a3      	cmp	r3, r4
 8018e9c:	d8b4      	bhi.n	8018e08 <rmw_wait+0x140>
 8018e9e:	e7c2      	b.n	8018e26 <rmw_wait+0x15e>
 8018ea0:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018ea4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018ea8:	3401      	adds	r4, #1
 8018eaa:	429c      	cmp	r4, r3
 8018eac:	d3c2      	bcc.n	8018e34 <rmw_wait+0x16c>
 8018eae:	e7ce      	b.n	8018e4e <rmw_wait+0x186>
 8018eb0:	e9d5 3200 	ldrd	r3, r2, [r5]
 8018eb4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018eb8:	3401      	adds	r4, #1
 8018eba:	42a3      	cmp	r3, r4
 8018ebc:	d8cc      	bhi.n	8018e58 <rmw_wait+0x190>
 8018ebe:	b1a6      	cbz	r6, 8018eea <rmw_wait+0x222>
 8018ec0:	6834      	ldr	r4, [r6, #0]
 8018ec2:	b194      	cbz	r4, 8018eea <rmw_wait+0x222>
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	461d      	mov	r5, r3
 8018ec8:	e004      	b.n	8018ed4 <rmw_wait+0x20c>
 8018eca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8018ece:	3301      	adds	r3, #1
 8018ed0:	42a3      	cmp	r3, r4
 8018ed2:	d00a      	beq.n	8018eea <rmw_wait+0x222>
 8018ed4:	6870      	ldr	r0, [r6, #4]
 8018ed6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8018eda:	7c0a      	ldrb	r2, [r1, #16]
 8018edc:	2a00      	cmp	r2, #0
 8018ede:	d0f4      	beq.n	8018eca <rmw_wait+0x202>
 8018ee0:	3301      	adds	r3, #1
 8018ee2:	4617      	mov	r7, r2
 8018ee4:	740d      	strb	r5, [r1, #16]
 8018ee6:	42a3      	cmp	r3, r4
 8018ee8:	d1f4      	bne.n	8018ed4 <rmw_wait+0x20c>
 8018eea:	b147      	cbz	r7, 8018efe <rmw_wait+0x236>
 8018eec:	2000      	movs	r0, #0
 8018eee:	b009      	add	sp, #36	@ 0x24
 8018ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ef4:	b11e      	cbz	r6, 8018efe <rmw_wait+0x236>
 8018ef6:	6834      	ldr	r4, [r6, #0]
 8018ef8:	462f      	mov	r7, r5
 8018efa:	2c00      	cmp	r4, #0
 8018efc:	d1e2      	bne.n	8018ec4 <rmw_wait+0x1fc>
 8018efe:	2002      	movs	r0, #2
 8018f00:	b009      	add	sp, #36	@ 0x24
 8018f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f06:	4639      	mov	r1, r7
 8018f08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f0c:	f7fa f9dc 	bl	80132c8 <uxr_run_session_until_data>
 8018f10:	6864      	ldr	r4, [r4, #4]
 8018f12:	2c00      	cmp	r4, #0
 8018f14:	f47f af62 	bne.w	8018ddc <rmw_wait+0x114>
 8018f18:	e76b      	b.n	8018df2 <rmw_wait+0x12a>
 8018f1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018f1e:	f7ff f8f1 	bl	8018104 <rmw_time_total_nsec>
 8018f22:	2300      	movs	r3, #0
 8018f24:	4a19      	ldr	r2, [pc, #100]	@ (8018f8c <rmw_wait+0x2c4>)
 8018f26:	f7e7 fa43 	bl	80003b0 <__aeabi_uldivmod>
 8018f2a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8018f2e:	4607      	mov	r7, r0
 8018f30:	f171 0300 	sbcs.w	r3, r1, #0
 8018f34:	bfa8      	it	ge
 8018f36:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8018f3a:	e6e5      	b.n	8018d08 <rmw_wait+0x40>
 8018f3c:	f1b8 0f00 	cmp.w	r8, #0
 8018f40:	d00f      	beq.n	8018f62 <rmw_wait+0x29a>
 8018f42:	f8d8 3000 	ldr.w	r3, [r8]
 8018f46:	b193      	cbz	r3, 8018f6e <rmw_wait+0x2a6>
 8018f48:	464f      	mov	r7, r9
 8018f4a:	e772      	b.n	8018e32 <rmw_wait+0x16a>
 8018f4c:	f1b8 0f00 	cmp.w	r8, #0
 8018f50:	d007      	beq.n	8018f62 <rmw_wait+0x29a>
 8018f52:	f8d8 3000 	ldr.w	r3, [r8]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	f47f af6b 	bne.w	8018e32 <rmw_wait+0x16a>
 8018f5c:	b155      	cbz	r5, 8018f74 <rmw_wait+0x2ac>
 8018f5e:	461f      	mov	r7, r3
 8018f60:	e777      	b.n	8018e52 <rmw_wait+0x18a>
 8018f62:	2d00      	cmp	r5, #0
 8018f64:	d0c6      	beq.n	8018ef4 <rmw_wait+0x22c>
 8018f66:	682b      	ldr	r3, [r5, #0]
 8018f68:	b143      	cbz	r3, 8018f7c <rmw_wait+0x2b4>
 8018f6a:	4647      	mov	r7, r8
 8018f6c:	e773      	b.n	8018e56 <rmw_wait+0x18e>
 8018f6e:	b10d      	cbz	r5, 8018f74 <rmw_wait+0x2ac>
 8018f70:	464f      	mov	r7, r9
 8018f72:	e76e      	b.n	8018e52 <rmw_wait+0x18a>
 8018f74:	462f      	mov	r7, r5
 8018f76:	2e00      	cmp	r6, #0
 8018f78:	d1a2      	bne.n	8018ec0 <rmw_wait+0x1f8>
 8018f7a:	e7c0      	b.n	8018efe <rmw_wait+0x236>
 8018f7c:	4647      	mov	r7, r8
 8018f7e:	2e00      	cmp	r6, #0
 8018f80:	d19e      	bne.n	8018ec0 <rmw_wait+0x1f8>
 8018f82:	e7bc      	b.n	8018efe <rmw_wait+0x236>
 8018f84:	0801c7a8 	.word	0x0801c7a8
 8018f88:	20012734 	.word	0x20012734
 8018f8c:	000f4240 	.word	0x000f4240

08018f90 <rmw_create_wait_set>:
 8018f90:	b508      	push	{r3, lr}
 8018f92:	4803      	ldr	r0, [pc, #12]	@ (8018fa0 <rmw_create_wait_set+0x10>)
 8018f94:	f7ff f96c 	bl	8018270 <get_memory>
 8018f98:	b108      	cbz	r0, 8018f9e <rmw_create_wait_set+0xe>
 8018f9a:	6880      	ldr	r0, [r0, #8]
 8018f9c:	3010      	adds	r0, #16
 8018f9e:	bd08      	pop	{r3, pc}
 8018fa0:	20012774 	.word	0x20012774

08018fa4 <rmw_destroy_wait_set>:
 8018fa4:	b508      	push	{r3, lr}
 8018fa6:	4b08      	ldr	r3, [pc, #32]	@ (8018fc8 <rmw_destroy_wait_set+0x24>)
 8018fa8:	6819      	ldr	r1, [r3, #0]
 8018faa:	b911      	cbnz	r1, 8018fb2 <rmw_destroy_wait_set+0xe>
 8018fac:	e00a      	b.n	8018fc4 <rmw_destroy_wait_set+0x20>
 8018fae:	6849      	ldr	r1, [r1, #4]
 8018fb0:	b141      	cbz	r1, 8018fc4 <rmw_destroy_wait_set+0x20>
 8018fb2:	688b      	ldr	r3, [r1, #8]
 8018fb4:	3310      	adds	r3, #16
 8018fb6:	4298      	cmp	r0, r3
 8018fb8:	d1f9      	bne.n	8018fae <rmw_destroy_wait_set+0xa>
 8018fba:	4803      	ldr	r0, [pc, #12]	@ (8018fc8 <rmw_destroy_wait_set+0x24>)
 8018fbc:	f7ff f968 	bl	8018290 <put_memory>
 8018fc0:	2000      	movs	r0, #0
 8018fc2:	bd08      	pop	{r3, pc}
 8018fc4:	2001      	movs	r0, #1
 8018fc6:	bd08      	pop	{r3, pc}
 8018fc8:	20012774 	.word	0x20012774

08018fcc <rmw_uros_epoch_nanos>:
 8018fcc:	4b05      	ldr	r3, [pc, #20]	@ (8018fe4 <rmw_uros_epoch_nanos+0x18>)
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	b123      	cbz	r3, 8018fdc <rmw_uros_epoch_nanos+0x10>
 8018fd2:	6898      	ldr	r0, [r3, #8]
 8018fd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018fd8:	f7f9 bdd2 	b.w	8012b80 <uxr_epoch_nanos>
 8018fdc:	2000      	movs	r0, #0
 8018fde:	2100      	movs	r1, #0
 8018fe0:	4770      	bx	lr
 8018fe2:	bf00      	nop
 8018fe4:	20012734 	.word	0x20012734

08018fe8 <std_msgs__msg__Int32__init>:
 8018fe8:	3800      	subs	r0, #0
 8018fea:	bf18      	it	ne
 8018fec:	2001      	movne	r0, #1
 8018fee:	4770      	bx	lr

08018ff0 <std_msgs__msg__Int32__fini>:
 8018ff0:	4770      	bx	lr
 8018ff2:	bf00      	nop

08018ff4 <ucdr_serialize_endian_array_char>:
 8018ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff8:	4619      	mov	r1, r3
 8018ffa:	461f      	mov	r7, r3
 8018ffc:	4605      	mov	r5, r0
 8018ffe:	4690      	mov	r8, r2
 8019000:	f7f6 fa96 	bl	800f530 <ucdr_check_buffer_available_for>
 8019004:	b9e0      	cbnz	r0, 8019040 <ucdr_serialize_endian_array_char+0x4c>
 8019006:	463e      	mov	r6, r7
 8019008:	e00b      	b.n	8019022 <ucdr_serialize_endian_array_char+0x2e>
 801900a:	4441      	add	r1, r8
 801900c:	68a8      	ldr	r0, [r5, #8]
 801900e:	4622      	mov	r2, r4
 8019010:	1b36      	subs	r6, r6, r4
 8019012:	f002 fc58 	bl	801b8c6 <memcpy>
 8019016:	68ab      	ldr	r3, [r5, #8]
 8019018:	6928      	ldr	r0, [r5, #16]
 801901a:	4423      	add	r3, r4
 801901c:	4420      	add	r0, r4
 801901e:	60ab      	str	r3, [r5, #8]
 8019020:	6128      	str	r0, [r5, #16]
 8019022:	4631      	mov	r1, r6
 8019024:	2201      	movs	r2, #1
 8019026:	4628      	mov	r0, r5
 8019028:	f7f6 fb0c 	bl	800f644 <ucdr_check_final_buffer_behavior_array>
 801902c:	1bb9      	subs	r1, r7, r6
 801902e:	4604      	mov	r4, r0
 8019030:	2800      	cmp	r0, #0
 8019032:	d1ea      	bne.n	801900a <ucdr_serialize_endian_array_char+0x16>
 8019034:	2301      	movs	r3, #1
 8019036:	7da8      	ldrb	r0, [r5, #22]
 8019038:	756b      	strb	r3, [r5, #21]
 801903a:	4058      	eors	r0, r3
 801903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019040:	463a      	mov	r2, r7
 8019042:	4641      	mov	r1, r8
 8019044:	68a8      	ldr	r0, [r5, #8]
 8019046:	f002 fc3e 	bl	801b8c6 <memcpy>
 801904a:	68aa      	ldr	r2, [r5, #8]
 801904c:	692b      	ldr	r3, [r5, #16]
 801904e:	443a      	add	r2, r7
 8019050:	443b      	add	r3, r7
 8019052:	60aa      	str	r2, [r5, #8]
 8019054:	612b      	str	r3, [r5, #16]
 8019056:	e7ed      	b.n	8019034 <ucdr_serialize_endian_array_char+0x40>

08019058 <ucdr_deserialize_endian_array_char>:
 8019058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801905c:	4619      	mov	r1, r3
 801905e:	461f      	mov	r7, r3
 8019060:	4605      	mov	r5, r0
 8019062:	4690      	mov	r8, r2
 8019064:	f7f6 fa64 	bl	800f530 <ucdr_check_buffer_available_for>
 8019068:	b9e8      	cbnz	r0, 80190a6 <ucdr_deserialize_endian_array_char+0x4e>
 801906a:	463e      	mov	r6, r7
 801906c:	e00c      	b.n	8019088 <ucdr_deserialize_endian_array_char+0x30>
 801906e:	eb08 0003 	add.w	r0, r8, r3
 8019072:	68a9      	ldr	r1, [r5, #8]
 8019074:	4622      	mov	r2, r4
 8019076:	1b36      	subs	r6, r6, r4
 8019078:	f002 fc25 	bl	801b8c6 <memcpy>
 801907c:	68ab      	ldr	r3, [r5, #8]
 801907e:	6928      	ldr	r0, [r5, #16]
 8019080:	4423      	add	r3, r4
 8019082:	4420      	add	r0, r4
 8019084:	60ab      	str	r3, [r5, #8]
 8019086:	6128      	str	r0, [r5, #16]
 8019088:	4631      	mov	r1, r6
 801908a:	2201      	movs	r2, #1
 801908c:	4628      	mov	r0, r5
 801908e:	f7f6 fad9 	bl	800f644 <ucdr_check_final_buffer_behavior_array>
 8019092:	1bbb      	subs	r3, r7, r6
 8019094:	4604      	mov	r4, r0
 8019096:	2800      	cmp	r0, #0
 8019098:	d1e9      	bne.n	801906e <ucdr_deserialize_endian_array_char+0x16>
 801909a:	2301      	movs	r3, #1
 801909c:	7da8      	ldrb	r0, [r5, #22]
 801909e:	756b      	strb	r3, [r5, #21]
 80190a0:	4058      	eors	r0, r3
 80190a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190a6:	463a      	mov	r2, r7
 80190a8:	68a9      	ldr	r1, [r5, #8]
 80190aa:	4640      	mov	r0, r8
 80190ac:	f002 fc0b 	bl	801b8c6 <memcpy>
 80190b0:	68aa      	ldr	r2, [r5, #8]
 80190b2:	692b      	ldr	r3, [r5, #16]
 80190b4:	443a      	add	r2, r7
 80190b6:	443b      	add	r3, r7
 80190b8:	60aa      	str	r2, [r5, #8]
 80190ba:	612b      	str	r3, [r5, #16]
 80190bc:	e7ed      	b.n	801909a <ucdr_deserialize_endian_array_char+0x42>
 80190be:	bf00      	nop

080190c0 <ucdr_serialize_array_uint8_t>:
 80190c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190c4:	4688      	mov	r8, r1
 80190c6:	4611      	mov	r1, r2
 80190c8:	4617      	mov	r7, r2
 80190ca:	4605      	mov	r5, r0
 80190cc:	f7f6 fa30 	bl	800f530 <ucdr_check_buffer_available_for>
 80190d0:	b9e0      	cbnz	r0, 801910c <ucdr_serialize_array_uint8_t+0x4c>
 80190d2:	463e      	mov	r6, r7
 80190d4:	e00b      	b.n	80190ee <ucdr_serialize_array_uint8_t+0x2e>
 80190d6:	4441      	add	r1, r8
 80190d8:	68a8      	ldr	r0, [r5, #8]
 80190da:	4622      	mov	r2, r4
 80190dc:	1b36      	subs	r6, r6, r4
 80190de:	f002 fbf2 	bl	801b8c6 <memcpy>
 80190e2:	68ab      	ldr	r3, [r5, #8]
 80190e4:	6928      	ldr	r0, [r5, #16]
 80190e6:	4423      	add	r3, r4
 80190e8:	4420      	add	r0, r4
 80190ea:	60ab      	str	r3, [r5, #8]
 80190ec:	6128      	str	r0, [r5, #16]
 80190ee:	4631      	mov	r1, r6
 80190f0:	2201      	movs	r2, #1
 80190f2:	4628      	mov	r0, r5
 80190f4:	f7f6 faa6 	bl	800f644 <ucdr_check_final_buffer_behavior_array>
 80190f8:	1bb9      	subs	r1, r7, r6
 80190fa:	4604      	mov	r4, r0
 80190fc:	2800      	cmp	r0, #0
 80190fe:	d1ea      	bne.n	80190d6 <ucdr_serialize_array_uint8_t+0x16>
 8019100:	2301      	movs	r3, #1
 8019102:	7da8      	ldrb	r0, [r5, #22]
 8019104:	756b      	strb	r3, [r5, #21]
 8019106:	4058      	eors	r0, r3
 8019108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801910c:	463a      	mov	r2, r7
 801910e:	4641      	mov	r1, r8
 8019110:	68a8      	ldr	r0, [r5, #8]
 8019112:	f002 fbd8 	bl	801b8c6 <memcpy>
 8019116:	68aa      	ldr	r2, [r5, #8]
 8019118:	692b      	ldr	r3, [r5, #16]
 801911a:	443a      	add	r2, r7
 801911c:	443b      	add	r3, r7
 801911e:	60aa      	str	r2, [r5, #8]
 8019120:	612b      	str	r3, [r5, #16]
 8019122:	e7ed      	b.n	8019100 <ucdr_serialize_array_uint8_t+0x40>

08019124 <ucdr_serialize_endian_array_uint8_t>:
 8019124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019128:	4619      	mov	r1, r3
 801912a:	461f      	mov	r7, r3
 801912c:	4605      	mov	r5, r0
 801912e:	4690      	mov	r8, r2
 8019130:	f7f6 f9fe 	bl	800f530 <ucdr_check_buffer_available_for>
 8019134:	b9e0      	cbnz	r0, 8019170 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8019136:	463e      	mov	r6, r7
 8019138:	e00b      	b.n	8019152 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801913a:	4441      	add	r1, r8
 801913c:	68a8      	ldr	r0, [r5, #8]
 801913e:	4622      	mov	r2, r4
 8019140:	1b36      	subs	r6, r6, r4
 8019142:	f002 fbc0 	bl	801b8c6 <memcpy>
 8019146:	68ab      	ldr	r3, [r5, #8]
 8019148:	6928      	ldr	r0, [r5, #16]
 801914a:	4423      	add	r3, r4
 801914c:	4420      	add	r0, r4
 801914e:	60ab      	str	r3, [r5, #8]
 8019150:	6128      	str	r0, [r5, #16]
 8019152:	4631      	mov	r1, r6
 8019154:	2201      	movs	r2, #1
 8019156:	4628      	mov	r0, r5
 8019158:	f7f6 fa74 	bl	800f644 <ucdr_check_final_buffer_behavior_array>
 801915c:	1bb9      	subs	r1, r7, r6
 801915e:	4604      	mov	r4, r0
 8019160:	2800      	cmp	r0, #0
 8019162:	d1ea      	bne.n	801913a <ucdr_serialize_endian_array_uint8_t+0x16>
 8019164:	2301      	movs	r3, #1
 8019166:	7da8      	ldrb	r0, [r5, #22]
 8019168:	756b      	strb	r3, [r5, #21]
 801916a:	4058      	eors	r0, r3
 801916c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019170:	463a      	mov	r2, r7
 8019172:	4641      	mov	r1, r8
 8019174:	68a8      	ldr	r0, [r5, #8]
 8019176:	f002 fba6 	bl	801b8c6 <memcpy>
 801917a:	68aa      	ldr	r2, [r5, #8]
 801917c:	692b      	ldr	r3, [r5, #16]
 801917e:	443a      	add	r2, r7
 8019180:	443b      	add	r3, r7
 8019182:	60aa      	str	r2, [r5, #8]
 8019184:	612b      	str	r3, [r5, #16]
 8019186:	e7ed      	b.n	8019164 <ucdr_serialize_endian_array_uint8_t+0x40>

08019188 <ucdr_deserialize_array_uint8_t>:
 8019188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801918c:	4688      	mov	r8, r1
 801918e:	4611      	mov	r1, r2
 8019190:	4617      	mov	r7, r2
 8019192:	4605      	mov	r5, r0
 8019194:	f7f6 f9cc 	bl	800f530 <ucdr_check_buffer_available_for>
 8019198:	b9e8      	cbnz	r0, 80191d6 <ucdr_deserialize_array_uint8_t+0x4e>
 801919a:	463e      	mov	r6, r7
 801919c:	e00c      	b.n	80191b8 <ucdr_deserialize_array_uint8_t+0x30>
 801919e:	eb08 0003 	add.w	r0, r8, r3
 80191a2:	68a9      	ldr	r1, [r5, #8]
 80191a4:	4622      	mov	r2, r4
 80191a6:	1b36      	subs	r6, r6, r4
 80191a8:	f002 fb8d 	bl	801b8c6 <memcpy>
 80191ac:	68ab      	ldr	r3, [r5, #8]
 80191ae:	6928      	ldr	r0, [r5, #16]
 80191b0:	4423      	add	r3, r4
 80191b2:	4420      	add	r0, r4
 80191b4:	60ab      	str	r3, [r5, #8]
 80191b6:	6128      	str	r0, [r5, #16]
 80191b8:	4631      	mov	r1, r6
 80191ba:	2201      	movs	r2, #1
 80191bc:	4628      	mov	r0, r5
 80191be:	f7f6 fa41 	bl	800f644 <ucdr_check_final_buffer_behavior_array>
 80191c2:	1bbb      	subs	r3, r7, r6
 80191c4:	4604      	mov	r4, r0
 80191c6:	2800      	cmp	r0, #0
 80191c8:	d1e9      	bne.n	801919e <ucdr_deserialize_array_uint8_t+0x16>
 80191ca:	2301      	movs	r3, #1
 80191cc:	7da8      	ldrb	r0, [r5, #22]
 80191ce:	756b      	strb	r3, [r5, #21]
 80191d0:	4058      	eors	r0, r3
 80191d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191d6:	463a      	mov	r2, r7
 80191d8:	68a9      	ldr	r1, [r5, #8]
 80191da:	4640      	mov	r0, r8
 80191dc:	f002 fb73 	bl	801b8c6 <memcpy>
 80191e0:	68aa      	ldr	r2, [r5, #8]
 80191e2:	692b      	ldr	r3, [r5, #16]
 80191e4:	443a      	add	r2, r7
 80191e6:	443b      	add	r3, r7
 80191e8:	60aa      	str	r2, [r5, #8]
 80191ea:	612b      	str	r3, [r5, #16]
 80191ec:	e7ed      	b.n	80191ca <ucdr_deserialize_array_uint8_t+0x42>
 80191ee:	bf00      	nop

080191f0 <ucdr_deserialize_endian_array_uint8_t>:
 80191f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191f4:	4619      	mov	r1, r3
 80191f6:	461f      	mov	r7, r3
 80191f8:	4605      	mov	r5, r0
 80191fa:	4690      	mov	r8, r2
 80191fc:	f7f6 f998 	bl	800f530 <ucdr_check_buffer_available_for>
 8019200:	b9e8      	cbnz	r0, 801923e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8019202:	463e      	mov	r6, r7
 8019204:	e00c      	b.n	8019220 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8019206:	eb08 0003 	add.w	r0, r8, r3
 801920a:	68a9      	ldr	r1, [r5, #8]
 801920c:	4622      	mov	r2, r4
 801920e:	1b36      	subs	r6, r6, r4
 8019210:	f002 fb59 	bl	801b8c6 <memcpy>
 8019214:	68ab      	ldr	r3, [r5, #8]
 8019216:	6928      	ldr	r0, [r5, #16]
 8019218:	4423      	add	r3, r4
 801921a:	4420      	add	r0, r4
 801921c:	60ab      	str	r3, [r5, #8]
 801921e:	6128      	str	r0, [r5, #16]
 8019220:	4631      	mov	r1, r6
 8019222:	2201      	movs	r2, #1
 8019224:	4628      	mov	r0, r5
 8019226:	f7f6 fa0d 	bl	800f644 <ucdr_check_final_buffer_behavior_array>
 801922a:	1bbb      	subs	r3, r7, r6
 801922c:	4604      	mov	r4, r0
 801922e:	2800      	cmp	r0, #0
 8019230:	d1e9      	bne.n	8019206 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8019232:	2301      	movs	r3, #1
 8019234:	7da8      	ldrb	r0, [r5, #22]
 8019236:	756b      	strb	r3, [r5, #21]
 8019238:	4058      	eors	r0, r3
 801923a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801923e:	463a      	mov	r2, r7
 8019240:	68a9      	ldr	r1, [r5, #8]
 8019242:	4640      	mov	r0, r8
 8019244:	f002 fb3f 	bl	801b8c6 <memcpy>
 8019248:	68aa      	ldr	r2, [r5, #8]
 801924a:	692b      	ldr	r3, [r5, #16]
 801924c:	443a      	add	r2, r7
 801924e:	443b      	add	r3, r7
 8019250:	60aa      	str	r2, [r5, #8]
 8019252:	612b      	str	r3, [r5, #16]
 8019254:	e7ed      	b.n	8019232 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8019256:	bf00      	nop

08019258 <ucdr_serialize_sequence_char>:
 8019258:	b570      	push	{r4, r5, r6, lr}
 801925a:	4615      	mov	r5, r2
 801925c:	460e      	mov	r6, r1
 801925e:	7d01      	ldrb	r1, [r0, #20]
 8019260:	4604      	mov	r4, r0
 8019262:	f7f5 fb25 	bl	800e8b0 <ucdr_serialize_endian_uint32_t>
 8019266:	b90d      	cbnz	r5, 801926c <ucdr_serialize_sequence_char+0x14>
 8019268:	2001      	movs	r0, #1
 801926a:	bd70      	pop	{r4, r5, r6, pc}
 801926c:	462b      	mov	r3, r5
 801926e:	4632      	mov	r2, r6
 8019270:	7d21      	ldrb	r1, [r4, #20]
 8019272:	4620      	mov	r0, r4
 8019274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019278:	f7ff bebc 	b.w	8018ff4 <ucdr_serialize_endian_array_char>

0801927c <ucdr_deserialize_sequence_char>:
 801927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019280:	461d      	mov	r5, r3
 8019282:	4616      	mov	r6, r2
 8019284:	460f      	mov	r7, r1
 8019286:	461a      	mov	r2, r3
 8019288:	7d01      	ldrb	r1, [r0, #20]
 801928a:	4604      	mov	r4, r0
 801928c:	f7f5 fc38 	bl	800eb00 <ucdr_deserialize_endian_uint32_t>
 8019290:	682b      	ldr	r3, [r5, #0]
 8019292:	429e      	cmp	r6, r3
 8019294:	d201      	bcs.n	801929a <ucdr_deserialize_sequence_char+0x1e>
 8019296:	2201      	movs	r2, #1
 8019298:	75a2      	strb	r2, [r4, #22]
 801929a:	b913      	cbnz	r3, 80192a2 <ucdr_deserialize_sequence_char+0x26>
 801929c:	2001      	movs	r0, #1
 801929e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192a2:	463a      	mov	r2, r7
 80192a4:	7d21      	ldrb	r1, [r4, #20]
 80192a6:	4620      	mov	r0, r4
 80192a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192ac:	f7ff bed4 	b.w	8019058 <ucdr_deserialize_endian_array_char>

080192b0 <ucdr_serialize_sequence_uint8_t>:
 80192b0:	b570      	push	{r4, r5, r6, lr}
 80192b2:	4615      	mov	r5, r2
 80192b4:	460e      	mov	r6, r1
 80192b6:	7d01      	ldrb	r1, [r0, #20]
 80192b8:	4604      	mov	r4, r0
 80192ba:	f7f5 faf9 	bl	800e8b0 <ucdr_serialize_endian_uint32_t>
 80192be:	b90d      	cbnz	r5, 80192c4 <ucdr_serialize_sequence_uint8_t+0x14>
 80192c0:	2001      	movs	r0, #1
 80192c2:	bd70      	pop	{r4, r5, r6, pc}
 80192c4:	462b      	mov	r3, r5
 80192c6:	4632      	mov	r2, r6
 80192c8:	7d21      	ldrb	r1, [r4, #20]
 80192ca:	4620      	mov	r0, r4
 80192cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192d0:	f7ff bf28 	b.w	8019124 <ucdr_serialize_endian_array_uint8_t>

080192d4 <ucdr_deserialize_sequence_uint8_t>:
 80192d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192d8:	461d      	mov	r5, r3
 80192da:	4616      	mov	r6, r2
 80192dc:	460f      	mov	r7, r1
 80192de:	461a      	mov	r2, r3
 80192e0:	7d01      	ldrb	r1, [r0, #20]
 80192e2:	4604      	mov	r4, r0
 80192e4:	f7f5 fc0c 	bl	800eb00 <ucdr_deserialize_endian_uint32_t>
 80192e8:	682b      	ldr	r3, [r5, #0]
 80192ea:	429e      	cmp	r6, r3
 80192ec:	d201      	bcs.n	80192f2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 80192ee:	2201      	movs	r2, #1
 80192f0:	75a2      	strb	r2, [r4, #22]
 80192f2:	b913      	cbnz	r3, 80192fa <ucdr_deserialize_sequence_uint8_t+0x26>
 80192f4:	2001      	movs	r0, #1
 80192f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192fa:	463a      	mov	r2, r7
 80192fc:	7d21      	ldrb	r1, [r4, #20]
 80192fe:	4620      	mov	r0, r4
 8019300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019304:	f7ff bf74 	b.w	80191f0 <ucdr_deserialize_endian_array_uint8_t>

08019308 <ucdr_serialize_string>:
 8019308:	b510      	push	{r4, lr}
 801930a:	b082      	sub	sp, #8
 801930c:	4604      	mov	r4, r0
 801930e:	4608      	mov	r0, r1
 8019310:	9101      	str	r1, [sp, #4]
 8019312:	f7e6 ff9f 	bl	8000254 <strlen>
 8019316:	4602      	mov	r2, r0
 8019318:	9901      	ldr	r1, [sp, #4]
 801931a:	4620      	mov	r0, r4
 801931c:	3201      	adds	r2, #1
 801931e:	b002      	add	sp, #8
 8019320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019324:	f7ff bf98 	b.w	8019258 <ucdr_serialize_sequence_char>

08019328 <ucdr_deserialize_string>:
 8019328:	b500      	push	{lr}
 801932a:	b083      	sub	sp, #12
 801932c:	ab01      	add	r3, sp, #4
 801932e:	f7ff ffa5 	bl	801927c <ucdr_deserialize_sequence_char>
 8019332:	b003      	add	sp, #12
 8019334:	f85d fb04 	ldr.w	pc, [sp], #4

08019338 <get_custom_error>:
 8019338:	4b01      	ldr	r3, [pc, #4]	@ (8019340 <get_custom_error+0x8>)
 801933a:	7818      	ldrb	r0, [r3, #0]
 801933c:	4770      	bx	lr
 801933e:	bf00      	nop
 8019340:	200128cc 	.word	0x200128cc

08019344 <recv_custom_msg>:
 8019344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019348:	4693      	mov	fp, r2
 801934a:	b089      	sub	sp, #36	@ 0x24
 801934c:	2200      	movs	r2, #0
 801934e:	4604      	mov	r4, r0
 8019350:	468a      	mov	sl, r1
 8019352:	9305      	str	r3, [sp, #20]
 8019354:	f88d 201e 	strb.w	r2, [sp, #30]
 8019358:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801935c:	b322      	cbz	r2, 80193a8 <recv_custom_msg+0x64>
 801935e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8019362:	f10d 081f 	add.w	r8, sp, #31
 8019366:	af05      	add	r7, sp, #20
 8019368:	f10d 061e 	add.w	r6, sp, #30
 801936c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8019370:	e002      	b.n	8019378 <recv_custom_msg+0x34>
 8019372:	9b05      	ldr	r3, [sp, #20]
 8019374:	2b00      	cmp	r3, #0
 8019376:	dd0f      	ble.n	8019398 <recv_custom_msg+0x54>
 8019378:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801937c:	4623      	mov	r3, r4
 801937e:	4622      	mov	r2, r4
 8019380:	4648      	mov	r0, r9
 8019382:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8019386:	e9cd 5600 	strd	r5, r6, [sp]
 801938a:	f000 ffe1 	bl	801a350 <uxr_read_framed_msg>
 801938e:	2800      	cmp	r0, #0
 8019390:	d0ef      	beq.n	8019372 <recv_custom_msg+0x2e>
 8019392:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019396:	b1b3      	cbz	r3, 80193c6 <recv_custom_msg+0x82>
 8019398:	4b0f      	ldr	r3, [pc, #60]	@ (80193d8 <recv_custom_msg+0x94>)
 801939a:	2000      	movs	r0, #0
 801939c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80193a0:	701a      	strb	r2, [r3, #0]
 80193a2:	b009      	add	sp, #36	@ 0x24
 80193a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193a8:	f10d 021f 	add.w	r2, sp, #31
 80193ac:	4601      	mov	r1, r0
 80193ae:	9200      	str	r2, [sp, #0]
 80193b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80193b4:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80193b8:	47a8      	blx	r5
 80193ba:	2800      	cmp	r0, #0
 80193bc:	d0ec      	beq.n	8019398 <recv_custom_msg+0x54>
 80193be:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d1e8      	bne.n	8019398 <recv_custom_msg+0x54>
 80193c6:	f8cb 0000 	str.w	r0, [fp]
 80193ca:	2001      	movs	r0, #1
 80193cc:	f8ca 4000 	str.w	r4, [sl]
 80193d0:	b009      	add	sp, #36	@ 0x24
 80193d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193d6:	bf00      	nop
 80193d8:	200128cc 	.word	0x200128cc

080193dc <send_custom_msg>:
 80193dc:	b530      	push	{r4, r5, lr}
 80193de:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 80193e2:	b087      	sub	sp, #28
 80193e4:	4614      	mov	r4, r2
 80193e6:	b995      	cbnz	r5, 801940e <send_custom_msg+0x32>
 80193e8:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 80193ec:	f10d 0317 	add.w	r3, sp, #23
 80193f0:	47a8      	blx	r5
 80193f2:	1e03      	subs	r3, r0, #0
 80193f4:	bf18      	it	ne
 80193f6:	2301      	movne	r3, #1
 80193f8:	42a0      	cmp	r0, r4
 80193fa:	bf18      	it	ne
 80193fc:	2300      	movne	r3, #0
 80193fe:	b91b      	cbnz	r3, 8019408 <send_custom_msg+0x2c>
 8019400:	4a0a      	ldr	r2, [pc, #40]	@ (801942c <send_custom_msg+0x50>)
 8019402:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8019406:	7011      	strb	r1, [r2, #0]
 8019408:	4618      	mov	r0, r3
 801940a:	b007      	add	sp, #28
 801940c:	bd30      	pop	{r4, r5, pc}
 801940e:	460b      	mov	r3, r1
 8019410:	2200      	movs	r2, #0
 8019412:	f10d 0117 	add.w	r1, sp, #23
 8019416:	9400      	str	r4, [sp, #0]
 8019418:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801941c:	4602      	mov	r2, r0
 801941e:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8019422:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8019426:	f000 fdb5 	bl	8019f94 <uxr_write_framed_msg>
 801942a:	e7e2      	b.n	80193f2 <send_custom_msg+0x16>
 801942c:	200128cc 	.word	0x200128cc

08019430 <uxr_set_custom_transport_callbacks>:
 8019430:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8019434:	9901      	ldr	r1, [sp, #4]
 8019436:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801943a:	9b00      	ldr	r3, [sp, #0]
 801943c:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8019440:	4770      	bx	lr
 8019442:	bf00      	nop

08019444 <uxr_init_custom_transport>:
 8019444:	b538      	push	{r3, r4, r5, lr}
 8019446:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801944a:	b303      	cbz	r3, 801948e <uxr_init_custom_transport+0x4a>
 801944c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8019450:	4604      	mov	r4, r0
 8019452:	b1e2      	cbz	r2, 801948e <uxr_init_custom_transport+0x4a>
 8019454:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8019458:	b1ca      	cbz	r2, 801948e <uxr_init_custom_transport+0x4a>
 801945a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801945e:	b1b2      	cbz	r2, 801948e <uxr_init_custom_transport+0x4a>
 8019460:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8019464:	4798      	blx	r3
 8019466:	4605      	mov	r5, r0
 8019468:	b188      	cbz	r0, 801948e <uxr_init_custom_transport+0x4a>
 801946a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801946e:	b98b      	cbnz	r3, 8019494 <uxr_init_custom_transport+0x50>
 8019470:	4b0b      	ldr	r3, [pc, #44]	@ (80194a0 <uxr_init_custom_transport+0x5c>)
 8019472:	4628      	mov	r0, r5
 8019474:	490b      	ldr	r1, [pc, #44]	@ (80194a4 <uxr_init_custom_transport+0x60>)
 8019476:	4a0c      	ldr	r2, [pc, #48]	@ (80194a8 <uxr_init_custom_transport+0x64>)
 8019478:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801947c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019480:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8019484:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8019488:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801948c:	bd38      	pop	{r3, r4, r5, pc}
 801948e:	2500      	movs	r5, #0
 8019490:	4628      	mov	r0, r5
 8019492:	bd38      	pop	{r3, r4, r5, pc}
 8019494:	2100      	movs	r1, #0
 8019496:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801949a:	f000 fd75 	bl	8019f88 <uxr_init_framing_io>
 801949e:	e7e7      	b.n	8019470 <uxr_init_custom_transport+0x2c>
 80194a0:	08019345 	.word	0x08019345
 80194a4:	080193dd 	.word	0x080193dd
 80194a8:	08019339 	.word	0x08019339

080194ac <uxr_close_custom_transport>:
 80194ac:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80194b0:	4718      	bx	r3
 80194b2:	bf00      	nop

080194b4 <uxr_init_input_best_effort_stream>:
 80194b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80194b8:	8003      	strh	r3, [r0, #0]
 80194ba:	4770      	bx	lr

080194bc <uxr_reset_input_best_effort_stream>:
 80194bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80194c0:	8003      	strh	r3, [r0, #0]
 80194c2:	4770      	bx	lr

080194c4 <uxr_receive_best_effort_message>:
 80194c4:	b538      	push	{r3, r4, r5, lr}
 80194c6:	4604      	mov	r4, r0
 80194c8:	8800      	ldrh	r0, [r0, #0]
 80194ca:	460d      	mov	r5, r1
 80194cc:	f000 fd44 	bl	8019f58 <uxr_seq_num_cmp>
 80194d0:	4603      	mov	r3, r0
 80194d2:	0fc0      	lsrs	r0, r0, #31
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	bfb8      	it	lt
 80194d8:	8025      	strhlt	r5, [r4, #0]
 80194da:	bd38      	pop	{r3, r4, r5, pc}

080194dc <on_full_input_buffer>:
 80194dc:	b570      	push	{r4, r5, r6, lr}
 80194de:	460c      	mov	r4, r1
 80194e0:	4605      	mov	r5, r0
 80194e2:	8908      	ldrh	r0, [r1, #8]
 80194e4:	682b      	ldr	r3, [r5, #0]
 80194e6:	7d26      	ldrb	r6, [r4, #20]
 80194e8:	e9d1 1200 	ldrd	r1, r2, [r1]
 80194ec:	fbb2 f2f0 	udiv	r2, r2, r0
 80194f0:	eba3 0c01 	sub.w	ip, r3, r1
 80194f4:	fbbc fcf2 	udiv	ip, ip, r2
 80194f8:	f10c 0c01 	add.w	ip, ip, #1
 80194fc:	fa1f f38c 	uxth.w	r3, ip
 8019500:	fbb3 fcf0 	udiv	ip, r3, r0
 8019504:	fb00 331c 	mls	r3, r0, ip, r3
 8019508:	b29b      	uxth	r3, r3
 801950a:	fb02 f303 	mul.w	r3, r2, r3
 801950e:	1d18      	adds	r0, r3, #4
 8019510:	4408      	add	r0, r1
 8019512:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019516:	b116      	cbz	r6, 801951e <on_full_input_buffer+0x42>
 8019518:	2600      	movs	r6, #0
 801951a:	f840 6c04 	str.w	r6, [r0, #-4]
 801951e:	2a03      	cmp	r2, #3
 8019520:	d801      	bhi.n	8019526 <on_full_input_buffer+0x4a>
 8019522:	2001      	movs	r0, #1
 8019524:	bd70      	pop	{r4, r5, r6, pc}
 8019526:	3308      	adds	r3, #8
 8019528:	4628      	mov	r0, r5
 801952a:	3a04      	subs	r2, #4
 801952c:	4419      	add	r1, r3
 801952e:	692b      	ldr	r3, [r5, #16]
 8019530:	f7f6 f84a 	bl	800f5c8 <ucdr_init_buffer_origin>
 8019534:	4628      	mov	r0, r5
 8019536:	4622      	mov	r2, r4
 8019538:	4902      	ldr	r1, [pc, #8]	@ (8019544 <on_full_input_buffer+0x68>)
 801953a:	f7f6 f821 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 801953e:	2000      	movs	r0, #0
 8019540:	bd70      	pop	{r4, r5, r6, pc}
 8019542:	bf00      	nop
 8019544:	080194dd 	.word	0x080194dd

08019548 <uxr_init_input_reliable_stream>:
 8019548:	b510      	push	{r4, lr}
 801954a:	e9c0 1200 	strd	r1, r2, [r0]
 801954e:	2400      	movs	r4, #0
 8019550:	9a02      	ldr	r2, [sp, #8]
 8019552:	8103      	strh	r3, [r0, #8]
 8019554:	6102      	str	r2, [r0, #16]
 8019556:	7504      	strb	r4, [r0, #20]
 8019558:	b1c3      	cbz	r3, 801958c <uxr_init_input_reliable_stream+0x44>
 801955a:	600c      	str	r4, [r1, #0]
 801955c:	8901      	ldrh	r1, [r0, #8]
 801955e:	2901      	cmp	r1, #1
 8019560:	d914      	bls.n	801958c <uxr_init_input_reliable_stream+0x44>
 8019562:	f04f 0c01 	mov.w	ip, #1
 8019566:	6843      	ldr	r3, [r0, #4]
 8019568:	f10c 0e01 	add.w	lr, ip, #1
 801956c:	fbbc f2f1 	udiv	r2, ip, r1
 8019570:	fbb3 f3f1 	udiv	r3, r3, r1
 8019574:	fb01 c212 	mls	r2, r1, r2, ip
 8019578:	fa1f fc8e 	uxth.w	ip, lr
 801957c:	b292      	uxth	r2, r2
 801957e:	fb02 f303 	mul.w	r3, r2, r3
 8019582:	6802      	ldr	r2, [r0, #0]
 8019584:	50d4      	str	r4, [r2, r3]
 8019586:	8901      	ldrh	r1, [r0, #8]
 8019588:	4561      	cmp	r1, ip
 801958a:	d8ec      	bhi.n	8019566 <uxr_init_input_reliable_stream+0x1e>
 801958c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019590:	60c3      	str	r3, [r0, #12]
 8019592:	bd10      	pop	{r4, pc}

08019594 <uxr_reset_input_reliable_stream>:
 8019594:	8901      	ldrh	r1, [r0, #8]
 8019596:	b1d9      	cbz	r1, 80195d0 <uxr_reset_input_reliable_stream+0x3c>
 8019598:	b510      	push	{r4, lr}
 801959a:	f04f 0e00 	mov.w	lr, #0
 801959e:	46f4      	mov	ip, lr
 80195a0:	4674      	mov	r4, lr
 80195a2:	6843      	ldr	r3, [r0, #4]
 80195a4:	f10e 0e01 	add.w	lr, lr, #1
 80195a8:	fbbc f2f1 	udiv	r2, ip, r1
 80195ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80195b0:	fb01 c212 	mls	r2, r1, r2, ip
 80195b4:	fa1f fc8e 	uxth.w	ip, lr
 80195b8:	b292      	uxth	r2, r2
 80195ba:	fb02 f303 	mul.w	r3, r2, r3
 80195be:	6802      	ldr	r2, [r0, #0]
 80195c0:	50d4      	str	r4, [r2, r3]
 80195c2:	8901      	ldrh	r1, [r0, #8]
 80195c4:	4561      	cmp	r1, ip
 80195c6:	d8ec      	bhi.n	80195a2 <uxr_reset_input_reliable_stream+0xe>
 80195c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80195cc:	60c3      	str	r3, [r0, #12]
 80195ce:	bd10      	pop	{r4, pc}
 80195d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80195d4:	60c3      	str	r3, [r0, #12]
 80195d6:	4770      	bx	lr

080195d8 <uxr_receive_reliable_message>:
 80195d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195dc:	4604      	mov	r4, r0
 80195de:	460d      	mov	r5, r1
 80195e0:	8901      	ldrh	r1, [r0, #8]
 80195e2:	4617      	mov	r7, r2
 80195e4:	8980      	ldrh	r0, [r0, #12]
 80195e6:	4698      	mov	r8, r3
 80195e8:	f000 fcae 	bl	8019f48 <uxr_seq_num_add>
 80195ec:	4629      	mov	r1, r5
 80195ee:	4606      	mov	r6, r0
 80195f0:	89a0      	ldrh	r0, [r4, #12]
 80195f2:	f000 fcb1 	bl	8019f58 <uxr_seq_num_cmp>
 80195f6:	2800      	cmp	r0, #0
 80195f8:	db0a      	blt.n	8019610 <uxr_receive_reliable_message+0x38>
 80195fa:	2600      	movs	r6, #0
 80195fc:	4629      	mov	r1, r5
 80195fe:	89e0      	ldrh	r0, [r4, #14]
 8019600:	f000 fcaa 	bl	8019f58 <uxr_seq_num_cmp>
 8019604:	2800      	cmp	r0, #0
 8019606:	da00      	bge.n	801960a <uxr_receive_reliable_message+0x32>
 8019608:	81e5      	strh	r5, [r4, #14]
 801960a:	4630      	mov	r0, r6
 801960c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019610:	4630      	mov	r0, r6
 8019612:	4629      	mov	r1, r5
 8019614:	f000 fca0 	bl	8019f58 <uxr_seq_num_cmp>
 8019618:	2800      	cmp	r0, #0
 801961a:	dbee      	blt.n	80195fa <uxr_receive_reliable_message+0x22>
 801961c:	6923      	ldr	r3, [r4, #16]
 801961e:	4638      	mov	r0, r7
 8019620:	4798      	blx	r3
 8019622:	4681      	mov	r9, r0
 8019624:	2101      	movs	r1, #1
 8019626:	89a0      	ldrh	r0, [r4, #12]
 8019628:	f000 fc8e 	bl	8019f48 <uxr_seq_num_add>
 801962c:	f1b9 0f00 	cmp.w	r9, #0
 8019630:	bf08      	it	eq
 8019632:	4285      	cmpeq	r5, r0
 8019634:	bf0c      	ite	eq
 8019636:	2601      	moveq	r6, #1
 8019638:	2600      	movne	r6, #0
 801963a:	d104      	bne.n	8019646 <uxr_receive_reliable_message+0x6e>
 801963c:	2300      	movs	r3, #0
 801963e:	9a08      	ldr	r2, [sp, #32]
 8019640:	81a0      	strh	r0, [r4, #12]
 8019642:	7013      	strb	r3, [r2, #0]
 8019644:	e7da      	b.n	80195fc <uxr_receive_reliable_message+0x24>
 8019646:	8922      	ldrh	r2, [r4, #8]
 8019648:	6863      	ldr	r3, [r4, #4]
 801964a:	fbb5 f0f2 	udiv	r0, r5, r2
 801964e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019652:	fb02 5010 	mls	r0, r2, r0, r5
 8019656:	b280      	uxth	r0, r0
 8019658:	fb03 f000 	mul.w	r0, r3, r0
 801965c:	6823      	ldr	r3, [r4, #0]
 801965e:	3004      	adds	r0, #4
 8019660:	4418      	add	r0, r3
 8019662:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d1c7      	bne.n	80195fa <uxr_receive_reliable_message+0x22>
 801966a:	4639      	mov	r1, r7
 801966c:	4642      	mov	r2, r8
 801966e:	f002 f92a 	bl	801b8c6 <memcpy>
 8019672:	8921      	ldrh	r1, [r4, #8]
 8019674:	6863      	ldr	r3, [r4, #4]
 8019676:	fbb5 f2f1 	udiv	r2, r5, r1
 801967a:	fbb3 f3f1 	udiv	r3, r3, r1
 801967e:	fb01 5212 	mls	r2, r1, r2, r5
 8019682:	b292      	uxth	r2, r2
 8019684:	fb02 f303 	mul.w	r3, r2, r3
 8019688:	6822      	ldr	r2, [r4, #0]
 801968a:	f842 8003 	str.w	r8, [r2, r3]
 801968e:	2301      	movs	r3, #1
 8019690:	9a08      	ldr	r2, [sp, #32]
 8019692:	7013      	strb	r3, [r2, #0]
 8019694:	f1b9 0f00 	cmp.w	r9, #0
 8019698:	d0af      	beq.n	80195fa <uxr_receive_reliable_message+0x22>
 801969a:	89a6      	ldrh	r6, [r4, #12]
 801969c:	2101      	movs	r1, #1
 801969e:	4630      	mov	r0, r6
 80196a0:	f000 fc52 	bl	8019f48 <uxr_seq_num_add>
 80196a4:	8921      	ldrh	r1, [r4, #8]
 80196a6:	6863      	ldr	r3, [r4, #4]
 80196a8:	4606      	mov	r6, r0
 80196aa:	fbb0 f2f1 	udiv	r2, r0, r1
 80196ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80196b2:	fb01 0212 	mls	r2, r1, r2, r0
 80196b6:	6820      	ldr	r0, [r4, #0]
 80196b8:	b292      	uxth	r2, r2
 80196ba:	fb02 f303 	mul.w	r3, r2, r3
 80196be:	3304      	adds	r3, #4
 80196c0:	4418      	add	r0, r3
 80196c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d097      	beq.n	80195fa <uxr_receive_reliable_message+0x22>
 80196ca:	6923      	ldr	r3, [r4, #16]
 80196cc:	4798      	blx	r3
 80196ce:	2802      	cmp	r0, #2
 80196d0:	d002      	beq.n	80196d8 <uxr_receive_reliable_message+0x100>
 80196d2:	2801      	cmp	r0, #1
 80196d4:	d0e2      	beq.n	801969c <uxr_receive_reliable_message+0xc4>
 80196d6:	e790      	b.n	80195fa <uxr_receive_reliable_message+0x22>
 80196d8:	2601      	movs	r6, #1
 80196da:	e78f      	b.n	80195fc <uxr_receive_reliable_message+0x24>

080196dc <uxr_next_input_reliable_buffer_available>:
 80196dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196e0:	4604      	mov	r4, r0
 80196e2:	460f      	mov	r7, r1
 80196e4:	8980      	ldrh	r0, [r0, #12]
 80196e6:	2101      	movs	r1, #1
 80196e8:	4690      	mov	r8, r2
 80196ea:	f000 fc2d 	bl	8019f48 <uxr_seq_num_add>
 80196ee:	8922      	ldrh	r2, [r4, #8]
 80196f0:	6866      	ldr	r6, [r4, #4]
 80196f2:	fbb0 f3f2 	udiv	r3, r0, r2
 80196f6:	fbb6 f6f2 	udiv	r6, r6, r2
 80196fa:	fb02 0313 	mls	r3, r2, r3, r0
 80196fe:	b29b      	uxth	r3, r3
 8019700:	fb03 f606 	mul.w	r6, r3, r6
 8019704:	6823      	ldr	r3, [r4, #0]
 8019706:	3604      	adds	r6, #4
 8019708:	441e      	add	r6, r3
 801970a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801970e:	f1b9 0f00 	cmp.w	r9, #0
 8019712:	d023      	beq.n	801975c <uxr_next_input_reliable_buffer_available+0x80>
 8019714:	4605      	mov	r5, r0
 8019716:	6923      	ldr	r3, [r4, #16]
 8019718:	4630      	mov	r0, r6
 801971a:	4798      	blx	r3
 801971c:	4682      	mov	sl, r0
 801971e:	b300      	cbz	r0, 8019762 <uxr_next_input_reliable_buffer_available+0x86>
 8019720:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019724:	2101      	movs	r1, #1
 8019726:	4650      	mov	r0, sl
 8019728:	f000 fc0e 	bl	8019f48 <uxr_seq_num_add>
 801972c:	8921      	ldrh	r1, [r4, #8]
 801972e:	4682      	mov	sl, r0
 8019730:	6863      	ldr	r3, [r4, #4]
 8019732:	6820      	ldr	r0, [r4, #0]
 8019734:	fbba f2f1 	udiv	r2, sl, r1
 8019738:	fbb3 f3f1 	udiv	r3, r3, r1
 801973c:	fb01 a212 	mls	r2, r1, r2, sl
 8019740:	b292      	uxth	r2, r2
 8019742:	fb02 f303 	mul.w	r3, r2, r3
 8019746:	3304      	adds	r3, #4
 8019748:	4418      	add	r0, r3
 801974a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801974e:	b12b      	cbz	r3, 801975c <uxr_next_input_reliable_buffer_available+0x80>
 8019750:	6923      	ldr	r3, [r4, #16]
 8019752:	4798      	blx	r3
 8019754:	2802      	cmp	r0, #2
 8019756:	d01b      	beq.n	8019790 <uxr_next_input_reliable_buffer_available+0xb4>
 8019758:	2801      	cmp	r0, #1
 801975a:	d0e3      	beq.n	8019724 <uxr_next_input_reliable_buffer_available+0x48>
 801975c:	2000      	movs	r0, #0
 801975e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019762:	464a      	mov	r2, r9
 8019764:	4631      	mov	r1, r6
 8019766:	4638      	mov	r0, r7
 8019768:	f7f5 ff36 	bl	800f5d8 <ucdr_init_buffer>
 801976c:	8921      	ldrh	r1, [r4, #8]
 801976e:	6863      	ldr	r3, [r4, #4]
 8019770:	2001      	movs	r0, #1
 8019772:	fbb5 f2f1 	udiv	r2, r5, r1
 8019776:	fbb3 f3f1 	udiv	r3, r3, r1
 801977a:	fb01 5212 	mls	r2, r1, r2, r5
 801977e:	b292      	uxth	r2, r2
 8019780:	fb02 f303 	mul.w	r3, r2, r3
 8019784:	6822      	ldr	r2, [r4, #0]
 8019786:	f842 a003 	str.w	sl, [r2, r3]
 801978a:	81a5      	strh	r5, [r4, #12]
 801978c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019790:	8920      	ldrh	r0, [r4, #8]
 8019792:	eb06 0108 	add.w	r1, r6, r8
 8019796:	6863      	ldr	r3, [r4, #4]
 8019798:	eba9 0208 	sub.w	r2, r9, r8
 801979c:	fbb5 f6f0 	udiv	r6, r5, r0
 80197a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80197a4:	fb00 5516 	mls	r5, r0, r6, r5
 80197a8:	2000      	movs	r0, #0
 80197aa:	b2ad      	uxth	r5, r5
 80197ac:	fb03 f505 	mul.w	r5, r3, r5
 80197b0:	6823      	ldr	r3, [r4, #0]
 80197b2:	5158      	str	r0, [r3, r5]
 80197b4:	4638      	mov	r0, r7
 80197b6:	f7f5 ff0f 	bl	800f5d8 <ucdr_init_buffer>
 80197ba:	4638      	mov	r0, r7
 80197bc:	4622      	mov	r2, r4
 80197be:	4903      	ldr	r1, [pc, #12]	@ (80197cc <uxr_next_input_reliable_buffer_available+0xf0>)
 80197c0:	f7f5 fede 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 80197c4:	2001      	movs	r0, #1
 80197c6:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80197ca:	e7c8      	b.n	801975e <uxr_next_input_reliable_buffer_available+0x82>
 80197cc:	080194dd 	.word	0x080194dd

080197d0 <uxr_process_heartbeat>:
 80197d0:	b538      	push	{r3, r4, r5, lr}
 80197d2:	4611      	mov	r1, r2
 80197d4:	4604      	mov	r4, r0
 80197d6:	89c0      	ldrh	r0, [r0, #14]
 80197d8:	4615      	mov	r5, r2
 80197da:	f000 fbbd 	bl	8019f58 <uxr_seq_num_cmp>
 80197de:	2800      	cmp	r0, #0
 80197e0:	bfb8      	it	lt
 80197e2:	81e5      	strhlt	r5, [r4, #14]
 80197e4:	bd38      	pop	{r3, r4, r5, pc}
 80197e6:	bf00      	nop

080197e8 <uxr_compute_acknack>:
 80197e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197ec:	8903      	ldrh	r3, [r0, #8]
 80197ee:	4604      	mov	r4, r0
 80197f0:	460f      	mov	r7, r1
 80197f2:	8985      	ldrh	r5, [r0, #12]
 80197f4:	b1db      	cbz	r3, 801982e <uxr_compute_acknack+0x46>
 80197f6:	4628      	mov	r0, r5
 80197f8:	2601      	movs	r6, #1
 80197fa:	e004      	b.n	8019806 <uxr_compute_acknack+0x1e>
 80197fc:	4566      	cmp	r6, ip
 80197fe:	f106 0601 	add.w	r6, r6, #1
 8019802:	d214      	bcs.n	801982e <uxr_compute_acknack+0x46>
 8019804:	89a0      	ldrh	r0, [r4, #12]
 8019806:	b2b1      	uxth	r1, r6
 8019808:	f000 fb9e 	bl	8019f48 <uxr_seq_num_add>
 801980c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019810:	fbb0 f2fc 	udiv	r2, r0, ip
 8019814:	e9d4 1300 	ldrd	r1, r3, [r4]
 8019818:	fb0c 0212 	mls	r2, ip, r2, r0
 801981c:	fbb3 f3fc 	udiv	r3, r3, ip
 8019820:	b292      	uxth	r2, r2
 8019822:	fb02 f303 	mul.w	r3, r2, r3
 8019826:	58cb      	ldr	r3, [r1, r3]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d1e7      	bne.n	80197fc <uxr_compute_acknack+0x14>
 801982c:	4605      	mov	r5, r0
 801982e:	803d      	strh	r5, [r7, #0]
 8019830:	2101      	movs	r1, #1
 8019832:	89e6      	ldrh	r6, [r4, #14]
 8019834:	4628      	mov	r0, r5
 8019836:	f000 fb8b 	bl	8019f50 <uxr_seq_num_sub>
 801983a:	4601      	mov	r1, r0
 801983c:	4630      	mov	r0, r6
 801983e:	f000 fb87 	bl	8019f50 <uxr_seq_num_sub>
 8019842:	4606      	mov	r6, r0
 8019844:	b328      	cbz	r0, 8019892 <uxr_compute_acknack+0xaa>
 8019846:	f04f 0900 	mov.w	r9, #0
 801984a:	f04f 0801 	mov.w	r8, #1
 801984e:	464d      	mov	r5, r9
 8019850:	fa1f f189 	uxth.w	r1, r9
 8019854:	8838      	ldrh	r0, [r7, #0]
 8019856:	f000 fb77 	bl	8019f48 <uxr_seq_num_add>
 801985a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801985e:	6861      	ldr	r1, [r4, #4]
 8019860:	fa08 fe09 	lsl.w	lr, r8, r9
 8019864:	6822      	ldr	r2, [r4, #0]
 8019866:	f109 0901 	add.w	r9, r9, #1
 801986a:	ea4e 0e05 	orr.w	lr, lr, r5
 801986e:	fbb0 f3fc 	udiv	r3, r0, ip
 8019872:	fbb1 f1fc 	udiv	r1, r1, ip
 8019876:	fb03 001c 	mls	r0, r3, ip, r0
 801987a:	b283      	uxth	r3, r0
 801987c:	fb01 f303 	mul.w	r3, r1, r3
 8019880:	58d3      	ldr	r3, [r2, r3]
 8019882:	b90b      	cbnz	r3, 8019888 <uxr_compute_acknack+0xa0>
 8019884:	fa1f f58e 	uxth.w	r5, lr
 8019888:	454e      	cmp	r6, r9
 801988a:	d1e1      	bne.n	8019850 <uxr_compute_acknack+0x68>
 801988c:	4628      	mov	r0, r5
 801988e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019892:	4605      	mov	r5, r0
 8019894:	4628      	mov	r0, r5
 8019896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801989a:	bf00      	nop

0801989c <uxr_init_output_best_effort_stream>:
 801989c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80198a0:	6001      	str	r1, [r0, #0]
 80198a2:	7303      	strb	r3, [r0, #12]
 80198a4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80198a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80198ac:	4770      	bx	lr
 80198ae:	bf00      	nop

080198b0 <uxr_reset_output_best_effort_stream>:
 80198b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80198b4:	7b03      	ldrb	r3, [r0, #12]
 80198b6:	81c2      	strh	r2, [r0, #14]
 80198b8:	6043      	str	r3, [r0, #4]
 80198ba:	4770      	bx	lr

080198bc <uxr_prepare_best_effort_buffer_to_write>:
 80198bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198be:	4604      	mov	r4, r0
 80198c0:	b083      	sub	sp, #12
 80198c2:	6840      	ldr	r0, [r0, #4]
 80198c4:	460d      	mov	r5, r1
 80198c6:	4616      	mov	r6, r2
 80198c8:	f7fa fa5a 	bl	8013d80 <uxr_submessage_padding>
 80198cc:	6863      	ldr	r3, [r4, #4]
 80198ce:	4418      	add	r0, r3
 80198d0:	68a3      	ldr	r3, [r4, #8]
 80198d2:	1942      	adds	r2, r0, r5
 80198d4:	4293      	cmp	r3, r2
 80198d6:	bf2c      	ite	cs
 80198d8:	2701      	movcs	r7, #1
 80198da:	2700      	movcc	r7, #0
 80198dc:	d202      	bcs.n	80198e4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80198de:	4638      	mov	r0, r7
 80198e0:	b003      	add	sp, #12
 80198e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198e4:	9000      	str	r0, [sp, #0]
 80198e6:	2300      	movs	r3, #0
 80198e8:	4630      	mov	r0, r6
 80198ea:	6821      	ldr	r1, [r4, #0]
 80198ec:	f7f5 fe62 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 80198f0:	6861      	ldr	r1, [r4, #4]
 80198f2:	4638      	mov	r0, r7
 80198f4:	4429      	add	r1, r5
 80198f6:	6061      	str	r1, [r4, #4]
 80198f8:	b003      	add	sp, #12
 80198fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080198fc <uxr_prepare_best_effort_buffer_to_send>:
 80198fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019900:	4604      	mov	r4, r0
 8019902:	461d      	mov	r5, r3
 8019904:	6840      	ldr	r0, [r0, #4]
 8019906:	7b23      	ldrb	r3, [r4, #12]
 8019908:	4298      	cmp	r0, r3
 801990a:	bf8c      	ite	hi
 801990c:	2601      	movhi	r6, #1
 801990e:	2600      	movls	r6, #0
 8019910:	d802      	bhi.n	8019918 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019912:	4630      	mov	r0, r6
 8019914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019918:	4688      	mov	r8, r1
 801991a:	89e0      	ldrh	r0, [r4, #14]
 801991c:	2101      	movs	r1, #1
 801991e:	4617      	mov	r7, r2
 8019920:	f000 fb12 	bl	8019f48 <uxr_seq_num_add>
 8019924:	6823      	ldr	r3, [r4, #0]
 8019926:	81e0      	strh	r0, [r4, #14]
 8019928:	8028      	strh	r0, [r5, #0]
 801992a:	4630      	mov	r0, r6
 801992c:	f8c8 3000 	str.w	r3, [r8]
 8019930:	6863      	ldr	r3, [r4, #4]
 8019932:	603b      	str	r3, [r7, #0]
 8019934:	7b23      	ldrb	r3, [r4, #12]
 8019936:	6063      	str	r3, [r4, #4]
 8019938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801993c <on_full_output_buffer>:
 801993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801993e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8019942:	460c      	mov	r4, r1
 8019944:	6803      	ldr	r3, [r0, #0]
 8019946:	4605      	mov	r5, r0
 8019948:	7b26      	ldrb	r6, [r4, #12]
 801994a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801994e:	fbb2 f2fc 	udiv	r2, r2, ip
 8019952:	eba3 0e01 	sub.w	lr, r3, r1
 8019956:	6903      	ldr	r3, [r0, #16]
 8019958:	fbbe fef2 	udiv	lr, lr, r2
 801995c:	f10e 0e01 	add.w	lr, lr, #1
 8019960:	fa1f fe8e 	uxth.w	lr, lr
 8019964:	fbbe f7fc 	udiv	r7, lr, ip
 8019968:	fb0c ec17 	mls	ip, ip, r7, lr
 801996c:	fa1f fc8c 	uxth.w	ip, ip
 8019970:	fb02 fc0c 	mul.w	ip, r2, ip
 8019974:	f851 200c 	ldr.w	r2, [r1, ip]
 8019978:	44b4      	add	ip, r6
 801997a:	1b92      	subs	r2, r2, r6
 801997c:	f10c 0c08 	add.w	ip, ip, #8
 8019980:	3a04      	subs	r2, #4
 8019982:	4461      	add	r1, ip
 8019984:	f7f5 fe20 	bl	800f5c8 <ucdr_init_buffer_origin>
 8019988:	4628      	mov	r0, r5
 801998a:	4622      	mov	r2, r4
 801998c:	4902      	ldr	r1, [pc, #8]	@ (8019998 <on_full_output_buffer+0x5c>)
 801998e:	f7f5 fdf7 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 8019992:	2000      	movs	r0, #0
 8019994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019996:	bf00      	nop
 8019998:	0801993d 	.word	0x0801993d

0801999c <uxr_init_output_reliable_stream>:
 801999c:	b530      	push	{r4, r5, lr}
 801999e:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80199a2:	8103      	strh	r3, [r0, #8]
 80199a4:	7304      	strb	r4, [r0, #12]
 80199a6:	e9c0 1200 	strd	r1, r2, [r0]
 80199aa:	b1e3      	cbz	r3, 80199e6 <uxr_init_output_reliable_stream+0x4a>
 80199ac:	600c      	str	r4, [r1, #0]
 80199ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80199b2:	f1bc 0f01 	cmp.w	ip, #1
 80199b6:	d916      	bls.n	80199e6 <uxr_init_output_reliable_stream+0x4a>
 80199b8:	f04f 0e01 	mov.w	lr, #1
 80199bc:	6843      	ldr	r3, [r0, #4]
 80199be:	f10e 0501 	add.w	r5, lr, #1
 80199c2:	7b04      	ldrb	r4, [r0, #12]
 80199c4:	6801      	ldr	r1, [r0, #0]
 80199c6:	fbbe f2fc 	udiv	r2, lr, ip
 80199ca:	fbb3 f3fc 	udiv	r3, r3, ip
 80199ce:	fb0c e212 	mls	r2, ip, r2, lr
 80199d2:	fa1f fe85 	uxth.w	lr, r5
 80199d6:	b292      	uxth	r2, r2
 80199d8:	fb02 f303 	mul.w	r3, r2, r3
 80199dc:	50cc      	str	r4, [r1, r3]
 80199de:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80199e2:	45f4      	cmp	ip, lr
 80199e4:	d8ea      	bhi.n	80199bc <uxr_init_output_reliable_stream+0x20>
 80199e6:	4b07      	ldr	r3, [pc, #28]	@ (8019a04 <uxr_init_output_reliable_stream+0x68>)
 80199e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80199ec:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80199f0:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80199f4:	f8c0 300e 	str.w	r3, [r0, #14]
 80199f8:	2300      	movs	r3, #0
 80199fa:	8242      	strh	r2, [r0, #18]
 80199fc:	8403      	strh	r3, [r0, #32]
 80199fe:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8019a02:	bd30      	pop	{r4, r5, pc}
 8019a04:	ffff0000 	.word	0xffff0000

08019a08 <uxr_reset_output_reliable_stream>:
 8019a08:	8901      	ldrh	r1, [r0, #8]
 8019a0a:	b510      	push	{r4, lr}
 8019a0c:	b1b1      	cbz	r1, 8019a3c <uxr_reset_output_reliable_stream+0x34>
 8019a0e:	f04f 0e00 	mov.w	lr, #0
 8019a12:	46f4      	mov	ip, lr
 8019a14:	6843      	ldr	r3, [r0, #4]
 8019a16:	f10e 0e01 	add.w	lr, lr, #1
 8019a1a:	7b04      	ldrb	r4, [r0, #12]
 8019a1c:	fbbc f2f1 	udiv	r2, ip, r1
 8019a20:	fbb3 f3f1 	udiv	r3, r3, r1
 8019a24:	fb01 c212 	mls	r2, r1, r2, ip
 8019a28:	fa1f fc8e 	uxth.w	ip, lr
 8019a2c:	b292      	uxth	r2, r2
 8019a2e:	fb02 f303 	mul.w	r3, r2, r3
 8019a32:	6802      	ldr	r2, [r0, #0]
 8019a34:	50d4      	str	r4, [r2, r3]
 8019a36:	8901      	ldrh	r1, [r0, #8]
 8019a38:	4561      	cmp	r1, ip
 8019a3a:	d8eb      	bhi.n	8019a14 <uxr_reset_output_reliable_stream+0xc>
 8019a3c:	4b08      	ldr	r3, [pc, #32]	@ (8019a60 <uxr_reset_output_reliable_stream+0x58>)
 8019a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019a42:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8019a58 <uxr_reset_output_reliable_stream+0x50>
 8019a46:	f8c0 300e 	str.w	r3, [r0, #14]
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	8242      	strh	r2, [r0, #18]
 8019a4e:	8403      	strh	r3, [r0, #32]
 8019a50:	ed80 7b06 	vstr	d7, [r0, #24]
 8019a54:	bd10      	pop	{r4, pc}
 8019a56:	bf00      	nop
 8019a58:	ffffffff 	.word	0xffffffff
 8019a5c:	7fffffff 	.word	0x7fffffff
 8019a60:	ffff0000 	.word	0xffff0000

08019a64 <uxr_prepare_reliable_buffer_to_write>:
 8019a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a68:	4604      	mov	r4, r0
 8019a6a:	b091      	sub	sp, #68	@ 0x44
 8019a6c:	8900      	ldrh	r0, [r0, #8]
 8019a6e:	468b      	mov	fp, r1
 8019a70:	89e6      	ldrh	r6, [r4, #14]
 8019a72:	9204      	str	r2, [sp, #16]
 8019a74:	6865      	ldr	r5, [r4, #4]
 8019a76:	6823      	ldr	r3, [r4, #0]
 8019a78:	f894 900c 	ldrb.w	r9, [r4, #12]
 8019a7c:	fbb6 f2f0 	udiv	r2, r6, r0
 8019a80:	fbb5 f5f0 	udiv	r5, r5, r0
 8019a84:	fb00 6212 	mls	r2, r0, r2, r6
 8019a88:	1f2f      	subs	r7, r5, #4
 8019a8a:	b292      	uxth	r2, r2
 8019a8c:	fb05 3202 	mla	r2, r5, r2, r3
 8019a90:	1d11      	adds	r1, r2, #4
 8019a92:	f8d2 8000 	ldr.w	r8, [r2]
 8019a96:	9103      	str	r1, [sp, #12]
 8019a98:	2800      	cmp	r0, #0
 8019a9a:	f000 814a 	beq.w	8019d32 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8019a9e:	f04f 0c00 	mov.w	ip, #0
 8019aa2:	46e2      	mov	sl, ip
 8019aa4:	4661      	mov	r1, ip
 8019aa6:	f10c 0c01 	add.w	ip, ip, #1
 8019aaa:	fbb1 f2f0 	udiv	r2, r1, r0
 8019aae:	fb00 1212 	mls	r2, r0, r2, r1
 8019ab2:	fa1f f18c 	uxth.w	r1, ip
 8019ab6:	b292      	uxth	r2, r2
 8019ab8:	fb05 f202 	mul.w	r2, r5, r2
 8019abc:	589a      	ldr	r2, [r3, r2]
 8019abe:	454a      	cmp	r2, r9
 8019ac0:	d103      	bne.n	8019aca <uxr_prepare_reliable_buffer_to_write+0x66>
 8019ac2:	f10a 0a01 	add.w	sl, sl, #1
 8019ac6:	fa1f fa8a 	uxth.w	sl, sl
 8019aca:	4281      	cmp	r1, r0
 8019acc:	d3eb      	bcc.n	8019aa6 <uxr_prepare_reliable_buffer_to_write+0x42>
 8019ace:	4640      	mov	r0, r8
 8019ad0:	2104      	movs	r1, #4
 8019ad2:	f8cd a014 	str.w	sl, [sp, #20]
 8019ad6:	f7f5 fd83 	bl	800f5e0 <ucdr_alignment>
 8019ada:	4480      	add	r8, r0
 8019adc:	eb08 020b 	add.w	r2, r8, fp
 8019ae0:	42ba      	cmp	r2, r7
 8019ae2:	f240 80ca 	bls.w	8019c7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8019ae6:	7b22      	ldrb	r2, [r4, #12]
 8019ae8:	445a      	add	r2, fp
 8019aea:	42ba      	cmp	r2, r7
 8019aec:	f240 80b2 	bls.w	8019c54 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8019af0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8019af4:	b2bb      	uxth	r3, r7
 8019af6:	eba2 0209 	sub.w	r2, r2, r9
 8019afa:	441a      	add	r2, r3
 8019afc:	b292      	uxth	r2, r2
 8019afe:	fb0a f902 	mul.w	r9, sl, r2
 8019b02:	9205      	str	r2, [sp, #20]
 8019b04:	45d9      	cmp	r9, fp
 8019b06:	9206      	str	r2, [sp, #24]
 8019b08:	f0c0 80b3 	bcc.w	8019c72 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019b0c:	f108 0204 	add.w	r2, r8, #4
 8019b10:	42ba      	cmp	r2, r7
 8019b12:	f080 80da 	bcs.w	8019cca <uxr_prepare_reliable_buffer_to_write+0x266>
 8019b16:	f1a3 0904 	sub.w	r9, r3, #4
 8019b1a:	9b05      	ldr	r3, [sp, #20]
 8019b1c:	eba9 0908 	sub.w	r9, r9, r8
 8019b20:	fa1f f989 	uxth.w	r9, r9
 8019b24:	ebab 0b09 	sub.w	fp, fp, r9
 8019b28:	fbbb f2f3 	udiv	r2, fp, r3
 8019b2c:	fb03 b312 	mls	r3, r3, r2, fp
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	f040 80c4 	bne.w	8019cbe <uxr_prepare_reliable_buffer_to_write+0x25a>
 8019b36:	b293      	uxth	r3, r2
 8019b38:	4553      	cmp	r3, sl
 8019b3a:	f200 809a 	bhi.w	8019c72 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	f000 80f9 	beq.w	8019d36 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8019b44:	f8cd 801c 	str.w	r8, [sp, #28]
 8019b48:	f04f 0a00 	mov.w	sl, #0
 8019b4c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019b50:	f10d 0b20 	add.w	fp, sp, #32
 8019b54:	9505      	str	r5, [sp, #20]
 8019b56:	461d      	mov	r5, r3
 8019b58:	e000      	b.n	8019b5c <uxr_prepare_reliable_buffer_to_write+0xf8>
 8019b5a:	46c1      	mov	r9, r8
 8019b5c:	8922      	ldrh	r2, [r4, #8]
 8019b5e:	4658      	mov	r0, fp
 8019b60:	6863      	ldr	r3, [r4, #4]
 8019b62:	f10a 0a01 	add.w	sl, sl, #1
 8019b66:	fbb6 f1f2 	udiv	r1, r6, r2
 8019b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8019b6e:	fb02 6111 	mls	r1, r2, r1, r6
 8019b72:	463a      	mov	r2, r7
 8019b74:	b289      	uxth	r1, r1
 8019b76:	fb03 f101 	mul.w	r1, r3, r1
 8019b7a:	6823      	ldr	r3, [r4, #0]
 8019b7c:	3104      	adds	r1, #4
 8019b7e:	4419      	add	r1, r3
 8019b80:	2300      	movs	r3, #0
 8019b82:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8019b86:	f8cd c000 	str.w	ip, [sp]
 8019b8a:	f7f5 fd13 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 8019b8e:	464a      	mov	r2, r9
 8019b90:	2300      	movs	r3, #0
 8019b92:	210d      	movs	r1, #13
 8019b94:	4658      	mov	r0, fp
 8019b96:	f7fa f8b3 	bl	8013d00 <uxr_buffer_submessage_header>
 8019b9a:	8921      	ldrh	r1, [r4, #8]
 8019b9c:	6863      	ldr	r3, [r4, #4]
 8019b9e:	4630      	mov	r0, r6
 8019ba0:	fbb6 f2f1 	udiv	r2, r6, r1
 8019ba4:	fbb3 f3f1 	udiv	r3, r3, r1
 8019ba8:	fb01 6212 	mls	r2, r1, r2, r6
 8019bac:	2101      	movs	r1, #1
 8019bae:	b292      	uxth	r2, r2
 8019bb0:	fb02 f303 	mul.w	r3, r2, r3
 8019bb4:	6822      	ldr	r2, [r4, #0]
 8019bb6:	50d7      	str	r7, [r2, r3]
 8019bb8:	f000 f9c6 	bl	8019f48 <uxr_seq_num_add>
 8019bbc:	4606      	mov	r6, r0
 8019bbe:	fa1f f38a 	uxth.w	r3, sl
 8019bc2:	429d      	cmp	r5, r3
 8019bc4:	d8c9      	bhi.n	8019b5a <uxr_prepare_reliable_buffer_to_write+0xf6>
 8019bc6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019bca:	9d05      	ldr	r5, [sp, #20]
 8019bcc:	8920      	ldrh	r0, [r4, #8]
 8019bce:	463a      	mov	r2, r7
 8019bd0:	6863      	ldr	r3, [r4, #4]
 8019bd2:	fbb6 f1f0 	udiv	r1, r6, r0
 8019bd6:	fbb3 f3f0 	udiv	r3, r3, r0
 8019bda:	fb00 6111 	mls	r1, r0, r1, r6
 8019bde:	4658      	mov	r0, fp
 8019be0:	b289      	uxth	r1, r1
 8019be2:	fb01 f303 	mul.w	r3, r1, r3
 8019be6:	6821      	ldr	r1, [r4, #0]
 8019be8:	3304      	adds	r3, #4
 8019bea:	4419      	add	r1, r3
 8019bec:	2300      	movs	r3, #0
 8019bee:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8019bf2:	9700      	str	r7, [sp, #0]
 8019bf4:	f7f5 fcde 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 8019bf8:	9f06      	ldr	r7, [sp, #24]
 8019bfa:	4658      	mov	r0, fp
 8019bfc:	2302      	movs	r3, #2
 8019bfe:	b2ba      	uxth	r2, r7
 8019c00:	210d      	movs	r1, #13
 8019c02:	f7fa f87d 	bl	8013d00 <uxr_buffer_submessage_header>
 8019c06:	f108 0104 	add.w	r1, r8, #4
 8019c0a:	9b03      	ldr	r3, [sp, #12]
 8019c0c:	f1a5 0208 	sub.w	r2, r5, #8
 8019c10:	8925      	ldrh	r5, [r4, #8]
 8019c12:	440b      	add	r3, r1
 8019c14:	eba2 0208 	sub.w	r2, r2, r8
 8019c18:	fbb6 f0f5 	udiv	r0, r6, r5
 8019c1c:	4619      	mov	r1, r3
 8019c1e:	6863      	ldr	r3, [r4, #4]
 8019c20:	fb05 6010 	mls	r0, r5, r0, r6
 8019c24:	fbb3 f3f5 	udiv	r3, r3, r5
 8019c28:	b280      	uxth	r0, r0
 8019c2a:	6825      	ldr	r5, [r4, #0]
 8019c2c:	fb00 f303 	mul.w	r3, r0, r3
 8019c30:	7b20      	ldrb	r0, [r4, #12]
 8019c32:	3004      	adds	r0, #4
 8019c34:	4438      	add	r0, r7
 8019c36:	50e8      	str	r0, [r5, r3]
 8019c38:	9d04      	ldr	r5, [sp, #16]
 8019c3a:	4628      	mov	r0, r5
 8019c3c:	f7f5 fccc 	bl	800f5d8 <ucdr_init_buffer>
 8019c40:	4628      	mov	r0, r5
 8019c42:	4622      	mov	r2, r4
 8019c44:	493d      	ldr	r1, [pc, #244]	@ (8019d3c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8019c46:	f7f5 fc9b 	bl	800f580 <ucdr_set_on_full_buffer_callback>
 8019c4a:	2001      	movs	r0, #1
 8019c4c:	81e6      	strh	r6, [r4, #14]
 8019c4e:	b011      	add	sp, #68	@ 0x44
 8019c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c54:	2101      	movs	r1, #1
 8019c56:	89e0      	ldrh	r0, [r4, #14]
 8019c58:	f000 f976 	bl	8019f48 <uxr_seq_num_add>
 8019c5c:	4605      	mov	r5, r0
 8019c5e:	8921      	ldrh	r1, [r4, #8]
 8019c60:	8a60      	ldrh	r0, [r4, #18]
 8019c62:	f000 f971 	bl	8019f48 <uxr_seq_num_add>
 8019c66:	4601      	mov	r1, r0
 8019c68:	4628      	mov	r0, r5
 8019c6a:	f000 f975 	bl	8019f58 <uxr_seq_num_cmp>
 8019c6e:	2800      	cmp	r0, #0
 8019c70:	dd44      	ble.n	8019cfc <uxr_prepare_reliable_buffer_to_write+0x298>
 8019c72:	2000      	movs	r0, #0
 8019c74:	b011      	add	sp, #68	@ 0x44
 8019c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c7a:	8921      	ldrh	r1, [r4, #8]
 8019c7c:	8a60      	ldrh	r0, [r4, #18]
 8019c7e:	9205      	str	r2, [sp, #20]
 8019c80:	f000 f962 	bl	8019f48 <uxr_seq_num_add>
 8019c84:	4601      	mov	r1, r0
 8019c86:	4630      	mov	r0, r6
 8019c88:	f000 f966 	bl	8019f58 <uxr_seq_num_cmp>
 8019c8c:	2800      	cmp	r0, #0
 8019c8e:	9a05      	ldr	r2, [sp, #20]
 8019c90:	dcef      	bgt.n	8019c72 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019c92:	8925      	ldrh	r5, [r4, #8]
 8019c94:	e9d4 7300 	ldrd	r7, r3, [r4]
 8019c98:	fbb6 f4f5 	udiv	r4, r6, r5
 8019c9c:	fbb3 f3f5 	udiv	r3, r3, r5
 8019ca0:	fb05 6414 	mls	r4, r5, r4, r6
 8019ca4:	b2a4      	uxth	r4, r4
 8019ca6:	fb04 f303 	mul.w	r3, r4, r3
 8019caa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8019cae:	50fa      	str	r2, [r7, r3]
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	f8cd 8000 	str.w	r8, [sp]
 8019cb6:	f7f5 fc7d 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 8019cba:	2001      	movs	r0, #1
 8019cbc:	e7da      	b.n	8019c74 <uxr_prepare_reliable_buffer_to_write+0x210>
 8019cbe:	3201      	adds	r2, #1
 8019cc0:	9306      	str	r3, [sp, #24]
 8019cc2:	b293      	uxth	r3, r2
 8019cc4:	4553      	cmp	r3, sl
 8019cc6:	d8d4      	bhi.n	8019c72 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019cc8:	e739      	b.n	8019b3e <uxr_prepare_reliable_buffer_to_write+0xda>
 8019cca:	4630      	mov	r0, r6
 8019ccc:	2101      	movs	r1, #1
 8019cce:	9307      	str	r3, [sp, #28]
 8019cd0:	f000 f93a 	bl	8019f48 <uxr_seq_num_add>
 8019cd4:	4606      	mov	r6, r0
 8019cd6:	8920      	ldrh	r0, [r4, #8]
 8019cd8:	6862      	ldr	r2, [r4, #4]
 8019cda:	fbb6 f1f0 	udiv	r1, r6, r0
 8019cde:	fbb2 f2f0 	udiv	r2, r2, r0
 8019ce2:	fb00 6111 	mls	r1, r0, r1, r6
 8019ce6:	b289      	uxth	r1, r1
 8019ce8:	fb01 f202 	mul.w	r2, r1, r2
 8019cec:	6821      	ldr	r1, [r4, #0]
 8019cee:	3204      	adds	r2, #4
 8019cf0:	188b      	adds	r3, r1, r2
 8019cf2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8019cf6:	9303      	str	r3, [sp, #12]
 8019cf8:	9b07      	ldr	r3, [sp, #28]
 8019cfa:	e70c      	b.n	8019b16 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8019cfc:	8921      	ldrh	r1, [r4, #8]
 8019cfe:	6863      	ldr	r3, [r4, #4]
 8019d00:	9804      	ldr	r0, [sp, #16]
 8019d02:	fbb5 f2f1 	udiv	r2, r5, r1
 8019d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d0a:	fb01 5212 	mls	r2, r1, r2, r5
 8019d0e:	6821      	ldr	r1, [r4, #0]
 8019d10:	b292      	uxth	r2, r2
 8019d12:	fb02 f303 	mul.w	r3, r2, r3
 8019d16:	7b22      	ldrb	r2, [r4, #12]
 8019d18:	3304      	adds	r3, #4
 8019d1a:	445a      	add	r2, fp
 8019d1c:	4419      	add	r1, r3
 8019d1e:	f841 2c04 	str.w	r2, [r1, #-4]
 8019d22:	7b23      	ldrb	r3, [r4, #12]
 8019d24:	9300      	str	r3, [sp, #0]
 8019d26:	2300      	movs	r3, #0
 8019d28:	f7f5 fc44 	bl	800f5b4 <ucdr_init_buffer_origin_offset>
 8019d2c:	2001      	movs	r0, #1
 8019d2e:	81e5      	strh	r5, [r4, #14]
 8019d30:	e7a0      	b.n	8019c74 <uxr_prepare_reliable_buffer_to_write+0x210>
 8019d32:	4682      	mov	sl, r0
 8019d34:	e6cb      	b.n	8019ace <uxr_prepare_reliable_buffer_to_write+0x6a>
 8019d36:	f10d 0b20 	add.w	fp, sp, #32
 8019d3a:	e747      	b.n	8019bcc <uxr_prepare_reliable_buffer_to_write+0x168>
 8019d3c:	0801993d 	.word	0x0801993d

08019d40 <uxr_prepare_next_reliable_buffer_to_send>:
 8019d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d42:	4604      	mov	r4, r0
 8019d44:	461d      	mov	r5, r3
 8019d46:	460f      	mov	r7, r1
 8019d48:	8a00      	ldrh	r0, [r0, #16]
 8019d4a:	2101      	movs	r1, #1
 8019d4c:	4616      	mov	r6, r2
 8019d4e:	f000 f8fb 	bl	8019f48 <uxr_seq_num_add>
 8019d52:	8028      	strh	r0, [r5, #0]
 8019d54:	8922      	ldrh	r2, [r4, #8]
 8019d56:	6863      	ldr	r3, [r4, #4]
 8019d58:	fbb0 f1f2 	udiv	r1, r0, r2
 8019d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019d60:	fb02 0c11 	mls	ip, r2, r1, r0
 8019d64:	89e1      	ldrh	r1, [r4, #14]
 8019d66:	fa1f fc8c 	uxth.w	ip, ip
 8019d6a:	fb0c fc03 	mul.w	ip, ip, r3
 8019d6e:	6823      	ldr	r3, [r4, #0]
 8019d70:	f10c 0c04 	add.w	ip, ip, #4
 8019d74:	4463      	add	r3, ip
 8019d76:	603b      	str	r3, [r7, #0]
 8019d78:	6823      	ldr	r3, [r4, #0]
 8019d7a:	449c      	add	ip, r3
 8019d7c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019d80:	6033      	str	r3, [r6, #0]
 8019d82:	f000 f8e9 	bl	8019f58 <uxr_seq_num_cmp>
 8019d86:	2800      	cmp	r0, #0
 8019d88:	dd01      	ble.n	8019d8e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019d8a:	2000      	movs	r0, #0
 8019d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d8e:	7b23      	ldrb	r3, [r4, #12]
 8019d90:	6832      	ldr	r2, [r6, #0]
 8019d92:	429a      	cmp	r2, r3
 8019d94:	d9f9      	bls.n	8019d8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019d96:	8a61      	ldrh	r1, [r4, #18]
 8019d98:	8a20      	ldrh	r0, [r4, #16]
 8019d9a:	f000 f8d9 	bl	8019f50 <uxr_seq_num_sub>
 8019d9e:	8923      	ldrh	r3, [r4, #8]
 8019da0:	4283      	cmp	r3, r0
 8019da2:	d0f2      	beq.n	8019d8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019da4:	8828      	ldrh	r0, [r5, #0]
 8019da6:	89e3      	ldrh	r3, [r4, #14]
 8019da8:	8220      	strh	r0, [r4, #16]
 8019daa:	4298      	cmp	r0, r3
 8019dac:	d001      	beq.n	8019db2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019dae:	2001      	movs	r0, #1
 8019db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019db2:	2101      	movs	r1, #1
 8019db4:	f000 f8c8 	bl	8019f48 <uxr_seq_num_add>
 8019db8:	4603      	mov	r3, r0
 8019dba:	2001      	movs	r0, #1
 8019dbc:	81e3      	strh	r3, [r4, #14]
 8019dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019dc0 <uxr_update_output_stream_heartbeat_timestamp>:
 8019dc0:	b570      	push	{r4, r5, r6, lr}
 8019dc2:	8a01      	ldrh	r1, [r0, #16]
 8019dc4:	4604      	mov	r4, r0
 8019dc6:	8a40      	ldrh	r0, [r0, #18]
 8019dc8:	4615      	mov	r5, r2
 8019dca:	461e      	mov	r6, r3
 8019dcc:	f000 f8c4 	bl	8019f58 <uxr_seq_num_cmp>
 8019dd0:	2800      	cmp	r0, #0
 8019dd2:	db07      	blt.n	8019de4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019dd8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019ddc:	2000      	movs	r0, #0
 8019dde:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8019de2:	bd70      	pop	{r4, r5, r6, pc}
 8019de4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019de8:	b940      	cbnz	r0, 8019dfc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8019dea:	2301      	movs	r3, #1
 8019dec:	f884 3020 	strb.w	r3, [r4, #32]
 8019df0:	3564      	adds	r5, #100	@ 0x64
 8019df2:	f146 0600 	adc.w	r6, r6, #0
 8019df6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019dfa:	bd70      	pop	{r4, r5, r6, pc}
 8019dfc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019e00:	4295      	cmp	r5, r2
 8019e02:	eb76 0303 	sbcs.w	r3, r6, r3
 8019e06:	db04      	blt.n	8019e12 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8019e08:	1c43      	adds	r3, r0, #1
 8019e0a:	2001      	movs	r0, #1
 8019e0c:	f884 3020 	strb.w	r3, [r4, #32]
 8019e10:	e7ee      	b.n	8019df0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8019e12:	2000      	movs	r0, #0
 8019e14:	e7ec      	b.n	8019df0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8019e16:	bf00      	nop

08019e18 <uxr_begin_output_nack_buffer_it>:
 8019e18:	8a40      	ldrh	r0, [r0, #18]
 8019e1a:	4770      	bx	lr

08019e1c <uxr_next_reliable_nack_buffer_to_send>:
 8019e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e20:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8019e24:	b197      	cbz	r7, 8019e4c <uxr_next_reliable_nack_buffer_to_send+0x30>
 8019e26:	4680      	mov	r8, r0
 8019e28:	460d      	mov	r5, r1
 8019e2a:	4616      	mov	r6, r2
 8019e2c:	461c      	mov	r4, r3
 8019e2e:	8818      	ldrh	r0, [r3, #0]
 8019e30:	2101      	movs	r1, #1
 8019e32:	f000 f889 	bl	8019f48 <uxr_seq_num_add>
 8019e36:	8020      	strh	r0, [r4, #0]
 8019e38:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8019e3c:	f000 f88c 	bl	8019f58 <uxr_seq_num_cmp>
 8019e40:	2800      	cmp	r0, #0
 8019e42:	dd06      	ble.n	8019e52 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8019e44:	2300      	movs	r3, #0
 8019e46:	461f      	mov	r7, r3
 8019e48:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8019e4c:	4638      	mov	r0, r7
 8019e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e52:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8019e56:	8820      	ldrh	r0, [r4, #0]
 8019e58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019e5c:	fbb0 f3f2 	udiv	r3, r0, r2
 8019e60:	fbb1 fcf2 	udiv	ip, r1, r2
 8019e64:	fb02 0313 	mls	r3, r2, r3, r0
 8019e68:	b29b      	uxth	r3, r3
 8019e6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8019e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8019e72:	f10c 0c04 	add.w	ip, ip, #4
 8019e76:	4463      	add	r3, ip
 8019e78:	602b      	str	r3, [r5, #0]
 8019e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8019e7e:	4463      	add	r3, ip
 8019e80:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019e84:	6033      	str	r3, [r6, #0]
 8019e86:	f898 200c 	ldrb.w	r2, [r8, #12]
 8019e8a:	429a      	cmp	r2, r3
 8019e8c:	d0d0      	beq.n	8019e30 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8019e8e:	e7dd      	b.n	8019e4c <uxr_next_reliable_nack_buffer_to_send+0x30>

08019e90 <uxr_process_acknack>:
 8019e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e92:	4604      	mov	r4, r0
 8019e94:	460e      	mov	r6, r1
 8019e96:	4610      	mov	r0, r2
 8019e98:	2101      	movs	r1, #1
 8019e9a:	f000 f859 	bl	8019f50 <uxr_seq_num_sub>
 8019e9e:	8a61      	ldrh	r1, [r4, #18]
 8019ea0:	f000 f856 	bl	8019f50 <uxr_seq_num_sub>
 8019ea4:	b1c8      	cbz	r0, 8019eda <uxr_process_acknack+0x4a>
 8019ea6:	4605      	mov	r5, r0
 8019ea8:	2700      	movs	r7, #0
 8019eaa:	2101      	movs	r1, #1
 8019eac:	8a60      	ldrh	r0, [r4, #18]
 8019eae:	f000 f84b 	bl	8019f48 <uxr_seq_num_add>
 8019eb2:	8923      	ldrh	r3, [r4, #8]
 8019eb4:	6862      	ldr	r2, [r4, #4]
 8019eb6:	3701      	adds	r7, #1
 8019eb8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8019ebc:	6821      	ldr	r1, [r4, #0]
 8019ebe:	42bd      	cmp	r5, r7
 8019ec0:	8260      	strh	r0, [r4, #18]
 8019ec2:	fbb0 fef3 	udiv	lr, r0, r3
 8019ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8019eca:	fb03 031e 	mls	r3, r3, lr, r0
 8019ece:	b29b      	uxth	r3, r3
 8019ed0:	fb02 f303 	mul.w	r3, r2, r3
 8019ed4:	f841 c003 	str.w	ip, [r1, r3]
 8019ed8:	d1e7      	bne.n	8019eaa <uxr_process_acknack+0x1a>
 8019eda:	3e00      	subs	r6, #0
 8019edc:	f04f 0300 	mov.w	r3, #0
 8019ee0:	bf18      	it	ne
 8019ee2:	2601      	movne	r6, #1
 8019ee4:	f884 3020 	strb.w	r3, [r4, #32]
 8019ee8:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8019eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019eee:	bf00      	nop

08019ef0 <uxr_is_output_up_to_date>:
 8019ef0:	8a01      	ldrh	r1, [r0, #16]
 8019ef2:	8a40      	ldrh	r0, [r0, #18]
 8019ef4:	b508      	push	{r3, lr}
 8019ef6:	f000 f82f 	bl	8019f58 <uxr_seq_num_cmp>
 8019efa:	fab0 f080 	clz	r0, r0
 8019efe:	0940      	lsrs	r0, r0, #5
 8019f00:	bd08      	pop	{r3, pc}
 8019f02:	bf00      	nop

08019f04 <get_available_free_slots>:
 8019f04:	8901      	ldrh	r1, [r0, #8]
 8019f06:	b1e1      	cbz	r1, 8019f42 <get_available_free_slots+0x3e>
 8019f08:	6843      	ldr	r3, [r0, #4]
 8019f0a:	f04f 0c00 	mov.w	ip, #0
 8019f0e:	b530      	push	{r4, r5, lr}
 8019f10:	fbb3 fef1 	udiv	lr, r3, r1
 8019f14:	6805      	ldr	r5, [r0, #0]
 8019f16:	4662      	mov	r2, ip
 8019f18:	7b04      	ldrb	r4, [r0, #12]
 8019f1a:	4660      	mov	r0, ip
 8019f1c:	f10c 0c01 	add.w	ip, ip, #1
 8019f20:	fbb2 f3f1 	udiv	r3, r2, r1
 8019f24:	fb01 2313 	mls	r3, r1, r3, r2
 8019f28:	fa1f f28c 	uxth.w	r2, ip
 8019f2c:	b29b      	uxth	r3, r3
 8019f2e:	fb0e f303 	mul.w	r3, lr, r3
 8019f32:	58eb      	ldr	r3, [r5, r3]
 8019f34:	429c      	cmp	r4, r3
 8019f36:	d101      	bne.n	8019f3c <get_available_free_slots+0x38>
 8019f38:	3001      	adds	r0, #1
 8019f3a:	b280      	uxth	r0, r0
 8019f3c:	428a      	cmp	r2, r1
 8019f3e:	d3ed      	bcc.n	8019f1c <get_available_free_slots+0x18>
 8019f40:	bd30      	pop	{r4, r5, pc}
 8019f42:	4608      	mov	r0, r1
 8019f44:	4770      	bx	lr
 8019f46:	bf00      	nop

08019f48 <uxr_seq_num_add>:
 8019f48:	4408      	add	r0, r1
 8019f4a:	b280      	uxth	r0, r0
 8019f4c:	4770      	bx	lr
 8019f4e:	bf00      	nop

08019f50 <uxr_seq_num_sub>:
 8019f50:	1a40      	subs	r0, r0, r1
 8019f52:	b280      	uxth	r0, r0
 8019f54:	4770      	bx	lr
 8019f56:	bf00      	nop

08019f58 <uxr_seq_num_cmp>:
 8019f58:	4288      	cmp	r0, r1
 8019f5a:	d011      	beq.n	8019f80 <uxr_seq_num_cmp+0x28>
 8019f5c:	d309      	bcc.n	8019f72 <uxr_seq_num_cmp+0x1a>
 8019f5e:	4288      	cmp	r0, r1
 8019f60:	d910      	bls.n	8019f84 <uxr_seq_num_cmp+0x2c>
 8019f62:	1a40      	subs	r0, r0, r1
 8019f64:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8019f68:	bfd4      	ite	le
 8019f6a:	2001      	movle	r0, #1
 8019f6c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8019f70:	4770      	bx	lr
 8019f72:	1a0b      	subs	r3, r1, r0
 8019f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019f78:	daf1      	bge.n	8019f5e <uxr_seq_num_cmp+0x6>
 8019f7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f7e:	4770      	bx	lr
 8019f80:	2000      	movs	r0, #0
 8019f82:	4770      	bx	lr
 8019f84:	2001      	movs	r0, #1
 8019f86:	4770      	bx	lr

08019f88 <uxr_init_framing_io>:
 8019f88:	2300      	movs	r3, #0
 8019f8a:	7041      	strb	r1, [r0, #1]
 8019f8c:	7003      	strb	r3, [r0, #0]
 8019f8e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8019f90:	4770      	bx	lr
 8019f92:	bf00      	nop

08019f94 <uxr_write_framed_msg>:
 8019f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f98:	4617      	mov	r7, r2
 8019f9a:	7842      	ldrb	r2, [r0, #1]
 8019f9c:	460e      	mov	r6, r1
 8019f9e:	b083      	sub	sp, #12
 8019fa0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8019fa4:	469b      	mov	fp, r3
 8019fa6:	237e      	movs	r3, #126	@ 0x7e
 8019fa8:	4604      	mov	r4, r0
 8019faa:	2901      	cmp	r1, #1
 8019fac:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8019fb0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8019fb4:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8019fb8:	f240 8115 	bls.w	801a1e6 <uxr_write_framed_msg+0x252>
 8019fbc:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8019fc0:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8019fc4:	2202      	movs	r2, #2
 8019fc6:	2901      	cmp	r1, #1
 8019fc8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019fcc:	d952      	bls.n	801a074 <uxr_write_framed_msg+0xe0>
 8019fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019fd0:	2103      	movs	r1, #3
 8019fd2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8019fd6:	b2dd      	uxtb	r5, r3
 8019fd8:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019fdc:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8019fe0:	2a01      	cmp	r2, #1
 8019fe2:	d95c      	bls.n	801a09e <uxr_write_framed_msg+0x10a>
 8019fe4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019fe6:	1862      	adds	r2, r4, r1
 8019fe8:	3101      	adds	r1, #1
 8019fea:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019fee:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8019ff2:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019ff6:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8019ffa:	2a01      	cmp	r2, #1
 8019ffc:	d961      	bls.n	801a0c2 <uxr_write_framed_msg+0x12e>
 8019ffe:	1c4a      	adds	r2, r1, #1
 801a000:	4421      	add	r1, r4
 801a002:	b2d2      	uxtb	r2, r2
 801a004:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801a008:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d06a      	beq.n	801a0e6 <uxr_write_framed_msg+0x152>
 801a010:	f04f 0800 	mov.w	r8, #0
 801a014:	46c1      	mov	r9, r8
 801a016:	e016      	b.n	801a046 <uxr_write_framed_msg+0xb2>
 801a018:	2a29      	cmp	r2, #41	@ 0x29
 801a01a:	d868      	bhi.n	801a0ee <uxr_write_framed_msg+0x15a>
 801a01c:	18a0      	adds	r0, r4, r2
 801a01e:	3201      	adds	r2, #1
 801a020:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801a024:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a028:	ea88 0101 	eor.w	r1, r8, r1
 801a02c:	4b7d      	ldr	r3, [pc, #500]	@ (801a224 <uxr_write_framed_msg+0x290>)
 801a02e:	f109 0901 	add.w	r9, r9, #1
 801a032:	b2c9      	uxtb	r1, r1
 801a034:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801a038:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801a03c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a03e:	454b      	cmp	r3, r9
 801a040:	d969      	bls.n	801a116 <uxr_write_framed_msg+0x182>
 801a042:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801a046:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801a04a:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801a04e:	2801      	cmp	r0, #1
 801a050:	d8e2      	bhi.n	801a018 <uxr_write_framed_msg+0x84>
 801a052:	1c50      	adds	r0, r2, #1
 801a054:	b2c0      	uxtb	r0, r0
 801a056:	2829      	cmp	r0, #41	@ 0x29
 801a058:	d849      	bhi.n	801a0ee <uxr_write_framed_msg+0x15a>
 801a05a:	18a0      	adds	r0, r4, r2
 801a05c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801a060:	3202      	adds	r2, #2
 801a062:	f081 0520 	eor.w	r5, r1, #32
 801a066:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801a06a:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801a06e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a072:	e7d9      	b.n	801a028 <uxr_write_framed_msg+0x94>
 801a074:	2104      	movs	r1, #4
 801a076:	f04f 0c03 	mov.w	ip, #3
 801a07a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a07c:	4422      	add	r2, r4
 801a07e:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801a082:	44a4      	add	ip, r4
 801a084:	b2dd      	uxtb	r5, r3
 801a086:	f080 0020 	eor.w	r0, r0, #32
 801a08a:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801a08e:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801a092:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801a096:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801a09a:	2a01      	cmp	r2, #1
 801a09c:	d8a2      	bhi.n	8019fe4 <uxr_write_framed_msg+0x50>
 801a09e:	1862      	adds	r2, r4, r1
 801a0a0:	207d      	movs	r0, #125	@ 0x7d
 801a0a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a0a4:	f085 0520 	eor.w	r5, r5, #32
 801a0a8:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 801a0ac:	3102      	adds	r1, #2
 801a0ae:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801a0b2:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 801a0b6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801a0ba:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801a0be:	2a01      	cmp	r2, #1
 801a0c0:	d89d      	bhi.n	8019ffe <uxr_write_framed_msg+0x6a>
 801a0c2:	1c4d      	adds	r5, r1, #1
 801a0c4:	1c8a      	adds	r2, r1, #2
 801a0c6:	f080 0020 	eor.w	r0, r0, #32
 801a0ca:	4421      	add	r1, r4
 801a0cc:	fa54 f585 	uxtab	r5, r4, r5
 801a0d0:	b2d2      	uxtb	r2, r2
 801a0d2:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801a0d6:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801a0da:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 801a0de:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d194      	bne.n	801a010 <uxr_write_framed_msg+0x7c>
 801a0e6:	4619      	mov	r1, r3
 801a0e8:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a0ec:	e019      	b.n	801a122 <uxr_write_framed_msg+0x18e>
 801a0ee:	2500      	movs	r5, #0
 801a0f0:	e000      	b.n	801a0f4 <uxr_write_framed_msg+0x160>
 801a0f2:	b160      	cbz	r0, 801a10e <uxr_write_framed_msg+0x17a>
 801a0f4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801a0f8:	1b52      	subs	r2, r2, r5
 801a0fa:	4653      	mov	r3, sl
 801a0fc:	4638      	mov	r0, r7
 801a0fe:	4421      	add	r1, r4
 801a100:	47b0      	blx	r6
 801a102:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801a106:	4405      	add	r5, r0
 801a108:	4295      	cmp	r5, r2
 801a10a:	d3f2      	bcc.n	801a0f2 <uxr_write_framed_msg+0x15e>
 801a10c:	d066      	beq.n	801a1dc <uxr_write_framed_msg+0x248>
 801a10e:	2000      	movs	r0, #0
 801a110:	b003      	add	sp, #12
 801a112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a116:	fa5f f188 	uxtb.w	r1, r8
 801a11a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801a11e:	f8ad 8004 	strh.w	r8, [sp, #4]
 801a122:	f04f 0900 	mov.w	r9, #0
 801a126:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801a12a:	46c8      	mov	r8, r9
 801a12c:	e013      	b.n	801a156 <uxr_write_framed_msg+0x1c2>
 801a12e:	2a29      	cmp	r2, #41	@ 0x29
 801a130:	d824      	bhi.n	801a17c <uxr_write_framed_msg+0x1e8>
 801a132:	18a3      	adds	r3, r4, r2
 801a134:	3201      	adds	r2, #1
 801a136:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801a13a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a13e:	f109 0901 	add.w	r9, r9, #1
 801a142:	f1b9 0f02 	cmp.w	r9, #2
 801a146:	d02d      	beq.n	801a1a4 <uxr_write_framed_msg+0x210>
 801a148:	f109 0308 	add.w	r3, r9, #8
 801a14c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801a150:	446b      	add	r3, sp
 801a152:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801a156:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801a15a:	2b01      	cmp	r3, #1
 801a15c:	d8e7      	bhi.n	801a12e <uxr_write_framed_msg+0x19a>
 801a15e:	1c53      	adds	r3, r2, #1
 801a160:	b2db      	uxtb	r3, r3
 801a162:	2b29      	cmp	r3, #41	@ 0x29
 801a164:	d80a      	bhi.n	801a17c <uxr_write_framed_msg+0x1e8>
 801a166:	18a3      	adds	r3, r4, r2
 801a168:	f081 0120 	eor.w	r1, r1, #32
 801a16c:	3202      	adds	r2, #2
 801a16e:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801a172:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 801a176:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a17a:	e7e0      	b.n	801a13e <uxr_write_framed_msg+0x1aa>
 801a17c:	2500      	movs	r5, #0
 801a17e:	e001      	b.n	801a184 <uxr_write_framed_msg+0x1f0>
 801a180:	2800      	cmp	r0, #0
 801a182:	d0c4      	beq.n	801a10e <uxr_write_framed_msg+0x17a>
 801a184:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801a188:	1b52      	subs	r2, r2, r5
 801a18a:	4653      	mov	r3, sl
 801a18c:	4638      	mov	r0, r7
 801a18e:	4421      	add	r1, r4
 801a190:	47b0      	blx	r6
 801a192:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801a196:	4405      	add	r5, r0
 801a198:	4295      	cmp	r5, r2
 801a19a:	d3f1      	bcc.n	801a180 <uxr_write_framed_msg+0x1ec>
 801a19c:	d1b7      	bne.n	801a10e <uxr_write_framed_msg+0x17a>
 801a19e:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801a1a2:	e7d1      	b.n	801a148 <uxr_write_framed_msg+0x1b4>
 801a1a4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801a1a8:	b19a      	cbz	r2, 801a1d2 <uxr_write_framed_msg+0x23e>
 801a1aa:	2500      	movs	r5, #0
 801a1ac:	e001      	b.n	801a1b2 <uxr_write_framed_msg+0x21e>
 801a1ae:	2800      	cmp	r0, #0
 801a1b0:	d0ad      	beq.n	801a10e <uxr_write_framed_msg+0x17a>
 801a1b2:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801a1b6:	1b52      	subs	r2, r2, r5
 801a1b8:	4653      	mov	r3, sl
 801a1ba:	4638      	mov	r0, r7
 801a1bc:	4421      	add	r1, r4
 801a1be:	47b0      	blx	r6
 801a1c0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801a1c4:	4405      	add	r5, r0
 801a1c6:	4295      	cmp	r5, r2
 801a1c8:	d3f1      	bcc.n	801a1ae <uxr_write_framed_msg+0x21a>
 801a1ca:	d1a0      	bne.n	801a10e <uxr_write_framed_msg+0x17a>
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801a1d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a1d4:	b298      	uxth	r0, r3
 801a1d6:	b003      	add	sp, #12
 801a1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1dc:	f04f 0300 	mov.w	r3, #0
 801a1e0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801a1e4:	e72a      	b.n	801a03c <uxr_write_framed_msg+0xa8>
 801a1e6:	217d      	movs	r1, #125	@ 0x7d
 801a1e8:	f082 0220 	eor.w	r2, r2, #32
 801a1ec:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801a1f0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801a1f4:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801a1f8:	2203      	movs	r2, #3
 801a1fa:	2901      	cmp	r1, #1
 801a1fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a200:	d803      	bhi.n	801a20a <uxr_write_framed_msg+0x276>
 801a202:	2105      	movs	r1, #5
 801a204:	f04f 0c04 	mov.w	ip, #4
 801a208:	e737      	b.n	801a07a <uxr_write_framed_msg+0xe6>
 801a20a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a20c:	2104      	movs	r1, #4
 801a20e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801a212:	b2dd      	uxtb	r5, r3
 801a214:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801a218:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801a21c:	2a01      	cmp	r2, #1
 801a21e:	f63f aee1 	bhi.w	8019fe4 <uxr_write_framed_msg+0x50>
 801a222:	e73c      	b.n	801a09e <uxr_write_framed_msg+0x10a>
 801a224:	0801d288 	.word	0x0801d288

0801a228 <uxr_framing_read_transport>:
 801a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a22c:	4604      	mov	r4, r0
 801a22e:	b085      	sub	sp, #20
 801a230:	4692      	mov	sl, r2
 801a232:	4689      	mov	r9, r1
 801a234:	461d      	mov	r5, r3
 801a236:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801a238:	f7f9 fda8 	bl	8013d8c <uxr_millis>
 801a23c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801a240:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 801a244:	4680      	mov	r8, r0
 801a246:	42ba      	cmp	r2, r7
 801a248:	d05f      	beq.n	801a30a <uxr_framing_read_transport+0xe2>
 801a24a:	d817      	bhi.n	801a27c <uxr_framing_read_transport+0x54>
 801a24c:	3f01      	subs	r7, #1
 801a24e:	1aba      	subs	r2, r7, r2
 801a250:	2700      	movs	r7, #0
 801a252:	b2d2      	uxtb	r2, r2
 801a254:	42b2      	cmp	r2, r6
 801a256:	d81a      	bhi.n	801a28e <uxr_framing_read_transport+0x66>
 801a258:	19d3      	adds	r3, r2, r7
 801a25a:	42b3      	cmp	r3, r6
 801a25c:	d852      	bhi.n	801a304 <uxr_framing_read_transport+0xdc>
 801a25e:	b9d2      	cbnz	r2, 801a296 <uxr_framing_read_transport+0x6e>
 801a260:	2600      	movs	r6, #0
 801a262:	f7f9 fd93 	bl	8013d8c <uxr_millis>
 801a266:	682b      	ldr	r3, [r5, #0]
 801a268:	eba0 0008 	sub.w	r0, r0, r8
 801a26c:	1a1b      	subs	r3, r3, r0
 801a26e:	4630      	mov	r0, r6
 801a270:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a274:	602b      	str	r3, [r5, #0]
 801a276:	b005      	add	sp, #20
 801a278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a27c:	2f00      	cmp	r7, #0
 801a27e:	d060      	beq.n	801a342 <uxr_framing_read_transport+0x11a>
 801a280:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 801a284:	3f01      	subs	r7, #1
 801a286:	b2d2      	uxtb	r2, r2
 801a288:	b2ff      	uxtb	r7, r7
 801a28a:	42b2      	cmp	r2, r6
 801a28c:	d9e4      	bls.n	801a258 <uxr_framing_read_transport+0x30>
 801a28e:	b2f2      	uxtb	r2, r6
 801a290:	2700      	movs	r7, #0
 801a292:	2a00      	cmp	r2, #0
 801a294:	d0e4      	beq.n	801a260 <uxr_framing_read_transport+0x38>
 801a296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a298:	4650      	mov	r0, sl
 801a29a:	9203      	str	r2, [sp, #12]
 801a29c:	9300      	str	r3, [sp, #0]
 801a29e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a2a2:	682b      	ldr	r3, [r5, #0]
 801a2a4:	3102      	adds	r1, #2
 801a2a6:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 801a34c <uxr_framing_read_transport+0x124>
 801a2aa:	4421      	add	r1, r4
 801a2ac:	47c8      	blx	r9
 801a2ae:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a2b2:	4606      	mov	r6, r0
 801a2b4:	4403      	add	r3, r0
 801a2b6:	0859      	lsrs	r1, r3, #1
 801a2b8:	fbab 2101 	umull	r2, r1, fp, r1
 801a2bc:	222a      	movs	r2, #42	@ 0x2a
 801a2be:	0889      	lsrs	r1, r1, #2
 801a2c0:	fb02 3111 	mls	r1, r2, r1, r3
 801a2c4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801a2c8:	2800      	cmp	r0, #0
 801a2ca:	d0c9      	beq.n	801a260 <uxr_framing_read_transport+0x38>
 801a2cc:	9a03      	ldr	r2, [sp, #12]
 801a2ce:	4290      	cmp	r0, r2
 801a2d0:	d1c7      	bne.n	801a262 <uxr_framing_read_transport+0x3a>
 801a2d2:	2f00      	cmp	r7, #0
 801a2d4:	d0c5      	beq.n	801a262 <uxr_framing_read_transport+0x3a>
 801a2d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a2d8:	3102      	adds	r1, #2
 801a2da:	463a      	mov	r2, r7
 801a2dc:	4650      	mov	r0, sl
 801a2de:	4421      	add	r1, r4
 801a2e0:	9300      	str	r3, [sp, #0]
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	47c8      	blx	r9
 801a2e6:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801a2ea:	4406      	add	r6, r0
 801a2ec:	1813      	adds	r3, r2, r0
 801a2ee:	085a      	lsrs	r2, r3, #1
 801a2f0:	fbab 1b02 	umull	r1, fp, fp, r2
 801a2f4:	222a      	movs	r2, #42	@ 0x2a
 801a2f6:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801a2fa:	fb02 331b 	mls	r3, r2, fp, r3
 801a2fe:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801a302:	e7ae      	b.n	801a262 <uxr_framing_read_transport+0x3a>
 801a304:	1ab6      	subs	r6, r6, r2
 801a306:	b2f7      	uxtb	r7, r6
 801a308:	e7a9      	b.n	801a25e <uxr_framing_read_transport+0x36>
 801a30a:	2300      	movs	r3, #0
 801a30c:	2e28      	cmp	r6, #40	@ 0x28
 801a30e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 801a310:	d9bd      	bls.n	801a28e <uxr_framing_read_transport+0x66>
 801a312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a314:	2229      	movs	r2, #41	@ 0x29
 801a316:	1ca1      	adds	r1, r4, #2
 801a318:	4650      	mov	r0, sl
 801a31a:	9300      	str	r3, [sp, #0]
 801a31c:	682b      	ldr	r3, [r5, #0]
 801a31e:	47c8      	blx	r9
 801a320:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a324:	4606      	mov	r6, r0
 801a326:	212a      	movs	r1, #42	@ 0x2a
 801a328:	4403      	add	r3, r0
 801a32a:	4808      	ldr	r0, [pc, #32]	@ (801a34c <uxr_framing_read_transport+0x124>)
 801a32c:	085a      	lsrs	r2, r3, #1
 801a32e:	fba0 0202 	umull	r0, r2, r0, r2
 801a332:	0892      	lsrs	r2, r2, #2
 801a334:	fb01 3312 	mls	r3, r1, r2, r3
 801a338:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801a33c:	2e00      	cmp	r6, #0
 801a33e:	d08f      	beq.n	801a260 <uxr_framing_read_transport+0x38>
 801a340:	e78f      	b.n	801a262 <uxr_framing_read_transport+0x3a>
 801a342:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 801a346:	b2d2      	uxtb	r2, r2
 801a348:	e784      	b.n	801a254 <uxr_framing_read_transport+0x2c>
 801a34a:	bf00      	nop
 801a34c:	30c30c31 	.word	0x30c30c31

0801a350 <uxr_read_framed_msg>:
 801a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a354:	461e      	mov	r6, r3
 801a356:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801a35a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801a35e:	b083      	sub	sp, #12
 801a360:	4604      	mov	r4, r0
 801a362:	4688      	mov	r8, r1
 801a364:	429d      	cmp	r5, r3
 801a366:	4691      	mov	r9, r2
 801a368:	f000 818c 	beq.w	801a684 <uxr_read_framed_msg+0x334>
 801a36c:	7823      	ldrb	r3, [r4, #0]
 801a36e:	4dc3      	ldr	r5, [pc, #780]	@ (801a67c <uxr_read_framed_msg+0x32c>)
 801a370:	4fc3      	ldr	r7, [pc, #780]	@ (801a680 <uxr_read_framed_msg+0x330>)
 801a372:	2b07      	cmp	r3, #7
 801a374:	d8fd      	bhi.n	801a372 <uxr_read_framed_msg+0x22>
 801a376:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a37a:	011c      	.short	0x011c
 801a37c:	00d900fb 	.word	0x00d900fb
 801a380:	008f00ba 	.word	0x008f00ba
 801a384:	00320051 	.word	0x00320051
 801a388:	0008      	.short	0x0008
 801a38a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a38e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a392:	4299      	cmp	r1, r3
 801a394:	f000 814d 	beq.w	801a632 <uxr_read_framed_msg+0x2e2>
 801a398:	18e2      	adds	r2, r4, r3
 801a39a:	7892      	ldrb	r2, [r2, #2]
 801a39c:	2a7d      	cmp	r2, #125	@ 0x7d
 801a39e:	f000 81b8 	beq.w	801a712 <uxr_read_framed_msg+0x3c2>
 801a3a2:	3301      	adds	r3, #1
 801a3a4:	212a      	movs	r1, #42	@ 0x2a
 801a3a6:	2a7e      	cmp	r2, #126	@ 0x7e
 801a3a8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801a3ac:	fba5 c000 	umull	ip, r0, r5, r0
 801a3b0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a3b4:	fb01 3310 	mls	r3, r1, r0, r3
 801a3b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a3bc:	f000 8257 	beq.w	801a86e <uxr_read_framed_msg+0x51e>
 801a3c0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801a3c2:	2000      	movs	r0, #0
 801a3c4:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801a3c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801a3ca:	7020      	strb	r0, [r4, #0]
 801a3cc:	b29b      	uxth	r3, r3
 801a3ce:	4299      	cmp	r1, r3
 801a3d0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801a3d2:	f000 8178 	beq.w	801a6c6 <uxr_read_framed_msg+0x376>
 801a3d6:	2000      	movs	r0, #0
 801a3d8:	b003      	add	sp, #12
 801a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3de:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801a3e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a3e6:	4298      	cmp	r0, r3
 801a3e8:	f000 8132 	beq.w	801a650 <uxr_read_framed_msg+0x300>
 801a3ec:	18e2      	adds	r2, r4, r3
 801a3ee:	7891      	ldrb	r1, [r2, #2]
 801a3f0:	297d      	cmp	r1, #125	@ 0x7d
 801a3f2:	f000 8170 	beq.w	801a6d6 <uxr_read_framed_msg+0x386>
 801a3f6:	3301      	adds	r3, #1
 801a3f8:	202a      	movs	r0, #42	@ 0x2a
 801a3fa:	297e      	cmp	r1, #126	@ 0x7e
 801a3fc:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a400:	fba5 c202 	umull	ip, r2, r5, r2
 801a404:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a408:	fb00 3312 	mls	r3, r0, r2, r3
 801a40c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a410:	f000 821d 	beq.w	801a84e <uxr_read_framed_msg+0x4fe>
 801a414:	2307      	movs	r3, #7
 801a416:	86a1      	strh	r1, [r4, #52]	@ 0x34
 801a418:	7023      	strb	r3, [r4, #0]
 801a41a:	e7aa      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a41c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801a41e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801a422:	459e      	cmp	lr, r3
 801a424:	d827      	bhi.n	801a476 <uxr_read_framed_msg+0x126>
 801a426:	e032      	b.n	801a48e <uxr_read_framed_msg+0x13e>
 801a428:	fba5 b101 	umull	fp, r1, r5, r1
 801a42c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801a430:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801a434:	0889      	lsrs	r1, r1, #2
 801a436:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801a43a:	fb0b 0111 	mls	r1, fp, r1, r0
 801a43e:	f000 80d4 	beq.w	801a5ea <uxr_read_framed_msg+0x29a>
 801a442:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801a446:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801a44a:	f000 80cb 	beq.w	801a5e4 <uxr_read_framed_msg+0x294>
 801a44e:	f806 c003 	strb.w	ip, [r6, r3]
 801a452:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801a454:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801a456:	ea80 010c 	eor.w	r1, r0, ip
 801a45a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801a45e:	3301      	adds	r3, #1
 801a460:	b2c9      	uxtb	r1, r1
 801a462:	b29b      	uxth	r3, r3
 801a464:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801a468:	4573      	cmp	r3, lr
 801a46a:	8663      	strh	r3, [r4, #50]	@ 0x32
 801a46c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801a470:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801a472:	f080 811d 	bcs.w	801a6b0 <uxr_read_framed_msg+0x360>
 801a476:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801a47a:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801a47e:	1c50      	adds	r0, r2, #1
 801a480:	eb04 0c02 	add.w	ip, r4, r2
 801a484:	4592      	cmp	sl, r2
 801a486:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801a48a:	d1cd      	bne.n	801a428 <uxr_read_framed_msg+0xd8>
 801a48c:	459e      	cmp	lr, r3
 801a48e:	f040 8114 	bne.w	801a6ba <uxr_read_framed_msg+0x36a>
 801a492:	2306      	movs	r3, #6
 801a494:	7023      	strb	r3, [r4, #0]
 801a496:	e76c      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a498:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801a49c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a4a0:	4298      	cmp	r0, r3
 801a4a2:	f000 80c6 	beq.w	801a632 <uxr_read_framed_msg+0x2e2>
 801a4a6:	18e2      	adds	r2, r4, r3
 801a4a8:	7891      	ldrb	r1, [r2, #2]
 801a4aa:	297d      	cmp	r1, #125	@ 0x7d
 801a4ac:	f000 8193 	beq.w	801a7d6 <uxr_read_framed_msg+0x486>
 801a4b0:	3301      	adds	r3, #1
 801a4b2:	202a      	movs	r0, #42	@ 0x2a
 801a4b4:	297e      	cmp	r1, #126	@ 0x7e
 801a4b6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a4ba:	fba5 c202 	umull	ip, r2, r5, r2
 801a4be:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a4c2:	fb00 3312 	mls	r3, r0, r2, r3
 801a4c6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a4ca:	f000 81d0 	beq.w	801a86e <uxr_read_framed_msg+0x51e>
 801a4ce:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801a4d0:	2000      	movs	r0, #0
 801a4d2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801a4d6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a4d8:	8660      	strh	r0, [r4, #50]	@ 0x32
 801a4da:	b29b      	uxth	r3, r3
 801a4dc:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801a4de:	428b      	cmp	r3, r1
 801a4e0:	8623      	strh	r3, [r4, #48]	@ 0x30
 801a4e2:	f240 80e2 	bls.w	801a6aa <uxr_read_framed_msg+0x35a>
 801a4e6:	7020      	strb	r0, [r4, #0]
 801a4e8:	b003      	add	sp, #12
 801a4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801a4f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a4f6:	4298      	cmp	r0, r3
 801a4f8:	f000 80aa 	beq.w	801a650 <uxr_read_framed_msg+0x300>
 801a4fc:	18e2      	adds	r2, r4, r3
 801a4fe:	7891      	ldrb	r1, [r2, #2]
 801a500:	297d      	cmp	r1, #125	@ 0x7d
 801a502:	f000 8186 	beq.w	801a812 <uxr_read_framed_msg+0x4c2>
 801a506:	3301      	adds	r3, #1
 801a508:	202a      	movs	r0, #42	@ 0x2a
 801a50a:	297e      	cmp	r1, #126	@ 0x7e
 801a50c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a510:	fba5 c202 	umull	ip, r2, r5, r2
 801a514:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a518:	fb00 3312 	mls	r3, r0, r2, r3
 801a51c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a520:	f000 8195 	beq.w	801a84e <uxr_read_framed_msg+0x4fe>
 801a524:	2304      	movs	r3, #4
 801a526:	8621      	strh	r1, [r4, #48]	@ 0x30
 801a528:	7023      	strb	r3, [r4, #0]
 801a52a:	e722      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a52c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801a530:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801a534:	4290      	cmp	r0, r2
 801a536:	f000 80b4 	beq.w	801a6a2 <uxr_read_framed_msg+0x352>
 801a53a:	18a3      	adds	r3, r4, r2
 801a53c:	7899      	ldrb	r1, [r3, #2]
 801a53e:	297d      	cmp	r1, #125	@ 0x7d
 801a540:	f000 8107 	beq.w	801a752 <uxr_read_framed_msg+0x402>
 801a544:	3201      	adds	r2, #1
 801a546:	232a      	movs	r3, #42	@ 0x2a
 801a548:	297e      	cmp	r1, #126	@ 0x7e
 801a54a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801a54e:	fba5 c000 	umull	ip, r0, r5, r0
 801a552:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a556:	fb03 2210 	mls	r2, r3, r0, r2
 801a55a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801a55e:	f000 818a 	beq.w	801a876 <uxr_read_framed_msg+0x526>
 801a562:	7863      	ldrb	r3, [r4, #1]
 801a564:	428b      	cmp	r3, r1
 801a566:	bf0c      	ite	eq
 801a568:	2303      	moveq	r3, #3
 801a56a:	2300      	movne	r3, #0
 801a56c:	7023      	strb	r3, [r4, #0]
 801a56e:	e700      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a570:	2300      	movs	r3, #0
 801a572:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a576:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801a57a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a57e:	4299      	cmp	r1, r3
 801a580:	d06a      	beq.n	801a658 <uxr_read_framed_msg+0x308>
 801a582:	18e2      	adds	r2, r4, r3
 801a584:	7890      	ldrb	r0, [r2, #2]
 801a586:	287d      	cmp	r0, #125	@ 0x7d
 801a588:	f000 8100 	beq.w	801a78c <uxr_read_framed_msg+0x43c>
 801a58c:	3301      	adds	r3, #1
 801a58e:	212a      	movs	r1, #42	@ 0x2a
 801a590:	287e      	cmp	r0, #126	@ 0x7e
 801a592:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801a596:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801a59a:	fba5 c202 	umull	ip, r2, r5, r2
 801a59e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a5a2:	fb01 3312 	mls	r3, r1, r2, r3
 801a5a6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a5aa:	d055      	beq.n	801a658 <uxr_read_framed_msg+0x308>
 801a5ac:	2302      	movs	r3, #2
 801a5ae:	7023      	strb	r3, [r4, #0]
 801a5b0:	e6df      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a5b2:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 801a5b6:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801a5ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801a5be:	1c5a      	adds	r2, r3, #1
 801a5c0:	459c      	cmp	ip, r3
 801a5c2:	eb04 0103 	add.w	r1, r4, r3
 801a5c6:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801a5ca:	f43f af04 	beq.w	801a3d6 <uxr_read_framed_msg+0x86>
 801a5ce:	fba5 0303 	umull	r0, r3, r5, r3
 801a5d2:	7889      	ldrb	r1, [r1, #2]
 801a5d4:	089b      	lsrs	r3, r3, #2
 801a5d6:	297e      	cmp	r1, #126	@ 0x7e
 801a5d8:	fb0e 2313 	mls	r3, lr, r3, r2
 801a5dc:	b2db      	uxtb	r3, r3
 801a5de:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a5e2:	d1ec      	bne.n	801a5be <uxr_read_framed_msg+0x26e>
 801a5e4:	2301      	movs	r3, #1
 801a5e6:	7023      	strb	r3, [r4, #0]
 801a5e8:	e6c3      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a5ea:	1c50      	adds	r0, r2, #1
 801a5ec:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 801a5f0:	3202      	adds	r2, #2
 801a5f2:	0841      	lsrs	r1, r0, #1
 801a5f4:	fba5 c101 	umull	ip, r1, r5, r1
 801a5f8:	0889      	lsrs	r1, r1, #2
 801a5fa:	fb0b 0111 	mls	r1, fp, r1, r0
 801a5fe:	1860      	adds	r0, r4, r1
 801a600:	b2c9      	uxtb	r1, r1
 801a602:	458a      	cmp	sl, r1
 801a604:	f43f af42 	beq.w	801a48c <uxr_read_framed_msg+0x13c>
 801a608:	0851      	lsrs	r1, r2, #1
 801a60a:	7880      	ldrb	r0, [r0, #2]
 801a60c:	fba5 a101 	umull	sl, r1, r5, r1
 801a610:	287e      	cmp	r0, #126	@ 0x7e
 801a612:	f080 0c20 	eor.w	ip, r0, #32
 801a616:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a61a:	fb0b 2211 	mls	r2, fp, r1, r2
 801a61e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801a622:	f47f af14 	bne.w	801a44e <uxr_read_framed_msg+0xfe>
 801a626:	459e      	cmp	lr, r3
 801a628:	f43f af33 	beq.w	801a492 <uxr_read_framed_msg+0x142>
 801a62c:	2301      	movs	r3, #1
 801a62e:	7023      	strb	r3, [r4, #0]
 801a630:	e69f      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a632:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a634:	9300      	str	r3, [sp, #0]
 801a636:	2301      	movs	r3, #1
 801a638:	9301      	str	r3, [sp, #4]
 801a63a:	464a      	mov	r2, r9
 801a63c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a63e:	4641      	mov	r1, r8
 801a640:	4620      	mov	r0, r4
 801a642:	f7ff fdf1 	bl	801a228 <uxr_framing_read_transport>
 801a646:	2800      	cmp	r0, #0
 801a648:	f43f aec5 	beq.w	801a3d6 <uxr_read_framed_msg+0x86>
 801a64c:	7823      	ldrb	r3, [r4, #0]
 801a64e:	e690      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a652:	9300      	str	r3, [sp, #0]
 801a654:	2302      	movs	r3, #2
 801a656:	e7ef      	b.n	801a638 <uxr_read_framed_msg+0x2e8>
 801a658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a65a:	464a      	mov	r2, r9
 801a65c:	4641      	mov	r1, r8
 801a65e:	4620      	mov	r0, r4
 801a660:	9300      	str	r3, [sp, #0]
 801a662:	2304      	movs	r3, #4
 801a664:	9301      	str	r3, [sp, #4]
 801a666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a668:	f7ff fdde 	bl	801a228 <uxr_framing_read_transport>
 801a66c:	2800      	cmp	r0, #0
 801a66e:	d1ed      	bne.n	801a64c <uxr_read_framed_msg+0x2fc>
 801a670:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801a674:	2b7e      	cmp	r3, #126	@ 0x7e
 801a676:	d0e9      	beq.n	801a64c <uxr_read_framed_msg+0x2fc>
 801a678:	e6ad      	b.n	801a3d6 <uxr_read_framed_msg+0x86>
 801a67a:	bf00      	nop
 801a67c:	30c30c31 	.word	0x30c30c31
 801a680:	0801d288 	.word	0x0801d288
 801a684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a686:	9300      	str	r3, [sp, #0]
 801a688:	2305      	movs	r3, #5
 801a68a:	9301      	str	r3, [sp, #4]
 801a68c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a68e:	f7ff fdcb 	bl	801a228 <uxr_framing_read_transport>
 801a692:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801a696:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a69a:	429a      	cmp	r2, r3
 801a69c:	f43f ae9b 	beq.w	801a3d6 <uxr_read_framed_msg+0x86>
 801a6a0:	e664      	b.n	801a36c <uxr_read_framed_msg+0x1c>
 801a6a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a6a4:	9300      	str	r3, [sp, #0]
 801a6a6:	2303      	movs	r3, #3
 801a6a8:	e7c6      	b.n	801a638 <uxr_read_framed_msg+0x2e8>
 801a6aa:	2305      	movs	r3, #5
 801a6ac:	7023      	strb	r3, [r4, #0]
 801a6ae:	e660      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a6b0:	f43f aeef 	beq.w	801a492 <uxr_read_framed_msg+0x142>
 801a6b4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801a6b8:	d094      	beq.n	801a5e4 <uxr_read_framed_msg+0x294>
 801a6ba:	ebae 0303 	sub.w	r3, lr, r3
 801a6be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a6c0:	3302      	adds	r3, #2
 801a6c2:	9200      	str	r2, [sp, #0]
 801a6c4:	e7b8      	b.n	801a638 <uxr_read_framed_msg+0x2e8>
 801a6c6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801a6ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a6cc:	7013      	strb	r3, [r2, #0]
 801a6ce:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801a6d0:	b003      	add	sp, #12
 801a6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6d6:	1c59      	adds	r1, r3, #1
 801a6d8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a6dc:	084a      	lsrs	r2, r1, #1
 801a6de:	fba5 e202 	umull	lr, r2, r5, r2
 801a6e2:	0892      	lsrs	r2, r2, #2
 801a6e4:	fb0c 1212 	mls	r2, ip, r2, r1
 801a6e8:	b2d1      	uxtb	r1, r2
 801a6ea:	4288      	cmp	r0, r1
 801a6ec:	d0b0      	beq.n	801a650 <uxr_read_framed_msg+0x300>
 801a6ee:	3302      	adds	r3, #2
 801a6f0:	4422      	add	r2, r4
 801a6f2:	7891      	ldrb	r1, [r2, #2]
 801a6f4:	085a      	lsrs	r2, r3, #1
 801a6f6:	fba5 0202 	umull	r0, r2, r5, r2
 801a6fa:	297e      	cmp	r1, #126	@ 0x7e
 801a6fc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a700:	fb0c 3312 	mls	r3, ip, r2, r3
 801a704:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a708:	f000 80a1 	beq.w	801a84e <uxr_read_framed_msg+0x4fe>
 801a70c:	f081 0120 	eor.w	r1, r1, #32
 801a710:	e680      	b.n	801a414 <uxr_read_framed_msg+0xc4>
 801a712:	f103 0c01 	add.w	ip, r3, #1
 801a716:	202a      	movs	r0, #42	@ 0x2a
 801a718:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a71c:	fba5 e202 	umull	lr, r2, r5, r2
 801a720:	0892      	lsrs	r2, r2, #2
 801a722:	fb00 c212 	mls	r2, r0, r2, ip
 801a726:	fa5f fc82 	uxtb.w	ip, r2
 801a72a:	4561      	cmp	r1, ip
 801a72c:	d081      	beq.n	801a632 <uxr_read_framed_msg+0x2e2>
 801a72e:	3302      	adds	r3, #2
 801a730:	4422      	add	r2, r4
 801a732:	0859      	lsrs	r1, r3, #1
 801a734:	7892      	ldrb	r2, [r2, #2]
 801a736:	fba5 c101 	umull	ip, r1, r5, r1
 801a73a:	2a7e      	cmp	r2, #126	@ 0x7e
 801a73c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801a740:	fb00 3311 	mls	r3, r0, r1, r3
 801a744:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a748:	f000 8091 	beq.w	801a86e <uxr_read_framed_msg+0x51e>
 801a74c:	f082 0220 	eor.w	r2, r2, #32
 801a750:	e636      	b.n	801a3c0 <uxr_read_framed_msg+0x70>
 801a752:	1c51      	adds	r1, r2, #1
 801a754:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a758:	084b      	lsrs	r3, r1, #1
 801a75a:	fba5 e303 	umull	lr, r3, r5, r3
 801a75e:	089b      	lsrs	r3, r3, #2
 801a760:	fb0c 1313 	mls	r3, ip, r3, r1
 801a764:	b2d9      	uxtb	r1, r3
 801a766:	4288      	cmp	r0, r1
 801a768:	d09b      	beq.n	801a6a2 <uxr_read_framed_msg+0x352>
 801a76a:	3202      	adds	r2, #2
 801a76c:	4423      	add	r3, r4
 801a76e:	0850      	lsrs	r0, r2, #1
 801a770:	789b      	ldrb	r3, [r3, #2]
 801a772:	fba5 1000 	umull	r1, r0, r5, r0
 801a776:	2b7e      	cmp	r3, #126	@ 0x7e
 801a778:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801a77c:	fb0c 2210 	mls	r2, ip, r0, r2
 801a780:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801a784:	d077      	beq.n	801a876 <uxr_read_framed_msg+0x526>
 801a786:	f083 0120 	eor.w	r1, r3, #32
 801a78a:	e6ea      	b.n	801a562 <uxr_read_framed_msg+0x212>
 801a78c:	f103 0c01 	add.w	ip, r3, #1
 801a790:	202a      	movs	r0, #42	@ 0x2a
 801a792:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a796:	fba5 e202 	umull	lr, r2, r5, r2
 801a79a:	0892      	lsrs	r2, r2, #2
 801a79c:	fb00 c212 	mls	r2, r0, r2, ip
 801a7a0:	fa5f fc82 	uxtb.w	ip, r2
 801a7a4:	4561      	cmp	r1, ip
 801a7a6:	f43f af57 	beq.w	801a658 <uxr_read_framed_msg+0x308>
 801a7aa:	3302      	adds	r3, #2
 801a7ac:	4422      	add	r2, r4
 801a7ae:	7891      	ldrb	r1, [r2, #2]
 801a7b0:	085a      	lsrs	r2, r3, #1
 801a7b2:	fba5 c202 	umull	ip, r2, r5, r2
 801a7b6:	297e      	cmp	r1, #126	@ 0x7e
 801a7b8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801a7bc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a7c0:	fb00 3312 	mls	r3, r0, r2, r3
 801a7c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a7c8:	f43f af46 	beq.w	801a658 <uxr_read_framed_msg+0x308>
 801a7cc:	f081 0120 	eor.w	r1, r1, #32
 801a7d0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801a7d4:	e6ea      	b.n	801a5ac <uxr_read_framed_msg+0x25c>
 801a7d6:	1c59      	adds	r1, r3, #1
 801a7d8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a7dc:	084a      	lsrs	r2, r1, #1
 801a7de:	fba5 e202 	umull	lr, r2, r5, r2
 801a7e2:	0892      	lsrs	r2, r2, #2
 801a7e4:	fb0c 1212 	mls	r2, ip, r2, r1
 801a7e8:	b2d1      	uxtb	r1, r2
 801a7ea:	4288      	cmp	r0, r1
 801a7ec:	f43f af21 	beq.w	801a632 <uxr_read_framed_msg+0x2e2>
 801a7f0:	3302      	adds	r3, #2
 801a7f2:	4422      	add	r2, r4
 801a7f4:	7891      	ldrb	r1, [r2, #2]
 801a7f6:	085a      	lsrs	r2, r3, #1
 801a7f8:	fba5 0202 	umull	r0, r2, r5, r2
 801a7fc:	297e      	cmp	r1, #126	@ 0x7e
 801a7fe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a802:	fb0c 3312 	mls	r3, ip, r2, r3
 801a806:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a80a:	d030      	beq.n	801a86e <uxr_read_framed_msg+0x51e>
 801a80c:	f081 0120 	eor.w	r1, r1, #32
 801a810:	e65d      	b.n	801a4ce <uxr_read_framed_msg+0x17e>
 801a812:	1c59      	adds	r1, r3, #1
 801a814:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801a818:	084a      	lsrs	r2, r1, #1
 801a81a:	fba5 e202 	umull	lr, r2, r5, r2
 801a81e:	0892      	lsrs	r2, r2, #2
 801a820:	fb0c 1212 	mls	r2, ip, r2, r1
 801a824:	b2d1      	uxtb	r1, r2
 801a826:	4288      	cmp	r0, r1
 801a828:	f43f af12 	beq.w	801a650 <uxr_read_framed_msg+0x300>
 801a82c:	3302      	adds	r3, #2
 801a82e:	4422      	add	r2, r4
 801a830:	7891      	ldrb	r1, [r2, #2]
 801a832:	085a      	lsrs	r2, r3, #1
 801a834:	fba5 0202 	umull	r0, r2, r5, r2
 801a838:	297e      	cmp	r1, #126	@ 0x7e
 801a83a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801a83e:	fb0c 3312 	mls	r3, ip, r2, r3
 801a842:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801a846:	d002      	beq.n	801a84e <uxr_read_framed_msg+0x4fe>
 801a848:	f081 0120 	eor.w	r1, r1, #32
 801a84c:	e66a      	b.n	801a524 <uxr_read_framed_msg+0x1d4>
 801a84e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a850:	9300      	str	r3, [sp, #0]
 801a852:	2302      	movs	r3, #2
 801a854:	9301      	str	r3, [sp, #4]
 801a856:	464a      	mov	r2, r9
 801a858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a85a:	4641      	mov	r1, r8
 801a85c:	4620      	mov	r0, r4
 801a85e:	f7ff fce3 	bl	801a228 <uxr_framing_read_transport>
 801a862:	2800      	cmp	r0, #0
 801a864:	f47f aef2 	bne.w	801a64c <uxr_read_framed_msg+0x2fc>
 801a868:	2301      	movs	r3, #1
 801a86a:	7023      	strb	r3, [r4, #0]
 801a86c:	e581      	b.n	801a372 <uxr_read_framed_msg+0x22>
 801a86e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a870:	9300      	str	r3, [sp, #0]
 801a872:	2301      	movs	r3, #1
 801a874:	e7ee      	b.n	801a854 <uxr_read_framed_msg+0x504>
 801a876:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a878:	9300      	str	r3, [sp, #0]
 801a87a:	2303      	movs	r3, #3
 801a87c:	e7ea      	b.n	801a854 <uxr_read_framed_msg+0x504>
 801a87e:	bf00      	nop

0801a880 <rcl_get_default_domain_id>:
 801a880:	b530      	push	{r4, r5, lr}
 801a882:	2300      	movs	r3, #0
 801a884:	b083      	sub	sp, #12
 801a886:	9300      	str	r3, [sp, #0]
 801a888:	b1d0      	cbz	r0, 801a8c0 <rcl_get_default_domain_id+0x40>
 801a88a:	4604      	mov	r4, r0
 801a88c:	4669      	mov	r1, sp
 801a88e:	4815      	ldr	r0, [pc, #84]	@ (801a8e4 <rcl_get_default_domain_id+0x64>)
 801a890:	f7f6 f956 	bl	8010b40 <rcutils_get_env>
 801a894:	4602      	mov	r2, r0
 801a896:	b110      	cbz	r0, 801a89e <rcl_get_default_domain_id+0x1e>
 801a898:	2001      	movs	r0, #1
 801a89a:	b003      	add	sp, #12
 801a89c:	bd30      	pop	{r4, r5, pc}
 801a89e:	9b00      	ldr	r3, [sp, #0]
 801a8a0:	b18b      	cbz	r3, 801a8c6 <rcl_get_default_domain_id+0x46>
 801a8a2:	7818      	ldrb	r0, [r3, #0]
 801a8a4:	2800      	cmp	r0, #0
 801a8a6:	d0f8      	beq.n	801a89a <rcl_get_default_domain_id+0x1a>
 801a8a8:	a901      	add	r1, sp, #4
 801a8aa:	4618      	mov	r0, r3
 801a8ac:	9201      	str	r2, [sp, #4]
 801a8ae:	f000 fd89 	bl	801b3c4 <strtoul>
 801a8b2:	4605      	mov	r5, r0
 801a8b4:	b150      	cbz	r0, 801a8cc <rcl_get_default_domain_id+0x4c>
 801a8b6:	1c43      	adds	r3, r0, #1
 801a8b8:	d00d      	beq.n	801a8d6 <rcl_get_default_domain_id+0x56>
 801a8ba:	2000      	movs	r0, #0
 801a8bc:	6025      	str	r5, [r4, #0]
 801a8be:	e7ec      	b.n	801a89a <rcl_get_default_domain_id+0x1a>
 801a8c0:	200b      	movs	r0, #11
 801a8c2:	b003      	add	sp, #12
 801a8c4:	bd30      	pop	{r4, r5, pc}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	b003      	add	sp, #12
 801a8ca:	bd30      	pop	{r4, r5, pc}
 801a8cc:	9b01      	ldr	r3, [sp, #4]
 801a8ce:	781b      	ldrb	r3, [r3, #0]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d0f2      	beq.n	801a8ba <rcl_get_default_domain_id+0x3a>
 801a8d4:	e7e0      	b.n	801a898 <rcl_get_default_domain_id+0x18>
 801a8d6:	f000 ffc1 	bl	801b85c <__errno>
 801a8da:	6803      	ldr	r3, [r0, #0]
 801a8dc:	2b22      	cmp	r3, #34	@ 0x22
 801a8de:	d1ec      	bne.n	801a8ba <rcl_get_default_domain_id+0x3a>
 801a8e0:	e7da      	b.n	801a898 <rcl_get_default_domain_id+0x18>
 801a8e2:	bf00      	nop
 801a8e4:	0801d488 	.word	0x0801d488

0801a8e8 <rcl_expand_topic_name>:
 801a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8ec:	b08d      	sub	sp, #52	@ 0x34
 801a8ee:	4698      	mov	r8, r3
 801a8f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a8f2:	9207      	str	r2, [sp, #28]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	bf18      	it	ne
 801a8f8:	f1b8 0f00 	cmpne.w	r8, #0
 801a8fc:	bf0c      	ite	eq
 801a8fe:	2301      	moveq	r3, #1
 801a900:	2300      	movne	r3, #0
 801a902:	2a00      	cmp	r2, #0
 801a904:	bf08      	it	eq
 801a906:	f043 0301 	orreq.w	r3, r3, #1
 801a90a:	2900      	cmp	r1, #0
 801a90c:	bf08      	it	eq
 801a90e:	f043 0301 	orreq.w	r3, r3, #1
 801a912:	2b00      	cmp	r3, #0
 801a914:	d13d      	bne.n	801a992 <rcl_expand_topic_name+0xaa>
 801a916:	fab0 f280 	clz	r2, r0
 801a91a:	4604      	mov	r4, r0
 801a91c:	0952      	lsrs	r2, r2, #5
 801a91e:	2800      	cmp	r0, #0
 801a920:	d037      	beq.n	801a992 <rcl_expand_topic_name+0xaa>
 801a922:	460f      	mov	r7, r1
 801a924:	a90b      	add	r1, sp, #44	@ 0x2c
 801a926:	f000 f945 	bl	801abb4 <rcl_validate_topic_name>
 801a92a:	4605      	mov	r5, r0
 801a92c:	bb68      	cbnz	r0, 801a98a <rcl_expand_topic_name+0xa2>
 801a92e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a930:	2b00      	cmp	r3, #0
 801a932:	d137      	bne.n	801a9a4 <rcl_expand_topic_name+0xbc>
 801a934:	4602      	mov	r2, r0
 801a936:	a90b      	add	r1, sp, #44	@ 0x2c
 801a938:	4638      	mov	r0, r7
 801a93a:	f7f6 fb87 	bl	801104c <rmw_validate_node_name>
 801a93e:	bb68      	cbnz	r0, 801a99c <rcl_expand_topic_name+0xb4>
 801a940:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a942:	2b00      	cmp	r3, #0
 801a944:	d133      	bne.n	801a9ae <rcl_expand_topic_name+0xc6>
 801a946:	462a      	mov	r2, r5
 801a948:	a90b      	add	r1, sp, #44	@ 0x2c
 801a94a:	9807      	ldr	r0, [sp, #28]
 801a94c:	f7f6 fb60 	bl	8011010 <rmw_validate_namespace>
 801a950:	bb20      	cbnz	r0, 801a99c <rcl_expand_topic_name+0xb4>
 801a952:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801a954:	2d00      	cmp	r5, #0
 801a956:	f040 80a2 	bne.w	801aa9e <rcl_expand_topic_name+0x1b6>
 801a95a:	217b      	movs	r1, #123	@ 0x7b
 801a95c:	4620      	mov	r0, r4
 801a95e:	f000 fef1 	bl	801b744 <strchr>
 801a962:	7823      	ldrb	r3, [r4, #0]
 801a964:	4681      	mov	r9, r0
 801a966:	bb20      	cbnz	r0, 801a9b2 <rcl_expand_topic_name+0xca>
 801a968:	2b2f      	cmp	r3, #47	@ 0x2f
 801a96a:	d122      	bne.n	801a9b2 <rcl_expand_topic_name+0xca>
 801a96c:	ab19      	add	r3, sp, #100	@ 0x64
 801a96e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a972:	ab16      	add	r3, sp, #88	@ 0x58
 801a974:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a978:	4620      	mov	r0, r4
 801a97a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a97c:	f7f6 fa66 	bl	8010e4c <rcutils_strdup>
 801a980:	2800      	cmp	r0, #0
 801a982:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801a984:	bf08      	it	eq
 801a986:	250a      	moveq	r5, #10
 801a988:	6018      	str	r0, [r3, #0]
 801a98a:	4628      	mov	r0, r5
 801a98c:	b00d      	add	sp, #52	@ 0x34
 801a98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a992:	250b      	movs	r5, #11
 801a994:	4628      	mov	r0, r5
 801a996:	b00d      	add	sp, #52	@ 0x34
 801a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a99c:	f7fa fcca 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 801a9a0:	4605      	mov	r5, r0
 801a9a2:	e7f2      	b.n	801a98a <rcl_expand_topic_name+0xa2>
 801a9a4:	2567      	movs	r5, #103	@ 0x67
 801a9a6:	4628      	mov	r0, r5
 801a9a8:	b00d      	add	sp, #52	@ 0x34
 801a9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9ae:	25c9      	movs	r5, #201	@ 0xc9
 801a9b0:	e7eb      	b.n	801a98a <rcl_expand_topic_name+0xa2>
 801a9b2:	2b7e      	cmp	r3, #126	@ 0x7e
 801a9b4:	d075      	beq.n	801aaa2 <rcl_expand_topic_name+0x1ba>
 801a9b6:	f1b9 0f00 	cmp.w	r9, #0
 801a9ba:	f000 80c2 	beq.w	801ab42 <rcl_expand_topic_name+0x25a>
 801a9be:	2300      	movs	r3, #0
 801a9c0:	46a2      	mov	sl, r4
 801a9c2:	461e      	mov	r6, r3
 801a9c4:	9508      	str	r5, [sp, #32]
 801a9c6:	4655      	mov	r5, sl
 801a9c8:	9409      	str	r4, [sp, #36]	@ 0x24
 801a9ca:	46b2      	mov	sl, r6
 801a9cc:	464c      	mov	r4, r9
 801a9ce:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a9d2:	2c00      	cmp	r4, #0
 801a9d4:	f000 80ae 	beq.w	801ab34 <rcl_expand_topic_name+0x24c>
 801a9d8:	217d      	movs	r1, #125	@ 0x7d
 801a9da:	4628      	mov	r0, r5
 801a9dc:	f000 feb2 	bl	801b744 <strchr>
 801a9e0:	eba0 0904 	sub.w	r9, r0, r4
 801a9e4:	4621      	mov	r1, r4
 801a9e6:	4869      	ldr	r0, [pc, #420]	@ (801ab8c <rcl_expand_topic_name+0x2a4>)
 801a9e8:	f109 0601 	add.w	r6, r9, #1
 801a9ec:	4632      	mov	r2, r6
 801a9ee:	f000 feb6 	bl	801b75e <strncmp>
 801a9f2:	2800      	cmp	r0, #0
 801a9f4:	d051      	beq.n	801aa9a <rcl_expand_topic_name+0x1b2>
 801a9f6:	4632      	mov	r2, r6
 801a9f8:	4621      	mov	r1, r4
 801a9fa:	4865      	ldr	r0, [pc, #404]	@ (801ab90 <rcl_expand_topic_name+0x2a8>)
 801a9fc:	f000 feaf 	bl	801b75e <strncmp>
 801aa00:	b128      	cbz	r0, 801aa0e <rcl_expand_topic_name+0x126>
 801aa02:	4632      	mov	r2, r6
 801aa04:	4621      	mov	r1, r4
 801aa06:	4863      	ldr	r0, [pc, #396]	@ (801ab94 <rcl_expand_topic_name+0x2ac>)
 801aa08:	f000 fea9 	bl	801b75e <strncmp>
 801aa0c:	bb38      	cbnz	r0, 801aa5e <rcl_expand_topic_name+0x176>
 801aa0e:	46d9      	mov	r9, fp
 801aa10:	ab18      	add	r3, sp, #96	@ 0x60
 801aa12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801aa16:	ab16      	add	r3, sp, #88	@ 0x58
 801aa18:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801aa1c:	4620      	mov	r0, r4
 801aa1e:	4631      	mov	r1, r6
 801aa20:	cb0c      	ldmia	r3, {r2, r3}
 801aa22:	f7f6 fa35 	bl	8010e90 <rcutils_strndup>
 801aa26:	4604      	mov	r4, r0
 801aa28:	2800      	cmp	r0, #0
 801aa2a:	f000 80a3 	beq.w	801ab74 <rcl_expand_topic_name+0x28c>
 801aa2e:	464a      	mov	r2, r9
 801aa30:	4628      	mov	r0, r5
 801aa32:	ab16      	add	r3, sp, #88	@ 0x58
 801aa34:	4621      	mov	r1, r4
 801aa36:	f7f6 f909 	bl	8010c4c <rcutils_repl_str>
 801aa3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aa3c:	4605      	mov	r5, r0
 801aa3e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aa40:	4620      	mov	r0, r4
 801aa42:	4798      	blx	r3
 801aa44:	4650      	mov	r0, sl
 801aa46:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aa48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aa4a:	4798      	blx	r3
 801aa4c:	2d00      	cmp	r5, #0
 801aa4e:	d06c      	beq.n	801ab2a <rcl_expand_topic_name+0x242>
 801aa50:	217b      	movs	r1, #123	@ 0x7b
 801aa52:	4628      	mov	r0, r5
 801aa54:	f000 fe76 	bl	801b744 <strchr>
 801aa58:	46aa      	mov	sl, r5
 801aa5a:	4604      	mov	r4, r0
 801aa5c:	e7b9      	b.n	801a9d2 <rcl_expand_topic_name+0xea>
 801aa5e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801aa62:	1c61      	adds	r1, r4, #1
 801aa64:	4640      	mov	r0, r8
 801aa66:	f7fd fa7b 	bl	8017f60 <rcutils_string_map_getn>
 801aa6a:	4681      	mov	r9, r0
 801aa6c:	2800      	cmp	r0, #0
 801aa6e:	d1cf      	bne.n	801aa10 <rcl_expand_topic_name+0x128>
 801aa70:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801aa72:	aa18      	add	r2, sp, #96	@ 0x60
 801aa74:	2569      	movs	r5, #105	@ 0x69
 801aa76:	6018      	str	r0, [r3, #0]
 801aa78:	ab16      	add	r3, sp, #88	@ 0x58
 801aa7a:	ca07      	ldmia	r2, {r0, r1, r2}
 801aa7c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801aa80:	4631      	mov	r1, r6
 801aa82:	4620      	mov	r0, r4
 801aa84:	cb0c      	ldmia	r3, {r2, r3}
 801aa86:	f7f6 fa03 	bl	8010e90 <rcutils_strndup>
 801aa8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aa8c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aa8e:	4798      	blx	r3
 801aa90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aa92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aa94:	4650      	mov	r0, sl
 801aa96:	4798      	blx	r3
 801aa98:	e777      	b.n	801a98a <rcl_expand_topic_name+0xa2>
 801aa9a:	46b9      	mov	r9, r7
 801aa9c:	e7b8      	b.n	801aa10 <rcl_expand_topic_name+0x128>
 801aa9e:	25ca      	movs	r5, #202	@ 0xca
 801aaa0:	e773      	b.n	801a98a <rcl_expand_topic_name+0xa2>
 801aaa2:	9e07      	ldr	r6, [sp, #28]
 801aaa4:	4630      	mov	r0, r6
 801aaa6:	f7e5 fbd5 	bl	8000254 <strlen>
 801aaaa:	4a3b      	ldr	r2, [pc, #236]	@ (801ab98 <rcl_expand_topic_name+0x2b0>)
 801aaac:	4b3b      	ldr	r3, [pc, #236]	@ (801ab9c <rcl_expand_topic_name+0x2b4>)
 801aaae:	9603      	str	r6, [sp, #12]
 801aab0:	2801      	cmp	r0, #1
 801aab2:	bf18      	it	ne
 801aab4:	4613      	movne	r3, r2
 801aab6:	9704      	str	r7, [sp, #16]
 801aab8:	9302      	str	r3, [sp, #8]
 801aaba:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801aabc:	9300      	str	r3, [sp, #0]
 801aabe:	1c63      	adds	r3, r4, #1
 801aac0:	9305      	str	r3, [sp, #20]
 801aac2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aac6:	9301      	str	r3, [sp, #4]
 801aac8:	ab16      	add	r3, sp, #88	@ 0x58
 801aaca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aacc:	f7f6 f884 	bl	8010bd8 <rcutils_format_string_limit>
 801aad0:	4606      	mov	r6, r0
 801aad2:	b350      	cbz	r0, 801ab2a <rcl_expand_topic_name+0x242>
 801aad4:	f1b9 0f00 	cmp.w	r9, #0
 801aad8:	d005      	beq.n	801aae6 <rcl_expand_topic_name+0x1fe>
 801aada:	217b      	movs	r1, #123	@ 0x7b
 801aadc:	46b2      	mov	sl, r6
 801aade:	f000 fe31 	bl	801b744 <strchr>
 801aae2:	4681      	mov	r9, r0
 801aae4:	e76e      	b.n	801a9c4 <rcl_expand_topic_name+0xdc>
 801aae6:	7833      	ldrb	r3, [r6, #0]
 801aae8:	2b2f      	cmp	r3, #47	@ 0x2f
 801aaea:	d01b      	beq.n	801ab24 <rcl_expand_topic_name+0x23c>
 801aaec:	9c07      	ldr	r4, [sp, #28]
 801aaee:	4620      	mov	r0, r4
 801aaf0:	f7e5 fbb0 	bl	8000254 <strlen>
 801aaf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aaf8:	4a29      	ldr	r2, [pc, #164]	@ (801aba0 <rcl_expand_topic_name+0x2b8>)
 801aafa:	9301      	str	r3, [sp, #4]
 801aafc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801aafe:	9604      	str	r6, [sp, #16]
 801ab00:	9300      	str	r3, [sp, #0]
 801ab02:	4b28      	ldr	r3, [pc, #160]	@ (801aba4 <rcl_expand_topic_name+0x2bc>)
 801ab04:	9403      	str	r4, [sp, #12]
 801ab06:	2801      	cmp	r0, #1
 801ab08:	bf18      	it	ne
 801ab0a:	4613      	movne	r3, r2
 801ab0c:	9302      	str	r3, [sp, #8]
 801ab0e:	ab16      	add	r3, sp, #88	@ 0x58
 801ab10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ab12:	f7f6 f861 	bl	8010bd8 <rcutils_format_string_limit>
 801ab16:	4603      	mov	r3, r0
 801ab18:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801ab1a:	4630      	mov	r0, r6
 801ab1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ab1e:	461e      	mov	r6, r3
 801ab20:	4790      	blx	r2
 801ab22:	b116      	cbz	r6, 801ab2a <rcl_expand_topic_name+0x242>
 801ab24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ab26:	601e      	str	r6, [r3, #0]
 801ab28:	e72f      	b.n	801a98a <rcl_expand_topic_name+0xa2>
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ab2e:	250a      	movs	r5, #10
 801ab30:	6013      	str	r3, [r2, #0]
 801ab32:	e72a      	b.n	801a98a <rcl_expand_topic_name+0xa2>
 801ab34:	4653      	mov	r3, sl
 801ab36:	4656      	mov	r6, sl
 801ab38:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d1d2      	bne.n	801aae6 <rcl_expand_topic_name+0x1fe>
 801ab40:	7823      	ldrb	r3, [r4, #0]
 801ab42:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab44:	d01e      	beq.n	801ab84 <rcl_expand_topic_name+0x29c>
 801ab46:	9e07      	ldr	r6, [sp, #28]
 801ab48:	4630      	mov	r0, r6
 801ab4a:	f7e5 fb83 	bl	8000254 <strlen>
 801ab4e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ab50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ab54:	9603      	str	r6, [sp, #12]
 801ab56:	9404      	str	r4, [sp, #16]
 801ab58:	e9cd 2300 	strd	r2, r3, [sp]
 801ab5c:	4a10      	ldr	r2, [pc, #64]	@ (801aba0 <rcl_expand_topic_name+0x2b8>)
 801ab5e:	4b11      	ldr	r3, [pc, #68]	@ (801aba4 <rcl_expand_topic_name+0x2bc>)
 801ab60:	2801      	cmp	r0, #1
 801ab62:	bf18      	it	ne
 801ab64:	4613      	movne	r3, r2
 801ab66:	9302      	str	r3, [sp, #8]
 801ab68:	ab16      	add	r3, sp, #88	@ 0x58
 801ab6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ab6c:	f7f6 f834 	bl	8010bd8 <rcutils_format_string_limit>
 801ab70:	4606      	mov	r6, r0
 801ab72:	e7d6      	b.n	801ab22 <rcl_expand_topic_name+0x23a>
 801ab74:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801ab78:	4650      	mov	r0, sl
 801ab7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ab7c:	6014      	str	r4, [r2, #0]
 801ab7e:	250a      	movs	r5, #10
 801ab80:	4798      	blx	r3
 801ab82:	e702      	b.n	801a98a <rcl_expand_topic_name+0xa2>
 801ab84:	2300      	movs	r3, #0
 801ab86:	461e      	mov	r6, r3
 801ab88:	e7cc      	b.n	801ab24 <rcl_expand_topic_name+0x23c>
 801ab8a:	bf00      	nop
 801ab8c:	0801d4a0 	.word	0x0801d4a0
 801ab90:	0801d4a8 	.word	0x0801d4a8
 801ab94:	0801d4b0 	.word	0x0801d4b0
 801ab98:	0801d498 	.word	0x0801d498
 801ab9c:	0801ced4 	.word	0x0801ced4
 801aba0:	0801c9d0 	.word	0x0801c9d0
 801aba4:	0801c9c8 	.word	0x0801c9c8

0801aba8 <rcl_get_default_topic_name_substitutions>:
 801aba8:	2800      	cmp	r0, #0
 801abaa:	bf0c      	ite	eq
 801abac:	200b      	moveq	r0, #11
 801abae:	2000      	movne	r0, #0
 801abb0:	4770      	bx	lr
 801abb2:	bf00      	nop

0801abb4 <rcl_validate_topic_name>:
 801abb4:	2800      	cmp	r0, #0
 801abb6:	f000 8089 	beq.w	801accc <rcl_validate_topic_name+0x118>
 801abba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abbe:	460e      	mov	r6, r1
 801abc0:	2900      	cmp	r1, #0
 801abc2:	f000 8085 	beq.w	801acd0 <rcl_validate_topic_name+0x11c>
 801abc6:	4604      	mov	r4, r0
 801abc8:	4617      	mov	r7, r2
 801abca:	f7e5 fb43 	bl	8000254 <strlen>
 801abce:	b1b0      	cbz	r0, 801abfe <rcl_validate_topic_name+0x4a>
 801abd0:	f894 e000 	ldrb.w	lr, [r4]
 801abd4:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801ad38 <rcl_validate_topic_name+0x184>
 801abd8:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801abdc:	f013 0304 	ands.w	r3, r3, #4
 801abe0:	d139      	bne.n	801ac56 <rcl_validate_topic_name+0xa2>
 801abe2:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801abe6:	f814 2008 	ldrb.w	r2, [r4, r8]
 801abea:	2a2f      	cmp	r2, #47	@ 0x2f
 801abec:	d10f      	bne.n	801ac0e <rcl_validate_topic_name+0x5a>
 801abee:	2202      	movs	r2, #2
 801abf0:	6032      	str	r2, [r6, #0]
 801abf2:	b3a7      	cbz	r7, 801ac5e <rcl_validate_topic_name+0xaa>
 801abf4:	4618      	mov	r0, r3
 801abf6:	f8c7 8000 	str.w	r8, [r7]
 801abfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abfe:	2301      	movs	r3, #1
 801ac00:	6033      	str	r3, [r6, #0]
 801ac02:	b367      	cbz	r7, 801ac5e <rcl_validate_topic_name+0xaa>
 801ac04:	2300      	movs	r3, #0
 801ac06:	4618      	mov	r0, r3
 801ac08:	603b      	str	r3, [r7, #0]
 801ac0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac0e:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801ac12:	461d      	mov	r5, r3
 801ac14:	4619      	mov	r1, r3
 801ac16:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ac1a:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801ac1e:	f1b9 0f09 	cmp.w	r9, #9
 801ac22:	d91f      	bls.n	801ac64 <rcl_validate_topic_name+0xb0>
 801ac24:	f022 0920 	bic.w	r9, r2, #32
 801ac28:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801ac2c:	f1b9 0f19 	cmp.w	r9, #25
 801ac30:	d918      	bls.n	801ac64 <rcl_validate_topic_name+0xb0>
 801ac32:	2a5f      	cmp	r2, #95	@ 0x5f
 801ac34:	d024      	beq.n	801ac80 <rcl_validate_topic_name+0xcc>
 801ac36:	2a2f      	cmp	r2, #47	@ 0x2f
 801ac38:	d058      	beq.n	801acec <rcl_validate_topic_name+0x138>
 801ac3a:	2a7e      	cmp	r2, #126	@ 0x7e
 801ac3c:	d04a      	beq.n	801acd4 <rcl_validate_topic_name+0x120>
 801ac3e:	2a7b      	cmp	r2, #123	@ 0x7b
 801ac40:	d05b      	beq.n	801acfa <rcl_validate_topic_name+0x146>
 801ac42:	2a7d      	cmp	r2, #125	@ 0x7d
 801ac44:	d169      	bne.n	801ad1a <rcl_validate_topic_name+0x166>
 801ac46:	2d00      	cmp	r5, #0
 801ac48:	d15c      	bne.n	801ad04 <rcl_validate_topic_name+0x150>
 801ac4a:	2305      	movs	r3, #5
 801ac4c:	6033      	str	r3, [r6, #0]
 801ac4e:	b137      	cbz	r7, 801ac5e <rcl_validate_topic_name+0xaa>
 801ac50:	2000      	movs	r0, #0
 801ac52:	6039      	str	r1, [r7, #0]
 801ac54:	e7d9      	b.n	801ac0a <rcl_validate_topic_name+0x56>
 801ac56:	2304      	movs	r3, #4
 801ac58:	6033      	str	r3, [r6, #0]
 801ac5a:	2f00      	cmp	r7, #0
 801ac5c:	d1d2      	bne.n	801ac04 <rcl_validate_topic_name+0x50>
 801ac5e:	2000      	movs	r0, #0
 801ac60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac64:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ac68:	0752      	lsls	r2, r2, #29
 801ac6a:	d509      	bpl.n	801ac80 <rcl_validate_topic_name+0xcc>
 801ac6c:	2900      	cmp	r1, #0
 801ac6e:	bf0c      	ite	eq
 801ac70:	2200      	moveq	r2, #0
 801ac72:	f005 0201 	andne.w	r2, r5, #1
 801ac76:	b11a      	cbz	r2, 801ac80 <rcl_validate_topic_name+0xcc>
 801ac78:	1e4d      	subs	r5, r1, #1
 801ac7a:	429d      	cmp	r5, r3
 801ac7c:	d031      	beq.n	801ace2 <rcl_validate_topic_name+0x12e>
 801ac7e:	4615      	mov	r5, r2
 801ac80:	3101      	adds	r1, #1
 801ac82:	4288      	cmp	r0, r1
 801ac84:	d1c7      	bne.n	801ac16 <rcl_validate_topic_name+0x62>
 801ac86:	2d00      	cmp	r5, #0
 801ac88:	d142      	bne.n	801ad10 <rcl_validate_topic_name+0x15c>
 801ac8a:	4628      	mov	r0, r5
 801ac8c:	2301      	movs	r3, #1
 801ac8e:	e00c      	b.n	801acaa <rcl_validate_topic_name+0xf6>
 801ac90:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801ac94:	d101      	bne.n	801ac9a <rcl_validate_topic_name+0xe6>
 801ac96:	2801      	cmp	r0, #1
 801ac98:	d047      	beq.n	801ad2a <rcl_validate_topic_name+0x176>
 801ac9a:	1c5a      	adds	r2, r3, #1
 801ac9c:	428b      	cmp	r3, r1
 801ac9e:	f100 0001 	add.w	r0, r0, #1
 801aca2:	f104 0401 	add.w	r4, r4, #1
 801aca6:	4613      	mov	r3, r2
 801aca8:	d22e      	bcs.n	801ad08 <rcl_validate_topic_name+0x154>
 801acaa:	4580      	cmp	r8, r0
 801acac:	d0f5      	beq.n	801ac9a <rcl_validate_topic_name+0xe6>
 801acae:	7822      	ldrb	r2, [r4, #0]
 801acb0:	2a2f      	cmp	r2, #47	@ 0x2f
 801acb2:	d1ed      	bne.n	801ac90 <rcl_validate_topic_name+0xdc>
 801acb4:	7862      	ldrb	r2, [r4, #1]
 801acb6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801acba:	0752      	lsls	r2, r2, #29
 801acbc:	d5ed      	bpl.n	801ac9a <rcl_validate_topic_name+0xe6>
 801acbe:	2204      	movs	r2, #4
 801acc0:	6032      	str	r2, [r6, #0]
 801acc2:	2f00      	cmp	r7, #0
 801acc4:	d0cb      	beq.n	801ac5e <rcl_validate_topic_name+0xaa>
 801acc6:	2000      	movs	r0, #0
 801acc8:	603b      	str	r3, [r7, #0]
 801acca:	e79e      	b.n	801ac0a <rcl_validate_topic_name+0x56>
 801accc:	200b      	movs	r0, #11
 801acce:	4770      	bx	lr
 801acd0:	200b      	movs	r0, #11
 801acd2:	e79a      	b.n	801ac0a <rcl_validate_topic_name+0x56>
 801acd4:	2900      	cmp	r1, #0
 801acd6:	d0d3      	beq.n	801ac80 <rcl_validate_topic_name+0xcc>
 801acd8:	2306      	movs	r3, #6
 801acda:	6033      	str	r3, [r6, #0]
 801acdc:	2f00      	cmp	r7, #0
 801acde:	d1b7      	bne.n	801ac50 <rcl_validate_topic_name+0x9c>
 801ace0:	e7bd      	b.n	801ac5e <rcl_validate_topic_name+0xaa>
 801ace2:	2309      	movs	r3, #9
 801ace4:	6033      	str	r3, [r6, #0]
 801ace6:	2f00      	cmp	r7, #0
 801ace8:	d1b2      	bne.n	801ac50 <rcl_validate_topic_name+0x9c>
 801acea:	e7b8      	b.n	801ac5e <rcl_validate_topic_name+0xaa>
 801acec:	2d00      	cmp	r5, #0
 801acee:	d0c7      	beq.n	801ac80 <rcl_validate_topic_name+0xcc>
 801acf0:	2308      	movs	r3, #8
 801acf2:	6033      	str	r3, [r6, #0]
 801acf4:	2f00      	cmp	r7, #0
 801acf6:	d1ab      	bne.n	801ac50 <rcl_validate_topic_name+0x9c>
 801acf8:	e7b1      	b.n	801ac5e <rcl_validate_topic_name+0xaa>
 801acfa:	2d00      	cmp	r5, #0
 801acfc:	d1f8      	bne.n	801acf0 <rcl_validate_topic_name+0x13c>
 801acfe:	460b      	mov	r3, r1
 801ad00:	2501      	movs	r5, #1
 801ad02:	e7bd      	b.n	801ac80 <rcl_validate_topic_name+0xcc>
 801ad04:	2500      	movs	r5, #0
 801ad06:	e7bb      	b.n	801ac80 <rcl_validate_topic_name+0xcc>
 801ad08:	2300      	movs	r3, #0
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	6033      	str	r3, [r6, #0]
 801ad0e:	e77c      	b.n	801ac0a <rcl_validate_topic_name+0x56>
 801ad10:	2205      	movs	r2, #5
 801ad12:	6032      	str	r2, [r6, #0]
 801ad14:	2f00      	cmp	r7, #0
 801ad16:	d1d6      	bne.n	801acc6 <rcl_validate_topic_name+0x112>
 801ad18:	e7a1      	b.n	801ac5e <rcl_validate_topic_name+0xaa>
 801ad1a:	2d00      	cmp	r5, #0
 801ad1c:	bf14      	ite	ne
 801ad1e:	2308      	movne	r3, #8
 801ad20:	2303      	moveq	r3, #3
 801ad22:	6033      	str	r3, [r6, #0]
 801ad24:	2f00      	cmp	r7, #0
 801ad26:	d193      	bne.n	801ac50 <rcl_validate_topic_name+0x9c>
 801ad28:	e799      	b.n	801ac5e <rcl_validate_topic_name+0xaa>
 801ad2a:	2307      	movs	r3, #7
 801ad2c:	6033      	str	r3, [r6, #0]
 801ad2e:	2f00      	cmp	r7, #0
 801ad30:	d095      	beq.n	801ac5e <rcl_validate_topic_name+0xaa>
 801ad32:	2301      	movs	r3, #1
 801ad34:	e7c7      	b.n	801acc6 <rcl_validate_topic_name+0x112>
 801ad36:	bf00      	nop
 801ad38:	0801d52c 	.word	0x0801d52c

0801ad3c <rcutils_string_array_fini>:
 801ad3c:	b328      	cbz	r0, 801ad8a <rcutils_string_array_fini+0x4e>
 801ad3e:	b570      	push	{r4, r5, r6, lr}
 801ad40:	4604      	mov	r4, r0
 801ad42:	6840      	ldr	r0, [r0, #4]
 801ad44:	b1e0      	cbz	r0, 801ad80 <rcutils_string_array_fini+0x44>
 801ad46:	f104 0008 	add.w	r0, r4, #8
 801ad4a:	f7f5 feeb 	bl	8010b24 <rcutils_allocator_is_valid>
 801ad4e:	b1c0      	cbz	r0, 801ad82 <rcutils_string_array_fini+0x46>
 801ad50:	6823      	ldr	r3, [r4, #0]
 801ad52:	b1c3      	cbz	r3, 801ad86 <rcutils_string_array_fini+0x4a>
 801ad54:	2500      	movs	r5, #0
 801ad56:	6860      	ldr	r0, [r4, #4]
 801ad58:	462e      	mov	r6, r5
 801ad5a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ad5e:	68e3      	ldr	r3, [r4, #12]
 801ad60:	69a1      	ldr	r1, [r4, #24]
 801ad62:	4798      	blx	r3
 801ad64:	e9d4 3000 	ldrd	r3, r0, [r4]
 801ad68:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801ad6c:	3501      	adds	r5, #1
 801ad6e:	429d      	cmp	r5, r3
 801ad70:	d3f3      	bcc.n	801ad5a <rcutils_string_array_fini+0x1e>
 801ad72:	68e3      	ldr	r3, [r4, #12]
 801ad74:	69a1      	ldr	r1, [r4, #24]
 801ad76:	4798      	blx	r3
 801ad78:	2300      	movs	r3, #0
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	e9c4 3300 	strd	r3, r3, [r4]
 801ad80:	bd70      	pop	{r4, r5, r6, pc}
 801ad82:	200b      	movs	r0, #11
 801ad84:	bd70      	pop	{r4, r5, r6, pc}
 801ad86:	6860      	ldr	r0, [r4, #4]
 801ad88:	e7f3      	b.n	801ad72 <rcutils_string_array_fini+0x36>
 801ad8a:	200b      	movs	r0, #11
 801ad8c:	4770      	bx	lr
 801ad8e:	bf00      	nop

0801ad90 <on_status>:
 801ad90:	b082      	sub	sp, #8
 801ad92:	b002      	add	sp, #8
 801ad94:	4770      	bx	lr
 801ad96:	bf00      	nop

0801ad98 <on_topic>:
 801ad98:	4a23      	ldr	r2, [pc, #140]	@ (801ae28 <on_topic+0x90>)
 801ad9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad9e:	6812      	ldr	r2, [r2, #0]
 801ada0:	b094      	sub	sp, #80	@ 0x50
 801ada2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801ada4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801ada8:	9113      	str	r1, [sp, #76]	@ 0x4c
 801adaa:	9312      	str	r3, [sp, #72]	@ 0x48
 801adac:	b3c2      	cbz	r2, 801ae20 <on_topic+0x88>
 801adae:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801adb2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801adb6:	e001      	b.n	801adbc <on_topic+0x24>
 801adb8:	6852      	ldr	r2, [r2, #4]
 801adba:	b38a      	cbz	r2, 801ae20 <on_topic+0x88>
 801adbc:	6894      	ldr	r4, [r2, #8]
 801adbe:	8aa3      	ldrh	r3, [r4, #20]
 801adc0:	428b      	cmp	r3, r1
 801adc2:	d1f9      	bne.n	801adb8 <on_topic+0x20>
 801adc4:	7da3      	ldrb	r3, [r4, #22]
 801adc6:	4283      	cmp	r3, r0
 801adc8:	d1f6      	bne.n	801adb8 <on_topic+0x20>
 801adca:	2248      	movs	r2, #72	@ 0x48
 801adcc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801add0:	4668      	mov	r0, sp
 801add2:	f000 fd78 	bl	801b8c6 <memcpy>
 801add6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801adda:	4620      	mov	r0, r4
 801addc:	cb0c      	ldmia	r3, {r2, r3}
 801adde:	f7f7 f803 	bl	8011de8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ade2:	4607      	mov	r7, r0
 801ade4:	b1e0      	cbz	r0, 801ae20 <on_topic+0x88>
 801ade6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801adea:	462a      	mov	r2, r5
 801adec:	4630      	mov	r0, r6
 801adee:	f108 0110 	add.w	r1, r8, #16
 801adf2:	f7fe f9c9 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 801adf6:	b930      	cbnz	r0, 801ae06 <on_topic+0x6e>
 801adf8:	4639      	mov	r1, r7
 801adfa:	480c      	ldr	r0, [pc, #48]	@ (801ae2c <on_topic+0x94>)
 801adfc:	b014      	add	sp, #80	@ 0x50
 801adfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae02:	f7fd ba45 	b.w	8018290 <put_memory>
 801ae06:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801ae0a:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801ae0e:	f7fe f8dd 	bl	8018fcc <rmw_uros_epoch_nanos>
 801ae12:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801ae16:	2305      	movs	r3, #5
 801ae18:	e942 0102 	strd	r0, r1, [r2, #-8]
 801ae1c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801ae20:	b014      	add	sp, #80	@ 0x50
 801ae22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae26:	bf00      	nop
 801ae28:	20012754 	.word	0x20012754
 801ae2c:	20012744 	.word	0x20012744

0801ae30 <on_request>:
 801ae30:	4824      	ldr	r0, [pc, #144]	@ (801aec4 <on_request+0x94>)
 801ae32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae36:	6800      	ldr	r0, [r0, #0]
 801ae38:	b094      	sub	sp, #80	@ 0x50
 801ae3a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801ae3c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801ae40:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ae42:	2800      	cmp	r0, #0
 801ae44:	d03b      	beq.n	801aebe <on_request+0x8e>
 801ae46:	461d      	mov	r5, r3
 801ae48:	e001      	b.n	801ae4e <on_request+0x1e>
 801ae4a:	6840      	ldr	r0, [r0, #4]
 801ae4c:	b3b8      	cbz	r0, 801aebe <on_request+0x8e>
 801ae4e:	6884      	ldr	r4, [r0, #8]
 801ae50:	8b21      	ldrh	r1, [r4, #24]
 801ae52:	4291      	cmp	r1, r2
 801ae54:	d1f9      	bne.n	801ae4a <on_request+0x1a>
 801ae56:	2248      	movs	r2, #72	@ 0x48
 801ae58:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801ae5c:	4668      	mov	r0, sp
 801ae5e:	f000 fd32 	bl	801b8c6 <memcpy>
 801ae62:	f104 0320 	add.w	r3, r4, #32
 801ae66:	4620      	mov	r0, r4
 801ae68:	cb0c      	ldmia	r3, {r2, r3}
 801ae6a:	f7f6 ffbd 	bl	8011de8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ae6e:	4680      	mov	r8, r0
 801ae70:	b328      	cbz	r0, 801aebe <on_request+0x8e>
 801ae72:	4630      	mov	r0, r6
 801ae74:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801ae78:	463a      	mov	r2, r7
 801ae7a:	f106 0110 	add.w	r1, r6, #16
 801ae7e:	f7fe f983 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 801ae82:	b930      	cbnz	r0, 801ae92 <on_request+0x62>
 801ae84:	4641      	mov	r1, r8
 801ae86:	4810      	ldr	r0, [pc, #64]	@ (801aec8 <on_request+0x98>)
 801ae88:	b014      	add	sp, #80	@ 0x50
 801ae8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae8e:	f7fd b9ff 	b.w	8018290 <put_memory>
 801ae92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ae94:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801ae98:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801ae9c:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801aea0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aea4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801aea8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aeac:	f7fe f88e 	bl	8018fcc <rmw_uros_epoch_nanos>
 801aeb0:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801aeb4:	2303      	movs	r3, #3
 801aeb6:	e942 0102 	strd	r0, r1, [r2, #-8]
 801aeba:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801aebe:	b014      	add	sp, #80	@ 0x50
 801aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aec4:	20012724 	.word	0x20012724
 801aec8:	20012744 	.word	0x20012744

0801aecc <on_reply>:
 801aecc:	4822      	ldr	r0, [pc, #136]	@ (801af58 <on_reply+0x8c>)
 801aece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aed2:	6800      	ldr	r0, [r0, #0]
 801aed4:	b094      	sub	sp, #80	@ 0x50
 801aed6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801aed8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801aedc:	9113      	str	r1, [sp, #76]	@ 0x4c
 801aede:	b3b8      	cbz	r0, 801af50 <on_reply+0x84>
 801aee0:	461d      	mov	r5, r3
 801aee2:	e001      	b.n	801aee8 <on_reply+0x1c>
 801aee4:	6840      	ldr	r0, [r0, #4]
 801aee6:	b398      	cbz	r0, 801af50 <on_reply+0x84>
 801aee8:	6884      	ldr	r4, [r0, #8]
 801aeea:	8b21      	ldrh	r1, [r4, #24]
 801aeec:	4291      	cmp	r1, r2
 801aeee:	d1f9      	bne.n	801aee4 <on_reply+0x18>
 801aef0:	2248      	movs	r2, #72	@ 0x48
 801aef2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801aef6:	4668      	mov	r0, sp
 801aef8:	f000 fce5 	bl	801b8c6 <memcpy>
 801aefc:	f104 0320 	add.w	r3, r4, #32
 801af00:	4620      	mov	r0, r4
 801af02:	cb0c      	ldmia	r3, {r2, r3}
 801af04:	f7f6 ff70 	bl	8011de8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801af08:	4680      	mov	r8, r0
 801af0a:	b308      	cbz	r0, 801af50 <on_reply+0x84>
 801af0c:	4630      	mov	r0, r6
 801af0e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801af12:	463a      	mov	r2, r7
 801af14:	f106 0110 	add.w	r1, r6, #16
 801af18:	f7fe f936 	bl	8019188 <ucdr_deserialize_array_uint8_t>
 801af1c:	b930      	cbnz	r0, 801af2c <on_reply+0x60>
 801af1e:	4641      	mov	r1, r8
 801af20:	480e      	ldr	r0, [pc, #56]	@ (801af5c <on_reply+0x90>)
 801af22:	b014      	add	sp, #80	@ 0x50
 801af24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af28:	f7fd b9b2 	b.w	8018290 <put_memory>
 801af2c:	2200      	movs	r2, #0
 801af2e:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801af32:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801af36:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801af3a:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801af3e:	f7fe f845 	bl	8018fcc <rmw_uros_epoch_nanos>
 801af42:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801af46:	2304      	movs	r3, #4
 801af48:	e942 0102 	strd	r0, r1, [r2, #-8]
 801af4c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801af50:	b014      	add	sp, #80	@ 0x50
 801af52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af56:	bf00      	nop
 801af58:	2000de34 	.word	0x2000de34
 801af5c:	20012744 	.word	0x20012744

0801af60 <calloc>:
 801af60:	4b02      	ldr	r3, [pc, #8]	@ (801af6c <calloc+0xc>)
 801af62:	460a      	mov	r2, r1
 801af64:	4601      	mov	r1, r0
 801af66:	6818      	ldr	r0, [r3, #0]
 801af68:	f000 b802 	b.w	801af70 <_calloc_r>
 801af6c:	20000368 	.word	0x20000368

0801af70 <_calloc_r>:
 801af70:	b570      	push	{r4, r5, r6, lr}
 801af72:	fba1 5402 	umull	r5, r4, r1, r2
 801af76:	b93c      	cbnz	r4, 801af88 <_calloc_r+0x18>
 801af78:	4629      	mov	r1, r5
 801af7a:	f000 f887 	bl	801b08c <_malloc_r>
 801af7e:	4606      	mov	r6, r0
 801af80:	b928      	cbnz	r0, 801af8e <_calloc_r+0x1e>
 801af82:	2600      	movs	r6, #0
 801af84:	4630      	mov	r0, r6
 801af86:	bd70      	pop	{r4, r5, r6, pc}
 801af88:	220c      	movs	r2, #12
 801af8a:	6002      	str	r2, [r0, #0]
 801af8c:	e7f9      	b.n	801af82 <_calloc_r+0x12>
 801af8e:	462a      	mov	r2, r5
 801af90:	4621      	mov	r1, r4
 801af92:	f000 fbcf 	bl	801b734 <memset>
 801af96:	e7f5      	b.n	801af84 <_calloc_r+0x14>

0801af98 <getenv>:
 801af98:	b507      	push	{r0, r1, r2, lr}
 801af9a:	4b04      	ldr	r3, [pc, #16]	@ (801afac <getenv+0x14>)
 801af9c:	4601      	mov	r1, r0
 801af9e:	aa01      	add	r2, sp, #4
 801afa0:	6818      	ldr	r0, [r3, #0]
 801afa2:	f000 f805 	bl	801afb0 <_findenv_r>
 801afa6:	b003      	add	sp, #12
 801afa8:	f85d fb04 	ldr.w	pc, [sp], #4
 801afac:	20000368 	.word	0x20000368

0801afb0 <_findenv_r>:
 801afb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afb4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801b024 <_findenv_r+0x74>
 801afb8:	4606      	mov	r6, r0
 801afba:	4689      	mov	r9, r1
 801afbc:	4617      	mov	r7, r2
 801afbe:	f000 fcaf 	bl	801b920 <__env_lock>
 801afc2:	f8da 4000 	ldr.w	r4, [sl]
 801afc6:	b134      	cbz	r4, 801afd6 <_findenv_r+0x26>
 801afc8:	464b      	mov	r3, r9
 801afca:	4698      	mov	r8, r3
 801afcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801afd0:	b13a      	cbz	r2, 801afe2 <_findenv_r+0x32>
 801afd2:	2a3d      	cmp	r2, #61	@ 0x3d
 801afd4:	d1f9      	bne.n	801afca <_findenv_r+0x1a>
 801afd6:	4630      	mov	r0, r6
 801afd8:	f000 fca8 	bl	801b92c <__env_unlock>
 801afdc:	2000      	movs	r0, #0
 801afde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afe2:	eba8 0809 	sub.w	r8, r8, r9
 801afe6:	46a3      	mov	fp, r4
 801afe8:	f854 0b04 	ldr.w	r0, [r4], #4
 801afec:	2800      	cmp	r0, #0
 801afee:	d0f2      	beq.n	801afd6 <_findenv_r+0x26>
 801aff0:	4642      	mov	r2, r8
 801aff2:	4649      	mov	r1, r9
 801aff4:	f000 fbb3 	bl	801b75e <strncmp>
 801aff8:	2800      	cmp	r0, #0
 801affa:	d1f4      	bne.n	801afe6 <_findenv_r+0x36>
 801affc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b000:	eb03 0508 	add.w	r5, r3, r8
 801b004:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b008:	2b3d      	cmp	r3, #61	@ 0x3d
 801b00a:	d1ec      	bne.n	801afe6 <_findenv_r+0x36>
 801b00c:	f8da 3000 	ldr.w	r3, [sl]
 801b010:	ebab 0303 	sub.w	r3, fp, r3
 801b014:	109b      	asrs	r3, r3, #2
 801b016:	4630      	mov	r0, r6
 801b018:	603b      	str	r3, [r7, #0]
 801b01a:	f000 fc87 	bl	801b92c <__env_unlock>
 801b01e:	1c68      	adds	r0, r5, #1
 801b020:	e7dd      	b.n	801afde <_findenv_r+0x2e>
 801b022:	bf00      	nop
 801b024:	20000000 	.word	0x20000000

0801b028 <malloc>:
 801b028:	4b02      	ldr	r3, [pc, #8]	@ (801b034 <malloc+0xc>)
 801b02a:	4601      	mov	r1, r0
 801b02c:	6818      	ldr	r0, [r3, #0]
 801b02e:	f000 b82d 	b.w	801b08c <_malloc_r>
 801b032:	bf00      	nop
 801b034:	20000368 	.word	0x20000368

0801b038 <free>:
 801b038:	4b02      	ldr	r3, [pc, #8]	@ (801b044 <free+0xc>)
 801b03a:	4601      	mov	r1, r0
 801b03c:	6818      	ldr	r0, [r3, #0]
 801b03e:	f000 bc7b 	b.w	801b938 <_free_r>
 801b042:	bf00      	nop
 801b044:	20000368 	.word	0x20000368

0801b048 <sbrk_aligned>:
 801b048:	b570      	push	{r4, r5, r6, lr}
 801b04a:	4e0f      	ldr	r6, [pc, #60]	@ (801b088 <sbrk_aligned+0x40>)
 801b04c:	460c      	mov	r4, r1
 801b04e:	6831      	ldr	r1, [r6, #0]
 801b050:	4605      	mov	r5, r0
 801b052:	b911      	cbnz	r1, 801b05a <sbrk_aligned+0x12>
 801b054:	f000 fbe0 	bl	801b818 <_sbrk_r>
 801b058:	6030      	str	r0, [r6, #0]
 801b05a:	4621      	mov	r1, r4
 801b05c:	4628      	mov	r0, r5
 801b05e:	f000 fbdb 	bl	801b818 <_sbrk_r>
 801b062:	1c43      	adds	r3, r0, #1
 801b064:	d103      	bne.n	801b06e <sbrk_aligned+0x26>
 801b066:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b06a:	4620      	mov	r0, r4
 801b06c:	bd70      	pop	{r4, r5, r6, pc}
 801b06e:	1cc4      	adds	r4, r0, #3
 801b070:	f024 0403 	bic.w	r4, r4, #3
 801b074:	42a0      	cmp	r0, r4
 801b076:	d0f8      	beq.n	801b06a <sbrk_aligned+0x22>
 801b078:	1a21      	subs	r1, r4, r0
 801b07a:	4628      	mov	r0, r5
 801b07c:	f000 fbcc 	bl	801b818 <_sbrk_r>
 801b080:	3001      	adds	r0, #1
 801b082:	d1f2      	bne.n	801b06a <sbrk_aligned+0x22>
 801b084:	e7ef      	b.n	801b066 <sbrk_aligned+0x1e>
 801b086:	bf00      	nop
 801b088:	200128d0 	.word	0x200128d0

0801b08c <_malloc_r>:
 801b08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b090:	1ccd      	adds	r5, r1, #3
 801b092:	f025 0503 	bic.w	r5, r5, #3
 801b096:	3508      	adds	r5, #8
 801b098:	2d0c      	cmp	r5, #12
 801b09a:	bf38      	it	cc
 801b09c:	250c      	movcc	r5, #12
 801b09e:	2d00      	cmp	r5, #0
 801b0a0:	4606      	mov	r6, r0
 801b0a2:	db01      	blt.n	801b0a8 <_malloc_r+0x1c>
 801b0a4:	42a9      	cmp	r1, r5
 801b0a6:	d904      	bls.n	801b0b2 <_malloc_r+0x26>
 801b0a8:	230c      	movs	r3, #12
 801b0aa:	6033      	str	r3, [r6, #0]
 801b0ac:	2000      	movs	r0, #0
 801b0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b188 <_malloc_r+0xfc>
 801b0b6:	f000 f869 	bl	801b18c <__malloc_lock>
 801b0ba:	f8d8 3000 	ldr.w	r3, [r8]
 801b0be:	461c      	mov	r4, r3
 801b0c0:	bb44      	cbnz	r4, 801b114 <_malloc_r+0x88>
 801b0c2:	4629      	mov	r1, r5
 801b0c4:	4630      	mov	r0, r6
 801b0c6:	f7ff ffbf 	bl	801b048 <sbrk_aligned>
 801b0ca:	1c43      	adds	r3, r0, #1
 801b0cc:	4604      	mov	r4, r0
 801b0ce:	d158      	bne.n	801b182 <_malloc_r+0xf6>
 801b0d0:	f8d8 4000 	ldr.w	r4, [r8]
 801b0d4:	4627      	mov	r7, r4
 801b0d6:	2f00      	cmp	r7, #0
 801b0d8:	d143      	bne.n	801b162 <_malloc_r+0xd6>
 801b0da:	2c00      	cmp	r4, #0
 801b0dc:	d04b      	beq.n	801b176 <_malloc_r+0xea>
 801b0de:	6823      	ldr	r3, [r4, #0]
 801b0e0:	4639      	mov	r1, r7
 801b0e2:	4630      	mov	r0, r6
 801b0e4:	eb04 0903 	add.w	r9, r4, r3
 801b0e8:	f000 fb96 	bl	801b818 <_sbrk_r>
 801b0ec:	4581      	cmp	r9, r0
 801b0ee:	d142      	bne.n	801b176 <_malloc_r+0xea>
 801b0f0:	6821      	ldr	r1, [r4, #0]
 801b0f2:	1a6d      	subs	r5, r5, r1
 801b0f4:	4629      	mov	r1, r5
 801b0f6:	4630      	mov	r0, r6
 801b0f8:	f7ff ffa6 	bl	801b048 <sbrk_aligned>
 801b0fc:	3001      	adds	r0, #1
 801b0fe:	d03a      	beq.n	801b176 <_malloc_r+0xea>
 801b100:	6823      	ldr	r3, [r4, #0]
 801b102:	442b      	add	r3, r5
 801b104:	6023      	str	r3, [r4, #0]
 801b106:	f8d8 3000 	ldr.w	r3, [r8]
 801b10a:	685a      	ldr	r2, [r3, #4]
 801b10c:	bb62      	cbnz	r2, 801b168 <_malloc_r+0xdc>
 801b10e:	f8c8 7000 	str.w	r7, [r8]
 801b112:	e00f      	b.n	801b134 <_malloc_r+0xa8>
 801b114:	6822      	ldr	r2, [r4, #0]
 801b116:	1b52      	subs	r2, r2, r5
 801b118:	d420      	bmi.n	801b15c <_malloc_r+0xd0>
 801b11a:	2a0b      	cmp	r2, #11
 801b11c:	d917      	bls.n	801b14e <_malloc_r+0xc2>
 801b11e:	1961      	adds	r1, r4, r5
 801b120:	42a3      	cmp	r3, r4
 801b122:	6025      	str	r5, [r4, #0]
 801b124:	bf18      	it	ne
 801b126:	6059      	strne	r1, [r3, #4]
 801b128:	6863      	ldr	r3, [r4, #4]
 801b12a:	bf08      	it	eq
 801b12c:	f8c8 1000 	streq.w	r1, [r8]
 801b130:	5162      	str	r2, [r4, r5]
 801b132:	604b      	str	r3, [r1, #4]
 801b134:	4630      	mov	r0, r6
 801b136:	f000 f82f 	bl	801b198 <__malloc_unlock>
 801b13a:	f104 000b 	add.w	r0, r4, #11
 801b13e:	1d23      	adds	r3, r4, #4
 801b140:	f020 0007 	bic.w	r0, r0, #7
 801b144:	1ac2      	subs	r2, r0, r3
 801b146:	bf1c      	itt	ne
 801b148:	1a1b      	subne	r3, r3, r0
 801b14a:	50a3      	strne	r3, [r4, r2]
 801b14c:	e7af      	b.n	801b0ae <_malloc_r+0x22>
 801b14e:	6862      	ldr	r2, [r4, #4]
 801b150:	42a3      	cmp	r3, r4
 801b152:	bf0c      	ite	eq
 801b154:	f8c8 2000 	streq.w	r2, [r8]
 801b158:	605a      	strne	r2, [r3, #4]
 801b15a:	e7eb      	b.n	801b134 <_malloc_r+0xa8>
 801b15c:	4623      	mov	r3, r4
 801b15e:	6864      	ldr	r4, [r4, #4]
 801b160:	e7ae      	b.n	801b0c0 <_malloc_r+0x34>
 801b162:	463c      	mov	r4, r7
 801b164:	687f      	ldr	r7, [r7, #4]
 801b166:	e7b6      	b.n	801b0d6 <_malloc_r+0x4a>
 801b168:	461a      	mov	r2, r3
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	42a3      	cmp	r3, r4
 801b16e:	d1fb      	bne.n	801b168 <_malloc_r+0xdc>
 801b170:	2300      	movs	r3, #0
 801b172:	6053      	str	r3, [r2, #4]
 801b174:	e7de      	b.n	801b134 <_malloc_r+0xa8>
 801b176:	230c      	movs	r3, #12
 801b178:	6033      	str	r3, [r6, #0]
 801b17a:	4630      	mov	r0, r6
 801b17c:	f000 f80c 	bl	801b198 <__malloc_unlock>
 801b180:	e794      	b.n	801b0ac <_malloc_r+0x20>
 801b182:	6005      	str	r5, [r0, #0]
 801b184:	e7d6      	b.n	801b134 <_malloc_r+0xa8>
 801b186:	bf00      	nop
 801b188:	200128d4 	.word	0x200128d4

0801b18c <__malloc_lock>:
 801b18c:	4801      	ldr	r0, [pc, #4]	@ (801b194 <__malloc_lock+0x8>)
 801b18e:	f000 bb90 	b.w	801b8b2 <__retarget_lock_acquire_recursive>
 801b192:	bf00      	nop
 801b194:	20012a19 	.word	0x20012a19

0801b198 <__malloc_unlock>:
 801b198:	4801      	ldr	r0, [pc, #4]	@ (801b1a0 <__malloc_unlock+0x8>)
 801b19a:	f000 bb8b 	b.w	801b8b4 <__retarget_lock_release_recursive>
 801b19e:	bf00      	nop
 801b1a0:	20012a19 	.word	0x20012a19

0801b1a4 <srand>:
 801b1a4:	b538      	push	{r3, r4, r5, lr}
 801b1a6:	4b10      	ldr	r3, [pc, #64]	@ (801b1e8 <srand+0x44>)
 801b1a8:	681d      	ldr	r5, [r3, #0]
 801b1aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b1ac:	4604      	mov	r4, r0
 801b1ae:	b9b3      	cbnz	r3, 801b1de <srand+0x3a>
 801b1b0:	2018      	movs	r0, #24
 801b1b2:	f7ff ff39 	bl	801b028 <malloc>
 801b1b6:	4602      	mov	r2, r0
 801b1b8:	6328      	str	r0, [r5, #48]	@ 0x30
 801b1ba:	b920      	cbnz	r0, 801b1c6 <srand+0x22>
 801b1bc:	4b0b      	ldr	r3, [pc, #44]	@ (801b1ec <srand+0x48>)
 801b1be:	480c      	ldr	r0, [pc, #48]	@ (801b1f0 <srand+0x4c>)
 801b1c0:	2146      	movs	r1, #70	@ 0x46
 801b1c2:	f000 fb8f 	bl	801b8e4 <__assert_func>
 801b1c6:	490b      	ldr	r1, [pc, #44]	@ (801b1f4 <srand+0x50>)
 801b1c8:	4b0b      	ldr	r3, [pc, #44]	@ (801b1f8 <srand+0x54>)
 801b1ca:	e9c0 1300 	strd	r1, r3, [r0]
 801b1ce:	4b0b      	ldr	r3, [pc, #44]	@ (801b1fc <srand+0x58>)
 801b1d0:	6083      	str	r3, [r0, #8]
 801b1d2:	230b      	movs	r3, #11
 801b1d4:	8183      	strh	r3, [r0, #12]
 801b1d6:	2100      	movs	r1, #0
 801b1d8:	2001      	movs	r0, #1
 801b1da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b1de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	611c      	str	r4, [r3, #16]
 801b1e4:	615a      	str	r2, [r3, #20]
 801b1e6:	bd38      	pop	{r3, r4, r5, pc}
 801b1e8:	20000368 	.word	0x20000368
 801b1ec:	0801d4bc 	.word	0x0801d4bc
 801b1f0:	0801d4d3 	.word	0x0801d4d3
 801b1f4:	abcd330e 	.word	0xabcd330e
 801b1f8:	e66d1234 	.word	0xe66d1234
 801b1fc:	0005deec 	.word	0x0005deec

0801b200 <rand>:
 801b200:	4b16      	ldr	r3, [pc, #88]	@ (801b25c <rand+0x5c>)
 801b202:	b510      	push	{r4, lr}
 801b204:	681c      	ldr	r4, [r3, #0]
 801b206:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b208:	b9b3      	cbnz	r3, 801b238 <rand+0x38>
 801b20a:	2018      	movs	r0, #24
 801b20c:	f7ff ff0c 	bl	801b028 <malloc>
 801b210:	4602      	mov	r2, r0
 801b212:	6320      	str	r0, [r4, #48]	@ 0x30
 801b214:	b920      	cbnz	r0, 801b220 <rand+0x20>
 801b216:	4b12      	ldr	r3, [pc, #72]	@ (801b260 <rand+0x60>)
 801b218:	4812      	ldr	r0, [pc, #72]	@ (801b264 <rand+0x64>)
 801b21a:	2152      	movs	r1, #82	@ 0x52
 801b21c:	f000 fb62 	bl	801b8e4 <__assert_func>
 801b220:	4911      	ldr	r1, [pc, #68]	@ (801b268 <rand+0x68>)
 801b222:	4b12      	ldr	r3, [pc, #72]	@ (801b26c <rand+0x6c>)
 801b224:	e9c0 1300 	strd	r1, r3, [r0]
 801b228:	4b11      	ldr	r3, [pc, #68]	@ (801b270 <rand+0x70>)
 801b22a:	6083      	str	r3, [r0, #8]
 801b22c:	230b      	movs	r3, #11
 801b22e:	8183      	strh	r3, [r0, #12]
 801b230:	2100      	movs	r1, #0
 801b232:	2001      	movs	r0, #1
 801b234:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b238:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b23a:	480e      	ldr	r0, [pc, #56]	@ (801b274 <rand+0x74>)
 801b23c:	690b      	ldr	r3, [r1, #16]
 801b23e:	694c      	ldr	r4, [r1, #20]
 801b240:	4a0d      	ldr	r2, [pc, #52]	@ (801b278 <rand+0x78>)
 801b242:	4358      	muls	r0, r3
 801b244:	fb02 0004 	mla	r0, r2, r4, r0
 801b248:	fba3 3202 	umull	r3, r2, r3, r2
 801b24c:	3301      	adds	r3, #1
 801b24e:	eb40 0002 	adc.w	r0, r0, r2
 801b252:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b256:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b25a:	bd10      	pop	{r4, pc}
 801b25c:	20000368 	.word	0x20000368
 801b260:	0801d4bc 	.word	0x0801d4bc
 801b264:	0801d4d3 	.word	0x0801d4d3
 801b268:	abcd330e 	.word	0xabcd330e
 801b26c:	e66d1234 	.word	0xe66d1234
 801b270:	0005deec 	.word	0x0005deec
 801b274:	5851f42d 	.word	0x5851f42d
 801b278:	4c957f2d 	.word	0x4c957f2d

0801b27c <realloc>:
 801b27c:	4b02      	ldr	r3, [pc, #8]	@ (801b288 <realloc+0xc>)
 801b27e:	460a      	mov	r2, r1
 801b280:	4601      	mov	r1, r0
 801b282:	6818      	ldr	r0, [r3, #0]
 801b284:	f000 b802 	b.w	801b28c <_realloc_r>
 801b288:	20000368 	.word	0x20000368

0801b28c <_realloc_r>:
 801b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b290:	4680      	mov	r8, r0
 801b292:	4615      	mov	r5, r2
 801b294:	460c      	mov	r4, r1
 801b296:	b921      	cbnz	r1, 801b2a2 <_realloc_r+0x16>
 801b298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b29c:	4611      	mov	r1, r2
 801b29e:	f7ff bef5 	b.w	801b08c <_malloc_r>
 801b2a2:	b92a      	cbnz	r2, 801b2b0 <_realloc_r+0x24>
 801b2a4:	f000 fb48 	bl	801b938 <_free_r>
 801b2a8:	2400      	movs	r4, #0
 801b2aa:	4620      	mov	r0, r4
 801b2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2b0:	f000 fb8c 	bl	801b9cc <_malloc_usable_size_r>
 801b2b4:	4285      	cmp	r5, r0
 801b2b6:	4606      	mov	r6, r0
 801b2b8:	d802      	bhi.n	801b2c0 <_realloc_r+0x34>
 801b2ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b2be:	d8f4      	bhi.n	801b2aa <_realloc_r+0x1e>
 801b2c0:	4629      	mov	r1, r5
 801b2c2:	4640      	mov	r0, r8
 801b2c4:	f7ff fee2 	bl	801b08c <_malloc_r>
 801b2c8:	4607      	mov	r7, r0
 801b2ca:	2800      	cmp	r0, #0
 801b2cc:	d0ec      	beq.n	801b2a8 <_realloc_r+0x1c>
 801b2ce:	42b5      	cmp	r5, r6
 801b2d0:	462a      	mov	r2, r5
 801b2d2:	4621      	mov	r1, r4
 801b2d4:	bf28      	it	cs
 801b2d6:	4632      	movcs	r2, r6
 801b2d8:	f000 faf5 	bl	801b8c6 <memcpy>
 801b2dc:	4621      	mov	r1, r4
 801b2de:	4640      	mov	r0, r8
 801b2e0:	f000 fb2a 	bl	801b938 <_free_r>
 801b2e4:	463c      	mov	r4, r7
 801b2e6:	e7e0      	b.n	801b2aa <_realloc_r+0x1e>

0801b2e8 <_strtoul_l.constprop.0>:
 801b2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b2ec:	4e34      	ldr	r6, [pc, #208]	@ (801b3c0 <_strtoul_l.constprop.0+0xd8>)
 801b2ee:	4686      	mov	lr, r0
 801b2f0:	460d      	mov	r5, r1
 801b2f2:	4628      	mov	r0, r5
 801b2f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2f8:	5d37      	ldrb	r7, [r6, r4]
 801b2fa:	f017 0708 	ands.w	r7, r7, #8
 801b2fe:	d1f8      	bne.n	801b2f2 <_strtoul_l.constprop.0+0xa>
 801b300:	2c2d      	cmp	r4, #45	@ 0x2d
 801b302:	d12f      	bne.n	801b364 <_strtoul_l.constprop.0+0x7c>
 801b304:	782c      	ldrb	r4, [r5, #0]
 801b306:	2701      	movs	r7, #1
 801b308:	1c85      	adds	r5, r0, #2
 801b30a:	f033 0010 	bics.w	r0, r3, #16
 801b30e:	d109      	bne.n	801b324 <_strtoul_l.constprop.0+0x3c>
 801b310:	2c30      	cmp	r4, #48	@ 0x30
 801b312:	d12c      	bne.n	801b36e <_strtoul_l.constprop.0+0x86>
 801b314:	7828      	ldrb	r0, [r5, #0]
 801b316:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b31a:	2858      	cmp	r0, #88	@ 0x58
 801b31c:	d127      	bne.n	801b36e <_strtoul_l.constprop.0+0x86>
 801b31e:	786c      	ldrb	r4, [r5, #1]
 801b320:	2310      	movs	r3, #16
 801b322:	3502      	adds	r5, #2
 801b324:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b328:	2600      	movs	r6, #0
 801b32a:	fbb8 f8f3 	udiv	r8, r8, r3
 801b32e:	fb03 f908 	mul.w	r9, r3, r8
 801b332:	ea6f 0909 	mvn.w	r9, r9
 801b336:	4630      	mov	r0, r6
 801b338:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b33c:	f1bc 0f09 	cmp.w	ip, #9
 801b340:	d81c      	bhi.n	801b37c <_strtoul_l.constprop.0+0x94>
 801b342:	4664      	mov	r4, ip
 801b344:	42a3      	cmp	r3, r4
 801b346:	dd2a      	ble.n	801b39e <_strtoul_l.constprop.0+0xb6>
 801b348:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801b34c:	d007      	beq.n	801b35e <_strtoul_l.constprop.0+0x76>
 801b34e:	4580      	cmp	r8, r0
 801b350:	d322      	bcc.n	801b398 <_strtoul_l.constprop.0+0xb0>
 801b352:	d101      	bne.n	801b358 <_strtoul_l.constprop.0+0x70>
 801b354:	45a1      	cmp	r9, r4
 801b356:	db1f      	blt.n	801b398 <_strtoul_l.constprop.0+0xb0>
 801b358:	fb00 4003 	mla	r0, r0, r3, r4
 801b35c:	2601      	movs	r6, #1
 801b35e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b362:	e7e9      	b.n	801b338 <_strtoul_l.constprop.0+0x50>
 801b364:	2c2b      	cmp	r4, #43	@ 0x2b
 801b366:	bf04      	itt	eq
 801b368:	782c      	ldrbeq	r4, [r5, #0]
 801b36a:	1c85      	addeq	r5, r0, #2
 801b36c:	e7cd      	b.n	801b30a <_strtoul_l.constprop.0+0x22>
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d1d8      	bne.n	801b324 <_strtoul_l.constprop.0+0x3c>
 801b372:	2c30      	cmp	r4, #48	@ 0x30
 801b374:	bf0c      	ite	eq
 801b376:	2308      	moveq	r3, #8
 801b378:	230a      	movne	r3, #10
 801b37a:	e7d3      	b.n	801b324 <_strtoul_l.constprop.0+0x3c>
 801b37c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b380:	f1bc 0f19 	cmp.w	ip, #25
 801b384:	d801      	bhi.n	801b38a <_strtoul_l.constprop.0+0xa2>
 801b386:	3c37      	subs	r4, #55	@ 0x37
 801b388:	e7dc      	b.n	801b344 <_strtoul_l.constprop.0+0x5c>
 801b38a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b38e:	f1bc 0f19 	cmp.w	ip, #25
 801b392:	d804      	bhi.n	801b39e <_strtoul_l.constprop.0+0xb6>
 801b394:	3c57      	subs	r4, #87	@ 0x57
 801b396:	e7d5      	b.n	801b344 <_strtoul_l.constprop.0+0x5c>
 801b398:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b39c:	e7df      	b.n	801b35e <_strtoul_l.constprop.0+0x76>
 801b39e:	1c73      	adds	r3, r6, #1
 801b3a0:	d106      	bne.n	801b3b0 <_strtoul_l.constprop.0+0xc8>
 801b3a2:	2322      	movs	r3, #34	@ 0x22
 801b3a4:	f8ce 3000 	str.w	r3, [lr]
 801b3a8:	4630      	mov	r0, r6
 801b3aa:	b932      	cbnz	r2, 801b3ba <_strtoul_l.constprop.0+0xd2>
 801b3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b3b0:	b107      	cbz	r7, 801b3b4 <_strtoul_l.constprop.0+0xcc>
 801b3b2:	4240      	negs	r0, r0
 801b3b4:	2a00      	cmp	r2, #0
 801b3b6:	d0f9      	beq.n	801b3ac <_strtoul_l.constprop.0+0xc4>
 801b3b8:	b106      	cbz	r6, 801b3bc <_strtoul_l.constprop.0+0xd4>
 801b3ba:	1e69      	subs	r1, r5, #1
 801b3bc:	6011      	str	r1, [r2, #0]
 801b3be:	e7f5      	b.n	801b3ac <_strtoul_l.constprop.0+0xc4>
 801b3c0:	0801d52c 	.word	0x0801d52c

0801b3c4 <strtoul>:
 801b3c4:	4613      	mov	r3, r2
 801b3c6:	460a      	mov	r2, r1
 801b3c8:	4601      	mov	r1, r0
 801b3ca:	4802      	ldr	r0, [pc, #8]	@ (801b3d4 <strtoul+0x10>)
 801b3cc:	6800      	ldr	r0, [r0, #0]
 801b3ce:	f7ff bf8b 	b.w	801b2e8 <_strtoul_l.constprop.0>
 801b3d2:	bf00      	nop
 801b3d4:	20000368 	.word	0x20000368

0801b3d8 <std>:
 801b3d8:	2300      	movs	r3, #0
 801b3da:	b510      	push	{r4, lr}
 801b3dc:	4604      	mov	r4, r0
 801b3de:	e9c0 3300 	strd	r3, r3, [r0]
 801b3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b3e6:	6083      	str	r3, [r0, #8]
 801b3e8:	8181      	strh	r1, [r0, #12]
 801b3ea:	6643      	str	r3, [r0, #100]	@ 0x64
 801b3ec:	81c2      	strh	r2, [r0, #14]
 801b3ee:	6183      	str	r3, [r0, #24]
 801b3f0:	4619      	mov	r1, r3
 801b3f2:	2208      	movs	r2, #8
 801b3f4:	305c      	adds	r0, #92	@ 0x5c
 801b3f6:	f000 f99d 	bl	801b734 <memset>
 801b3fa:	4b0d      	ldr	r3, [pc, #52]	@ (801b430 <std+0x58>)
 801b3fc:	6263      	str	r3, [r4, #36]	@ 0x24
 801b3fe:	4b0d      	ldr	r3, [pc, #52]	@ (801b434 <std+0x5c>)
 801b400:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b402:	4b0d      	ldr	r3, [pc, #52]	@ (801b438 <std+0x60>)
 801b404:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b406:	4b0d      	ldr	r3, [pc, #52]	@ (801b43c <std+0x64>)
 801b408:	6323      	str	r3, [r4, #48]	@ 0x30
 801b40a:	4b0d      	ldr	r3, [pc, #52]	@ (801b440 <std+0x68>)
 801b40c:	6224      	str	r4, [r4, #32]
 801b40e:	429c      	cmp	r4, r3
 801b410:	d006      	beq.n	801b420 <std+0x48>
 801b412:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b416:	4294      	cmp	r4, r2
 801b418:	d002      	beq.n	801b420 <std+0x48>
 801b41a:	33d0      	adds	r3, #208	@ 0xd0
 801b41c:	429c      	cmp	r4, r3
 801b41e:	d105      	bne.n	801b42c <std+0x54>
 801b420:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b428:	f000 ba42 	b.w	801b8b0 <__retarget_lock_init_recursive>
 801b42c:	bd10      	pop	{r4, pc}
 801b42e:	bf00      	nop
 801b430:	0801b5e9 	.word	0x0801b5e9
 801b434:	0801b60b 	.word	0x0801b60b
 801b438:	0801b643 	.word	0x0801b643
 801b43c:	0801b667 	.word	0x0801b667
 801b440:	200128d8 	.word	0x200128d8

0801b444 <stdio_exit_handler>:
 801b444:	4a02      	ldr	r2, [pc, #8]	@ (801b450 <stdio_exit_handler+0xc>)
 801b446:	4903      	ldr	r1, [pc, #12]	@ (801b454 <stdio_exit_handler+0x10>)
 801b448:	4803      	ldr	r0, [pc, #12]	@ (801b458 <stdio_exit_handler+0x14>)
 801b44a:	f000 b869 	b.w	801b520 <_fwalk_sglue>
 801b44e:	bf00      	nop
 801b450:	2000035c 	.word	0x2000035c
 801b454:	0801c335 	.word	0x0801c335
 801b458:	2000036c 	.word	0x2000036c

0801b45c <cleanup_stdio>:
 801b45c:	6841      	ldr	r1, [r0, #4]
 801b45e:	4b0c      	ldr	r3, [pc, #48]	@ (801b490 <cleanup_stdio+0x34>)
 801b460:	4299      	cmp	r1, r3
 801b462:	b510      	push	{r4, lr}
 801b464:	4604      	mov	r4, r0
 801b466:	d001      	beq.n	801b46c <cleanup_stdio+0x10>
 801b468:	f000 ff64 	bl	801c334 <_fflush_r>
 801b46c:	68a1      	ldr	r1, [r4, #8]
 801b46e:	4b09      	ldr	r3, [pc, #36]	@ (801b494 <cleanup_stdio+0x38>)
 801b470:	4299      	cmp	r1, r3
 801b472:	d002      	beq.n	801b47a <cleanup_stdio+0x1e>
 801b474:	4620      	mov	r0, r4
 801b476:	f000 ff5d 	bl	801c334 <_fflush_r>
 801b47a:	68e1      	ldr	r1, [r4, #12]
 801b47c:	4b06      	ldr	r3, [pc, #24]	@ (801b498 <cleanup_stdio+0x3c>)
 801b47e:	4299      	cmp	r1, r3
 801b480:	d004      	beq.n	801b48c <cleanup_stdio+0x30>
 801b482:	4620      	mov	r0, r4
 801b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b488:	f000 bf54 	b.w	801c334 <_fflush_r>
 801b48c:	bd10      	pop	{r4, pc}
 801b48e:	bf00      	nop
 801b490:	200128d8 	.word	0x200128d8
 801b494:	20012940 	.word	0x20012940
 801b498:	200129a8 	.word	0x200129a8

0801b49c <global_stdio_init.part.0>:
 801b49c:	b510      	push	{r4, lr}
 801b49e:	4b0b      	ldr	r3, [pc, #44]	@ (801b4cc <global_stdio_init.part.0+0x30>)
 801b4a0:	4c0b      	ldr	r4, [pc, #44]	@ (801b4d0 <global_stdio_init.part.0+0x34>)
 801b4a2:	4a0c      	ldr	r2, [pc, #48]	@ (801b4d4 <global_stdio_init.part.0+0x38>)
 801b4a4:	601a      	str	r2, [r3, #0]
 801b4a6:	4620      	mov	r0, r4
 801b4a8:	2200      	movs	r2, #0
 801b4aa:	2104      	movs	r1, #4
 801b4ac:	f7ff ff94 	bl	801b3d8 <std>
 801b4b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b4b4:	2201      	movs	r2, #1
 801b4b6:	2109      	movs	r1, #9
 801b4b8:	f7ff ff8e 	bl	801b3d8 <std>
 801b4bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b4c0:	2202      	movs	r2, #2
 801b4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4c6:	2112      	movs	r1, #18
 801b4c8:	f7ff bf86 	b.w	801b3d8 <std>
 801b4cc:	20012a10 	.word	0x20012a10
 801b4d0:	200128d8 	.word	0x200128d8
 801b4d4:	0801b445 	.word	0x0801b445

0801b4d8 <__sfp_lock_acquire>:
 801b4d8:	4801      	ldr	r0, [pc, #4]	@ (801b4e0 <__sfp_lock_acquire+0x8>)
 801b4da:	f000 b9ea 	b.w	801b8b2 <__retarget_lock_acquire_recursive>
 801b4de:	bf00      	nop
 801b4e0:	20012a1a 	.word	0x20012a1a

0801b4e4 <__sfp_lock_release>:
 801b4e4:	4801      	ldr	r0, [pc, #4]	@ (801b4ec <__sfp_lock_release+0x8>)
 801b4e6:	f000 b9e5 	b.w	801b8b4 <__retarget_lock_release_recursive>
 801b4ea:	bf00      	nop
 801b4ec:	20012a1a 	.word	0x20012a1a

0801b4f0 <__sinit>:
 801b4f0:	b510      	push	{r4, lr}
 801b4f2:	4604      	mov	r4, r0
 801b4f4:	f7ff fff0 	bl	801b4d8 <__sfp_lock_acquire>
 801b4f8:	6a23      	ldr	r3, [r4, #32]
 801b4fa:	b11b      	cbz	r3, 801b504 <__sinit+0x14>
 801b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b500:	f7ff bff0 	b.w	801b4e4 <__sfp_lock_release>
 801b504:	4b04      	ldr	r3, [pc, #16]	@ (801b518 <__sinit+0x28>)
 801b506:	6223      	str	r3, [r4, #32]
 801b508:	4b04      	ldr	r3, [pc, #16]	@ (801b51c <__sinit+0x2c>)
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d1f5      	bne.n	801b4fc <__sinit+0xc>
 801b510:	f7ff ffc4 	bl	801b49c <global_stdio_init.part.0>
 801b514:	e7f2      	b.n	801b4fc <__sinit+0xc>
 801b516:	bf00      	nop
 801b518:	0801b45d 	.word	0x0801b45d
 801b51c:	20012a10 	.word	0x20012a10

0801b520 <_fwalk_sglue>:
 801b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b524:	4607      	mov	r7, r0
 801b526:	4688      	mov	r8, r1
 801b528:	4614      	mov	r4, r2
 801b52a:	2600      	movs	r6, #0
 801b52c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b530:	f1b9 0901 	subs.w	r9, r9, #1
 801b534:	d505      	bpl.n	801b542 <_fwalk_sglue+0x22>
 801b536:	6824      	ldr	r4, [r4, #0]
 801b538:	2c00      	cmp	r4, #0
 801b53a:	d1f7      	bne.n	801b52c <_fwalk_sglue+0xc>
 801b53c:	4630      	mov	r0, r6
 801b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b542:	89ab      	ldrh	r3, [r5, #12]
 801b544:	2b01      	cmp	r3, #1
 801b546:	d907      	bls.n	801b558 <_fwalk_sglue+0x38>
 801b548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b54c:	3301      	adds	r3, #1
 801b54e:	d003      	beq.n	801b558 <_fwalk_sglue+0x38>
 801b550:	4629      	mov	r1, r5
 801b552:	4638      	mov	r0, r7
 801b554:	47c0      	blx	r8
 801b556:	4306      	orrs	r6, r0
 801b558:	3568      	adds	r5, #104	@ 0x68
 801b55a:	e7e9      	b.n	801b530 <_fwalk_sglue+0x10>

0801b55c <iprintf>:
 801b55c:	b40f      	push	{r0, r1, r2, r3}
 801b55e:	b507      	push	{r0, r1, r2, lr}
 801b560:	4906      	ldr	r1, [pc, #24]	@ (801b57c <iprintf+0x20>)
 801b562:	ab04      	add	r3, sp, #16
 801b564:	6808      	ldr	r0, [r1, #0]
 801b566:	f853 2b04 	ldr.w	r2, [r3], #4
 801b56a:	6881      	ldr	r1, [r0, #8]
 801b56c:	9301      	str	r3, [sp, #4]
 801b56e:	f000 fbb7 	bl	801bce0 <_vfiprintf_r>
 801b572:	b003      	add	sp, #12
 801b574:	f85d eb04 	ldr.w	lr, [sp], #4
 801b578:	b004      	add	sp, #16
 801b57a:	4770      	bx	lr
 801b57c:	20000368 	.word	0x20000368

0801b580 <sniprintf>:
 801b580:	b40c      	push	{r2, r3}
 801b582:	b530      	push	{r4, r5, lr}
 801b584:	4b17      	ldr	r3, [pc, #92]	@ (801b5e4 <sniprintf+0x64>)
 801b586:	1e0c      	subs	r4, r1, #0
 801b588:	681d      	ldr	r5, [r3, #0]
 801b58a:	b09d      	sub	sp, #116	@ 0x74
 801b58c:	da08      	bge.n	801b5a0 <sniprintf+0x20>
 801b58e:	238b      	movs	r3, #139	@ 0x8b
 801b590:	602b      	str	r3, [r5, #0]
 801b592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b596:	b01d      	add	sp, #116	@ 0x74
 801b598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b59c:	b002      	add	sp, #8
 801b59e:	4770      	bx	lr
 801b5a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b5a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b5a8:	bf14      	ite	ne
 801b5aa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b5ae:	4623      	moveq	r3, r4
 801b5b0:	9304      	str	r3, [sp, #16]
 801b5b2:	9307      	str	r3, [sp, #28]
 801b5b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b5b8:	9002      	str	r0, [sp, #8]
 801b5ba:	9006      	str	r0, [sp, #24]
 801b5bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b5c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b5c2:	ab21      	add	r3, sp, #132	@ 0x84
 801b5c4:	a902      	add	r1, sp, #8
 801b5c6:	4628      	mov	r0, r5
 801b5c8:	9301      	str	r3, [sp, #4]
 801b5ca:	f000 fa63 	bl	801ba94 <_svfiprintf_r>
 801b5ce:	1c43      	adds	r3, r0, #1
 801b5d0:	bfbc      	itt	lt
 801b5d2:	238b      	movlt	r3, #139	@ 0x8b
 801b5d4:	602b      	strlt	r3, [r5, #0]
 801b5d6:	2c00      	cmp	r4, #0
 801b5d8:	d0dd      	beq.n	801b596 <sniprintf+0x16>
 801b5da:	9b02      	ldr	r3, [sp, #8]
 801b5dc:	2200      	movs	r2, #0
 801b5de:	701a      	strb	r2, [r3, #0]
 801b5e0:	e7d9      	b.n	801b596 <sniprintf+0x16>
 801b5e2:	bf00      	nop
 801b5e4:	20000368 	.word	0x20000368

0801b5e8 <__sread>:
 801b5e8:	b510      	push	{r4, lr}
 801b5ea:	460c      	mov	r4, r1
 801b5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5f0:	f000 f900 	bl	801b7f4 <_read_r>
 801b5f4:	2800      	cmp	r0, #0
 801b5f6:	bfab      	itete	ge
 801b5f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b5fa:	89a3      	ldrhlt	r3, [r4, #12]
 801b5fc:	181b      	addge	r3, r3, r0
 801b5fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b602:	bfac      	ite	ge
 801b604:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b606:	81a3      	strhlt	r3, [r4, #12]
 801b608:	bd10      	pop	{r4, pc}

0801b60a <__swrite>:
 801b60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b60e:	461f      	mov	r7, r3
 801b610:	898b      	ldrh	r3, [r1, #12]
 801b612:	05db      	lsls	r3, r3, #23
 801b614:	4605      	mov	r5, r0
 801b616:	460c      	mov	r4, r1
 801b618:	4616      	mov	r6, r2
 801b61a:	d505      	bpl.n	801b628 <__swrite+0x1e>
 801b61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b620:	2302      	movs	r3, #2
 801b622:	2200      	movs	r2, #0
 801b624:	f000 f8d4 	bl	801b7d0 <_lseek_r>
 801b628:	89a3      	ldrh	r3, [r4, #12]
 801b62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b62e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b632:	81a3      	strh	r3, [r4, #12]
 801b634:	4632      	mov	r2, r6
 801b636:	463b      	mov	r3, r7
 801b638:	4628      	mov	r0, r5
 801b63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b63e:	f000 b8fb 	b.w	801b838 <_write_r>

0801b642 <__sseek>:
 801b642:	b510      	push	{r4, lr}
 801b644:	460c      	mov	r4, r1
 801b646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b64a:	f000 f8c1 	bl	801b7d0 <_lseek_r>
 801b64e:	1c43      	adds	r3, r0, #1
 801b650:	89a3      	ldrh	r3, [r4, #12]
 801b652:	bf15      	itete	ne
 801b654:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b656:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b65a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b65e:	81a3      	strheq	r3, [r4, #12]
 801b660:	bf18      	it	ne
 801b662:	81a3      	strhne	r3, [r4, #12]
 801b664:	bd10      	pop	{r4, pc}

0801b666 <__sclose>:
 801b666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b66a:	f000 b8a1 	b.w	801b7b0 <_close_r>

0801b66e <_vsniprintf_r>:
 801b66e:	b530      	push	{r4, r5, lr}
 801b670:	4614      	mov	r4, r2
 801b672:	2c00      	cmp	r4, #0
 801b674:	b09b      	sub	sp, #108	@ 0x6c
 801b676:	4605      	mov	r5, r0
 801b678:	461a      	mov	r2, r3
 801b67a:	da05      	bge.n	801b688 <_vsniprintf_r+0x1a>
 801b67c:	238b      	movs	r3, #139	@ 0x8b
 801b67e:	6003      	str	r3, [r0, #0]
 801b680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b684:	b01b      	add	sp, #108	@ 0x6c
 801b686:	bd30      	pop	{r4, r5, pc}
 801b688:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b68c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b690:	bf14      	ite	ne
 801b692:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801b696:	4623      	moveq	r3, r4
 801b698:	9302      	str	r3, [sp, #8]
 801b69a:	9305      	str	r3, [sp, #20]
 801b69c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b6a0:	9100      	str	r1, [sp, #0]
 801b6a2:	9104      	str	r1, [sp, #16]
 801b6a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b6a8:	4669      	mov	r1, sp
 801b6aa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b6ac:	f000 f9f2 	bl	801ba94 <_svfiprintf_r>
 801b6b0:	1c43      	adds	r3, r0, #1
 801b6b2:	bfbc      	itt	lt
 801b6b4:	238b      	movlt	r3, #139	@ 0x8b
 801b6b6:	602b      	strlt	r3, [r5, #0]
 801b6b8:	2c00      	cmp	r4, #0
 801b6ba:	d0e3      	beq.n	801b684 <_vsniprintf_r+0x16>
 801b6bc:	9b00      	ldr	r3, [sp, #0]
 801b6be:	2200      	movs	r2, #0
 801b6c0:	701a      	strb	r2, [r3, #0]
 801b6c2:	e7df      	b.n	801b684 <_vsniprintf_r+0x16>

0801b6c4 <vsniprintf>:
 801b6c4:	b507      	push	{r0, r1, r2, lr}
 801b6c6:	9300      	str	r3, [sp, #0]
 801b6c8:	4613      	mov	r3, r2
 801b6ca:	460a      	mov	r2, r1
 801b6cc:	4601      	mov	r1, r0
 801b6ce:	4803      	ldr	r0, [pc, #12]	@ (801b6dc <vsniprintf+0x18>)
 801b6d0:	6800      	ldr	r0, [r0, #0]
 801b6d2:	f7ff ffcc 	bl	801b66e <_vsniprintf_r>
 801b6d6:	b003      	add	sp, #12
 801b6d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6dc:	20000368 	.word	0x20000368

0801b6e0 <memcmp>:
 801b6e0:	b510      	push	{r4, lr}
 801b6e2:	3901      	subs	r1, #1
 801b6e4:	4402      	add	r2, r0
 801b6e6:	4290      	cmp	r0, r2
 801b6e8:	d101      	bne.n	801b6ee <memcmp+0xe>
 801b6ea:	2000      	movs	r0, #0
 801b6ec:	e005      	b.n	801b6fa <memcmp+0x1a>
 801b6ee:	7803      	ldrb	r3, [r0, #0]
 801b6f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b6f4:	42a3      	cmp	r3, r4
 801b6f6:	d001      	beq.n	801b6fc <memcmp+0x1c>
 801b6f8:	1b18      	subs	r0, r3, r4
 801b6fa:	bd10      	pop	{r4, pc}
 801b6fc:	3001      	adds	r0, #1
 801b6fe:	e7f2      	b.n	801b6e6 <memcmp+0x6>

0801b700 <memmove>:
 801b700:	4288      	cmp	r0, r1
 801b702:	b510      	push	{r4, lr}
 801b704:	eb01 0402 	add.w	r4, r1, r2
 801b708:	d902      	bls.n	801b710 <memmove+0x10>
 801b70a:	4284      	cmp	r4, r0
 801b70c:	4623      	mov	r3, r4
 801b70e:	d807      	bhi.n	801b720 <memmove+0x20>
 801b710:	1e43      	subs	r3, r0, #1
 801b712:	42a1      	cmp	r1, r4
 801b714:	d008      	beq.n	801b728 <memmove+0x28>
 801b716:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b71a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b71e:	e7f8      	b.n	801b712 <memmove+0x12>
 801b720:	4402      	add	r2, r0
 801b722:	4601      	mov	r1, r0
 801b724:	428a      	cmp	r2, r1
 801b726:	d100      	bne.n	801b72a <memmove+0x2a>
 801b728:	bd10      	pop	{r4, pc}
 801b72a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b72e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b732:	e7f7      	b.n	801b724 <memmove+0x24>

0801b734 <memset>:
 801b734:	4402      	add	r2, r0
 801b736:	4603      	mov	r3, r0
 801b738:	4293      	cmp	r3, r2
 801b73a:	d100      	bne.n	801b73e <memset+0xa>
 801b73c:	4770      	bx	lr
 801b73e:	f803 1b01 	strb.w	r1, [r3], #1
 801b742:	e7f9      	b.n	801b738 <memset+0x4>

0801b744 <strchr>:
 801b744:	b2c9      	uxtb	r1, r1
 801b746:	4603      	mov	r3, r0
 801b748:	4618      	mov	r0, r3
 801b74a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b74e:	b112      	cbz	r2, 801b756 <strchr+0x12>
 801b750:	428a      	cmp	r2, r1
 801b752:	d1f9      	bne.n	801b748 <strchr+0x4>
 801b754:	4770      	bx	lr
 801b756:	2900      	cmp	r1, #0
 801b758:	bf18      	it	ne
 801b75a:	2000      	movne	r0, #0
 801b75c:	4770      	bx	lr

0801b75e <strncmp>:
 801b75e:	b510      	push	{r4, lr}
 801b760:	b16a      	cbz	r2, 801b77e <strncmp+0x20>
 801b762:	3901      	subs	r1, #1
 801b764:	1884      	adds	r4, r0, r2
 801b766:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b76a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b76e:	429a      	cmp	r2, r3
 801b770:	d103      	bne.n	801b77a <strncmp+0x1c>
 801b772:	42a0      	cmp	r0, r4
 801b774:	d001      	beq.n	801b77a <strncmp+0x1c>
 801b776:	2a00      	cmp	r2, #0
 801b778:	d1f5      	bne.n	801b766 <strncmp+0x8>
 801b77a:	1ad0      	subs	r0, r2, r3
 801b77c:	bd10      	pop	{r4, pc}
 801b77e:	4610      	mov	r0, r2
 801b780:	e7fc      	b.n	801b77c <strncmp+0x1e>

0801b782 <strstr>:
 801b782:	780a      	ldrb	r2, [r1, #0]
 801b784:	b570      	push	{r4, r5, r6, lr}
 801b786:	b96a      	cbnz	r2, 801b7a4 <strstr+0x22>
 801b788:	bd70      	pop	{r4, r5, r6, pc}
 801b78a:	429a      	cmp	r2, r3
 801b78c:	d109      	bne.n	801b7a2 <strstr+0x20>
 801b78e:	460c      	mov	r4, r1
 801b790:	4605      	mov	r5, r0
 801b792:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b796:	2b00      	cmp	r3, #0
 801b798:	d0f6      	beq.n	801b788 <strstr+0x6>
 801b79a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b79e:	429e      	cmp	r6, r3
 801b7a0:	d0f7      	beq.n	801b792 <strstr+0x10>
 801b7a2:	3001      	adds	r0, #1
 801b7a4:	7803      	ldrb	r3, [r0, #0]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d1ef      	bne.n	801b78a <strstr+0x8>
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	e7ec      	b.n	801b788 <strstr+0x6>
	...

0801b7b0 <_close_r>:
 801b7b0:	b538      	push	{r3, r4, r5, lr}
 801b7b2:	4d06      	ldr	r5, [pc, #24]	@ (801b7cc <_close_r+0x1c>)
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	4604      	mov	r4, r0
 801b7b8:	4608      	mov	r0, r1
 801b7ba:	602b      	str	r3, [r5, #0]
 801b7bc:	f7e5 ffc0 	bl	8001740 <_close>
 801b7c0:	1c43      	adds	r3, r0, #1
 801b7c2:	d102      	bne.n	801b7ca <_close_r+0x1a>
 801b7c4:	682b      	ldr	r3, [r5, #0]
 801b7c6:	b103      	cbz	r3, 801b7ca <_close_r+0x1a>
 801b7c8:	6023      	str	r3, [r4, #0]
 801b7ca:	bd38      	pop	{r3, r4, r5, pc}
 801b7cc:	20012a14 	.word	0x20012a14

0801b7d0 <_lseek_r>:
 801b7d0:	b538      	push	{r3, r4, r5, lr}
 801b7d2:	4d07      	ldr	r5, [pc, #28]	@ (801b7f0 <_lseek_r+0x20>)
 801b7d4:	4604      	mov	r4, r0
 801b7d6:	4608      	mov	r0, r1
 801b7d8:	4611      	mov	r1, r2
 801b7da:	2200      	movs	r2, #0
 801b7dc:	602a      	str	r2, [r5, #0]
 801b7de:	461a      	mov	r2, r3
 801b7e0:	f7e5 ffd5 	bl	800178e <_lseek>
 801b7e4:	1c43      	adds	r3, r0, #1
 801b7e6:	d102      	bne.n	801b7ee <_lseek_r+0x1e>
 801b7e8:	682b      	ldr	r3, [r5, #0]
 801b7ea:	b103      	cbz	r3, 801b7ee <_lseek_r+0x1e>
 801b7ec:	6023      	str	r3, [r4, #0]
 801b7ee:	bd38      	pop	{r3, r4, r5, pc}
 801b7f0:	20012a14 	.word	0x20012a14

0801b7f4 <_read_r>:
 801b7f4:	b538      	push	{r3, r4, r5, lr}
 801b7f6:	4d07      	ldr	r5, [pc, #28]	@ (801b814 <_read_r+0x20>)
 801b7f8:	4604      	mov	r4, r0
 801b7fa:	4608      	mov	r0, r1
 801b7fc:	4611      	mov	r1, r2
 801b7fe:	2200      	movs	r2, #0
 801b800:	602a      	str	r2, [r5, #0]
 801b802:	461a      	mov	r2, r3
 801b804:	f7e5 ff63 	bl	80016ce <_read>
 801b808:	1c43      	adds	r3, r0, #1
 801b80a:	d102      	bne.n	801b812 <_read_r+0x1e>
 801b80c:	682b      	ldr	r3, [r5, #0]
 801b80e:	b103      	cbz	r3, 801b812 <_read_r+0x1e>
 801b810:	6023      	str	r3, [r4, #0]
 801b812:	bd38      	pop	{r3, r4, r5, pc}
 801b814:	20012a14 	.word	0x20012a14

0801b818 <_sbrk_r>:
 801b818:	b538      	push	{r3, r4, r5, lr}
 801b81a:	4d06      	ldr	r5, [pc, #24]	@ (801b834 <_sbrk_r+0x1c>)
 801b81c:	2300      	movs	r3, #0
 801b81e:	4604      	mov	r4, r0
 801b820:	4608      	mov	r0, r1
 801b822:	602b      	str	r3, [r5, #0]
 801b824:	f7e5 ffc0 	bl	80017a8 <_sbrk>
 801b828:	1c43      	adds	r3, r0, #1
 801b82a:	d102      	bne.n	801b832 <_sbrk_r+0x1a>
 801b82c:	682b      	ldr	r3, [r5, #0]
 801b82e:	b103      	cbz	r3, 801b832 <_sbrk_r+0x1a>
 801b830:	6023      	str	r3, [r4, #0]
 801b832:	bd38      	pop	{r3, r4, r5, pc}
 801b834:	20012a14 	.word	0x20012a14

0801b838 <_write_r>:
 801b838:	b538      	push	{r3, r4, r5, lr}
 801b83a:	4d07      	ldr	r5, [pc, #28]	@ (801b858 <_write_r+0x20>)
 801b83c:	4604      	mov	r4, r0
 801b83e:	4608      	mov	r0, r1
 801b840:	4611      	mov	r1, r2
 801b842:	2200      	movs	r2, #0
 801b844:	602a      	str	r2, [r5, #0]
 801b846:	461a      	mov	r2, r3
 801b848:	f7e5 ff5e 	bl	8001708 <_write>
 801b84c:	1c43      	adds	r3, r0, #1
 801b84e:	d102      	bne.n	801b856 <_write_r+0x1e>
 801b850:	682b      	ldr	r3, [r5, #0]
 801b852:	b103      	cbz	r3, 801b856 <_write_r+0x1e>
 801b854:	6023      	str	r3, [r4, #0]
 801b856:	bd38      	pop	{r3, r4, r5, pc}
 801b858:	20012a14 	.word	0x20012a14

0801b85c <__errno>:
 801b85c:	4b01      	ldr	r3, [pc, #4]	@ (801b864 <__errno+0x8>)
 801b85e:	6818      	ldr	r0, [r3, #0]
 801b860:	4770      	bx	lr
 801b862:	bf00      	nop
 801b864:	20000368 	.word	0x20000368

0801b868 <__libc_init_array>:
 801b868:	b570      	push	{r4, r5, r6, lr}
 801b86a:	4d0d      	ldr	r5, [pc, #52]	@ (801b8a0 <__libc_init_array+0x38>)
 801b86c:	4c0d      	ldr	r4, [pc, #52]	@ (801b8a4 <__libc_init_array+0x3c>)
 801b86e:	1b64      	subs	r4, r4, r5
 801b870:	10a4      	asrs	r4, r4, #2
 801b872:	2600      	movs	r6, #0
 801b874:	42a6      	cmp	r6, r4
 801b876:	d109      	bne.n	801b88c <__libc_init_array+0x24>
 801b878:	4d0b      	ldr	r5, [pc, #44]	@ (801b8a8 <__libc_init_array+0x40>)
 801b87a:	4c0c      	ldr	r4, [pc, #48]	@ (801b8ac <__libc_init_array+0x44>)
 801b87c:	f000 fef8 	bl	801c670 <_init>
 801b880:	1b64      	subs	r4, r4, r5
 801b882:	10a4      	asrs	r4, r4, #2
 801b884:	2600      	movs	r6, #0
 801b886:	42a6      	cmp	r6, r4
 801b888:	d105      	bne.n	801b896 <__libc_init_array+0x2e>
 801b88a:	bd70      	pop	{r4, r5, r6, pc}
 801b88c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b890:	4798      	blx	r3
 801b892:	3601      	adds	r6, #1
 801b894:	e7ee      	b.n	801b874 <__libc_init_array+0xc>
 801b896:	f855 3b04 	ldr.w	r3, [r5], #4
 801b89a:	4798      	blx	r3
 801b89c:	3601      	adds	r6, #1
 801b89e:	e7f2      	b.n	801b886 <__libc_init_array+0x1e>
 801b8a0:	0801d6a4 	.word	0x0801d6a4
 801b8a4:	0801d6a4 	.word	0x0801d6a4
 801b8a8:	0801d6a4 	.word	0x0801d6a4
 801b8ac:	0801d6b0 	.word	0x0801d6b0

0801b8b0 <__retarget_lock_init_recursive>:
 801b8b0:	4770      	bx	lr

0801b8b2 <__retarget_lock_acquire_recursive>:
 801b8b2:	4770      	bx	lr

0801b8b4 <__retarget_lock_release_recursive>:
 801b8b4:	4770      	bx	lr

0801b8b6 <strcpy>:
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b8bc:	f803 2b01 	strb.w	r2, [r3], #1
 801b8c0:	2a00      	cmp	r2, #0
 801b8c2:	d1f9      	bne.n	801b8b8 <strcpy+0x2>
 801b8c4:	4770      	bx	lr

0801b8c6 <memcpy>:
 801b8c6:	440a      	add	r2, r1
 801b8c8:	4291      	cmp	r1, r2
 801b8ca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b8ce:	d100      	bne.n	801b8d2 <memcpy+0xc>
 801b8d0:	4770      	bx	lr
 801b8d2:	b510      	push	{r4, lr}
 801b8d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b8d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b8dc:	4291      	cmp	r1, r2
 801b8de:	d1f9      	bne.n	801b8d4 <memcpy+0xe>
 801b8e0:	bd10      	pop	{r4, pc}
	...

0801b8e4 <__assert_func>:
 801b8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b8e6:	4614      	mov	r4, r2
 801b8e8:	461a      	mov	r2, r3
 801b8ea:	4b09      	ldr	r3, [pc, #36]	@ (801b910 <__assert_func+0x2c>)
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	4605      	mov	r5, r0
 801b8f0:	68d8      	ldr	r0, [r3, #12]
 801b8f2:	b954      	cbnz	r4, 801b90a <__assert_func+0x26>
 801b8f4:	4b07      	ldr	r3, [pc, #28]	@ (801b914 <__assert_func+0x30>)
 801b8f6:	461c      	mov	r4, r3
 801b8f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b8fc:	9100      	str	r1, [sp, #0]
 801b8fe:	462b      	mov	r3, r5
 801b900:	4905      	ldr	r1, [pc, #20]	@ (801b918 <__assert_func+0x34>)
 801b902:	f000 fd3f 	bl	801c384 <fiprintf>
 801b906:	f000 fde3 	bl	801c4d0 <abort>
 801b90a:	4b04      	ldr	r3, [pc, #16]	@ (801b91c <__assert_func+0x38>)
 801b90c:	e7f4      	b.n	801b8f8 <__assert_func+0x14>
 801b90e:	bf00      	nop
 801b910:	20000368 	.word	0x20000368
 801b914:	0801d667 	.word	0x0801d667
 801b918:	0801d639 	.word	0x0801d639
 801b91c:	0801d62c 	.word	0x0801d62c

0801b920 <__env_lock>:
 801b920:	4801      	ldr	r0, [pc, #4]	@ (801b928 <__env_lock+0x8>)
 801b922:	f7ff bfc6 	b.w	801b8b2 <__retarget_lock_acquire_recursive>
 801b926:	bf00      	nop
 801b928:	20012a18 	.word	0x20012a18

0801b92c <__env_unlock>:
 801b92c:	4801      	ldr	r0, [pc, #4]	@ (801b934 <__env_unlock+0x8>)
 801b92e:	f7ff bfc1 	b.w	801b8b4 <__retarget_lock_release_recursive>
 801b932:	bf00      	nop
 801b934:	20012a18 	.word	0x20012a18

0801b938 <_free_r>:
 801b938:	b538      	push	{r3, r4, r5, lr}
 801b93a:	4605      	mov	r5, r0
 801b93c:	2900      	cmp	r1, #0
 801b93e:	d041      	beq.n	801b9c4 <_free_r+0x8c>
 801b940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b944:	1f0c      	subs	r4, r1, #4
 801b946:	2b00      	cmp	r3, #0
 801b948:	bfb8      	it	lt
 801b94a:	18e4      	addlt	r4, r4, r3
 801b94c:	f7ff fc1e 	bl	801b18c <__malloc_lock>
 801b950:	4a1d      	ldr	r2, [pc, #116]	@ (801b9c8 <_free_r+0x90>)
 801b952:	6813      	ldr	r3, [r2, #0]
 801b954:	b933      	cbnz	r3, 801b964 <_free_r+0x2c>
 801b956:	6063      	str	r3, [r4, #4]
 801b958:	6014      	str	r4, [r2, #0]
 801b95a:	4628      	mov	r0, r5
 801b95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b960:	f7ff bc1a 	b.w	801b198 <__malloc_unlock>
 801b964:	42a3      	cmp	r3, r4
 801b966:	d908      	bls.n	801b97a <_free_r+0x42>
 801b968:	6820      	ldr	r0, [r4, #0]
 801b96a:	1821      	adds	r1, r4, r0
 801b96c:	428b      	cmp	r3, r1
 801b96e:	bf01      	itttt	eq
 801b970:	6819      	ldreq	r1, [r3, #0]
 801b972:	685b      	ldreq	r3, [r3, #4]
 801b974:	1809      	addeq	r1, r1, r0
 801b976:	6021      	streq	r1, [r4, #0]
 801b978:	e7ed      	b.n	801b956 <_free_r+0x1e>
 801b97a:	461a      	mov	r2, r3
 801b97c:	685b      	ldr	r3, [r3, #4]
 801b97e:	b10b      	cbz	r3, 801b984 <_free_r+0x4c>
 801b980:	42a3      	cmp	r3, r4
 801b982:	d9fa      	bls.n	801b97a <_free_r+0x42>
 801b984:	6811      	ldr	r1, [r2, #0]
 801b986:	1850      	adds	r0, r2, r1
 801b988:	42a0      	cmp	r0, r4
 801b98a:	d10b      	bne.n	801b9a4 <_free_r+0x6c>
 801b98c:	6820      	ldr	r0, [r4, #0]
 801b98e:	4401      	add	r1, r0
 801b990:	1850      	adds	r0, r2, r1
 801b992:	4283      	cmp	r3, r0
 801b994:	6011      	str	r1, [r2, #0]
 801b996:	d1e0      	bne.n	801b95a <_free_r+0x22>
 801b998:	6818      	ldr	r0, [r3, #0]
 801b99a:	685b      	ldr	r3, [r3, #4]
 801b99c:	6053      	str	r3, [r2, #4]
 801b99e:	4408      	add	r0, r1
 801b9a0:	6010      	str	r0, [r2, #0]
 801b9a2:	e7da      	b.n	801b95a <_free_r+0x22>
 801b9a4:	d902      	bls.n	801b9ac <_free_r+0x74>
 801b9a6:	230c      	movs	r3, #12
 801b9a8:	602b      	str	r3, [r5, #0]
 801b9aa:	e7d6      	b.n	801b95a <_free_r+0x22>
 801b9ac:	6820      	ldr	r0, [r4, #0]
 801b9ae:	1821      	adds	r1, r4, r0
 801b9b0:	428b      	cmp	r3, r1
 801b9b2:	bf04      	itt	eq
 801b9b4:	6819      	ldreq	r1, [r3, #0]
 801b9b6:	685b      	ldreq	r3, [r3, #4]
 801b9b8:	6063      	str	r3, [r4, #4]
 801b9ba:	bf04      	itt	eq
 801b9bc:	1809      	addeq	r1, r1, r0
 801b9be:	6021      	streq	r1, [r4, #0]
 801b9c0:	6054      	str	r4, [r2, #4]
 801b9c2:	e7ca      	b.n	801b95a <_free_r+0x22>
 801b9c4:	bd38      	pop	{r3, r4, r5, pc}
 801b9c6:	bf00      	nop
 801b9c8:	200128d4 	.word	0x200128d4

0801b9cc <_malloc_usable_size_r>:
 801b9cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b9d0:	1f18      	subs	r0, r3, #4
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	bfbc      	itt	lt
 801b9d6:	580b      	ldrlt	r3, [r1, r0]
 801b9d8:	18c0      	addlt	r0, r0, r3
 801b9da:	4770      	bx	lr

0801b9dc <__ssputs_r>:
 801b9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9e0:	688e      	ldr	r6, [r1, #8]
 801b9e2:	461f      	mov	r7, r3
 801b9e4:	42be      	cmp	r6, r7
 801b9e6:	680b      	ldr	r3, [r1, #0]
 801b9e8:	4682      	mov	sl, r0
 801b9ea:	460c      	mov	r4, r1
 801b9ec:	4690      	mov	r8, r2
 801b9ee:	d82d      	bhi.n	801ba4c <__ssputs_r+0x70>
 801b9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b9f8:	d026      	beq.n	801ba48 <__ssputs_r+0x6c>
 801b9fa:	6965      	ldr	r5, [r4, #20]
 801b9fc:	6909      	ldr	r1, [r1, #16]
 801b9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba02:	eba3 0901 	sub.w	r9, r3, r1
 801ba06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ba0a:	1c7b      	adds	r3, r7, #1
 801ba0c:	444b      	add	r3, r9
 801ba0e:	106d      	asrs	r5, r5, #1
 801ba10:	429d      	cmp	r5, r3
 801ba12:	bf38      	it	cc
 801ba14:	461d      	movcc	r5, r3
 801ba16:	0553      	lsls	r3, r2, #21
 801ba18:	d527      	bpl.n	801ba6a <__ssputs_r+0x8e>
 801ba1a:	4629      	mov	r1, r5
 801ba1c:	f7ff fb36 	bl	801b08c <_malloc_r>
 801ba20:	4606      	mov	r6, r0
 801ba22:	b360      	cbz	r0, 801ba7e <__ssputs_r+0xa2>
 801ba24:	6921      	ldr	r1, [r4, #16]
 801ba26:	464a      	mov	r2, r9
 801ba28:	f7ff ff4d 	bl	801b8c6 <memcpy>
 801ba2c:	89a3      	ldrh	r3, [r4, #12]
 801ba2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ba32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ba36:	81a3      	strh	r3, [r4, #12]
 801ba38:	6126      	str	r6, [r4, #16]
 801ba3a:	6165      	str	r5, [r4, #20]
 801ba3c:	444e      	add	r6, r9
 801ba3e:	eba5 0509 	sub.w	r5, r5, r9
 801ba42:	6026      	str	r6, [r4, #0]
 801ba44:	60a5      	str	r5, [r4, #8]
 801ba46:	463e      	mov	r6, r7
 801ba48:	42be      	cmp	r6, r7
 801ba4a:	d900      	bls.n	801ba4e <__ssputs_r+0x72>
 801ba4c:	463e      	mov	r6, r7
 801ba4e:	6820      	ldr	r0, [r4, #0]
 801ba50:	4632      	mov	r2, r6
 801ba52:	4641      	mov	r1, r8
 801ba54:	f7ff fe54 	bl	801b700 <memmove>
 801ba58:	68a3      	ldr	r3, [r4, #8]
 801ba5a:	1b9b      	subs	r3, r3, r6
 801ba5c:	60a3      	str	r3, [r4, #8]
 801ba5e:	6823      	ldr	r3, [r4, #0]
 801ba60:	4433      	add	r3, r6
 801ba62:	6023      	str	r3, [r4, #0]
 801ba64:	2000      	movs	r0, #0
 801ba66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba6a:	462a      	mov	r2, r5
 801ba6c:	f7ff fc0e 	bl	801b28c <_realloc_r>
 801ba70:	4606      	mov	r6, r0
 801ba72:	2800      	cmp	r0, #0
 801ba74:	d1e0      	bne.n	801ba38 <__ssputs_r+0x5c>
 801ba76:	6921      	ldr	r1, [r4, #16]
 801ba78:	4650      	mov	r0, sl
 801ba7a:	f7ff ff5d 	bl	801b938 <_free_r>
 801ba7e:	230c      	movs	r3, #12
 801ba80:	f8ca 3000 	str.w	r3, [sl]
 801ba84:	89a3      	ldrh	r3, [r4, #12]
 801ba86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ba8a:	81a3      	strh	r3, [r4, #12]
 801ba8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba90:	e7e9      	b.n	801ba66 <__ssputs_r+0x8a>
	...

0801ba94 <_svfiprintf_r>:
 801ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba98:	4698      	mov	r8, r3
 801ba9a:	898b      	ldrh	r3, [r1, #12]
 801ba9c:	061b      	lsls	r3, r3, #24
 801ba9e:	b09d      	sub	sp, #116	@ 0x74
 801baa0:	4607      	mov	r7, r0
 801baa2:	460d      	mov	r5, r1
 801baa4:	4614      	mov	r4, r2
 801baa6:	d510      	bpl.n	801baca <_svfiprintf_r+0x36>
 801baa8:	690b      	ldr	r3, [r1, #16]
 801baaa:	b973      	cbnz	r3, 801baca <_svfiprintf_r+0x36>
 801baac:	2140      	movs	r1, #64	@ 0x40
 801baae:	f7ff faed 	bl	801b08c <_malloc_r>
 801bab2:	6028      	str	r0, [r5, #0]
 801bab4:	6128      	str	r0, [r5, #16]
 801bab6:	b930      	cbnz	r0, 801bac6 <_svfiprintf_r+0x32>
 801bab8:	230c      	movs	r3, #12
 801baba:	603b      	str	r3, [r7, #0]
 801babc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bac0:	b01d      	add	sp, #116	@ 0x74
 801bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bac6:	2340      	movs	r3, #64	@ 0x40
 801bac8:	616b      	str	r3, [r5, #20]
 801baca:	2300      	movs	r3, #0
 801bacc:	9309      	str	r3, [sp, #36]	@ 0x24
 801bace:	2320      	movs	r3, #32
 801bad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bad4:	f8cd 800c 	str.w	r8, [sp, #12]
 801bad8:	2330      	movs	r3, #48	@ 0x30
 801bada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bc78 <_svfiprintf_r+0x1e4>
 801bade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bae2:	f04f 0901 	mov.w	r9, #1
 801bae6:	4623      	mov	r3, r4
 801bae8:	469a      	mov	sl, r3
 801baea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801baee:	b10a      	cbz	r2, 801baf4 <_svfiprintf_r+0x60>
 801baf0:	2a25      	cmp	r2, #37	@ 0x25
 801baf2:	d1f9      	bne.n	801bae8 <_svfiprintf_r+0x54>
 801baf4:	ebba 0b04 	subs.w	fp, sl, r4
 801baf8:	d00b      	beq.n	801bb12 <_svfiprintf_r+0x7e>
 801bafa:	465b      	mov	r3, fp
 801bafc:	4622      	mov	r2, r4
 801bafe:	4629      	mov	r1, r5
 801bb00:	4638      	mov	r0, r7
 801bb02:	f7ff ff6b 	bl	801b9dc <__ssputs_r>
 801bb06:	3001      	adds	r0, #1
 801bb08:	f000 80a7 	beq.w	801bc5a <_svfiprintf_r+0x1c6>
 801bb0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bb0e:	445a      	add	r2, fp
 801bb10:	9209      	str	r2, [sp, #36]	@ 0x24
 801bb12:	f89a 3000 	ldrb.w	r3, [sl]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	f000 809f 	beq.w	801bc5a <_svfiprintf_r+0x1c6>
 801bb1c:	2300      	movs	r3, #0
 801bb1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bb22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bb26:	f10a 0a01 	add.w	sl, sl, #1
 801bb2a:	9304      	str	r3, [sp, #16]
 801bb2c:	9307      	str	r3, [sp, #28]
 801bb2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bb32:	931a      	str	r3, [sp, #104]	@ 0x68
 801bb34:	4654      	mov	r4, sl
 801bb36:	2205      	movs	r2, #5
 801bb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb3c:	484e      	ldr	r0, [pc, #312]	@ (801bc78 <_svfiprintf_r+0x1e4>)
 801bb3e:	f7e4 fb97 	bl	8000270 <memchr>
 801bb42:	9a04      	ldr	r2, [sp, #16]
 801bb44:	b9d8      	cbnz	r0, 801bb7e <_svfiprintf_r+0xea>
 801bb46:	06d0      	lsls	r0, r2, #27
 801bb48:	bf44      	itt	mi
 801bb4a:	2320      	movmi	r3, #32
 801bb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bb50:	0711      	lsls	r1, r2, #28
 801bb52:	bf44      	itt	mi
 801bb54:	232b      	movmi	r3, #43	@ 0x2b
 801bb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bb5a:	f89a 3000 	ldrb.w	r3, [sl]
 801bb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 801bb60:	d015      	beq.n	801bb8e <_svfiprintf_r+0xfa>
 801bb62:	9a07      	ldr	r2, [sp, #28]
 801bb64:	4654      	mov	r4, sl
 801bb66:	2000      	movs	r0, #0
 801bb68:	f04f 0c0a 	mov.w	ip, #10
 801bb6c:	4621      	mov	r1, r4
 801bb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bb72:	3b30      	subs	r3, #48	@ 0x30
 801bb74:	2b09      	cmp	r3, #9
 801bb76:	d94b      	bls.n	801bc10 <_svfiprintf_r+0x17c>
 801bb78:	b1b0      	cbz	r0, 801bba8 <_svfiprintf_r+0x114>
 801bb7a:	9207      	str	r2, [sp, #28]
 801bb7c:	e014      	b.n	801bba8 <_svfiprintf_r+0x114>
 801bb7e:	eba0 0308 	sub.w	r3, r0, r8
 801bb82:	fa09 f303 	lsl.w	r3, r9, r3
 801bb86:	4313      	orrs	r3, r2
 801bb88:	9304      	str	r3, [sp, #16]
 801bb8a:	46a2      	mov	sl, r4
 801bb8c:	e7d2      	b.n	801bb34 <_svfiprintf_r+0xa0>
 801bb8e:	9b03      	ldr	r3, [sp, #12]
 801bb90:	1d19      	adds	r1, r3, #4
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	9103      	str	r1, [sp, #12]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	bfbb      	ittet	lt
 801bb9a:	425b      	neglt	r3, r3
 801bb9c:	f042 0202 	orrlt.w	r2, r2, #2
 801bba0:	9307      	strge	r3, [sp, #28]
 801bba2:	9307      	strlt	r3, [sp, #28]
 801bba4:	bfb8      	it	lt
 801bba6:	9204      	strlt	r2, [sp, #16]
 801bba8:	7823      	ldrb	r3, [r4, #0]
 801bbaa:	2b2e      	cmp	r3, #46	@ 0x2e
 801bbac:	d10a      	bne.n	801bbc4 <_svfiprintf_r+0x130>
 801bbae:	7863      	ldrb	r3, [r4, #1]
 801bbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 801bbb2:	d132      	bne.n	801bc1a <_svfiprintf_r+0x186>
 801bbb4:	9b03      	ldr	r3, [sp, #12]
 801bbb6:	1d1a      	adds	r2, r3, #4
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	9203      	str	r2, [sp, #12]
 801bbbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bbc0:	3402      	adds	r4, #2
 801bbc2:	9305      	str	r3, [sp, #20]
 801bbc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bc88 <_svfiprintf_r+0x1f4>
 801bbc8:	7821      	ldrb	r1, [r4, #0]
 801bbca:	2203      	movs	r2, #3
 801bbcc:	4650      	mov	r0, sl
 801bbce:	f7e4 fb4f 	bl	8000270 <memchr>
 801bbd2:	b138      	cbz	r0, 801bbe4 <_svfiprintf_r+0x150>
 801bbd4:	9b04      	ldr	r3, [sp, #16]
 801bbd6:	eba0 000a 	sub.w	r0, r0, sl
 801bbda:	2240      	movs	r2, #64	@ 0x40
 801bbdc:	4082      	lsls	r2, r0
 801bbde:	4313      	orrs	r3, r2
 801bbe0:	3401      	adds	r4, #1
 801bbe2:	9304      	str	r3, [sp, #16]
 801bbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbe8:	4824      	ldr	r0, [pc, #144]	@ (801bc7c <_svfiprintf_r+0x1e8>)
 801bbea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bbee:	2206      	movs	r2, #6
 801bbf0:	f7e4 fb3e 	bl	8000270 <memchr>
 801bbf4:	2800      	cmp	r0, #0
 801bbf6:	d036      	beq.n	801bc66 <_svfiprintf_r+0x1d2>
 801bbf8:	4b21      	ldr	r3, [pc, #132]	@ (801bc80 <_svfiprintf_r+0x1ec>)
 801bbfa:	bb1b      	cbnz	r3, 801bc44 <_svfiprintf_r+0x1b0>
 801bbfc:	9b03      	ldr	r3, [sp, #12]
 801bbfe:	3307      	adds	r3, #7
 801bc00:	f023 0307 	bic.w	r3, r3, #7
 801bc04:	3308      	adds	r3, #8
 801bc06:	9303      	str	r3, [sp, #12]
 801bc08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc0a:	4433      	add	r3, r6
 801bc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc0e:	e76a      	b.n	801bae6 <_svfiprintf_r+0x52>
 801bc10:	fb0c 3202 	mla	r2, ip, r2, r3
 801bc14:	460c      	mov	r4, r1
 801bc16:	2001      	movs	r0, #1
 801bc18:	e7a8      	b.n	801bb6c <_svfiprintf_r+0xd8>
 801bc1a:	2300      	movs	r3, #0
 801bc1c:	3401      	adds	r4, #1
 801bc1e:	9305      	str	r3, [sp, #20]
 801bc20:	4619      	mov	r1, r3
 801bc22:	f04f 0c0a 	mov.w	ip, #10
 801bc26:	4620      	mov	r0, r4
 801bc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bc2c:	3a30      	subs	r2, #48	@ 0x30
 801bc2e:	2a09      	cmp	r2, #9
 801bc30:	d903      	bls.n	801bc3a <_svfiprintf_r+0x1a6>
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d0c6      	beq.n	801bbc4 <_svfiprintf_r+0x130>
 801bc36:	9105      	str	r1, [sp, #20]
 801bc38:	e7c4      	b.n	801bbc4 <_svfiprintf_r+0x130>
 801bc3a:	fb0c 2101 	mla	r1, ip, r1, r2
 801bc3e:	4604      	mov	r4, r0
 801bc40:	2301      	movs	r3, #1
 801bc42:	e7f0      	b.n	801bc26 <_svfiprintf_r+0x192>
 801bc44:	ab03      	add	r3, sp, #12
 801bc46:	9300      	str	r3, [sp, #0]
 801bc48:	462a      	mov	r2, r5
 801bc4a:	4b0e      	ldr	r3, [pc, #56]	@ (801bc84 <_svfiprintf_r+0x1f0>)
 801bc4c:	a904      	add	r1, sp, #16
 801bc4e:	4638      	mov	r0, r7
 801bc50:	f3af 8000 	nop.w
 801bc54:	1c42      	adds	r2, r0, #1
 801bc56:	4606      	mov	r6, r0
 801bc58:	d1d6      	bne.n	801bc08 <_svfiprintf_r+0x174>
 801bc5a:	89ab      	ldrh	r3, [r5, #12]
 801bc5c:	065b      	lsls	r3, r3, #25
 801bc5e:	f53f af2d 	bmi.w	801babc <_svfiprintf_r+0x28>
 801bc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc64:	e72c      	b.n	801bac0 <_svfiprintf_r+0x2c>
 801bc66:	ab03      	add	r3, sp, #12
 801bc68:	9300      	str	r3, [sp, #0]
 801bc6a:	462a      	mov	r2, r5
 801bc6c:	4b05      	ldr	r3, [pc, #20]	@ (801bc84 <_svfiprintf_r+0x1f0>)
 801bc6e:	a904      	add	r1, sp, #16
 801bc70:	4638      	mov	r0, r7
 801bc72:	f000 f9bb 	bl	801bfec <_printf_i>
 801bc76:	e7ed      	b.n	801bc54 <_svfiprintf_r+0x1c0>
 801bc78:	0801d668 	.word	0x0801d668
 801bc7c:	0801d672 	.word	0x0801d672
 801bc80:	00000000 	.word	0x00000000
 801bc84:	0801b9dd 	.word	0x0801b9dd
 801bc88:	0801d66e 	.word	0x0801d66e

0801bc8c <__sfputc_r>:
 801bc8c:	6893      	ldr	r3, [r2, #8]
 801bc8e:	3b01      	subs	r3, #1
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	b410      	push	{r4}
 801bc94:	6093      	str	r3, [r2, #8]
 801bc96:	da08      	bge.n	801bcaa <__sfputc_r+0x1e>
 801bc98:	6994      	ldr	r4, [r2, #24]
 801bc9a:	42a3      	cmp	r3, r4
 801bc9c:	db01      	blt.n	801bca2 <__sfputc_r+0x16>
 801bc9e:	290a      	cmp	r1, #10
 801bca0:	d103      	bne.n	801bcaa <__sfputc_r+0x1e>
 801bca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bca6:	f000 bb7f 	b.w	801c3a8 <__swbuf_r>
 801bcaa:	6813      	ldr	r3, [r2, #0]
 801bcac:	1c58      	adds	r0, r3, #1
 801bcae:	6010      	str	r0, [r2, #0]
 801bcb0:	7019      	strb	r1, [r3, #0]
 801bcb2:	4608      	mov	r0, r1
 801bcb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcb8:	4770      	bx	lr

0801bcba <__sfputs_r>:
 801bcba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcbc:	4606      	mov	r6, r0
 801bcbe:	460f      	mov	r7, r1
 801bcc0:	4614      	mov	r4, r2
 801bcc2:	18d5      	adds	r5, r2, r3
 801bcc4:	42ac      	cmp	r4, r5
 801bcc6:	d101      	bne.n	801bccc <__sfputs_r+0x12>
 801bcc8:	2000      	movs	r0, #0
 801bcca:	e007      	b.n	801bcdc <__sfputs_r+0x22>
 801bccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcd0:	463a      	mov	r2, r7
 801bcd2:	4630      	mov	r0, r6
 801bcd4:	f7ff ffda 	bl	801bc8c <__sfputc_r>
 801bcd8:	1c43      	adds	r3, r0, #1
 801bcda:	d1f3      	bne.n	801bcc4 <__sfputs_r+0xa>
 801bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bce0 <_vfiprintf_r>:
 801bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bce4:	460d      	mov	r5, r1
 801bce6:	b09d      	sub	sp, #116	@ 0x74
 801bce8:	4614      	mov	r4, r2
 801bcea:	4698      	mov	r8, r3
 801bcec:	4606      	mov	r6, r0
 801bcee:	b118      	cbz	r0, 801bcf8 <_vfiprintf_r+0x18>
 801bcf0:	6a03      	ldr	r3, [r0, #32]
 801bcf2:	b90b      	cbnz	r3, 801bcf8 <_vfiprintf_r+0x18>
 801bcf4:	f7ff fbfc 	bl	801b4f0 <__sinit>
 801bcf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bcfa:	07d9      	lsls	r1, r3, #31
 801bcfc:	d405      	bmi.n	801bd0a <_vfiprintf_r+0x2a>
 801bcfe:	89ab      	ldrh	r3, [r5, #12]
 801bd00:	059a      	lsls	r2, r3, #22
 801bd02:	d402      	bmi.n	801bd0a <_vfiprintf_r+0x2a>
 801bd04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bd06:	f7ff fdd4 	bl	801b8b2 <__retarget_lock_acquire_recursive>
 801bd0a:	89ab      	ldrh	r3, [r5, #12]
 801bd0c:	071b      	lsls	r3, r3, #28
 801bd0e:	d501      	bpl.n	801bd14 <_vfiprintf_r+0x34>
 801bd10:	692b      	ldr	r3, [r5, #16]
 801bd12:	b99b      	cbnz	r3, 801bd3c <_vfiprintf_r+0x5c>
 801bd14:	4629      	mov	r1, r5
 801bd16:	4630      	mov	r0, r6
 801bd18:	f000 fb84 	bl	801c424 <__swsetup_r>
 801bd1c:	b170      	cbz	r0, 801bd3c <_vfiprintf_r+0x5c>
 801bd1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bd20:	07dc      	lsls	r4, r3, #31
 801bd22:	d504      	bpl.n	801bd2e <_vfiprintf_r+0x4e>
 801bd24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd28:	b01d      	add	sp, #116	@ 0x74
 801bd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd2e:	89ab      	ldrh	r3, [r5, #12]
 801bd30:	0598      	lsls	r0, r3, #22
 801bd32:	d4f7      	bmi.n	801bd24 <_vfiprintf_r+0x44>
 801bd34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bd36:	f7ff fdbd 	bl	801b8b4 <__retarget_lock_release_recursive>
 801bd3a:	e7f3      	b.n	801bd24 <_vfiprintf_r+0x44>
 801bd3c:	2300      	movs	r3, #0
 801bd3e:	9309      	str	r3, [sp, #36]	@ 0x24
 801bd40:	2320      	movs	r3, #32
 801bd42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bd46:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd4a:	2330      	movs	r3, #48	@ 0x30
 801bd4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801befc <_vfiprintf_r+0x21c>
 801bd50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bd54:	f04f 0901 	mov.w	r9, #1
 801bd58:	4623      	mov	r3, r4
 801bd5a:	469a      	mov	sl, r3
 801bd5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd60:	b10a      	cbz	r2, 801bd66 <_vfiprintf_r+0x86>
 801bd62:	2a25      	cmp	r2, #37	@ 0x25
 801bd64:	d1f9      	bne.n	801bd5a <_vfiprintf_r+0x7a>
 801bd66:	ebba 0b04 	subs.w	fp, sl, r4
 801bd6a:	d00b      	beq.n	801bd84 <_vfiprintf_r+0xa4>
 801bd6c:	465b      	mov	r3, fp
 801bd6e:	4622      	mov	r2, r4
 801bd70:	4629      	mov	r1, r5
 801bd72:	4630      	mov	r0, r6
 801bd74:	f7ff ffa1 	bl	801bcba <__sfputs_r>
 801bd78:	3001      	adds	r0, #1
 801bd7a:	f000 80a7 	beq.w	801becc <_vfiprintf_r+0x1ec>
 801bd7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bd80:	445a      	add	r2, fp
 801bd82:	9209      	str	r2, [sp, #36]	@ 0x24
 801bd84:	f89a 3000 	ldrb.w	r3, [sl]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	f000 809f 	beq.w	801becc <_vfiprintf_r+0x1ec>
 801bd8e:	2300      	movs	r3, #0
 801bd90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bd94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd98:	f10a 0a01 	add.w	sl, sl, #1
 801bd9c:	9304      	str	r3, [sp, #16]
 801bd9e:	9307      	str	r3, [sp, #28]
 801bda0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bda4:	931a      	str	r3, [sp, #104]	@ 0x68
 801bda6:	4654      	mov	r4, sl
 801bda8:	2205      	movs	r2, #5
 801bdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdae:	4853      	ldr	r0, [pc, #332]	@ (801befc <_vfiprintf_r+0x21c>)
 801bdb0:	f7e4 fa5e 	bl	8000270 <memchr>
 801bdb4:	9a04      	ldr	r2, [sp, #16]
 801bdb6:	b9d8      	cbnz	r0, 801bdf0 <_vfiprintf_r+0x110>
 801bdb8:	06d1      	lsls	r1, r2, #27
 801bdba:	bf44      	itt	mi
 801bdbc:	2320      	movmi	r3, #32
 801bdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bdc2:	0713      	lsls	r3, r2, #28
 801bdc4:	bf44      	itt	mi
 801bdc6:	232b      	movmi	r3, #43	@ 0x2b
 801bdc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bdcc:	f89a 3000 	ldrb.w	r3, [sl]
 801bdd0:	2b2a      	cmp	r3, #42	@ 0x2a
 801bdd2:	d015      	beq.n	801be00 <_vfiprintf_r+0x120>
 801bdd4:	9a07      	ldr	r2, [sp, #28]
 801bdd6:	4654      	mov	r4, sl
 801bdd8:	2000      	movs	r0, #0
 801bdda:	f04f 0c0a 	mov.w	ip, #10
 801bdde:	4621      	mov	r1, r4
 801bde0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bde4:	3b30      	subs	r3, #48	@ 0x30
 801bde6:	2b09      	cmp	r3, #9
 801bde8:	d94b      	bls.n	801be82 <_vfiprintf_r+0x1a2>
 801bdea:	b1b0      	cbz	r0, 801be1a <_vfiprintf_r+0x13a>
 801bdec:	9207      	str	r2, [sp, #28]
 801bdee:	e014      	b.n	801be1a <_vfiprintf_r+0x13a>
 801bdf0:	eba0 0308 	sub.w	r3, r0, r8
 801bdf4:	fa09 f303 	lsl.w	r3, r9, r3
 801bdf8:	4313      	orrs	r3, r2
 801bdfa:	9304      	str	r3, [sp, #16]
 801bdfc:	46a2      	mov	sl, r4
 801bdfe:	e7d2      	b.n	801bda6 <_vfiprintf_r+0xc6>
 801be00:	9b03      	ldr	r3, [sp, #12]
 801be02:	1d19      	adds	r1, r3, #4
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	9103      	str	r1, [sp, #12]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	bfbb      	ittet	lt
 801be0c:	425b      	neglt	r3, r3
 801be0e:	f042 0202 	orrlt.w	r2, r2, #2
 801be12:	9307      	strge	r3, [sp, #28]
 801be14:	9307      	strlt	r3, [sp, #28]
 801be16:	bfb8      	it	lt
 801be18:	9204      	strlt	r2, [sp, #16]
 801be1a:	7823      	ldrb	r3, [r4, #0]
 801be1c:	2b2e      	cmp	r3, #46	@ 0x2e
 801be1e:	d10a      	bne.n	801be36 <_vfiprintf_r+0x156>
 801be20:	7863      	ldrb	r3, [r4, #1]
 801be22:	2b2a      	cmp	r3, #42	@ 0x2a
 801be24:	d132      	bne.n	801be8c <_vfiprintf_r+0x1ac>
 801be26:	9b03      	ldr	r3, [sp, #12]
 801be28:	1d1a      	adds	r2, r3, #4
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	9203      	str	r2, [sp, #12]
 801be2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801be32:	3402      	adds	r4, #2
 801be34:	9305      	str	r3, [sp, #20]
 801be36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bf0c <_vfiprintf_r+0x22c>
 801be3a:	7821      	ldrb	r1, [r4, #0]
 801be3c:	2203      	movs	r2, #3
 801be3e:	4650      	mov	r0, sl
 801be40:	f7e4 fa16 	bl	8000270 <memchr>
 801be44:	b138      	cbz	r0, 801be56 <_vfiprintf_r+0x176>
 801be46:	9b04      	ldr	r3, [sp, #16]
 801be48:	eba0 000a 	sub.w	r0, r0, sl
 801be4c:	2240      	movs	r2, #64	@ 0x40
 801be4e:	4082      	lsls	r2, r0
 801be50:	4313      	orrs	r3, r2
 801be52:	3401      	adds	r4, #1
 801be54:	9304      	str	r3, [sp, #16]
 801be56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be5a:	4829      	ldr	r0, [pc, #164]	@ (801bf00 <_vfiprintf_r+0x220>)
 801be5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801be60:	2206      	movs	r2, #6
 801be62:	f7e4 fa05 	bl	8000270 <memchr>
 801be66:	2800      	cmp	r0, #0
 801be68:	d03f      	beq.n	801beea <_vfiprintf_r+0x20a>
 801be6a:	4b26      	ldr	r3, [pc, #152]	@ (801bf04 <_vfiprintf_r+0x224>)
 801be6c:	bb1b      	cbnz	r3, 801beb6 <_vfiprintf_r+0x1d6>
 801be6e:	9b03      	ldr	r3, [sp, #12]
 801be70:	3307      	adds	r3, #7
 801be72:	f023 0307 	bic.w	r3, r3, #7
 801be76:	3308      	adds	r3, #8
 801be78:	9303      	str	r3, [sp, #12]
 801be7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be7c:	443b      	add	r3, r7
 801be7e:	9309      	str	r3, [sp, #36]	@ 0x24
 801be80:	e76a      	b.n	801bd58 <_vfiprintf_r+0x78>
 801be82:	fb0c 3202 	mla	r2, ip, r2, r3
 801be86:	460c      	mov	r4, r1
 801be88:	2001      	movs	r0, #1
 801be8a:	e7a8      	b.n	801bdde <_vfiprintf_r+0xfe>
 801be8c:	2300      	movs	r3, #0
 801be8e:	3401      	adds	r4, #1
 801be90:	9305      	str	r3, [sp, #20]
 801be92:	4619      	mov	r1, r3
 801be94:	f04f 0c0a 	mov.w	ip, #10
 801be98:	4620      	mov	r0, r4
 801be9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be9e:	3a30      	subs	r2, #48	@ 0x30
 801bea0:	2a09      	cmp	r2, #9
 801bea2:	d903      	bls.n	801beac <_vfiprintf_r+0x1cc>
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d0c6      	beq.n	801be36 <_vfiprintf_r+0x156>
 801bea8:	9105      	str	r1, [sp, #20]
 801beaa:	e7c4      	b.n	801be36 <_vfiprintf_r+0x156>
 801beac:	fb0c 2101 	mla	r1, ip, r1, r2
 801beb0:	4604      	mov	r4, r0
 801beb2:	2301      	movs	r3, #1
 801beb4:	e7f0      	b.n	801be98 <_vfiprintf_r+0x1b8>
 801beb6:	ab03      	add	r3, sp, #12
 801beb8:	9300      	str	r3, [sp, #0]
 801beba:	462a      	mov	r2, r5
 801bebc:	4b12      	ldr	r3, [pc, #72]	@ (801bf08 <_vfiprintf_r+0x228>)
 801bebe:	a904      	add	r1, sp, #16
 801bec0:	4630      	mov	r0, r6
 801bec2:	f3af 8000 	nop.w
 801bec6:	4607      	mov	r7, r0
 801bec8:	1c78      	adds	r0, r7, #1
 801beca:	d1d6      	bne.n	801be7a <_vfiprintf_r+0x19a>
 801becc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bece:	07d9      	lsls	r1, r3, #31
 801bed0:	d405      	bmi.n	801bede <_vfiprintf_r+0x1fe>
 801bed2:	89ab      	ldrh	r3, [r5, #12]
 801bed4:	059a      	lsls	r2, r3, #22
 801bed6:	d402      	bmi.n	801bede <_vfiprintf_r+0x1fe>
 801bed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801beda:	f7ff fceb 	bl	801b8b4 <__retarget_lock_release_recursive>
 801bede:	89ab      	ldrh	r3, [r5, #12]
 801bee0:	065b      	lsls	r3, r3, #25
 801bee2:	f53f af1f 	bmi.w	801bd24 <_vfiprintf_r+0x44>
 801bee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bee8:	e71e      	b.n	801bd28 <_vfiprintf_r+0x48>
 801beea:	ab03      	add	r3, sp, #12
 801beec:	9300      	str	r3, [sp, #0]
 801beee:	462a      	mov	r2, r5
 801bef0:	4b05      	ldr	r3, [pc, #20]	@ (801bf08 <_vfiprintf_r+0x228>)
 801bef2:	a904      	add	r1, sp, #16
 801bef4:	4630      	mov	r0, r6
 801bef6:	f000 f879 	bl	801bfec <_printf_i>
 801befa:	e7e4      	b.n	801bec6 <_vfiprintf_r+0x1e6>
 801befc:	0801d668 	.word	0x0801d668
 801bf00:	0801d672 	.word	0x0801d672
 801bf04:	00000000 	.word	0x00000000
 801bf08:	0801bcbb 	.word	0x0801bcbb
 801bf0c:	0801d66e 	.word	0x0801d66e

0801bf10 <_printf_common>:
 801bf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf14:	4616      	mov	r6, r2
 801bf16:	4698      	mov	r8, r3
 801bf18:	688a      	ldr	r2, [r1, #8]
 801bf1a:	690b      	ldr	r3, [r1, #16]
 801bf1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bf20:	4293      	cmp	r3, r2
 801bf22:	bfb8      	it	lt
 801bf24:	4613      	movlt	r3, r2
 801bf26:	6033      	str	r3, [r6, #0]
 801bf28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bf2c:	4607      	mov	r7, r0
 801bf2e:	460c      	mov	r4, r1
 801bf30:	b10a      	cbz	r2, 801bf36 <_printf_common+0x26>
 801bf32:	3301      	adds	r3, #1
 801bf34:	6033      	str	r3, [r6, #0]
 801bf36:	6823      	ldr	r3, [r4, #0]
 801bf38:	0699      	lsls	r1, r3, #26
 801bf3a:	bf42      	ittt	mi
 801bf3c:	6833      	ldrmi	r3, [r6, #0]
 801bf3e:	3302      	addmi	r3, #2
 801bf40:	6033      	strmi	r3, [r6, #0]
 801bf42:	6825      	ldr	r5, [r4, #0]
 801bf44:	f015 0506 	ands.w	r5, r5, #6
 801bf48:	d106      	bne.n	801bf58 <_printf_common+0x48>
 801bf4a:	f104 0a19 	add.w	sl, r4, #25
 801bf4e:	68e3      	ldr	r3, [r4, #12]
 801bf50:	6832      	ldr	r2, [r6, #0]
 801bf52:	1a9b      	subs	r3, r3, r2
 801bf54:	42ab      	cmp	r3, r5
 801bf56:	dc26      	bgt.n	801bfa6 <_printf_common+0x96>
 801bf58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bf5c:	6822      	ldr	r2, [r4, #0]
 801bf5e:	3b00      	subs	r3, #0
 801bf60:	bf18      	it	ne
 801bf62:	2301      	movne	r3, #1
 801bf64:	0692      	lsls	r2, r2, #26
 801bf66:	d42b      	bmi.n	801bfc0 <_printf_common+0xb0>
 801bf68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bf6c:	4641      	mov	r1, r8
 801bf6e:	4638      	mov	r0, r7
 801bf70:	47c8      	blx	r9
 801bf72:	3001      	adds	r0, #1
 801bf74:	d01e      	beq.n	801bfb4 <_printf_common+0xa4>
 801bf76:	6823      	ldr	r3, [r4, #0]
 801bf78:	6922      	ldr	r2, [r4, #16]
 801bf7a:	f003 0306 	and.w	r3, r3, #6
 801bf7e:	2b04      	cmp	r3, #4
 801bf80:	bf02      	ittt	eq
 801bf82:	68e5      	ldreq	r5, [r4, #12]
 801bf84:	6833      	ldreq	r3, [r6, #0]
 801bf86:	1aed      	subeq	r5, r5, r3
 801bf88:	68a3      	ldr	r3, [r4, #8]
 801bf8a:	bf0c      	ite	eq
 801bf8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bf90:	2500      	movne	r5, #0
 801bf92:	4293      	cmp	r3, r2
 801bf94:	bfc4      	itt	gt
 801bf96:	1a9b      	subgt	r3, r3, r2
 801bf98:	18ed      	addgt	r5, r5, r3
 801bf9a:	2600      	movs	r6, #0
 801bf9c:	341a      	adds	r4, #26
 801bf9e:	42b5      	cmp	r5, r6
 801bfa0:	d11a      	bne.n	801bfd8 <_printf_common+0xc8>
 801bfa2:	2000      	movs	r0, #0
 801bfa4:	e008      	b.n	801bfb8 <_printf_common+0xa8>
 801bfa6:	2301      	movs	r3, #1
 801bfa8:	4652      	mov	r2, sl
 801bfaa:	4641      	mov	r1, r8
 801bfac:	4638      	mov	r0, r7
 801bfae:	47c8      	blx	r9
 801bfb0:	3001      	adds	r0, #1
 801bfb2:	d103      	bne.n	801bfbc <_printf_common+0xac>
 801bfb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfbc:	3501      	adds	r5, #1
 801bfbe:	e7c6      	b.n	801bf4e <_printf_common+0x3e>
 801bfc0:	18e1      	adds	r1, r4, r3
 801bfc2:	1c5a      	adds	r2, r3, #1
 801bfc4:	2030      	movs	r0, #48	@ 0x30
 801bfc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bfca:	4422      	add	r2, r4
 801bfcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bfd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bfd4:	3302      	adds	r3, #2
 801bfd6:	e7c7      	b.n	801bf68 <_printf_common+0x58>
 801bfd8:	2301      	movs	r3, #1
 801bfda:	4622      	mov	r2, r4
 801bfdc:	4641      	mov	r1, r8
 801bfde:	4638      	mov	r0, r7
 801bfe0:	47c8      	blx	r9
 801bfe2:	3001      	adds	r0, #1
 801bfe4:	d0e6      	beq.n	801bfb4 <_printf_common+0xa4>
 801bfe6:	3601      	adds	r6, #1
 801bfe8:	e7d9      	b.n	801bf9e <_printf_common+0x8e>
	...

0801bfec <_printf_i>:
 801bfec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bff0:	7e0f      	ldrb	r7, [r1, #24]
 801bff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bff4:	2f78      	cmp	r7, #120	@ 0x78
 801bff6:	4691      	mov	r9, r2
 801bff8:	4680      	mov	r8, r0
 801bffa:	460c      	mov	r4, r1
 801bffc:	469a      	mov	sl, r3
 801bffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c002:	d807      	bhi.n	801c014 <_printf_i+0x28>
 801c004:	2f62      	cmp	r7, #98	@ 0x62
 801c006:	d80a      	bhi.n	801c01e <_printf_i+0x32>
 801c008:	2f00      	cmp	r7, #0
 801c00a:	f000 80d2 	beq.w	801c1b2 <_printf_i+0x1c6>
 801c00e:	2f58      	cmp	r7, #88	@ 0x58
 801c010:	f000 80b9 	beq.w	801c186 <_printf_i+0x19a>
 801c014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c01c:	e03a      	b.n	801c094 <_printf_i+0xa8>
 801c01e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c022:	2b15      	cmp	r3, #21
 801c024:	d8f6      	bhi.n	801c014 <_printf_i+0x28>
 801c026:	a101      	add	r1, pc, #4	@ (adr r1, 801c02c <_printf_i+0x40>)
 801c028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c02c:	0801c085 	.word	0x0801c085
 801c030:	0801c099 	.word	0x0801c099
 801c034:	0801c015 	.word	0x0801c015
 801c038:	0801c015 	.word	0x0801c015
 801c03c:	0801c015 	.word	0x0801c015
 801c040:	0801c015 	.word	0x0801c015
 801c044:	0801c099 	.word	0x0801c099
 801c048:	0801c015 	.word	0x0801c015
 801c04c:	0801c015 	.word	0x0801c015
 801c050:	0801c015 	.word	0x0801c015
 801c054:	0801c015 	.word	0x0801c015
 801c058:	0801c199 	.word	0x0801c199
 801c05c:	0801c0c3 	.word	0x0801c0c3
 801c060:	0801c153 	.word	0x0801c153
 801c064:	0801c015 	.word	0x0801c015
 801c068:	0801c015 	.word	0x0801c015
 801c06c:	0801c1bb 	.word	0x0801c1bb
 801c070:	0801c015 	.word	0x0801c015
 801c074:	0801c0c3 	.word	0x0801c0c3
 801c078:	0801c015 	.word	0x0801c015
 801c07c:	0801c015 	.word	0x0801c015
 801c080:	0801c15b 	.word	0x0801c15b
 801c084:	6833      	ldr	r3, [r6, #0]
 801c086:	1d1a      	adds	r2, r3, #4
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	6032      	str	r2, [r6, #0]
 801c08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c094:	2301      	movs	r3, #1
 801c096:	e09d      	b.n	801c1d4 <_printf_i+0x1e8>
 801c098:	6833      	ldr	r3, [r6, #0]
 801c09a:	6820      	ldr	r0, [r4, #0]
 801c09c:	1d19      	adds	r1, r3, #4
 801c09e:	6031      	str	r1, [r6, #0]
 801c0a0:	0606      	lsls	r6, r0, #24
 801c0a2:	d501      	bpl.n	801c0a8 <_printf_i+0xbc>
 801c0a4:	681d      	ldr	r5, [r3, #0]
 801c0a6:	e003      	b.n	801c0b0 <_printf_i+0xc4>
 801c0a8:	0645      	lsls	r5, r0, #25
 801c0aa:	d5fb      	bpl.n	801c0a4 <_printf_i+0xb8>
 801c0ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c0b0:	2d00      	cmp	r5, #0
 801c0b2:	da03      	bge.n	801c0bc <_printf_i+0xd0>
 801c0b4:	232d      	movs	r3, #45	@ 0x2d
 801c0b6:	426d      	negs	r5, r5
 801c0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c0bc:	4859      	ldr	r0, [pc, #356]	@ (801c224 <_printf_i+0x238>)
 801c0be:	230a      	movs	r3, #10
 801c0c0:	e011      	b.n	801c0e6 <_printf_i+0xfa>
 801c0c2:	6821      	ldr	r1, [r4, #0]
 801c0c4:	6833      	ldr	r3, [r6, #0]
 801c0c6:	0608      	lsls	r0, r1, #24
 801c0c8:	f853 5b04 	ldr.w	r5, [r3], #4
 801c0cc:	d402      	bmi.n	801c0d4 <_printf_i+0xe8>
 801c0ce:	0649      	lsls	r1, r1, #25
 801c0d0:	bf48      	it	mi
 801c0d2:	b2ad      	uxthmi	r5, r5
 801c0d4:	2f6f      	cmp	r7, #111	@ 0x6f
 801c0d6:	4853      	ldr	r0, [pc, #332]	@ (801c224 <_printf_i+0x238>)
 801c0d8:	6033      	str	r3, [r6, #0]
 801c0da:	bf14      	ite	ne
 801c0dc:	230a      	movne	r3, #10
 801c0de:	2308      	moveq	r3, #8
 801c0e0:	2100      	movs	r1, #0
 801c0e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c0e6:	6866      	ldr	r6, [r4, #4]
 801c0e8:	60a6      	str	r6, [r4, #8]
 801c0ea:	2e00      	cmp	r6, #0
 801c0ec:	bfa2      	ittt	ge
 801c0ee:	6821      	ldrge	r1, [r4, #0]
 801c0f0:	f021 0104 	bicge.w	r1, r1, #4
 801c0f4:	6021      	strge	r1, [r4, #0]
 801c0f6:	b90d      	cbnz	r5, 801c0fc <_printf_i+0x110>
 801c0f8:	2e00      	cmp	r6, #0
 801c0fa:	d04b      	beq.n	801c194 <_printf_i+0x1a8>
 801c0fc:	4616      	mov	r6, r2
 801c0fe:	fbb5 f1f3 	udiv	r1, r5, r3
 801c102:	fb03 5711 	mls	r7, r3, r1, r5
 801c106:	5dc7      	ldrb	r7, [r0, r7]
 801c108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c10c:	462f      	mov	r7, r5
 801c10e:	42bb      	cmp	r3, r7
 801c110:	460d      	mov	r5, r1
 801c112:	d9f4      	bls.n	801c0fe <_printf_i+0x112>
 801c114:	2b08      	cmp	r3, #8
 801c116:	d10b      	bne.n	801c130 <_printf_i+0x144>
 801c118:	6823      	ldr	r3, [r4, #0]
 801c11a:	07df      	lsls	r7, r3, #31
 801c11c:	d508      	bpl.n	801c130 <_printf_i+0x144>
 801c11e:	6923      	ldr	r3, [r4, #16]
 801c120:	6861      	ldr	r1, [r4, #4]
 801c122:	4299      	cmp	r1, r3
 801c124:	bfde      	ittt	le
 801c126:	2330      	movle	r3, #48	@ 0x30
 801c128:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c12c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801c130:	1b92      	subs	r2, r2, r6
 801c132:	6122      	str	r2, [r4, #16]
 801c134:	f8cd a000 	str.w	sl, [sp]
 801c138:	464b      	mov	r3, r9
 801c13a:	aa03      	add	r2, sp, #12
 801c13c:	4621      	mov	r1, r4
 801c13e:	4640      	mov	r0, r8
 801c140:	f7ff fee6 	bl	801bf10 <_printf_common>
 801c144:	3001      	adds	r0, #1
 801c146:	d14a      	bne.n	801c1de <_printf_i+0x1f2>
 801c148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c14c:	b004      	add	sp, #16
 801c14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c152:	6823      	ldr	r3, [r4, #0]
 801c154:	f043 0320 	orr.w	r3, r3, #32
 801c158:	6023      	str	r3, [r4, #0]
 801c15a:	4833      	ldr	r0, [pc, #204]	@ (801c228 <_printf_i+0x23c>)
 801c15c:	2778      	movs	r7, #120	@ 0x78
 801c15e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c162:	6823      	ldr	r3, [r4, #0]
 801c164:	6831      	ldr	r1, [r6, #0]
 801c166:	061f      	lsls	r7, r3, #24
 801c168:	f851 5b04 	ldr.w	r5, [r1], #4
 801c16c:	d402      	bmi.n	801c174 <_printf_i+0x188>
 801c16e:	065f      	lsls	r7, r3, #25
 801c170:	bf48      	it	mi
 801c172:	b2ad      	uxthmi	r5, r5
 801c174:	6031      	str	r1, [r6, #0]
 801c176:	07d9      	lsls	r1, r3, #31
 801c178:	bf44      	itt	mi
 801c17a:	f043 0320 	orrmi.w	r3, r3, #32
 801c17e:	6023      	strmi	r3, [r4, #0]
 801c180:	b11d      	cbz	r5, 801c18a <_printf_i+0x19e>
 801c182:	2310      	movs	r3, #16
 801c184:	e7ac      	b.n	801c0e0 <_printf_i+0xf4>
 801c186:	4827      	ldr	r0, [pc, #156]	@ (801c224 <_printf_i+0x238>)
 801c188:	e7e9      	b.n	801c15e <_printf_i+0x172>
 801c18a:	6823      	ldr	r3, [r4, #0]
 801c18c:	f023 0320 	bic.w	r3, r3, #32
 801c190:	6023      	str	r3, [r4, #0]
 801c192:	e7f6      	b.n	801c182 <_printf_i+0x196>
 801c194:	4616      	mov	r6, r2
 801c196:	e7bd      	b.n	801c114 <_printf_i+0x128>
 801c198:	6833      	ldr	r3, [r6, #0]
 801c19a:	6825      	ldr	r5, [r4, #0]
 801c19c:	6961      	ldr	r1, [r4, #20]
 801c19e:	1d18      	adds	r0, r3, #4
 801c1a0:	6030      	str	r0, [r6, #0]
 801c1a2:	062e      	lsls	r6, r5, #24
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	d501      	bpl.n	801c1ac <_printf_i+0x1c0>
 801c1a8:	6019      	str	r1, [r3, #0]
 801c1aa:	e002      	b.n	801c1b2 <_printf_i+0x1c6>
 801c1ac:	0668      	lsls	r0, r5, #25
 801c1ae:	d5fb      	bpl.n	801c1a8 <_printf_i+0x1bc>
 801c1b0:	8019      	strh	r1, [r3, #0]
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	6123      	str	r3, [r4, #16]
 801c1b6:	4616      	mov	r6, r2
 801c1b8:	e7bc      	b.n	801c134 <_printf_i+0x148>
 801c1ba:	6833      	ldr	r3, [r6, #0]
 801c1bc:	1d1a      	adds	r2, r3, #4
 801c1be:	6032      	str	r2, [r6, #0]
 801c1c0:	681e      	ldr	r6, [r3, #0]
 801c1c2:	6862      	ldr	r2, [r4, #4]
 801c1c4:	2100      	movs	r1, #0
 801c1c6:	4630      	mov	r0, r6
 801c1c8:	f7e4 f852 	bl	8000270 <memchr>
 801c1cc:	b108      	cbz	r0, 801c1d2 <_printf_i+0x1e6>
 801c1ce:	1b80      	subs	r0, r0, r6
 801c1d0:	6060      	str	r0, [r4, #4]
 801c1d2:	6863      	ldr	r3, [r4, #4]
 801c1d4:	6123      	str	r3, [r4, #16]
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c1dc:	e7aa      	b.n	801c134 <_printf_i+0x148>
 801c1de:	6923      	ldr	r3, [r4, #16]
 801c1e0:	4632      	mov	r2, r6
 801c1e2:	4649      	mov	r1, r9
 801c1e4:	4640      	mov	r0, r8
 801c1e6:	47d0      	blx	sl
 801c1e8:	3001      	adds	r0, #1
 801c1ea:	d0ad      	beq.n	801c148 <_printf_i+0x15c>
 801c1ec:	6823      	ldr	r3, [r4, #0]
 801c1ee:	079b      	lsls	r3, r3, #30
 801c1f0:	d413      	bmi.n	801c21a <_printf_i+0x22e>
 801c1f2:	68e0      	ldr	r0, [r4, #12]
 801c1f4:	9b03      	ldr	r3, [sp, #12]
 801c1f6:	4298      	cmp	r0, r3
 801c1f8:	bfb8      	it	lt
 801c1fa:	4618      	movlt	r0, r3
 801c1fc:	e7a6      	b.n	801c14c <_printf_i+0x160>
 801c1fe:	2301      	movs	r3, #1
 801c200:	4632      	mov	r2, r6
 801c202:	4649      	mov	r1, r9
 801c204:	4640      	mov	r0, r8
 801c206:	47d0      	blx	sl
 801c208:	3001      	adds	r0, #1
 801c20a:	d09d      	beq.n	801c148 <_printf_i+0x15c>
 801c20c:	3501      	adds	r5, #1
 801c20e:	68e3      	ldr	r3, [r4, #12]
 801c210:	9903      	ldr	r1, [sp, #12]
 801c212:	1a5b      	subs	r3, r3, r1
 801c214:	42ab      	cmp	r3, r5
 801c216:	dcf2      	bgt.n	801c1fe <_printf_i+0x212>
 801c218:	e7eb      	b.n	801c1f2 <_printf_i+0x206>
 801c21a:	2500      	movs	r5, #0
 801c21c:	f104 0619 	add.w	r6, r4, #25
 801c220:	e7f5      	b.n	801c20e <_printf_i+0x222>
 801c222:	bf00      	nop
 801c224:	0801d679 	.word	0x0801d679
 801c228:	0801d68a 	.word	0x0801d68a

0801c22c <__sflush_r>:
 801c22c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c234:	0716      	lsls	r6, r2, #28
 801c236:	4605      	mov	r5, r0
 801c238:	460c      	mov	r4, r1
 801c23a:	d454      	bmi.n	801c2e6 <__sflush_r+0xba>
 801c23c:	684b      	ldr	r3, [r1, #4]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	dc02      	bgt.n	801c248 <__sflush_r+0x1c>
 801c242:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c244:	2b00      	cmp	r3, #0
 801c246:	dd48      	ble.n	801c2da <__sflush_r+0xae>
 801c248:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c24a:	2e00      	cmp	r6, #0
 801c24c:	d045      	beq.n	801c2da <__sflush_r+0xae>
 801c24e:	2300      	movs	r3, #0
 801c250:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c254:	682f      	ldr	r7, [r5, #0]
 801c256:	6a21      	ldr	r1, [r4, #32]
 801c258:	602b      	str	r3, [r5, #0]
 801c25a:	d030      	beq.n	801c2be <__sflush_r+0x92>
 801c25c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c25e:	89a3      	ldrh	r3, [r4, #12]
 801c260:	0759      	lsls	r1, r3, #29
 801c262:	d505      	bpl.n	801c270 <__sflush_r+0x44>
 801c264:	6863      	ldr	r3, [r4, #4]
 801c266:	1ad2      	subs	r2, r2, r3
 801c268:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c26a:	b10b      	cbz	r3, 801c270 <__sflush_r+0x44>
 801c26c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c26e:	1ad2      	subs	r2, r2, r3
 801c270:	2300      	movs	r3, #0
 801c272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c274:	6a21      	ldr	r1, [r4, #32]
 801c276:	4628      	mov	r0, r5
 801c278:	47b0      	blx	r6
 801c27a:	1c43      	adds	r3, r0, #1
 801c27c:	89a3      	ldrh	r3, [r4, #12]
 801c27e:	d106      	bne.n	801c28e <__sflush_r+0x62>
 801c280:	6829      	ldr	r1, [r5, #0]
 801c282:	291d      	cmp	r1, #29
 801c284:	d82b      	bhi.n	801c2de <__sflush_r+0xb2>
 801c286:	4a2a      	ldr	r2, [pc, #168]	@ (801c330 <__sflush_r+0x104>)
 801c288:	410a      	asrs	r2, r1
 801c28a:	07d6      	lsls	r6, r2, #31
 801c28c:	d427      	bmi.n	801c2de <__sflush_r+0xb2>
 801c28e:	2200      	movs	r2, #0
 801c290:	6062      	str	r2, [r4, #4]
 801c292:	04d9      	lsls	r1, r3, #19
 801c294:	6922      	ldr	r2, [r4, #16]
 801c296:	6022      	str	r2, [r4, #0]
 801c298:	d504      	bpl.n	801c2a4 <__sflush_r+0x78>
 801c29a:	1c42      	adds	r2, r0, #1
 801c29c:	d101      	bne.n	801c2a2 <__sflush_r+0x76>
 801c29e:	682b      	ldr	r3, [r5, #0]
 801c2a0:	b903      	cbnz	r3, 801c2a4 <__sflush_r+0x78>
 801c2a2:	6560      	str	r0, [r4, #84]	@ 0x54
 801c2a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c2a6:	602f      	str	r7, [r5, #0]
 801c2a8:	b1b9      	cbz	r1, 801c2da <__sflush_r+0xae>
 801c2aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c2ae:	4299      	cmp	r1, r3
 801c2b0:	d002      	beq.n	801c2b8 <__sflush_r+0x8c>
 801c2b2:	4628      	mov	r0, r5
 801c2b4:	f7ff fb40 	bl	801b938 <_free_r>
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	6363      	str	r3, [r4, #52]	@ 0x34
 801c2bc:	e00d      	b.n	801c2da <__sflush_r+0xae>
 801c2be:	2301      	movs	r3, #1
 801c2c0:	4628      	mov	r0, r5
 801c2c2:	47b0      	blx	r6
 801c2c4:	4602      	mov	r2, r0
 801c2c6:	1c50      	adds	r0, r2, #1
 801c2c8:	d1c9      	bne.n	801c25e <__sflush_r+0x32>
 801c2ca:	682b      	ldr	r3, [r5, #0]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d0c6      	beq.n	801c25e <__sflush_r+0x32>
 801c2d0:	2b1d      	cmp	r3, #29
 801c2d2:	d001      	beq.n	801c2d8 <__sflush_r+0xac>
 801c2d4:	2b16      	cmp	r3, #22
 801c2d6:	d11e      	bne.n	801c316 <__sflush_r+0xea>
 801c2d8:	602f      	str	r7, [r5, #0]
 801c2da:	2000      	movs	r0, #0
 801c2dc:	e022      	b.n	801c324 <__sflush_r+0xf8>
 801c2de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c2e2:	b21b      	sxth	r3, r3
 801c2e4:	e01b      	b.n	801c31e <__sflush_r+0xf2>
 801c2e6:	690f      	ldr	r7, [r1, #16]
 801c2e8:	2f00      	cmp	r7, #0
 801c2ea:	d0f6      	beq.n	801c2da <__sflush_r+0xae>
 801c2ec:	0793      	lsls	r3, r2, #30
 801c2ee:	680e      	ldr	r6, [r1, #0]
 801c2f0:	bf08      	it	eq
 801c2f2:	694b      	ldreq	r3, [r1, #20]
 801c2f4:	600f      	str	r7, [r1, #0]
 801c2f6:	bf18      	it	ne
 801c2f8:	2300      	movne	r3, #0
 801c2fa:	eba6 0807 	sub.w	r8, r6, r7
 801c2fe:	608b      	str	r3, [r1, #8]
 801c300:	f1b8 0f00 	cmp.w	r8, #0
 801c304:	dde9      	ble.n	801c2da <__sflush_r+0xae>
 801c306:	6a21      	ldr	r1, [r4, #32]
 801c308:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c30a:	4643      	mov	r3, r8
 801c30c:	463a      	mov	r2, r7
 801c30e:	4628      	mov	r0, r5
 801c310:	47b0      	blx	r6
 801c312:	2800      	cmp	r0, #0
 801c314:	dc08      	bgt.n	801c328 <__sflush_r+0xfc>
 801c316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c31a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c31e:	81a3      	strh	r3, [r4, #12]
 801c320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c328:	4407      	add	r7, r0
 801c32a:	eba8 0800 	sub.w	r8, r8, r0
 801c32e:	e7e7      	b.n	801c300 <__sflush_r+0xd4>
 801c330:	dfbffffe 	.word	0xdfbffffe

0801c334 <_fflush_r>:
 801c334:	b538      	push	{r3, r4, r5, lr}
 801c336:	690b      	ldr	r3, [r1, #16]
 801c338:	4605      	mov	r5, r0
 801c33a:	460c      	mov	r4, r1
 801c33c:	b913      	cbnz	r3, 801c344 <_fflush_r+0x10>
 801c33e:	2500      	movs	r5, #0
 801c340:	4628      	mov	r0, r5
 801c342:	bd38      	pop	{r3, r4, r5, pc}
 801c344:	b118      	cbz	r0, 801c34e <_fflush_r+0x1a>
 801c346:	6a03      	ldr	r3, [r0, #32]
 801c348:	b90b      	cbnz	r3, 801c34e <_fflush_r+0x1a>
 801c34a:	f7ff f8d1 	bl	801b4f0 <__sinit>
 801c34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d0f3      	beq.n	801c33e <_fflush_r+0xa>
 801c356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c358:	07d0      	lsls	r0, r2, #31
 801c35a:	d404      	bmi.n	801c366 <_fflush_r+0x32>
 801c35c:	0599      	lsls	r1, r3, #22
 801c35e:	d402      	bmi.n	801c366 <_fflush_r+0x32>
 801c360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c362:	f7ff faa6 	bl	801b8b2 <__retarget_lock_acquire_recursive>
 801c366:	4628      	mov	r0, r5
 801c368:	4621      	mov	r1, r4
 801c36a:	f7ff ff5f 	bl	801c22c <__sflush_r>
 801c36e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c370:	07da      	lsls	r2, r3, #31
 801c372:	4605      	mov	r5, r0
 801c374:	d4e4      	bmi.n	801c340 <_fflush_r+0xc>
 801c376:	89a3      	ldrh	r3, [r4, #12]
 801c378:	059b      	lsls	r3, r3, #22
 801c37a:	d4e1      	bmi.n	801c340 <_fflush_r+0xc>
 801c37c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c37e:	f7ff fa99 	bl	801b8b4 <__retarget_lock_release_recursive>
 801c382:	e7dd      	b.n	801c340 <_fflush_r+0xc>

0801c384 <fiprintf>:
 801c384:	b40e      	push	{r1, r2, r3}
 801c386:	b503      	push	{r0, r1, lr}
 801c388:	4601      	mov	r1, r0
 801c38a:	ab03      	add	r3, sp, #12
 801c38c:	4805      	ldr	r0, [pc, #20]	@ (801c3a4 <fiprintf+0x20>)
 801c38e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c392:	6800      	ldr	r0, [r0, #0]
 801c394:	9301      	str	r3, [sp, #4]
 801c396:	f7ff fca3 	bl	801bce0 <_vfiprintf_r>
 801c39a:	b002      	add	sp, #8
 801c39c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c3a0:	b003      	add	sp, #12
 801c3a2:	4770      	bx	lr
 801c3a4:	20000368 	.word	0x20000368

0801c3a8 <__swbuf_r>:
 801c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3aa:	460e      	mov	r6, r1
 801c3ac:	4614      	mov	r4, r2
 801c3ae:	4605      	mov	r5, r0
 801c3b0:	b118      	cbz	r0, 801c3ba <__swbuf_r+0x12>
 801c3b2:	6a03      	ldr	r3, [r0, #32]
 801c3b4:	b90b      	cbnz	r3, 801c3ba <__swbuf_r+0x12>
 801c3b6:	f7ff f89b 	bl	801b4f0 <__sinit>
 801c3ba:	69a3      	ldr	r3, [r4, #24]
 801c3bc:	60a3      	str	r3, [r4, #8]
 801c3be:	89a3      	ldrh	r3, [r4, #12]
 801c3c0:	071a      	lsls	r2, r3, #28
 801c3c2:	d501      	bpl.n	801c3c8 <__swbuf_r+0x20>
 801c3c4:	6923      	ldr	r3, [r4, #16]
 801c3c6:	b943      	cbnz	r3, 801c3da <__swbuf_r+0x32>
 801c3c8:	4621      	mov	r1, r4
 801c3ca:	4628      	mov	r0, r5
 801c3cc:	f000 f82a 	bl	801c424 <__swsetup_r>
 801c3d0:	b118      	cbz	r0, 801c3da <__swbuf_r+0x32>
 801c3d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801c3d6:	4638      	mov	r0, r7
 801c3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3da:	6823      	ldr	r3, [r4, #0]
 801c3dc:	6922      	ldr	r2, [r4, #16]
 801c3de:	1a98      	subs	r0, r3, r2
 801c3e0:	6963      	ldr	r3, [r4, #20]
 801c3e2:	b2f6      	uxtb	r6, r6
 801c3e4:	4283      	cmp	r3, r0
 801c3e6:	4637      	mov	r7, r6
 801c3e8:	dc05      	bgt.n	801c3f6 <__swbuf_r+0x4e>
 801c3ea:	4621      	mov	r1, r4
 801c3ec:	4628      	mov	r0, r5
 801c3ee:	f7ff ffa1 	bl	801c334 <_fflush_r>
 801c3f2:	2800      	cmp	r0, #0
 801c3f4:	d1ed      	bne.n	801c3d2 <__swbuf_r+0x2a>
 801c3f6:	68a3      	ldr	r3, [r4, #8]
 801c3f8:	3b01      	subs	r3, #1
 801c3fa:	60a3      	str	r3, [r4, #8]
 801c3fc:	6823      	ldr	r3, [r4, #0]
 801c3fe:	1c5a      	adds	r2, r3, #1
 801c400:	6022      	str	r2, [r4, #0]
 801c402:	701e      	strb	r6, [r3, #0]
 801c404:	6962      	ldr	r2, [r4, #20]
 801c406:	1c43      	adds	r3, r0, #1
 801c408:	429a      	cmp	r2, r3
 801c40a:	d004      	beq.n	801c416 <__swbuf_r+0x6e>
 801c40c:	89a3      	ldrh	r3, [r4, #12]
 801c40e:	07db      	lsls	r3, r3, #31
 801c410:	d5e1      	bpl.n	801c3d6 <__swbuf_r+0x2e>
 801c412:	2e0a      	cmp	r6, #10
 801c414:	d1df      	bne.n	801c3d6 <__swbuf_r+0x2e>
 801c416:	4621      	mov	r1, r4
 801c418:	4628      	mov	r0, r5
 801c41a:	f7ff ff8b 	bl	801c334 <_fflush_r>
 801c41e:	2800      	cmp	r0, #0
 801c420:	d0d9      	beq.n	801c3d6 <__swbuf_r+0x2e>
 801c422:	e7d6      	b.n	801c3d2 <__swbuf_r+0x2a>

0801c424 <__swsetup_r>:
 801c424:	b538      	push	{r3, r4, r5, lr}
 801c426:	4b29      	ldr	r3, [pc, #164]	@ (801c4cc <__swsetup_r+0xa8>)
 801c428:	4605      	mov	r5, r0
 801c42a:	6818      	ldr	r0, [r3, #0]
 801c42c:	460c      	mov	r4, r1
 801c42e:	b118      	cbz	r0, 801c438 <__swsetup_r+0x14>
 801c430:	6a03      	ldr	r3, [r0, #32]
 801c432:	b90b      	cbnz	r3, 801c438 <__swsetup_r+0x14>
 801c434:	f7ff f85c 	bl	801b4f0 <__sinit>
 801c438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c43c:	0719      	lsls	r1, r3, #28
 801c43e:	d422      	bmi.n	801c486 <__swsetup_r+0x62>
 801c440:	06da      	lsls	r2, r3, #27
 801c442:	d407      	bmi.n	801c454 <__swsetup_r+0x30>
 801c444:	2209      	movs	r2, #9
 801c446:	602a      	str	r2, [r5, #0]
 801c448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c44c:	81a3      	strh	r3, [r4, #12]
 801c44e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c452:	e033      	b.n	801c4bc <__swsetup_r+0x98>
 801c454:	0758      	lsls	r0, r3, #29
 801c456:	d512      	bpl.n	801c47e <__swsetup_r+0x5a>
 801c458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c45a:	b141      	cbz	r1, 801c46e <__swsetup_r+0x4a>
 801c45c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c460:	4299      	cmp	r1, r3
 801c462:	d002      	beq.n	801c46a <__swsetup_r+0x46>
 801c464:	4628      	mov	r0, r5
 801c466:	f7ff fa67 	bl	801b938 <_free_r>
 801c46a:	2300      	movs	r3, #0
 801c46c:	6363      	str	r3, [r4, #52]	@ 0x34
 801c46e:	89a3      	ldrh	r3, [r4, #12]
 801c470:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c474:	81a3      	strh	r3, [r4, #12]
 801c476:	2300      	movs	r3, #0
 801c478:	6063      	str	r3, [r4, #4]
 801c47a:	6923      	ldr	r3, [r4, #16]
 801c47c:	6023      	str	r3, [r4, #0]
 801c47e:	89a3      	ldrh	r3, [r4, #12]
 801c480:	f043 0308 	orr.w	r3, r3, #8
 801c484:	81a3      	strh	r3, [r4, #12]
 801c486:	6923      	ldr	r3, [r4, #16]
 801c488:	b94b      	cbnz	r3, 801c49e <__swsetup_r+0x7a>
 801c48a:	89a3      	ldrh	r3, [r4, #12]
 801c48c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c494:	d003      	beq.n	801c49e <__swsetup_r+0x7a>
 801c496:	4621      	mov	r1, r4
 801c498:	4628      	mov	r0, r5
 801c49a:	f000 f846 	bl	801c52a <__smakebuf_r>
 801c49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c4a2:	f013 0201 	ands.w	r2, r3, #1
 801c4a6:	d00a      	beq.n	801c4be <__swsetup_r+0x9a>
 801c4a8:	2200      	movs	r2, #0
 801c4aa:	60a2      	str	r2, [r4, #8]
 801c4ac:	6962      	ldr	r2, [r4, #20]
 801c4ae:	4252      	negs	r2, r2
 801c4b0:	61a2      	str	r2, [r4, #24]
 801c4b2:	6922      	ldr	r2, [r4, #16]
 801c4b4:	b942      	cbnz	r2, 801c4c8 <__swsetup_r+0xa4>
 801c4b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c4ba:	d1c5      	bne.n	801c448 <__swsetup_r+0x24>
 801c4bc:	bd38      	pop	{r3, r4, r5, pc}
 801c4be:	0799      	lsls	r1, r3, #30
 801c4c0:	bf58      	it	pl
 801c4c2:	6962      	ldrpl	r2, [r4, #20]
 801c4c4:	60a2      	str	r2, [r4, #8]
 801c4c6:	e7f4      	b.n	801c4b2 <__swsetup_r+0x8e>
 801c4c8:	2000      	movs	r0, #0
 801c4ca:	e7f7      	b.n	801c4bc <__swsetup_r+0x98>
 801c4cc:	20000368 	.word	0x20000368

0801c4d0 <abort>:
 801c4d0:	b508      	push	{r3, lr}
 801c4d2:	2006      	movs	r0, #6
 801c4d4:	f000 f88e 	bl	801c5f4 <raise>
 801c4d8:	2001      	movs	r0, #1
 801c4da:	f7e5 f8ed 	bl	80016b8 <_exit>

0801c4de <__swhatbuf_r>:
 801c4de:	b570      	push	{r4, r5, r6, lr}
 801c4e0:	460c      	mov	r4, r1
 801c4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4e6:	2900      	cmp	r1, #0
 801c4e8:	b096      	sub	sp, #88	@ 0x58
 801c4ea:	4615      	mov	r5, r2
 801c4ec:	461e      	mov	r6, r3
 801c4ee:	da0d      	bge.n	801c50c <__swhatbuf_r+0x2e>
 801c4f0:	89a3      	ldrh	r3, [r4, #12]
 801c4f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c4f6:	f04f 0100 	mov.w	r1, #0
 801c4fa:	bf14      	ite	ne
 801c4fc:	2340      	movne	r3, #64	@ 0x40
 801c4fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c502:	2000      	movs	r0, #0
 801c504:	6031      	str	r1, [r6, #0]
 801c506:	602b      	str	r3, [r5, #0]
 801c508:	b016      	add	sp, #88	@ 0x58
 801c50a:	bd70      	pop	{r4, r5, r6, pc}
 801c50c:	466a      	mov	r2, sp
 801c50e:	f000 f879 	bl	801c604 <_fstat_r>
 801c512:	2800      	cmp	r0, #0
 801c514:	dbec      	blt.n	801c4f0 <__swhatbuf_r+0x12>
 801c516:	9901      	ldr	r1, [sp, #4]
 801c518:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c51c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c520:	4259      	negs	r1, r3
 801c522:	4159      	adcs	r1, r3
 801c524:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c528:	e7eb      	b.n	801c502 <__swhatbuf_r+0x24>

0801c52a <__smakebuf_r>:
 801c52a:	898b      	ldrh	r3, [r1, #12]
 801c52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c52e:	079d      	lsls	r5, r3, #30
 801c530:	4606      	mov	r6, r0
 801c532:	460c      	mov	r4, r1
 801c534:	d507      	bpl.n	801c546 <__smakebuf_r+0x1c>
 801c536:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c53a:	6023      	str	r3, [r4, #0]
 801c53c:	6123      	str	r3, [r4, #16]
 801c53e:	2301      	movs	r3, #1
 801c540:	6163      	str	r3, [r4, #20]
 801c542:	b003      	add	sp, #12
 801c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c546:	ab01      	add	r3, sp, #4
 801c548:	466a      	mov	r2, sp
 801c54a:	f7ff ffc8 	bl	801c4de <__swhatbuf_r>
 801c54e:	9f00      	ldr	r7, [sp, #0]
 801c550:	4605      	mov	r5, r0
 801c552:	4639      	mov	r1, r7
 801c554:	4630      	mov	r0, r6
 801c556:	f7fe fd99 	bl	801b08c <_malloc_r>
 801c55a:	b948      	cbnz	r0, 801c570 <__smakebuf_r+0x46>
 801c55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c560:	059a      	lsls	r2, r3, #22
 801c562:	d4ee      	bmi.n	801c542 <__smakebuf_r+0x18>
 801c564:	f023 0303 	bic.w	r3, r3, #3
 801c568:	f043 0302 	orr.w	r3, r3, #2
 801c56c:	81a3      	strh	r3, [r4, #12]
 801c56e:	e7e2      	b.n	801c536 <__smakebuf_r+0xc>
 801c570:	89a3      	ldrh	r3, [r4, #12]
 801c572:	6020      	str	r0, [r4, #0]
 801c574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c578:	81a3      	strh	r3, [r4, #12]
 801c57a:	9b01      	ldr	r3, [sp, #4]
 801c57c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c580:	b15b      	cbz	r3, 801c59a <__smakebuf_r+0x70>
 801c582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c586:	4630      	mov	r0, r6
 801c588:	f000 f84e 	bl	801c628 <_isatty_r>
 801c58c:	b128      	cbz	r0, 801c59a <__smakebuf_r+0x70>
 801c58e:	89a3      	ldrh	r3, [r4, #12]
 801c590:	f023 0303 	bic.w	r3, r3, #3
 801c594:	f043 0301 	orr.w	r3, r3, #1
 801c598:	81a3      	strh	r3, [r4, #12]
 801c59a:	89a3      	ldrh	r3, [r4, #12]
 801c59c:	431d      	orrs	r5, r3
 801c59e:	81a5      	strh	r5, [r4, #12]
 801c5a0:	e7cf      	b.n	801c542 <__smakebuf_r+0x18>

0801c5a2 <_raise_r>:
 801c5a2:	291f      	cmp	r1, #31
 801c5a4:	b538      	push	{r3, r4, r5, lr}
 801c5a6:	4605      	mov	r5, r0
 801c5a8:	460c      	mov	r4, r1
 801c5aa:	d904      	bls.n	801c5b6 <_raise_r+0x14>
 801c5ac:	2316      	movs	r3, #22
 801c5ae:	6003      	str	r3, [r0, #0]
 801c5b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c5b4:	bd38      	pop	{r3, r4, r5, pc}
 801c5b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c5b8:	b112      	cbz	r2, 801c5c0 <_raise_r+0x1e>
 801c5ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c5be:	b94b      	cbnz	r3, 801c5d4 <_raise_r+0x32>
 801c5c0:	4628      	mov	r0, r5
 801c5c2:	f000 f853 	bl	801c66c <_getpid_r>
 801c5c6:	4622      	mov	r2, r4
 801c5c8:	4601      	mov	r1, r0
 801c5ca:	4628      	mov	r0, r5
 801c5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c5d0:	f000 b83a 	b.w	801c648 <_kill_r>
 801c5d4:	2b01      	cmp	r3, #1
 801c5d6:	d00a      	beq.n	801c5ee <_raise_r+0x4c>
 801c5d8:	1c59      	adds	r1, r3, #1
 801c5da:	d103      	bne.n	801c5e4 <_raise_r+0x42>
 801c5dc:	2316      	movs	r3, #22
 801c5de:	6003      	str	r3, [r0, #0]
 801c5e0:	2001      	movs	r0, #1
 801c5e2:	e7e7      	b.n	801c5b4 <_raise_r+0x12>
 801c5e4:	2100      	movs	r1, #0
 801c5e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c5ea:	4620      	mov	r0, r4
 801c5ec:	4798      	blx	r3
 801c5ee:	2000      	movs	r0, #0
 801c5f0:	e7e0      	b.n	801c5b4 <_raise_r+0x12>
	...

0801c5f4 <raise>:
 801c5f4:	4b02      	ldr	r3, [pc, #8]	@ (801c600 <raise+0xc>)
 801c5f6:	4601      	mov	r1, r0
 801c5f8:	6818      	ldr	r0, [r3, #0]
 801c5fa:	f7ff bfd2 	b.w	801c5a2 <_raise_r>
 801c5fe:	bf00      	nop
 801c600:	20000368 	.word	0x20000368

0801c604 <_fstat_r>:
 801c604:	b538      	push	{r3, r4, r5, lr}
 801c606:	4d07      	ldr	r5, [pc, #28]	@ (801c624 <_fstat_r+0x20>)
 801c608:	2300      	movs	r3, #0
 801c60a:	4604      	mov	r4, r0
 801c60c:	4608      	mov	r0, r1
 801c60e:	4611      	mov	r1, r2
 801c610:	602b      	str	r3, [r5, #0]
 801c612:	f7e5 f8a1 	bl	8001758 <_fstat>
 801c616:	1c43      	adds	r3, r0, #1
 801c618:	d102      	bne.n	801c620 <_fstat_r+0x1c>
 801c61a:	682b      	ldr	r3, [r5, #0]
 801c61c:	b103      	cbz	r3, 801c620 <_fstat_r+0x1c>
 801c61e:	6023      	str	r3, [r4, #0]
 801c620:	bd38      	pop	{r3, r4, r5, pc}
 801c622:	bf00      	nop
 801c624:	20012a14 	.word	0x20012a14

0801c628 <_isatty_r>:
 801c628:	b538      	push	{r3, r4, r5, lr}
 801c62a:	4d06      	ldr	r5, [pc, #24]	@ (801c644 <_isatty_r+0x1c>)
 801c62c:	2300      	movs	r3, #0
 801c62e:	4604      	mov	r4, r0
 801c630:	4608      	mov	r0, r1
 801c632:	602b      	str	r3, [r5, #0]
 801c634:	f7e5 f8a0 	bl	8001778 <_isatty>
 801c638:	1c43      	adds	r3, r0, #1
 801c63a:	d102      	bne.n	801c642 <_isatty_r+0x1a>
 801c63c:	682b      	ldr	r3, [r5, #0]
 801c63e:	b103      	cbz	r3, 801c642 <_isatty_r+0x1a>
 801c640:	6023      	str	r3, [r4, #0]
 801c642:	bd38      	pop	{r3, r4, r5, pc}
 801c644:	20012a14 	.word	0x20012a14

0801c648 <_kill_r>:
 801c648:	b538      	push	{r3, r4, r5, lr}
 801c64a:	4d07      	ldr	r5, [pc, #28]	@ (801c668 <_kill_r+0x20>)
 801c64c:	2300      	movs	r3, #0
 801c64e:	4604      	mov	r4, r0
 801c650:	4608      	mov	r0, r1
 801c652:	4611      	mov	r1, r2
 801c654:	602b      	str	r3, [r5, #0]
 801c656:	f7e5 f81f 	bl	8001698 <_kill>
 801c65a:	1c43      	adds	r3, r0, #1
 801c65c:	d102      	bne.n	801c664 <_kill_r+0x1c>
 801c65e:	682b      	ldr	r3, [r5, #0]
 801c660:	b103      	cbz	r3, 801c664 <_kill_r+0x1c>
 801c662:	6023      	str	r3, [r4, #0]
 801c664:	bd38      	pop	{r3, r4, r5, pc}
 801c666:	bf00      	nop
 801c668:	20012a14 	.word	0x20012a14

0801c66c <_getpid_r>:
 801c66c:	f7e5 b80c 	b.w	8001688 <_getpid>

0801c670 <_init>:
 801c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c672:	bf00      	nop
 801c674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c676:	bc08      	pop	{r3}
 801c678:	469e      	mov	lr, r3
 801c67a:	4770      	bx	lr

0801c67c <_fini>:
 801c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c67e:	bf00      	nop
 801c680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c682:	bc08      	pop	{r3}
 801c684:	469e      	mov	lr, r3
 801c686:	4770      	bx	lr
